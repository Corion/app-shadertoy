TYPEMAP

const unsigned char *	    T_PV

Display *		            T_PTR
GLbitfield                  T_U_INT
GLboolean		            T_BOOL
GLboolean *		            T_PV
const GLboolean *		    T_PV
const GLboolean **	        T_PV
GLbyte			            T_INT
GLbyte *		            T_PV
const GLbyte *		        T_PV
GLchar *      	            T_PV
const GLchar *      	    T_PV
GLchar * const *     	    T_PV
const GLchar * const *     	T_PV
GLchar * *                  T_PV
GLcharARB		            T_CHAR
GLcharARB *                 T_PV
const GLcharARB *           T_PV
const GLcharARB **          T_PV
GLenum			            T_INT
GLenum *		            T_PV
const GLenum *		        T_PV
GLsizei			            T_INT
GLsizei	*		            T_PV
const GLsizei	*		    T_PV
GLclampf		            T_FLOAT
const GLclampf *		    T_PV
GLclampd		            T_DOUBLE
const GLclampd *		    T_PV
const GLclampd *		    T_PV
GLclampx		            T_INT
GLdouble		            T_DOUBLE
GLdouble *		            T_PV
const GLdouble *		    T_PV
GLfixed                     T_INT
GLfixed *                   T_PV
const GLfixed *             T_PV
GLfloat			            T_FLOAT
const GLfloat			    T_FLOAT
GLfloat	*		            T_PV
const GLfloat	*		    T_PV
GLhalf                      T_FLOAT
const GLhalf*               T_PV
GLhandleARB                 T_INT
GLhandleARB*                T_PV
const GLhandleARB*          T_PV
GLint			            T_INT
const GLint			        T_INT
const GLint	*		        T_PV
GLintptr                    T_U_INT
GLintptr *                  T_PV
const GLintptr *            T_PV
GLintptrARB                 T_U_INT
GLintptrARB *               T_PV
const GLintptrARB *         T_PV
GLint64                     T_U_INT
GLint64*                    T_PV
const GLint64*              T_PV
GLint64EXT                  T_U_INT
GLint64EXT*                 T_PV
const GLint64EXT*           T_PV
GLuint			            T_U_INT
GLuint *                    T_PV
const GLuint *              T_PV
GLushort		            T_U_SHORT
GLushort *		            T_PV
const GLushort *		    T_PV
GLint			            T_INT
GLint *                     T_PV
GLshort			            T_SHORT
GLshort *                   T_PV
const GLshort *             T_PV
GLsizeiptr                  T_U_INT
GLsizeiptr *                T_PV
const GLsizeiptr *          T_PV
GLsizeiptrARB               T_U_INT
GLsync                      T_PV
GLbitfield		            T_INT
GLubyte			            T_U_INT
GLubyte *		            T_PV
const GLubyte *		        T_PV
GLuint64                    T_U_INT
GLuint64*                   T_PV
const GLuint64*             T_PV
GLuint64EXT                 T_U_INT
GLuint64EXT*                T_PV
const GLuint64EXT*          T_PV
GLhandleARB		            T_U_INT
GLvdpauSurfaceNV            T_PV
GLvoid *                    T_PV
const GLvdpauSurfaceNV      T_PV
const GLvdpauSurfaceNV*     T_PV
GLUnurbsObj *		        T_PVOBJ
GLUquadricObj *		        T_PVOBJ
PGLUtess *		            T_PVOBJ
void*                       T_PV
const void*                 T_PV
void**                      T_PV
const void**                T_PV
const void* const*          T_PV

GLVULKANPROCNV              T_PV
GLLOGPROCREGAL              T_PV
GLDEBUGPROCARB              T_PV
GLDEBUGPROCAMD              T_PV
GLDEBUGPROC                 T_PV

cl_context                  T_PV
cl_event                    T_PV

OpenGL::Array		        T_PTROBJ
OpenGL::Matrix 		        T_PTROBJ

GLXDrawable		            T_PV

INPUT

T_FASTPTROBJ
        $var = INT2PTR($type,SvIV($arg));

T_U_INT_ARRAY
        if( !SvPVOK($var)) {
            croak(\"Need a packed string of GLuints\");
        };
        $var = SvPV_nolen($var);

T_INT_ARRAY
        if( !SvPVOK($var)) {
            croak(\"Need a packed string of GLints\");
        };
        $var = SvPV_nolen($var);

OUTPUT

T_FASTPTROBJ
	sv_setref_pv($arg, \"${ntype}\", (void*)$var);