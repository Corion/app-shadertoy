#define PERL_constant_NOTFOUND	1
#define PERL_constant_NOTDEF	2
#define PERL_constant_ISIV	3
#define PERL_constant_ISNO	4
#define PERL_constant_ISNV	5
#define PERL_constant_ISPV	6
#define PERL_constant_ISPVN	7
#define PERL_constant_ISSV	8
#define PERL_constant_ISUNDEF	9
#define PERL_constant_ISUV	10
#define PERL_constant_ISYES	11

#ifndef NVTYPE
typedef double NV; /* 5.6 and later define NVTYPE, and typedef NV to it.  */
#endif
#ifndef aTHX_
#define aTHX_ /* 5.6 or later define this for threading support.  */
#endif
#ifndef pTHX_
#define pTHX_ /* 5.6 or later define this for threading support.  */
#endif

static int
constant_4 (pTHX_ const char *name, IV *iv_return) {
  /* When generated this function returned values for the list of names given
     here.  However, subsequent manual editing may have added or removed some.
     GL_Q GL_R GL_S GL_T _W64 */
  /* Offset 3 gives the best switch position.  */
  switch (name[3]) {
  case '4':
    if (memEQ(name, "_W6", 3)) {
    /*                  4     */
#ifdef _W64
      *iv_return = _W64;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case 'Q':
    if (memEQ(name, "GL_", 3)) {
    /*                  Q     */
#ifdef GL_Q
      *iv_return = GL_Q;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case 'R':
    if (memEQ(name, "GL_", 3)) {
    /*                  R     */
#ifdef GL_R
      *iv_return = GL_R;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case 'S':
    if (memEQ(name, "GL_", 3)) {
    /*                  S     */
#ifdef GL_S
      *iv_return = GL_S;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case 'T':
    if (memEQ(name, "GL_", 3)) {
    /*                  T     */
#ifdef GL_T
      *iv_return = GL_T;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  }
  return PERL_constant_NOTFOUND;
}

static int
constant_5 (pTHX_ const char *name, IV *iv_return) {
  /* When generated this function returned values for the list of names given
     here.  However, subsequent manual editing may have added or removed some.
     GLAPI GL_2D GL_3D GL_CW GL_OR GL_R8 GL_RG */
  /* Offset 4 gives the best switch position.  */
  switch (name[4]) {
  case '8':
    if (memEQ(name, "GL_R", 4)) {
    /*                   8     */
#ifdef GL_R8
      *iv_return = GL_R8;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case 'D':
    if (memEQ(name, "GL_2", 4)) {
    /*                   D     */
#ifdef GL_2D
      *iv_return = GL_2D;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_3", 4)) {
    /*                   D     */
#ifdef GL_3D
      *iv_return = GL_3D;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case 'G':
    if (memEQ(name, "GL_R", 4)) {
    /*                   G     */
#ifdef GL_RG
      *iv_return = GL_RG;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case 'I':
    if (memEQ(name, "GLAP", 4)) {
    /*                   I     */
#ifdef GLAPI
      *iv_return = GLAPI;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case 'R':
    if (memEQ(name, "GL_O", 4)) {
    /*                   R     */
#ifdef GL_OR
      *iv_return = GL_OR;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case 'W':
    if (memEQ(name, "GL_C", 4)) {
    /*                   W     */
#ifdef GL_CW
      *iv_return = GL_CW;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  }
  return PERL_constant_NOTFOUND;
}

static int
constant_6 (pTHX_ const char *name, IV *iv_return) {
  /* When generated this function returned values for the list of names given
     here.  However, subsequent manual editing may have added or removed some.
     GL_ADD GL_AND GL_BGR GL_CCW GL_EXP GL_FOG GL_INT GL_MAX GL_MIN GL_NOR
     GL_ONE GL_R16 GL_R8I GL_RED GL_RG8 GL_RGB GL_SET GL_V2F GL_V3F GL_XOR
     glFogx */
  /* Offset 5 gives the best switch position.  */
  switch (name[5]) {
  case '6':
    if (memEQ(name, "GL_R1", 5)) {
    /*                    6     */
#ifdef GL_R16
      *iv_return = GL_R16;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case '8':
    if (memEQ(name, "GL_RG", 5)) {
    /*                    8     */
#ifdef GL_RG8
      *iv_return = GL_RG8;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case 'B':
    if (memEQ(name, "GL_RG", 5)) {
    /*                    B     */
#ifdef GL_RGB
      *iv_return = GL_RGB;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case 'D':
    if (memEQ(name, "GL_AD", 5)) {
    /*                    D     */
#ifdef GL_ADD
      *iv_return = GL_ADD;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_AN", 5)) {
    /*                    D     */
#ifdef GL_AND
      *iv_return = GL_AND;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_RE", 5)) {
    /*                    D     */
#ifdef GL_RED
      *iv_return = GL_RED;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case 'E':
    if (memEQ(name, "GL_ON", 5)) {
    /*                    E     */
#ifdef GL_ONE
      *iv_return = GL_ONE;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case 'F':
    if (memEQ(name, "GL_V2", 5)) {
    /*                    F     */
#ifdef GL_V2F
      *iv_return = GL_V2F;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_V3", 5)) {
    /*                    F     */
#ifdef GL_V3F
      *iv_return = GL_V3F;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case 'G':
    if (memEQ(name, "GL_FO", 5)) {
    /*                    G     */
#ifdef GL_FOG
      *iv_return = GL_FOG;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case 'I':
    if (memEQ(name, "GL_R8", 5)) {
    /*                    I     */
#ifdef GL_R8I
      *iv_return = GL_R8I;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case 'N':
    if (memEQ(name, "GL_MI", 5)) {
    /*                    N     */
#ifdef GL_MIN
      *iv_return = GL_MIN;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case 'P':
    if (memEQ(name, "GL_EX", 5)) {
    /*                    P     */
#ifdef GL_EXP
      *iv_return = GL_EXP;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case 'R':
    if (memEQ(name, "GL_BG", 5)) {
    /*                    R     */
#ifdef GL_BGR
      *iv_return = GL_BGR;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_NO", 5)) {
    /*                    R     */
#ifdef GL_NOR
      *iv_return = GL_NOR;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_XO", 5)) {
    /*                    R     */
#ifdef GL_XOR
      *iv_return = GL_XOR;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case 'T':
    if (memEQ(name, "GL_IN", 5)) {
    /*                    T     */
#ifdef GL_INT
      *iv_return = GL_INT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_SE", 5)) {
    /*                    T     */
#ifdef GL_SET
      *iv_return = GL_SET;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case 'W':
    if (memEQ(name, "GL_CC", 5)) {
    /*                    W     */
#ifdef GL_CCW
      *iv_return = GL_CCW;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case 'X':
    if (memEQ(name, "GL_MA", 5)) {
    /*                    X     */
#ifdef GL_MAX
      *iv_return = GL_MAX;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case 'x':
    if (memEQ(name, "glFog", 5)) {
    /*                    x     */
#ifdef glFogx
      *iv_return = glFogx;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  }
  return PERL_constant_NOTFOUND;
}

static int
constant_7 (pTHX_ const char *name, IV *iv_return) {
  /* When generated this function returned values for the list of names given
     here.  However, subsequent manual editing may have added or removed some.
     GLEWAPI GLEW_OK GL_AUX0 GL_AUX1 GL_AUX2 GL_AUX3 GL_BACK GL_BGRA GL_BLUE
     GL_BOOL GL_BYTE GL_COPY GL_DECR GL_EXP2 GL_FILL GL_FLAT GL_INCR GL_KEEP
     GL_LEFT GL_LESS GL_LINE GL_LOAD GL_MULT GL_NAND GL_NONE GL_NOOP GL_R16F
     GL_R16I GL_R32F GL_R32I GL_R8UI GL_RG16 GL_RG8I GL_RGB4 GL_RGB5 GL_RGB8
     GL_RGBA GL_SRGB GL_TRUE GL_TYPE GL_ZERO glFogxv */
  /* Offset 6 gives the best switch position.  */
  switch (name[6]) {
  case '0':
    if (memEQ(name, "GL_AUX", 6)) {
    /*                     0     */
#ifdef GL_AUX0
      *iv_return = GL_AUX0;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case '1':
    if (memEQ(name, "GL_AUX", 6)) {
    /*                     1     */
#ifdef GL_AUX1
      *iv_return = GL_AUX1;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case '2':
    if (memEQ(name, "GL_AUX", 6)) {
    /*                     2     */
#ifdef GL_AUX2
      *iv_return = GL_AUX2;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_EXP", 6)) {
    /*                     2     */
#ifdef GL_EXP2
      *iv_return = GL_EXP2;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case '3':
    if (memEQ(name, "GL_AUX", 6)) {
    /*                     3     */
#ifdef GL_AUX3
      *iv_return = GL_AUX3;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case '4':
    if (memEQ(name, "GL_RGB", 6)) {
    /*                     4     */
#ifdef GL_RGB4
      *iv_return = GL_RGB4;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case '5':
    if (memEQ(name, "GL_RGB", 6)) {
    /*                     5     */
#ifdef GL_RGB5
      *iv_return = GL_RGB5;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case '6':
    if (memEQ(name, "GL_RG1", 6)) {
    /*                     6     */
#ifdef GL_RG16
      *iv_return = GL_RG16;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case '8':
    if (memEQ(name, "GL_RGB", 6)) {
    /*                     8     */
#ifdef GL_RGB8
      *iv_return = GL_RGB8;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case 'A':
    if (memEQ(name, "GL_BGR", 6)) {
    /*                     A     */
#ifdef GL_BGRA
      *iv_return = GL_BGRA;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_RGB", 6)) {
    /*                     A     */
#ifdef GL_RGBA
      *iv_return = GL_RGBA;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case 'B':
    if (memEQ(name, "GL_SRG", 6)) {
    /*                     B     */
#ifdef GL_SRGB
      *iv_return = GL_SRGB;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case 'D':
    if (memEQ(name, "GL_LOA", 6)) {
    /*                     D     */
#ifdef GL_LOAD
      *iv_return = GL_LOAD;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_NAN", 6)) {
    /*                     D     */
#ifdef GL_NAND
      *iv_return = GL_NAND;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case 'E':
    if (memEQ(name, "GL_BLU", 6)) {
    /*                     E     */
#ifdef GL_BLUE
      *iv_return = GL_BLUE;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_BYT", 6)) {
    /*                     E     */
#ifdef GL_BYTE
      *iv_return = GL_BYTE;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_LIN", 6)) {
    /*                     E     */
#ifdef GL_LINE
      *iv_return = GL_LINE;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_NON", 6)) {
    /*                     E     */
#ifdef GL_NONE
      *iv_return = GL_NONE;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_TRU", 6)) {
    /*                     E     */
#ifdef GL_TRUE
      *iv_return = GL_TRUE;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_TYP", 6)) {
    /*                     E     */
#ifdef GL_TYPE
      *iv_return = GL_TYPE;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case 'F':
    if (memEQ(name, "GL_R16", 6)) {
    /*                     F     */
#ifdef GL_R16F
      *iv_return = GL_R16F;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_R32", 6)) {
    /*                     F     */
#ifdef GL_R32F
      *iv_return = GL_R32F;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case 'I':
    if (memEQ(name, "GLEWAP", 6)) {
    /*                     I     */
#ifdef GLEWAPI
      *iv_return = GLEWAPI;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_R16", 6)) {
    /*                     I     */
#ifdef GL_R16I
      *iv_return = GL_R16I;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_R32", 6)) {
    /*                     I     */
#ifdef GL_R32I
      *iv_return = GL_R32I;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_R8U", 6)) {
    /*                     I     */
#ifdef GL_R8UI
      *iv_return = GL_R8UI;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_RG8", 6)) {
    /*                     I     */
#ifdef GL_RG8I
      *iv_return = GL_RG8I;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case 'K':
    if (memEQ(name, "GLEW_O", 6)) {
    /*                     K     */
#ifdef GLEW_OK
      *iv_return = GLEW_OK;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_BAC", 6)) {
    /*                     K     */
#ifdef GL_BACK
      *iv_return = GL_BACK;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case 'L':
    if (memEQ(name, "GL_BOO", 6)) {
    /*                     L     */
#ifdef GL_BOOL
      *iv_return = GL_BOOL;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_FIL", 6)) {
    /*                     L     */
#ifdef GL_FILL
      *iv_return = GL_FILL;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case 'O':
    if (memEQ(name, "GL_ZER", 6)) {
    /*                     O     */
#ifdef GL_ZERO
      *iv_return = GL_ZERO;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case 'P':
    if (memEQ(name, "GL_KEE", 6)) {
    /*                     P     */
#ifdef GL_KEEP
      *iv_return = GL_KEEP;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_NOO", 6)) {
    /*                     P     */
#ifdef GL_NOOP
      *iv_return = GL_NOOP;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case 'R':
    if (memEQ(name, "GL_DEC", 6)) {
    /*                     R     */
#ifdef GL_DECR
      *iv_return = GL_DECR;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_INC", 6)) {
    /*                     R     */
#ifdef GL_INCR
      *iv_return = GL_INCR;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case 'S':
    if (memEQ(name, "GL_LES", 6)) {
    /*                     S     */
#ifdef GL_LESS
      *iv_return = GL_LESS;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case 'T':
    if (memEQ(name, "GL_FLA", 6)) {
    /*                     T     */
#ifdef GL_FLAT
      *iv_return = GL_FLAT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_LEF", 6)) {
    /*                     T     */
#ifdef GL_LEFT
      *iv_return = GL_LEFT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_MUL", 6)) {
    /*                     T     */
#ifdef GL_MULT
      *iv_return = GL_MULT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case 'Y':
    if (memEQ(name, "GL_COP", 6)) {
    /*                     Y     */
#ifdef GL_COPY
      *iv_return = GL_COPY;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case 'v':
    if (memEQ(name, "glFogx", 6)) {
    /*                     v     */
#ifdef glFogxv
      *iv_return = glFogxv;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  }
  return PERL_constant_NOTFOUND;
}

static int
constant_8 (pTHX_ const char *name, IV *iv_return) {
  /* When generated this function returned values for the list of names given
     here.  However, subsequent manual editing may have added or removed some.
     APIENTRY CALLBACK GL_ACCUM GL_ALPHA GL_BLEND GL_CLAMP GL_CLEAR GL_COEFF
     GL_COLOR GL_DECAL GL_DEPTH GL_EQUAL GL_EQUIV GL_FALSE GL_FIXED GL_FLOAT
     GL_FRONT GL_GREEN GL_INDEX GL_LINES GL_NEVER GL_ORDER GL_POINT GL_QUADS
     GL_QUERY GL_R16UI GL_R32UI GL_RG16F GL_RG16I GL_RG32F GL_RG32I GL_RG8UI
     GL_RGB10 GL_RGB12 GL_RGB16 GL_RGB8I GL_RGBA2 GL_RGBA4 GL_RGBA8 GL_RIGHT
     GL_SHORT GL_SRGB8 GL_W_EXT GL_X_EXT GL_Y_EXT GL_Z_EXT glIsSync glLightx
     glMinmax glOrthof glOrthox glScalex */
  /* Offset 6 gives the best switch position.  */
  switch (name[6]) {
  case '1':
    if (memEQ(name, "GL_RGB10", 8)) {
    /*                     ^       */
#ifdef GL_RGB10
      *iv_return = GL_RGB10;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_RGB12", 8)) {
    /*                     ^       */
#ifdef GL_RGB12
      *iv_return = GL_RGB12;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_RGB16", 8)) {
    /*                     ^       */
#ifdef GL_RGB16
      *iv_return = GL_RGB16;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case '2':
    if (memEQ(name, "GL_RG32F", 8)) {
    /*                     ^       */
#ifdef GL_RG32F
      *iv_return = GL_RG32F;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_RG32I", 8)) {
    /*                     ^       */
#ifdef GL_RG32I
      *iv_return = GL_RG32I;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case '6':
    if (memEQ(name, "GL_RG16F", 8)) {
    /*                     ^       */
#ifdef GL_RG16F
      *iv_return = GL_RG16F;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_RG16I", 8)) {
    /*                     ^       */
#ifdef GL_RG16I
      *iv_return = GL_RG16I;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case '8':
    if (memEQ(name, "GL_RGB8I", 8)) {
    /*                     ^       */
#ifdef GL_RGB8I
      *iv_return = GL_RGB8I;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case 'A':
    if (memEQ(name, "GL_CLEAR", 8)) {
    /*                     ^       */
#ifdef GL_CLEAR
      *iv_return = GL_CLEAR;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_DECAL", 8)) {
    /*                     ^       */
#ifdef GL_DECAL
      *iv_return = GL_DECAL;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_EQUAL", 8)) {
    /*                     ^       */
#ifdef GL_EQUAL
      *iv_return = GL_EQUAL;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_FLOAT", 8)) {
    /*                     ^       */
#ifdef GL_FLOAT
      *iv_return = GL_FLOAT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_RGBA2", 8)) {
    /*                     ^       */
#ifdef GL_RGBA2
      *iv_return = GL_RGBA2;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_RGBA4", 8)) {
    /*                     ^       */
#ifdef GL_RGBA4
      *iv_return = GL_RGBA4;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_RGBA8", 8)) {
    /*                     ^       */
#ifdef GL_RGBA8
      *iv_return = GL_RGBA8;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case 'B':
    if (memEQ(name, "GL_SRGB8", 8)) {
    /*                     ^       */
#ifdef GL_SRGB8
      *iv_return = GL_SRGB8;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case 'C':
    if (memEQ(name, "CALLBACK", 8)) {
    /*                     ^       */
#ifdef CALLBACK
      *iv_return = CALLBACK;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case 'D':
    if (memEQ(name, "GL_QUADS", 8)) {
    /*                     ^       */
#ifdef GL_QUADS
      *iv_return = GL_QUADS;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case 'E':
    if (memEQ(name, "GL_FIXED", 8)) {
    /*                     ^       */
#ifdef GL_FIXED
      *iv_return = GL_FIXED;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_GREEN", 8)) {
    /*                     ^       */
#ifdef GL_GREEN
      *iv_return = GL_GREEN;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_INDEX", 8)) {
    /*                     ^       */
#ifdef GL_INDEX
      *iv_return = GL_INDEX;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_LINES", 8)) {
    /*                     ^       */
#ifdef GL_LINES
      *iv_return = GL_LINES;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_NEVER", 8)) {
    /*                     ^       */
#ifdef GL_NEVER
      *iv_return = GL_NEVER;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_ORDER", 8)) {
    /*                     ^       */
#ifdef GL_ORDER
      *iv_return = GL_ORDER;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case 'F':
    if (memEQ(name, "GL_COEFF", 8)) {
    /*                     ^       */
#ifdef GL_COEFF
      *iv_return = GL_COEFF;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case 'H':
    if (memEQ(name, "GL_ALPHA", 8)) {
    /*                     ^       */
#ifdef GL_ALPHA
      *iv_return = GL_ALPHA;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_RIGHT", 8)) {
    /*                     ^       */
#ifdef GL_RIGHT
      *iv_return = GL_RIGHT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case 'I':
    if (memEQ(name, "GL_EQUIV", 8)) {
    /*                     ^       */
#ifdef GL_EQUIV
      *iv_return = GL_EQUIV;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case 'M':
    if (memEQ(name, "GL_CLAMP", 8)) {
    /*                     ^       */
#ifdef GL_CLAMP
      *iv_return = GL_CLAMP;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case 'N':
    if (memEQ(name, "GL_BLEND", 8)) {
    /*                     ^       */
#ifdef GL_BLEND
      *iv_return = GL_BLEND;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_FRONT", 8)) {
    /*                     ^       */
#ifdef GL_FRONT
      *iv_return = GL_FRONT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_POINT", 8)) {
    /*                     ^       */
#ifdef GL_POINT
      *iv_return = GL_POINT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case 'O':
    if (memEQ(name, "GL_COLOR", 8)) {
    /*                     ^       */
#ifdef GL_COLOR
      *iv_return = GL_COLOR;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case 'R':
    if (memEQ(name, "APIENTRY", 8)) {
    /*                     ^       */
#ifdef APIENTRY
      *iv_return = APIENTRY;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_QUERY", 8)) {
    /*                     ^       */
#ifdef GL_QUERY
      *iv_return = GL_QUERY;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_SHORT", 8)) {
    /*                     ^       */
#ifdef GL_SHORT
      *iv_return = GL_SHORT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case 'S':
    if (memEQ(name, "GL_FALSE", 8)) {
    /*                     ^       */
#ifdef GL_FALSE
      *iv_return = GL_FALSE;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case 'T':
    if (memEQ(name, "GL_DEPTH", 8)) {
    /*                     ^       */
#ifdef GL_DEPTH
      *iv_return = GL_DEPTH;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case 'U':
    if (memEQ(name, "GL_ACCUM", 8)) {
    /*                     ^       */
#ifdef GL_ACCUM
      *iv_return = GL_ACCUM;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_R16UI", 8)) {
    /*                     ^       */
#ifdef GL_R16UI
      *iv_return = GL_R16UI;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_R32UI", 8)) {
    /*                     ^       */
#ifdef GL_R32UI
      *iv_return = GL_R32UI;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_RG8UI", 8)) {
    /*                     ^       */
#ifdef GL_RG8UI
      *iv_return = GL_RG8UI;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case 'X':
    if (memEQ(name, "GL_W_EXT", 8)) {
    /*                     ^       */
#ifdef GL_W_EXT
      *iv_return = GL_W_EXT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_X_EXT", 8)) {
    /*                     ^       */
#ifdef GL_X_EXT
      *iv_return = GL_X_EXT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_Y_EXT", 8)) {
    /*                     ^       */
#ifdef GL_Y_EXT
      *iv_return = GL_Y_EXT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_Z_EXT", 8)) {
    /*                     ^       */
#ifdef GL_Z_EXT
      *iv_return = GL_Z_EXT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case 'a':
    if (memEQ(name, "glMinmax", 8)) {
    /*                     ^       */
#ifdef glMinmax
      *iv_return = glMinmax;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case 'e':
    if (memEQ(name, "glScalex", 8)) {
    /*                     ^       */
#ifdef glScalex
      *iv_return = glScalex;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case 'n':
    if (memEQ(name, "glIsSync", 8)) {
    /*                     ^       */
#ifdef glIsSync
      *iv_return = glIsSync;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case 'o':
    if (memEQ(name, "glOrthof", 8)) {
    /*                     ^       */
#ifdef glOrthof
      *iv_return = glOrthof;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glOrthox", 8)) {
    /*                     ^       */
#ifdef glOrthox
      *iv_return = glOrthox;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case 't':
    if (memEQ(name, "glLightx", 8)) {
    /*                     ^       */
#ifdef glLightx
      *iv_return = glLightx;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  }
  return PERL_constant_NOTFOUND;
}

static int
constant_9 (pTHX_ const char *name, IV *iv_return) {
  /* When generated this function returned values for the list of names given
     here.  However, subsequent manual editing may have added or removed some.
     GL_ALPHA4 GL_ALPHA8 GL_ALWAYS GL_BITMAP GL_BUFFER GL_DITHER GL_DOMAIN
     GL_DOUBLE GL_DST_NV GL_FILTER GL_GEQUAL GL_INVERT GL_LEQUAL GL_LIGHT0
     GL_LIGHT1 GL_LIGHT2 GL_LIGHT3 GL_LIGHT4 GL_LIGHT5 GL_LIGHT6 GL_LIGHT7
     GL_LINEAR GL_MINMAX GL_MIPMAP GL_NICEST GL_OFFSET GL_POINTS GL_REDUCE
     GL_RED_NV GL_RENDER GL_REPEAT GL_RETURN GL_RG16UI GL_RG32UI GL_RGB16F
     GL_RGB16I GL_RGB32F GL_RGB32I GL_RGB565 GL_RGB8UI GL_RGBA12 GL_RGBA16
     GL_RGBA8I GL_SELECT GL_SHADER GL_SMOOTH GL_SRC_NV GL_STEREO GL_VENDOR
     GL_XOR_NV GL_ZOOM_X GL_ZOOM_Y WINGDIAPI glColor4x glEnablei glIsQuery
     glLightxv glRotatex glTexEnvx */
  /* Offset 8 gives the best switch position.  */
  switch (name[8]) {
  case '0':
    if (memEQ(name, "GL_LIGHT", 8)) {
    /*                       0     */
#ifdef GL_LIGHT0
      *iv_return = GL_LIGHT0;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case '1':
    if (memEQ(name, "GL_LIGHT", 8)) {
    /*                       1     */
#ifdef GL_LIGHT1
      *iv_return = GL_LIGHT1;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case '2':
    if (memEQ(name, "GL_LIGHT", 8)) {
    /*                       2     */
#ifdef GL_LIGHT2
      *iv_return = GL_LIGHT2;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_RGBA1", 8)) {
    /*                       2     */
#ifdef GL_RGBA12
      *iv_return = GL_RGBA12;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case '3':
    if (memEQ(name, "GL_LIGHT", 8)) {
    /*                       3     */
#ifdef GL_LIGHT3
      *iv_return = GL_LIGHT3;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case '4':
    if (memEQ(name, "GL_ALPHA", 8)) {
    /*                       4     */
#ifdef GL_ALPHA4
      *iv_return = GL_ALPHA4;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_LIGHT", 8)) {
    /*                       4     */
#ifdef GL_LIGHT4
      *iv_return = GL_LIGHT4;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case '5':
    if (memEQ(name, "GL_LIGHT", 8)) {
    /*                       5     */
#ifdef GL_LIGHT5
      *iv_return = GL_LIGHT5;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_RGB56", 8)) {
    /*                       5     */
#ifdef GL_RGB565
      *iv_return = GL_RGB565;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case '6':
    if (memEQ(name, "GL_LIGHT", 8)) {
    /*                       6     */
#ifdef GL_LIGHT6
      *iv_return = GL_LIGHT6;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_RGBA1", 8)) {
    /*                       6     */
#ifdef GL_RGBA16
      *iv_return = GL_RGBA16;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case '7':
    if (memEQ(name, "GL_LIGHT", 8)) {
    /*                       7     */
#ifdef GL_LIGHT7
      *iv_return = GL_LIGHT7;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case '8':
    if (memEQ(name, "GL_ALPHA", 8)) {
    /*                       8     */
#ifdef GL_ALPHA8
      *iv_return = GL_ALPHA8;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case 'E':
    if (memEQ(name, "GL_DOUBL", 8)) {
    /*                       E     */
#ifdef GL_DOUBLE
      *iv_return = GL_DOUBLE;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_REDUC", 8)) {
    /*                       E     */
#ifdef GL_REDUCE
      *iv_return = GL_REDUCE;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case 'F':
    if (memEQ(name, "GL_RGB16", 8)) {
    /*                       F     */
#ifdef GL_RGB16F
      *iv_return = GL_RGB16F;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_RGB32", 8)) {
    /*                       F     */
#ifdef GL_RGB32F
      *iv_return = GL_RGB32F;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case 'H':
    if (memEQ(name, "GL_SMOOT", 8)) {
    /*                       H     */
#ifdef GL_SMOOTH
      *iv_return = GL_SMOOTH;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case 'I':
    if (memEQ(name, "GL_RG16U", 8)) {
    /*                       I     */
#ifdef GL_RG16UI
      *iv_return = GL_RG16UI;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_RG32U", 8)) {
    /*                       I     */
#ifdef GL_RG32UI
      *iv_return = GL_RG32UI;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_RGB16", 8)) {
    /*                       I     */
#ifdef GL_RGB16I
      *iv_return = GL_RGB16I;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_RGB32", 8)) {
    /*                       I     */
#ifdef GL_RGB32I
      *iv_return = GL_RGB32I;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_RGB8U", 8)) {
    /*                       I     */
#ifdef GL_RGB8UI
      *iv_return = GL_RGB8UI;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_RGBA8", 8)) {
    /*                       I     */
#ifdef GL_RGBA8I
      *iv_return = GL_RGBA8I;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "WINGDIAP", 8)) {
    /*                       I     */
#ifdef WINGDIAPI
      *iv_return = WINGDIAPI;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case 'L':
    if (memEQ(name, "GL_GEQUA", 8)) {
    /*                       L     */
#ifdef GL_GEQUAL
      *iv_return = GL_GEQUAL;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_LEQUA", 8)) {
    /*                       L     */
#ifdef GL_LEQUAL
      *iv_return = GL_LEQUAL;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case 'N':
    if (memEQ(name, "GL_DOMAI", 8)) {
    /*                       N     */
#ifdef GL_DOMAIN
      *iv_return = GL_DOMAIN;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_RETUR", 8)) {
    /*                       N     */
#ifdef GL_RETURN
      *iv_return = GL_RETURN;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case 'O':
    if (memEQ(name, "GL_STERE", 8)) {
    /*                       O     */
#ifdef GL_STEREO
      *iv_return = GL_STEREO;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case 'P':
    if (memEQ(name, "GL_BITMA", 8)) {
    /*                       P     */
#ifdef GL_BITMAP
      *iv_return = GL_BITMAP;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_MIPMA", 8)) {
    /*                       P     */
#ifdef GL_MIPMAP
      *iv_return = GL_MIPMAP;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case 'R':
    if (memEQ(name, "GL_BUFFE", 8)) {
    /*                       R     */
#ifdef GL_BUFFER
      *iv_return = GL_BUFFER;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_DITHE", 8)) {
    /*                       R     */
#ifdef GL_DITHER
      *iv_return = GL_DITHER;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_FILTE", 8)) {
    /*                       R     */
#ifdef GL_FILTER
      *iv_return = GL_FILTER;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_LINEA", 8)) {
    /*                       R     */
#ifdef GL_LINEAR
      *iv_return = GL_LINEAR;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_RENDE", 8)) {
    /*                       R     */
#ifdef GL_RENDER
      *iv_return = GL_RENDER;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_SHADE", 8)) {
    /*                       R     */
#ifdef GL_SHADER
      *iv_return = GL_SHADER;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_VENDO", 8)) {
    /*                       R     */
#ifdef GL_VENDOR
      *iv_return = GL_VENDOR;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case 'S':
    if (memEQ(name, "GL_ALWAY", 8)) {
    /*                       S     */
#ifdef GL_ALWAYS
      *iv_return = GL_ALWAYS;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_POINT", 8)) {
    /*                       S     */
#ifdef GL_POINTS
      *iv_return = GL_POINTS;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case 'T':
    if (memEQ(name, "GL_INVER", 8)) {
    /*                       T     */
#ifdef GL_INVERT
      *iv_return = GL_INVERT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_NICES", 8)) {
    /*                       T     */
#ifdef GL_NICEST
      *iv_return = GL_NICEST;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_OFFSE", 8)) {
    /*                       T     */
#ifdef GL_OFFSET
      *iv_return = GL_OFFSET;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_REPEA", 8)) {
    /*                       T     */
#ifdef GL_REPEAT
      *iv_return = GL_REPEAT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_SELEC", 8)) {
    /*                       T     */
#ifdef GL_SELECT
      *iv_return = GL_SELECT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case 'V':
    if (memEQ(name, "GL_DST_N", 8)) {
    /*                       V     */
#ifdef GL_DST_NV
      *iv_return = GL_DST_NV;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_RED_N", 8)) {
    /*                       V     */
#ifdef GL_RED_NV
      *iv_return = GL_RED_NV;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_SRC_N", 8)) {
    /*                       V     */
#ifdef GL_SRC_NV
      *iv_return = GL_SRC_NV;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_XOR_N", 8)) {
    /*                       V     */
#ifdef GL_XOR_NV
      *iv_return = GL_XOR_NV;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case 'X':
    if (memEQ(name, "GL_MINMA", 8)) {
    /*                       X     */
#ifdef GL_MINMAX
      *iv_return = GL_MINMAX;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_ZOOM_", 8)) {
    /*                       X     */
#ifdef GL_ZOOM_X
      *iv_return = GL_ZOOM_X;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case 'Y':
    if (memEQ(name, "GL_ZOOM_", 8)) {
    /*                       Y     */
#ifdef GL_ZOOM_Y
      *iv_return = GL_ZOOM_Y;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case 'i':
    if (memEQ(name, "glEnable", 8)) {
    /*                       i     */
#ifdef glEnablei
      *iv_return = glEnablei;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case 'v':
    if (memEQ(name, "glLightx", 8)) {
    /*                       v     */
#ifdef glLightxv
      *iv_return = glLightxv;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case 'x':
    if (memEQ(name, "glColor4", 8)) {
    /*                       x     */
#ifdef glColor4x
      *iv_return = glColor4x;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glRotate", 8)) {
    /*                       x     */
#ifdef glRotatex
      *iv_return = glRotatex;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glTexEnv", 8)) {
    /*                       x     */
#ifdef glTexEnvx
      *iv_return = glTexEnvx;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case 'y':
    if (memEQ(name, "glIsQuer", 8)) {
    /*                       y     */
#ifdef glIsQuery
      *iv_return = glIsQuery;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  }
  return PERL_constant_NOTFOUND;
}

static int
constant_10 (pTHX_ const char *name, IV *iv_return) {
  /* When generated this function returned values for the list of names given
     here.  However, subsequent manual editing may have added or removed some.
     GLAPIENTRY GL_2_BYTES GL_3_BYTES GL_422_EXT GL_4_BYTES GL_ADD_ATI
     GL_ALPHA12 GL_ALPHA16 GL_AMBIENT GL_BGR_EXT GL_BLUE_NV GL_C3F_V3F
     GL_CND_ATI GL_COMBINE GL_COMPILE GL_DIFFUSE GL_DSDT_NV GL_FASTEST
     GL_FOG_BIT GL_FOG_END GL_GREATER GL_HILO_NV GL_INT8_NV GL_LOW_INT
     GL_MAD_ATI GL_MAX_EXT GL_MIN_EXT GL_MOV_ATI GL_MUL_ATI GL_N3F_V3F
     GL_NEAREST GL_ONE_EXT GL_PATCHES GL_PLUS_NV GL_POLYGON GL_PROGRAM
     GL_RECT_NV GL_REPLACE GL_RGB16UI GL_RGB32UI GL_RGB5_A1 GL_RGB9_E5
     GL_RGBA16F GL_RGBA16I GL_RGBA32F GL_RGBA32I GL_RGBA8UI GL_S3_s3tc
     GL_SAMPLER GL_SAMPLES GL_SET_AMD GL_STENCIL GL_SUB_ATI GL_T2F_V3F
     GL_T4F_V4F GL_TEXTURE GL_UNIFORM GL_UTF8_NV GL_VERSION glDisablei
     glEndQuery glFrustumf glFrustumx glIsBuffer glIsPathNV glIsShader
     glNormal3x glTexEnvxv glWaitSync */
  /* Offset 3 gives the best switch position.  */
  switch (name[3]) {
  case '2':
    if (memEQ(name, "GL_2_BYTES", 10)) {
    /*                  ^             */
#ifdef GL_2_BYTES
      *iv_return = GL_2_BYTES;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case '3':
    if (memEQ(name, "GL_3_BYTES", 10)) {
    /*                  ^             */
#ifdef GL_3_BYTES
      *iv_return = GL_3_BYTES;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case '4':
    if (memEQ(name, "GL_422_EXT", 10)) {
    /*                  ^             */
#ifdef GL_422_EXT
      *iv_return = GL_422_EXT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_4_BYTES", 10)) {
    /*                  ^             */
#ifdef GL_4_BYTES
      *iv_return = GL_4_BYTES;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case 'A':
    if (memEQ(name, "GL_ADD_ATI", 10)) {
    /*                  ^             */
#ifdef GL_ADD_ATI
      *iv_return = GL_ADD_ATI;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_ALPHA12", 10)) {
    /*                  ^             */
#ifdef GL_ALPHA12
      *iv_return = GL_ALPHA12;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_ALPHA16", 10)) {
    /*                  ^             */
#ifdef GL_ALPHA16
      *iv_return = GL_ALPHA16;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_AMBIENT", 10)) {
    /*                  ^             */
#ifdef GL_AMBIENT
      *iv_return = GL_AMBIENT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case 'B':
    if (memEQ(name, "GL_BGR_EXT", 10)) {
    /*                  ^             */
#ifdef GL_BGR_EXT
      *iv_return = GL_BGR_EXT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_BLUE_NV", 10)) {
    /*                  ^             */
#ifdef GL_BLUE_NV
      *iv_return = GL_BLUE_NV;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case 'C':
    if (memEQ(name, "GL_C3F_V3F", 10)) {
    /*                  ^             */
#ifdef GL_C3F_V3F
      *iv_return = GL_C3F_V3F;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_CND_ATI", 10)) {
    /*                  ^             */
#ifdef GL_CND_ATI
      *iv_return = GL_CND_ATI;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_COMBINE", 10)) {
    /*                  ^             */
#ifdef GL_COMBINE
      *iv_return = GL_COMBINE;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_COMPILE", 10)) {
    /*                  ^             */
#ifdef GL_COMPILE
      *iv_return = GL_COMPILE;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case 'D':
    if (memEQ(name, "GL_DIFFUSE", 10)) {
    /*                  ^             */
#ifdef GL_DIFFUSE
      *iv_return = GL_DIFFUSE;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_DSDT_NV", 10)) {
    /*                  ^             */
#ifdef GL_DSDT_NV
      *iv_return = GL_DSDT_NV;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case 'F':
    if (memEQ(name, "GL_FASTEST", 10)) {
    /*                  ^             */
#ifdef GL_FASTEST
      *iv_return = GL_FASTEST;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_FOG_BIT", 10)) {
    /*                  ^             */
#ifdef GL_FOG_BIT
      *iv_return = GL_FOG_BIT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_FOG_END", 10)) {
    /*                  ^             */
#ifdef GL_FOG_END
      *iv_return = GL_FOG_END;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case 'G':
    if (memEQ(name, "GL_GREATER", 10)) {
    /*                  ^             */
#ifdef GL_GREATER
      *iv_return = GL_GREATER;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case 'H':
    if (memEQ(name, "GL_HILO_NV", 10)) {
    /*                  ^             */
#ifdef GL_HILO_NV
      *iv_return = GL_HILO_NV;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case 'I':
    if (memEQ(name, "GL_INT8_NV", 10)) {
    /*                  ^             */
#ifdef GL_INT8_NV
      *iv_return = GL_INT8_NV;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case 'L':
    if (memEQ(name, "GL_LOW_INT", 10)) {
    /*                  ^             */
#ifdef GL_LOW_INT
      *iv_return = GL_LOW_INT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case 'M':
    if (memEQ(name, "GL_MAD_ATI", 10)) {
    /*                  ^             */
#ifdef GL_MAD_ATI
      *iv_return = GL_MAD_ATI;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_MAX_EXT", 10)) {
    /*                  ^             */
#ifdef GL_MAX_EXT
      *iv_return = GL_MAX_EXT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_MIN_EXT", 10)) {
    /*                  ^             */
#ifdef GL_MIN_EXT
      *iv_return = GL_MIN_EXT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_MOV_ATI", 10)) {
    /*                  ^             */
#ifdef GL_MOV_ATI
      *iv_return = GL_MOV_ATI;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_MUL_ATI", 10)) {
    /*                  ^             */
#ifdef GL_MUL_ATI
      *iv_return = GL_MUL_ATI;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case 'N':
    if (memEQ(name, "GL_N3F_V3F", 10)) {
    /*                  ^             */
#ifdef GL_N3F_V3F
      *iv_return = GL_N3F_V3F;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_NEAREST", 10)) {
    /*                  ^             */
#ifdef GL_NEAREST
      *iv_return = GL_NEAREST;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case 'O':
    if (memEQ(name, "GL_ONE_EXT", 10)) {
    /*                  ^             */
#ifdef GL_ONE_EXT
      *iv_return = GL_ONE_EXT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case 'P':
    if (memEQ(name, "GLAPIENTRY", 10)) {
    /*                  ^             */
#ifdef GLAPIENTRY
      *iv_return = GLAPIENTRY;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_PATCHES", 10)) {
    /*                  ^             */
#ifdef GL_PATCHES
      *iv_return = GL_PATCHES;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_PLUS_NV", 10)) {
    /*                  ^             */
#ifdef GL_PLUS_NV
      *iv_return = GL_PLUS_NV;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_POLYGON", 10)) {
    /*                  ^             */
#ifdef GL_POLYGON
      *iv_return = GL_POLYGON;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_PROGRAM", 10)) {
    /*                  ^             */
#ifdef GL_PROGRAM
      *iv_return = GL_PROGRAM;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case 'R':
    if (memEQ(name, "GL_RECT_NV", 10)) {
    /*                  ^             */
#ifdef GL_RECT_NV
      *iv_return = GL_RECT_NV;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_REPLACE", 10)) {
    /*                  ^             */
#ifdef GL_REPLACE
      *iv_return = GL_REPLACE;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_RGB16UI", 10)) {
    /*                  ^             */
#ifdef GL_RGB16UI
      *iv_return = GL_RGB16UI;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_RGB32UI", 10)) {
    /*                  ^             */
#ifdef GL_RGB32UI
      *iv_return = GL_RGB32UI;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_RGB5_A1", 10)) {
    /*                  ^             */
#ifdef GL_RGB5_A1
      *iv_return = GL_RGB5_A1;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_RGB9_E5", 10)) {
    /*                  ^             */
#ifdef GL_RGB9_E5
      *iv_return = GL_RGB9_E5;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_RGBA16F", 10)) {
    /*                  ^             */
#ifdef GL_RGBA16F
      *iv_return = GL_RGBA16F;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_RGBA16I", 10)) {
    /*                  ^             */
#ifdef GL_RGBA16I
      *iv_return = GL_RGBA16I;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_RGBA32F", 10)) {
    /*                  ^             */
#ifdef GL_RGBA32F
      *iv_return = GL_RGBA32F;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_RGBA32I", 10)) {
    /*                  ^             */
#ifdef GL_RGBA32I
      *iv_return = GL_RGBA32I;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_RGBA8UI", 10)) {
    /*                  ^             */
#ifdef GL_RGBA8UI
      *iv_return = GL_RGBA8UI;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case 'S':
    if (memEQ(name, "GL_S3_s3tc", 10)) {
    /*                  ^             */
#ifdef GL_S3_s3tc
      *iv_return = GL_S3_s3tc;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_SAMPLER", 10)) {
    /*                  ^             */
#ifdef GL_SAMPLER
      *iv_return = GL_SAMPLER;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_SAMPLES", 10)) {
    /*                  ^             */
#ifdef GL_SAMPLES
      *iv_return = GL_SAMPLES;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_SET_AMD", 10)) {
    /*                  ^             */
#ifdef GL_SET_AMD
      *iv_return = GL_SET_AMD;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_STENCIL", 10)) {
    /*                  ^             */
#ifdef GL_STENCIL
      *iv_return = GL_STENCIL;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_SUB_ATI", 10)) {
    /*                  ^             */
#ifdef GL_SUB_ATI
      *iv_return = GL_SUB_ATI;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case 'T':
    if (memEQ(name, "GL_T2F_V3F", 10)) {
    /*                  ^             */
#ifdef GL_T2F_V3F
      *iv_return = GL_T2F_V3F;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_T4F_V4F", 10)) {
    /*                  ^             */
#ifdef GL_T4F_V4F
      *iv_return = GL_T4F_V4F;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_TEXTURE", 10)) {
    /*                  ^             */
#ifdef GL_TEXTURE
      *iv_return = GL_TEXTURE;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case 'U':
    if (memEQ(name, "GL_UNIFORM", 10)) {
    /*                  ^             */
#ifdef GL_UNIFORM
      *iv_return = GL_UNIFORM;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_UTF8_NV", 10)) {
    /*                  ^             */
#ifdef GL_UTF8_NV
      *iv_return = GL_UTF8_NV;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case 'V':
    if (memEQ(name, "GL_VERSION", 10)) {
    /*                  ^             */
#ifdef GL_VERSION
      *iv_return = GL_VERSION;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case 'a':
    if (memEQ(name, "glWaitSync", 10)) {
    /*                  ^             */
#ifdef glWaitSync
      *iv_return = glWaitSync;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case 'e':
    if (memEQ(name, "glTexEnvxv", 10)) {
    /*                  ^             */
#ifdef glTexEnvxv
      *iv_return = glTexEnvxv;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case 'i':
    if (memEQ(name, "glDisablei", 10)) {
    /*                  ^             */
#ifdef glDisablei
      *iv_return = glDisablei;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case 'n':
    if (memEQ(name, "glEndQuery", 10)) {
    /*                  ^             */
#ifdef glEndQuery
      *iv_return = glEndQuery;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case 'o':
    if (memEQ(name, "glNormal3x", 10)) {
    /*                  ^             */
#ifdef glNormal3x
      *iv_return = glNormal3x;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case 'r':
    if (memEQ(name, "glFrustumf", 10)) {
    /*                  ^             */
#ifdef glFrustumf
      *iv_return = glFrustumf;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glFrustumx", 10)) {
    /*                  ^             */
#ifdef glFrustumx
      *iv_return = glFrustumx;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case 's':
    if (memEQ(name, "glIsBuffer", 10)) {
    /*                  ^             */
#ifdef glIsBuffer
      *iv_return = glIsBuffer;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glIsPathNV", 10)) {
    /*                  ^             */
#ifdef glIsPathNV
      *iv_return = glIsPathNV;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glIsShader", 10)) {
    /*                  ^             */
#ifdef glIsShader
      *iv_return = glIsShader;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  }
  return PERL_constant_NOTFOUND;
}

static int
constant_11 (pTHX_ const char *name, IV *iv_return) {
  /* When generated this function returned values for the list of names given
     here.  However, subsequent manual editing may have added or removed some.
     GL_3D_COLOR GL_ABGR_EXT GL_ARB_sync GL_BEVEL_NV GL_BGRA_EXT GL_BOOL_ARB
     GL_C4UB_V2F GL_C4UB_V3F GL_CMYK_EXT GL_CND0_ATI GL_CONSTANT GL_DOT3_ATI
     GL_DOT3_RGB GL_DOT4_ATI GL_DSDT8_NV GL_DUDV_ATI GL_EMISSION GL_EVAL_BIT
     GL_EXT_abgr GL_EXT_bgra GL_FEEDBACK GL_FOG_HINT GL_FOG_MODE GL_FRAME_NV
     GL_FUNC_ADD GL_GREEN_NV GL_HIGH_INT GL_HILO8_NV GL_HINT_BIT GL_IMAGE_1D
     GL_IMAGE_2D GL_IMAGE_3D GL_INT16_NV GL_INT64_NV GL_INT_VEC2 GL_INT_VEC3
     GL_INT_VEC4 GL_ISOLINES GL_LERP_ATI GL_LIGHTING GL_LINE_BIT GL_LIST_BIT
     GL_LOCATION GL_LOGIC_OP GL_MINUS_NV GL_MODULATE GL_NOTEQUAL GL_NO_ERROR
     GL_NV_fence GL_POSITION GL_PREVIOUS GL_R3_G3_B2 GL_R8_SNORM GL_RED_BIAS
     GL_RED_BITS GL_RENDERER GL_RGB10_A2 GL_RGB2_EXT GL_RGB4_EXT GL_RGB5_EXT
     GL_RGB8_EXT GL_RGBA16UI GL_RGBA32UI GL_RGB_S3TC GL_RG_SNORM GL_ROUND_NV
     GL_SIGNALED GL_SPECULAR GL_SRC0_RGB GL_SRC1_RGB GL_SRC2_RGB GL_SRGB_EXT
     GL_SUBTRACT GL_TEXTURE0 GL_TEXTURE1 GL_TEXTURE2 GL_TEXTURE3 GL_TEXTURE4
     GL_TEXTURE5 GL_TEXTURE6 GL_TEXTURE7 GL_TEXTURE8 GL_TEXTURE9 GL_UTF16_NV
     GL_VIEWPORT GL_ZERO_EXT glColor3hNV glColor4hNV glColorP3ui glColorP4ui
     glFenceSync glFogCoordd glFogCoordf glGetFixedv glGetMinmax glGetSynciv
     glHistogram glIsFenceNV glIsNameAMD glIsProgram glIsSampler glIsStateNV
     glMapBuffer glMaterialx glMinmaxEXT glOrthofOES glTexBuffer glUniform1d
     glUniform1f glUniform1i glUniform2d glUniform2f glUniform2i glUniform3d
     glUniform3f glUniform3i glUniform4d glUniform4f glUniform4i */
  /* Offset 6 gives the best switch position.  */
  switch (name[6]) {
  case '0':
    if (memEQ(name, "GL_CND0_ATI", 11)) {
    /*                     ^           */
#ifdef GL_CND0_ATI
      *iv_return = GL_CND0_ATI;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_SRC0_RGB", 11)) {
    /*                     ^           */
#ifdef GL_SRC0_RGB
      *iv_return = GL_SRC0_RGB;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case '1':
    if (memEQ(name, "GL_INT16_NV", 11)) {
    /*                     ^           */
#ifdef GL_INT16_NV
      *iv_return = GL_INT16_NV;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_RGB10_A2", 11)) {
    /*                     ^           */
#ifdef GL_RGB10_A2
      *iv_return = GL_RGB10_A2;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_SRC1_RGB", 11)) {
    /*                     ^           */
#ifdef GL_SRC1_RGB
      *iv_return = GL_SRC1_RGB;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_UTF16_NV", 11)) {
    /*                     ^           */
#ifdef GL_UTF16_NV
      *iv_return = GL_UTF16_NV;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case '2':
    if (memEQ(name, "GL_RGB2_EXT", 11)) {
    /*                     ^           */
#ifdef GL_RGB2_EXT
      *iv_return = GL_RGB2_EXT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_SRC2_RGB", 11)) {
    /*                     ^           */
#ifdef GL_SRC2_RGB
      *iv_return = GL_SRC2_RGB;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case '3':
    if (memEQ(name, "GL_DOT3_ATI", 11)) {
    /*                     ^           */
#ifdef GL_DOT3_ATI
      *iv_return = GL_DOT3_ATI;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_DOT3_RGB", 11)) {
    /*                     ^           */
#ifdef GL_DOT3_RGB
      *iv_return = GL_DOT3_RGB;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case '4':
    if (memEQ(name, "GL_DOT4_ATI", 11)) {
    /*                     ^           */
#ifdef GL_DOT4_ATI
      *iv_return = GL_DOT4_ATI;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_RGB4_EXT", 11)) {
    /*                     ^           */
#ifdef GL_RGB4_EXT
      *iv_return = GL_RGB4_EXT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case '5':
    if (memEQ(name, "GL_RGB5_EXT", 11)) {
    /*                     ^           */
#ifdef GL_RGB5_EXT
      *iv_return = GL_RGB5_EXT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case '6':
    if (memEQ(name, "GL_INT64_NV", 11)) {
    /*                     ^           */
#ifdef GL_INT64_NV
      *iv_return = GL_INT64_NV;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case '8':
    if (memEQ(name, "GL_RGB8_EXT", 11)) {
    /*                     ^           */
#ifdef GL_RGB8_EXT
      *iv_return = GL_RGB8_EXT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case 'A':
    if (memEQ(name, "GL_BGRA_EXT", 11)) {
    /*                     ^           */
#ifdef GL_BGRA_EXT
      *iv_return = GL_BGRA_EXT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_LOCATION", 11)) {
    /*                     ^           */
#ifdef GL_LOCATION
      *iv_return = GL_LOCATION;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_RGBA16UI", 11)) {
    /*                     ^           */
#ifdef GL_RGBA16UI
      *iv_return = GL_RGBA16UI;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_RGBA32UI", 11)) {
    /*                     ^           */
#ifdef GL_RGBA32UI
      *iv_return = GL_RGBA32UI;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case 'B':
    if (memEQ(name, "GL_C4UB_V2F", 11)) {
    /*                     ^           */
#ifdef GL_C4UB_V2F
      *iv_return = GL_C4UB_V2F;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_C4UB_V3F", 11)) {
    /*                     ^           */
#ifdef GL_C4UB_V3F
      *iv_return = GL_C4UB_V3F;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_SRGB_EXT", 11)) {
    /*                     ^           */
#ifdef GL_SRGB_EXT
      *iv_return = GL_SRGB_EXT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case 'C':
    if (memEQ(name, "GL_3D_COLOR", 11)) {
    /*                     ^           */
#ifdef GL_3D_COLOR
      *iv_return = GL_3D_COLOR;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_FUNC_ADD", 11)) {
    /*                     ^           */
#ifdef GL_FUNC_ADD
      *iv_return = GL_FUNC_ADD;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_SPECULAR", 11)) {
    /*                     ^           */
#ifdef GL_SPECULAR
      *iv_return = GL_SPECULAR;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case 'D':
    if (memEQ(name, "GL_FEEDBACK", 11)) {
    /*                     ^           */
#ifdef GL_FEEDBACK
      *iv_return = GL_FEEDBACK;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_RENDERER", 11)) {
    /*                     ^           */
#ifdef GL_RENDERER
      *iv_return = GL_RENDERER;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case 'E':
    if (memEQ(name, "GL_BEVEL_NV", 11)) {
    /*                     ^           */
#ifdef GL_BEVEL_NV
      *iv_return = GL_BEVEL_NV;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_GREEN_NV", 11)) {
    /*                     ^           */
#ifdef GL_GREEN_NV
      *iv_return = GL_GREEN_NV;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_LINE_BIT", 11)) {
    /*                     ^           */
#ifdef GL_LINE_BIT
      *iv_return = GL_LINE_BIT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_NOTEQUAL", 11)) {
    /*                     ^           */
#ifdef GL_NOTEQUAL
      *iv_return = GL_NOTEQUAL;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_NO_ERROR", 11)) {
    /*                     ^           */
#ifdef GL_NO_ERROR
      *iv_return = GL_NO_ERROR;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case 'G':
    if (memEQ(name, "GL_IMAGE_1D", 11)) {
    /*                     ^           */
#ifdef GL_IMAGE_1D
      *iv_return = GL_IMAGE_1D;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_IMAGE_2D", 11)) {
    /*                     ^           */
#ifdef GL_IMAGE_2D
      *iv_return = GL_IMAGE_2D;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_IMAGE_3D", 11)) {
    /*                     ^           */
#ifdef GL_IMAGE_3D
      *iv_return = GL_IMAGE_3D;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_R3_G3_B2", 11)) {
    /*                     ^           */
#ifdef GL_R3_G3_B2
      *iv_return = GL_R3_G3_B2;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case 'H':
    if (memEQ(name, "GL_HIGH_INT", 11)) {
    /*                     ^           */
#ifdef GL_HIGH_INT
      *iv_return = GL_HIGH_INT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_LIGHTING", 11)) {
    /*                     ^           */
#ifdef GL_LIGHTING
      *iv_return = GL_LIGHTING;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case 'I':
    if (memEQ(name, "GL_LOGIC_OP", 11)) {
    /*                     ^           */
#ifdef GL_LOGIC_OP
      *iv_return = GL_LOGIC_OP;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_POSITION", 11)) {
    /*                     ^           */
#ifdef GL_POSITION
      *iv_return = GL_POSITION;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case 'K':
    if (memEQ(name, "GL_CMYK_EXT", 11)) {
    /*                     ^           */
#ifdef GL_CMYK_EXT
      *iv_return = GL_CMYK_EXT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case 'L':
    if (memEQ(name, "GL_BOOL_ARB", 11)) {
    /*                     ^           */
#ifdef GL_BOOL_ARB
      *iv_return = GL_BOOL_ARB;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_EVAL_BIT", 11)) {
    /*                     ^           */
#ifdef GL_EVAL_BIT
      *iv_return = GL_EVAL_BIT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_ISOLINES", 11)) {
    /*                     ^           */
#ifdef GL_ISOLINES
      *iv_return = GL_ISOLINES;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case 'M':
    if (memEQ(name, "GL_FRAME_NV", 11)) {
    /*                     ^           */
#ifdef GL_FRAME_NV
      *iv_return = GL_FRAME_NV;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case 'N':
    if (memEQ(name, "GL_ROUND_NV", 11)) {
    /*                     ^           */
#ifdef GL_ROUND_NV
      *iv_return = GL_ROUND_NV;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_SIGNALED", 11)) {
    /*                     ^           */
#ifdef GL_SIGNALED
      *iv_return = GL_SIGNALED;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case 'O':
    if (memEQ(name, "GL_HILO8_NV", 11)) {
    /*                     ^           */
#ifdef GL_HILO8_NV
      *iv_return = GL_HILO8_NV;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_ZERO_EXT", 11)) {
    /*                     ^           */
#ifdef GL_ZERO_EXT
      *iv_return = GL_ZERO_EXT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case 'P':
    if (memEQ(name, "GL_LERP_ATI", 11)) {
    /*                     ^           */
#ifdef GL_LERP_ATI
      *iv_return = GL_LERP_ATI;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case 'R':
    if (memEQ(name, "GL_ABGR_EXT", 11)) {
    /*                     ^           */
#ifdef GL_ABGR_EXT
      *iv_return = GL_ABGR_EXT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case 'S':
    if (memEQ(name, "GL_CONSTANT", 11)) {
    /*                     ^           */
#ifdef GL_CONSTANT
      *iv_return = GL_CONSTANT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_EMISSION", 11)) {
    /*                     ^           */
#ifdef GL_EMISSION
      *iv_return = GL_EMISSION;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_R8_SNORM", 11)) {
    /*                     ^           */
#ifdef GL_R8_SNORM
      *iv_return = GL_R8_SNORM;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_RG_SNORM", 11)) {
    /*                     ^           */
#ifdef GL_RG_SNORM
      *iv_return = GL_RG_SNORM;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case 'T':
    if (memEQ(name, "GL_DSDT8_NV", 11)) {
    /*                     ^           */
#ifdef GL_DSDT8_NV
      *iv_return = GL_DSDT8_NV;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_HINT_BIT", 11)) {
    /*                     ^           */
#ifdef GL_HINT_BIT
      *iv_return = GL_HINT_BIT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_LIST_BIT", 11)) {
    /*                     ^           */
#ifdef GL_LIST_BIT
      *iv_return = GL_LIST_BIT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_SUBTRACT", 11)) {
    /*                     ^           */
#ifdef GL_SUBTRACT
      *iv_return = GL_SUBTRACT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_TEXTURE0", 11)) {
    /*                     ^           */
#ifdef GL_TEXTURE0
      *iv_return = GL_TEXTURE0;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_TEXTURE1", 11)) {
    /*                     ^           */
#ifdef GL_TEXTURE1
      *iv_return = GL_TEXTURE1;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_TEXTURE2", 11)) {
    /*                     ^           */
#ifdef GL_TEXTURE2
      *iv_return = GL_TEXTURE2;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_TEXTURE3", 11)) {
    /*                     ^           */
#ifdef GL_TEXTURE3
      *iv_return = GL_TEXTURE3;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_TEXTURE4", 11)) {
    /*                     ^           */
#ifdef GL_TEXTURE4
      *iv_return = GL_TEXTURE4;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_TEXTURE5", 11)) {
    /*                     ^           */
#ifdef GL_TEXTURE5
      *iv_return = GL_TEXTURE5;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_TEXTURE6", 11)) {
    /*                     ^           */
#ifdef GL_TEXTURE6
      *iv_return = GL_TEXTURE6;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_TEXTURE7", 11)) {
    /*                     ^           */
#ifdef GL_TEXTURE7
      *iv_return = GL_TEXTURE7;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_TEXTURE8", 11)) {
    /*                     ^           */
#ifdef GL_TEXTURE8
      *iv_return = GL_TEXTURE8;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_TEXTURE9", 11)) {
    /*                     ^           */
#ifdef GL_TEXTURE9
      *iv_return = GL_TEXTURE9;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case 'U':
    if (memEQ(name, "GL_MINUS_NV", 11)) {
    /*                     ^           */
#ifdef GL_MINUS_NV
      *iv_return = GL_MINUS_NV;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_MODULATE", 11)) {
    /*                     ^           */
#ifdef GL_MODULATE
      *iv_return = GL_MODULATE;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case 'V':
    if (memEQ(name, "GL_DUDV_ATI", 11)) {
    /*                     ^           */
#ifdef GL_DUDV_ATI
      *iv_return = GL_DUDV_ATI;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_PREVIOUS", 11)) {
    /*                     ^           */
#ifdef GL_PREVIOUS
      *iv_return = GL_PREVIOUS;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case 'W':
    if (memEQ(name, "GL_VIEWPORT", 11)) {
    /*                     ^           */
#ifdef GL_VIEWPORT
      *iv_return = GL_VIEWPORT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case '_':
    if (memEQ(name, "GL_ARB_sync", 11)) {
    /*                     ^           */
#ifdef GL_ARB_sync
      *iv_return = GL_ARB_sync;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_EXT_abgr", 11)) {
    /*                     ^           */
#ifdef GL_EXT_abgr
      *iv_return = GL_EXT_abgr;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_EXT_bgra", 11)) {
    /*                     ^           */
#ifdef GL_EXT_bgra
      *iv_return = GL_EXT_bgra;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_FOG_HINT", 11)) {
    /*                     ^           */
#ifdef GL_FOG_HINT
      *iv_return = GL_FOG_HINT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_FOG_MODE", 11)) {
    /*                     ^           */
#ifdef GL_FOG_MODE
      *iv_return = GL_FOG_MODE;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_INT_VEC2", 11)) {
    /*                     ^           */
#ifdef GL_INT_VEC2
      *iv_return = GL_INT_VEC2;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_INT_VEC3", 11)) {
    /*                     ^           */
#ifdef GL_INT_VEC3
      *iv_return = GL_INT_VEC3;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_INT_VEC4", 11)) {
    /*                     ^           */
#ifdef GL_INT_VEC4
      *iv_return = GL_INT_VEC4;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_RED_BIAS", 11)) {
    /*                     ^           */
#ifdef GL_RED_BIAS
      *iv_return = GL_RED_BIAS;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_RED_BITS", 11)) {
    /*                     ^           */
#ifdef GL_RED_BITS
      *iv_return = GL_RED_BITS;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_RGB_S3TC", 11)) {
    /*                     ^           */
#ifdef GL_RGB_S3TC
      *iv_return = GL_RGB_S3TC;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case 'a':
    if (memEQ(name, "glIsStateNV", 11)) {
    /*                     ^           */
#ifdef glIsStateNV
      *iv_return = glIsStateNV;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glMinmaxEXT", 11)) {
    /*                     ^           */
#ifdef glMinmaxEXT
      *iv_return = glMinmaxEXT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case 'e':
    if (memEQ(name, "glFenceSync", 11)) {
    /*                     ^           */
#ifdef glFenceSync
      *iv_return = glFenceSync;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case 'f':
    if (memEQ(name, "GL_NV_fence", 11)) {
    /*                     ^           */
#ifdef GL_NV_fence
      *iv_return = GL_NV_fence;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case 'i':
    if (memEQ(name, "glGetFixedv", 11)) {
    /*                     ^           */
#ifdef glGetFixedv
      *iv_return = glGetFixedv;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glGetMinmax", 11)) {
    /*                     ^           */
#ifdef glGetMinmax
      *iv_return = glGetMinmax;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case 'm':
    if (memEQ(name, "glIsNameAMD", 11)) {
    /*                     ^           */
#ifdef glIsNameAMD
      *iv_return = glIsNameAMD;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glIsSampler", 11)) {
    /*                     ^           */
#ifdef glIsSampler
      *iv_return = glIsSampler;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case 'n':
    if (memEQ(name, "glIsFenceNV", 11)) {
    /*                     ^           */
#ifdef glIsFenceNV
      *iv_return = glIsFenceNV;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case 'o':
    if (memEQ(name, "glFogCoordd", 11)) {
    /*                     ^           */
#ifdef glFogCoordd
      *iv_return = glFogCoordd;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glFogCoordf", 11)) {
    /*                     ^           */
#ifdef glFogCoordf
      *iv_return = glFogCoordf;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glHistogram", 11)) {
    /*                     ^           */
#ifdef glHistogram
      *iv_return = glHistogram;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glIsProgram", 11)) {
    /*                     ^           */
#ifdef glIsProgram
      *iv_return = glIsProgram;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glOrthofOES", 11)) {
    /*                     ^           */
#ifdef glOrthofOES
      *iv_return = glOrthofOES;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glUniform1d", 11)) {
    /*                     ^           */
#ifdef glUniform1d
      *iv_return = glUniform1d;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glUniform1f", 11)) {
    /*                     ^           */
#ifdef glUniform1f
      *iv_return = glUniform1f;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glUniform1i", 11)) {
    /*                     ^           */
#ifdef glUniform1i
      *iv_return = glUniform1i;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glUniform2d", 11)) {
    /*                     ^           */
#ifdef glUniform2d
      *iv_return = glUniform2d;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glUniform2f", 11)) {
    /*                     ^           */
#ifdef glUniform2f
      *iv_return = glUniform2f;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glUniform2i", 11)) {
    /*                     ^           */
#ifdef glUniform2i
      *iv_return = glUniform2i;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glUniform3d", 11)) {
    /*                     ^           */
#ifdef glUniform3d
      *iv_return = glUniform3d;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glUniform3f", 11)) {
    /*                     ^           */
#ifdef glUniform3f
      *iv_return = glUniform3f;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glUniform3i", 11)) {
    /*                     ^           */
#ifdef glUniform3i
      *iv_return = glUniform3i;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glUniform4d", 11)) {
    /*                     ^           */
#ifdef glUniform4d
      *iv_return = glUniform4d;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glUniform4f", 11)) {
    /*                     ^           */
#ifdef glUniform4f
      *iv_return = glUniform4f;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glUniform4i", 11)) {
    /*                     ^           */
#ifdef glUniform4i
      *iv_return = glUniform4i;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case 'r':
    if (memEQ(name, "glColor3hNV", 11)) {
    /*                     ^           */
#ifdef glColor3hNV
      *iv_return = glColor3hNV;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glColor4hNV", 11)) {
    /*                     ^           */
#ifdef glColor4hNV
      *iv_return = glColor4hNV;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glColorP3ui", 11)) {
    /*                     ^           */
#ifdef glColorP3ui
      *iv_return = glColorP3ui;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glColorP4ui", 11)) {
    /*                     ^           */
#ifdef glColorP4ui
      *iv_return = glColorP4ui;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glMaterialx", 11)) {
    /*                     ^           */
#ifdef glMaterialx
      *iv_return = glMaterialx;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case 'u':
    if (memEQ(name, "glMapBuffer", 11)) {
    /*                     ^           */
#ifdef glMapBuffer
      *iv_return = glMapBuffer;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glTexBuffer", 11)) {
    /*                     ^           */
#ifdef glTexBuffer
      *iv_return = glTexBuffer;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case 'y':
    if (memEQ(name, "glGetSynciv", 11)) {
    /*                     ^           */
#ifdef glGetSynciv
      *iv_return = glGetSynciv;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  }
  return PERL_constant_NOTFOUND;
}

static int
constant_12 (pTHX_ const char *name, IV *iv_return) {
  /* When generated this function returned values for the list of names given
     here.  However, subsequent manual editing may have added or removed some.
     GLEWAPIENTRY GLEW_S3_s3tc GLEW_VERSION GL_1PASS_EXT GL_ARC_TO_NV
     GL_BACK_LEFT GL_BLEND_DST GL_BLEND_SRC GL_BLUE_BIAS GL_BLUE_BITS
     GL_BOOL_VEC2 GL_BOOL_VEC3 GL_BOOL_VEC4 GL_CMYKA_EXT GL_COLOR_SUM
     GL_CON_0_ATI GL_CON_1_ATI GL_CON_2_ATI GL_CON_3_ATI GL_CON_4_ATI
     GL_CON_5_ATI GL_CON_6_ATI GL_CON_7_ATI GL_CUBIC_EXT GL_CULL_FACE
     GL_DARKEN_NV GL_DECR_WRAP GL_DONT_CARE GL_DOT3_RGBA GL_DST_ALPHA
     GL_DST_COLOR GL_DST_IN_NV GL_EDGE_FLAG GL_EXT_cmyka GL_EYE_PLANE
     GL_FIELDS_NV GL_FOG_COLOR GL_FOG_COORD GL_FOG_INDEX GL_FOG_START
     GL_HILO16_NV GL_HISTOGRAM GL_INCR_WRAP GL_INT64_ARB GL_INTENSITY
     GL_KHR_debug GL_LINE_LOOP GL_LIST_BASE GL_LIST_MODE GL_LOCAL_EXT
     GL_LOG_REGAL GL_LOW_FLOAT GL_LUMINANCE GL_MAP_COLOR GL_MAX_DEPTH
     GL_MAX_WIDTH GL_MODELVIEW GL_NORMALIZE GL_PHONG_WIN GL_POINT_BIT
     GL_R16_SNORM GL_READ_ONLY GL_RED_SCALE GL_RED_SNORM GL_REGAL_log
     GL_REG_0_ATI GL_REG_1_ATI GL_REG_2_ATI GL_REG_3_ATI GL_REG_4_ATI
     GL_REG_5_ATI GL_RG8_SNORM GL_RGB10_EXT GL_RGB12_EXT GL_RGB16_EXT
     GL_RGB4_S3TC GL_RGB8I_EXT GL_RGBA2_EXT GL_RGBA4_EXT GL_RGBA8_EXT
     GL_RGBA_MODE GL_RGBA_S3TC GL_RGB_SCALE GL_RGB_SNORM GL_SCREEN_NV
     GL_SHININESS GL_SPARE0_NV GL_SPARE1_NV GL_SQUARE_NV GL_SRC_ALPHA
     GL_SRC_COLOR GL_SRC_IN_NV GL_SRGB8_EXT GL_SRGB_READ GL_TEXTURE10
     GL_TEXTURE11 GL_TEXTURE12 GL_TEXTURE13 GL_TEXTURE14 GL_TEXTURE15
     GL_TEXTURE16 GL_TEXTURE17 GL_TEXTURE18 GL_TEXTURE19 GL_TEXTURE20
     GL_TEXTURE21 GL_TEXTURE22 GL_TEXTURE23 GL_TEXTURE24 GL_TEXTURE25
     GL_TEXTURE26 GL_TEXTURE27 GL_TEXTURE28 GL_TEXTURE29 GL_TEXTURE30
     GL_TEXTURE31 GL_TIMESTAMP GL_TRIANGLES glAlphaFuncx glBeginQuery
     glBindBuffer glBlendColor glBlendFunci glBufferData glClampColor
     glClipPlanef glClipPlanex glColor3hvNV glColor4hvNV glColorMaski
     glColorP3uiv glColorP4uiv glColorTable glCopyPathNV glDeleteSync
     glEvalMapsNV glFogCoorddv glFogCoordfv glGenBuffers glGenPathsNV
     glGenQueries glGetLightxv glGetQueryiv glGetStringi glIsEnabledi
     glIsQueryARB glLineWidthx glMaterialxv glNormal3hNV glNormalP3ui
     glPointSizex glSetFenceNV glSwizzleEXT glTexImage3D glTranslatex
     glUniform1dv glUniform1fv glUniform1iv glUniform1ui glUniform2dv
     glUniform2fv glUniform2iv glUniform2ui glUniform3dv glUniform3fv
     glUniform3iv glUniform3ui glUniform4dv glUniform4fv glUniform4iv
     glUniform4ui glUseProgram glVertex2hNV glVertex3hNV glVertex4hNV
     glVertexP2ui glVertexP3ui glVertexP4ui */
  /* Offset 7 gives the best switch position.  */
  switch (name[7]) {
  case '0':
    if (memEQ(name, "GL_CON_0_ATI", 12)) {
    /*                      ^           */
#ifdef GL_CON_0_ATI
      *iv_return = GL_CON_0_ATI;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_REG_0_ATI", 12)) {
    /*                      ^           */
#ifdef GL_REG_0_ATI
      *iv_return = GL_REG_0_ATI;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_RGB10_EXT", 12)) {
    /*                      ^           */
#ifdef GL_RGB10_EXT
      *iv_return = GL_RGB10_EXT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case '1':
    if (memEQ(name, "GL_CON_1_ATI", 12)) {
    /*                      ^           */
#ifdef GL_CON_1_ATI
      *iv_return = GL_CON_1_ATI;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_HILO16_NV", 12)) {
    /*                      ^           */
#ifdef GL_HILO16_NV
      *iv_return = GL_HILO16_NV;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_REG_1_ATI", 12)) {
    /*                      ^           */
#ifdef GL_REG_1_ATI
      *iv_return = GL_REG_1_ATI;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case '2':
    if (memEQ(name, "GL_CON_2_ATI", 12)) {
    /*                      ^           */
#ifdef GL_CON_2_ATI
      *iv_return = GL_CON_2_ATI;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_REG_2_ATI", 12)) {
    /*                      ^           */
#ifdef GL_REG_2_ATI
      *iv_return = GL_REG_2_ATI;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_RGB12_EXT", 12)) {
    /*                      ^           */
#ifdef GL_RGB12_EXT
      *iv_return = GL_RGB12_EXT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_RGBA2_EXT", 12)) {
    /*                      ^           */
#ifdef GL_RGBA2_EXT
      *iv_return = GL_RGBA2_EXT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case '3':
    if (memEQ(name, "GL_CON_3_ATI", 12)) {
    /*                      ^           */
#ifdef GL_CON_3_ATI
      *iv_return = GL_CON_3_ATI;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_REG_3_ATI", 12)) {
    /*                      ^           */
#ifdef GL_REG_3_ATI
      *iv_return = GL_REG_3_ATI;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glColor3hvNV", 12)) {
    /*                      ^           */
#ifdef glColor3hvNV
      *iv_return = glColor3hvNV;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case '4':
    if (memEQ(name, "GL_CON_4_ATI", 12)) {
    /*                      ^           */
#ifdef GL_CON_4_ATI
      *iv_return = GL_CON_4_ATI;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_INT64_ARB", 12)) {
    /*                      ^           */
#ifdef GL_INT64_ARB
      *iv_return = GL_INT64_ARB;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_REG_4_ATI", 12)) {
    /*                      ^           */
#ifdef GL_REG_4_ATI
      *iv_return = GL_REG_4_ATI;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_RGBA4_EXT", 12)) {
    /*                      ^           */
#ifdef GL_RGBA4_EXT
      *iv_return = GL_RGBA4_EXT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glColor4hvNV", 12)) {
    /*                      ^           */
#ifdef glColor4hvNV
      *iv_return = glColor4hvNV;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case '5':
    if (memEQ(name, "GL_CON_5_ATI", 12)) {
    /*                      ^           */
#ifdef GL_CON_5_ATI
      *iv_return = GL_CON_5_ATI;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_REG_5_ATI", 12)) {
    /*                      ^           */
#ifdef GL_REG_5_ATI
      *iv_return = GL_REG_5_ATI;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case '6':
    if (memEQ(name, "GL_CON_6_ATI", 12)) {
    /*                      ^           */
#ifdef GL_CON_6_ATI
      *iv_return = GL_CON_6_ATI;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_RGB16_EXT", 12)) {
    /*                      ^           */
#ifdef GL_RGB16_EXT
      *iv_return = GL_RGB16_EXT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case '7':
    if (memEQ(name, "GL_CON_7_ATI", 12)) {
    /*                      ^           */
#ifdef GL_CON_7_ATI
      *iv_return = GL_CON_7_ATI;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case '8':
    if (memEQ(name, "GL_RGBA8_EXT", 12)) {
    /*                      ^           */
#ifdef GL_RGBA8_EXT
      *iv_return = GL_RGBA8_EXT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_SRGB8_EXT", 12)) {
    /*                      ^           */
#ifdef GL_SRGB8_EXT
      *iv_return = GL_SRGB8_EXT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case 'A':
    if (memEQ(name, "GL_CMYKA_EXT", 12)) {
    /*                      ^           */
#ifdef GL_CMYKA_EXT
      *iv_return = GL_CMYKA_EXT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_DST_ALPHA", 12)) {
    /*                      ^           */
#ifdef GL_DST_ALPHA
      *iv_return = GL_DST_ALPHA;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_NORMALIZE", 12)) {
    /*                      ^           */
#ifdef GL_NORMALIZE
      *iv_return = GL_NORMALIZE;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_SRC_ALPHA", 12)) {
    /*                      ^           */
#ifdef GL_SRC_ALPHA
      *iv_return = GL_SRC_ALPHA;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case 'C':
    if (memEQ(name, "GL_CUBIC_EXT", 12)) {
    /*                      ^           */
#ifdef GL_CUBIC_EXT
      *iv_return = GL_CUBIC_EXT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_DST_COLOR", 12)) {
    /*                      ^           */
#ifdef GL_DST_COLOR
      *iv_return = GL_DST_COLOR;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_FOG_COLOR", 12)) {
    /*                      ^           */
#ifdef GL_FOG_COLOR
      *iv_return = GL_FOG_COLOR;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_FOG_COORD", 12)) {
    /*                      ^           */
#ifdef GL_FOG_COORD
      *iv_return = GL_FOG_COORD;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_MAP_COLOR", 12)) {
    /*                      ^           */
#ifdef GL_MAP_COLOR
      *iv_return = GL_MAP_COLOR;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_SRC_COLOR", 12)) {
    /*                      ^           */
#ifdef GL_SRC_COLOR
      *iv_return = GL_SRC_COLOR;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glBlendColor", 12)) {
    /*                      ^           */
#ifdef glBlendColor
      *iv_return = glBlendColor;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glClampColor", 12)) {
    /*                      ^           */
#ifdef glClampColor
      *iv_return = glClampColor;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case 'D':
    if (memEQ(name, "GL_BLEND_DST", 12)) {
    /*                      ^           */
#ifdef GL_BLEND_DST
      *iv_return = GL_BLEND_DST;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_BLEND_SRC", 12)) {
    /*                      ^           */
#ifdef GL_BLEND_SRC
      *iv_return = GL_BLEND_SRC;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_FIELDS_NV", 12)) {
    /*                      ^           */
#ifdef GL_FIELDS_NV
      *iv_return = GL_FIELDS_NV;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_MAX_DEPTH", 12)) {
    /*                      ^           */
#ifdef GL_MAX_DEPTH
      *iv_return = GL_MAX_DEPTH;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case 'E':
    if (memEQ(name, "GLEWAPIENTRY", 12)) {
    /*                      ^           */
#ifdef GLEWAPIENTRY
      *iv_return = GLEWAPIENTRY;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_DARKEN_NV", 12)) {
    /*                      ^           */
#ifdef GL_DARKEN_NV
      *iv_return = GL_DARKEN_NV;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_SCREEN_NV", 12)) {
    /*                      ^           */
#ifdef GL_SCREEN_NV
      *iv_return = GL_SCREEN_NV;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_SPARE0_NV", 12)) {
    /*                      ^           */
#ifdef GL_SPARE0_NV
      *iv_return = GL_SPARE0_NV;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_SPARE1_NV", 12)) {
    /*                      ^           */
#ifdef GL_SPARE1_NV
      *iv_return = GL_SPARE1_NV;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case 'F':
    if (memEQ(name, "GL_LOW_FLOAT", 12)) {
    /*                      ^           */
#ifdef GL_LOW_FLOAT
      *iv_return = GL_LOW_FLOAT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glAlphaFuncx", 12)) {
    /*                      ^           */
#ifdef glAlphaFuncx
      *iv_return = glAlphaFuncx;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glBlendFunci", 12)) {
    /*                      ^           */
#ifdef glBlendFunci
      *iv_return = glBlendFunci;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case 'G':
    if (memEQ(name, "GL_PHONG_WIN", 12)) {
    /*                      ^           */
#ifdef GL_PHONG_WIN
      *iv_return = GL_PHONG_WIN;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case 'I':
    if (memEQ(name, "GL_DST_IN_NV", 12)) {
    /*                      ^           */
#ifdef GL_DST_IN_NV
      *iv_return = GL_DST_IN_NV;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_FOG_INDEX", 12)) {
    /*                      ^           */
#ifdef GL_FOG_INDEX
      *iv_return = GL_FOG_INDEX;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_RGB8I_EXT", 12)) {
    /*                      ^           */
#ifdef GL_RGB8I_EXT
      *iv_return = GL_RGB8I_EXT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_SHININESS", 12)) {
    /*                      ^           */
#ifdef GL_SHININESS
      *iv_return = GL_SHININESS;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_SRC_IN_NV", 12)) {
    /*                      ^           */
#ifdef GL_SRC_IN_NV
      *iv_return = GL_SRC_IN_NV;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case 'L':
    if (memEQ(name, "GL_LOCAL_EXT", 12)) {
    /*                      ^           */
#ifdef GL_LOCAL_EXT
      *iv_return = GL_LOCAL_EXT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_MODELVIEW", 12)) {
    /*                      ^           */
#ifdef GL_MODELVIEW
      *iv_return = GL_MODELVIEW;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_REGAL_log", 12)) {
    /*                      ^           */
#ifdef GL_REGAL_log
      *iv_return = GL_REGAL_log;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case 'M':
    if (memEQ(name, "glColorMaski", 12)) {
    /*                      ^           */
#ifdef glColorMaski
      *iv_return = glColorMaski;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case 'N':
    if (memEQ(name, "GL_INTENSITY", 12)) {
    /*                      ^           */
#ifdef GL_INTENSITY
      *iv_return = GL_INTENSITY;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_LUMINANCE", 12)) {
    /*                      ^           */
#ifdef GL_LUMINANCE
      *iv_return = GL_LUMINANCE;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_TRIANGLES", 12)) {
    /*                      ^           */
#ifdef GL_TRIANGLES
      *iv_return = GL_TRIANGLES;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case 'O':
    if (memEQ(name, "GL_HISTOGRAM", 12)) {
    /*                      ^           */
#ifdef GL_HISTOGRAM
      *iv_return = GL_HISTOGRAM;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case 'P':
    if (memEQ(name, "GL_EYE_PLANE", 12)) {
    /*                      ^           */
#ifdef GL_EYE_PLANE
      *iv_return = GL_EYE_PLANE;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glColorP3uiv", 12)) {
    /*                      ^           */
#ifdef glColorP3uiv
      *iv_return = glColorP3uiv;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glColorP4uiv", 12)) {
    /*                      ^           */
#ifdef glColorP4uiv
      *iv_return = glColorP4uiv;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case 'Q':
    if (memEQ(name, "glBeginQuery", 12)) {
    /*                      ^           */
#ifdef glBeginQuery
      *iv_return = glBeginQuery;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case 'R':
    if (memEQ(name, "GLEW_VERSION", 12)) {
    /*                      ^           */
#ifdef GLEW_VERSION
      *iv_return = GLEW_VERSION;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_COLOR_SUM", 12)) {
    /*                      ^           */
#ifdef GL_COLOR_SUM
      *iv_return = GL_COLOR_SUM;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_LOG_REGAL", 12)) {
    /*                      ^           */
#ifdef GL_LOG_REGAL
      *iv_return = GL_LOG_REGAL;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_SQUARE_NV", 12)) {
    /*                      ^           */
#ifdef GL_SQUARE_NV
      *iv_return = GL_SQUARE_NV;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case 'S':
    if (memEQ(name, "GL_1PASS_EXT", 12)) {
    /*                      ^           */
#ifdef GL_1PASS_EXT
      *iv_return = GL_1PASS_EXT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_FOG_START", 12)) {
    /*                      ^           */
#ifdef GL_FOG_START
      *iv_return = GL_FOG_START;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_R16_SNORM", 12)) {
    /*                      ^           */
#ifdef GL_R16_SNORM
      *iv_return = GL_R16_SNORM;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_RED_SCALE", 12)) {
    /*                      ^           */
#ifdef GL_RED_SCALE
      *iv_return = GL_RED_SCALE;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_RED_SNORM", 12)) {
    /*                      ^           */
#ifdef GL_RED_SNORM
      *iv_return = GL_RED_SNORM;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_RG8_SNORM", 12)) {
    /*                      ^           */
#ifdef GL_RG8_SNORM
      *iv_return = GL_RG8_SNORM;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_RGB_SCALE", 12)) {
    /*                      ^           */
#ifdef GL_RGB_SCALE
      *iv_return = GL_RGB_SCALE;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_RGB_SNORM", 12)) {
    /*                      ^           */
#ifdef GL_RGB_SNORM
      *iv_return = GL_RGB_SNORM;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_TIMESTAMP", 12)) {
    /*                      ^           */
#ifdef GL_TIMESTAMP
      *iv_return = GL_TIMESTAMP;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glPointSizex", 12)) {
    /*                      ^           */
#ifdef glPointSizex
      *iv_return = glPointSizex;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case 'T':
    if (memEQ(name, "GL_ARC_TO_NV", 12)) {
    /*                      ^           */
#ifdef GL_ARC_TO_NV
      *iv_return = GL_ARC_TO_NV;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_POINT_BIT", 12)) {
    /*                      ^           */
#ifdef GL_POINT_BIT
      *iv_return = GL_POINT_BIT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glColorTable", 12)) {
    /*                      ^           */
#ifdef glColorTable
      *iv_return = glColorTable;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case 'U':
    if (memEQ(name, "GL_TEXTURE10", 12)) {
    /*                      ^           */
#ifdef GL_TEXTURE10
      *iv_return = GL_TEXTURE10;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_TEXTURE11", 12)) {
    /*                      ^           */
#ifdef GL_TEXTURE11
      *iv_return = GL_TEXTURE11;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_TEXTURE12", 12)) {
    /*                      ^           */
#ifdef GL_TEXTURE12
      *iv_return = GL_TEXTURE12;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_TEXTURE13", 12)) {
    /*                      ^           */
#ifdef GL_TEXTURE13
      *iv_return = GL_TEXTURE13;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_TEXTURE14", 12)) {
    /*                      ^           */
#ifdef GL_TEXTURE14
      *iv_return = GL_TEXTURE14;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_TEXTURE15", 12)) {
    /*                      ^           */
#ifdef GL_TEXTURE15
      *iv_return = GL_TEXTURE15;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_TEXTURE16", 12)) {
    /*                      ^           */
#ifdef GL_TEXTURE16
      *iv_return = GL_TEXTURE16;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_TEXTURE17", 12)) {
    /*                      ^           */
#ifdef GL_TEXTURE17
      *iv_return = GL_TEXTURE17;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_TEXTURE18", 12)) {
    /*                      ^           */
#ifdef GL_TEXTURE18
      *iv_return = GL_TEXTURE18;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_TEXTURE19", 12)) {
    /*                      ^           */
#ifdef GL_TEXTURE19
      *iv_return = GL_TEXTURE19;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_TEXTURE20", 12)) {
    /*                      ^           */
#ifdef GL_TEXTURE20
      *iv_return = GL_TEXTURE20;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_TEXTURE21", 12)) {
    /*                      ^           */
#ifdef GL_TEXTURE21
      *iv_return = GL_TEXTURE21;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_TEXTURE22", 12)) {
    /*                      ^           */
#ifdef GL_TEXTURE22
      *iv_return = GL_TEXTURE22;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_TEXTURE23", 12)) {
    /*                      ^           */
#ifdef GL_TEXTURE23
      *iv_return = GL_TEXTURE23;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_TEXTURE24", 12)) {
    /*                      ^           */
#ifdef GL_TEXTURE24
      *iv_return = GL_TEXTURE24;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_TEXTURE25", 12)) {
    /*                      ^           */
#ifdef GL_TEXTURE25
      *iv_return = GL_TEXTURE25;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_TEXTURE26", 12)) {
    /*                      ^           */
#ifdef GL_TEXTURE26
      *iv_return = GL_TEXTURE26;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_TEXTURE27", 12)) {
    /*                      ^           */
#ifdef GL_TEXTURE27
      *iv_return = GL_TEXTURE27;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_TEXTURE28", 12)) {
    /*                      ^           */
#ifdef GL_TEXTURE28
      *iv_return = GL_TEXTURE28;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_TEXTURE29", 12)) {
    /*                      ^           */
#ifdef GL_TEXTURE29
      *iv_return = GL_TEXTURE29;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_TEXTURE30", 12)) {
    /*                      ^           */
#ifdef GL_TEXTURE30
      *iv_return = GL_TEXTURE30;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_TEXTURE31", 12)) {
    /*                      ^           */
#ifdef GL_TEXTURE31
      *iv_return = GL_TEXTURE31;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case 'W':
    if (memEQ(name, "GL_MAX_WIDTH", 12)) {
    /*                      ^           */
#ifdef GL_MAX_WIDTH
      *iv_return = GL_MAX_WIDTH;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case '_':
    if (memEQ(name, "GLEW_S3_s3tc", 12)) {
    /*                      ^           */
#ifdef GLEW_S3_s3tc
      *iv_return = GLEW_S3_s3tc;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_BACK_LEFT", 12)) {
    /*                      ^           */
#ifdef GL_BACK_LEFT
      *iv_return = GL_BACK_LEFT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_BLUE_BIAS", 12)) {
    /*                      ^           */
#ifdef GL_BLUE_BIAS
      *iv_return = GL_BLUE_BIAS;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_BLUE_BITS", 12)) {
    /*                      ^           */
#ifdef GL_BLUE_BITS
      *iv_return = GL_BLUE_BITS;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_BOOL_VEC2", 12)) {
    /*                      ^           */
#ifdef GL_BOOL_VEC2
      *iv_return = GL_BOOL_VEC2;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_BOOL_VEC3", 12)) {
    /*                      ^           */
#ifdef GL_BOOL_VEC3
      *iv_return = GL_BOOL_VEC3;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_BOOL_VEC4", 12)) {
    /*                      ^           */
#ifdef GL_BOOL_VEC4
      *iv_return = GL_BOOL_VEC4;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_CULL_FACE", 12)) {
    /*                      ^           */
#ifdef GL_CULL_FACE
      *iv_return = GL_CULL_FACE;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_DECR_WRAP", 12)) {
    /*                      ^           */
#ifdef GL_DECR_WRAP
      *iv_return = GL_DECR_WRAP;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_DONT_CARE", 12)) {
    /*                      ^           */
#ifdef GL_DONT_CARE
      *iv_return = GL_DONT_CARE;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_DOT3_RGBA", 12)) {
    /*                      ^           */
#ifdef GL_DOT3_RGBA
      *iv_return = GL_DOT3_RGBA;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_EDGE_FLAG", 12)) {
    /*                      ^           */
#ifdef GL_EDGE_FLAG
      *iv_return = GL_EDGE_FLAG;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_INCR_WRAP", 12)) {
    /*                      ^           */
#ifdef GL_INCR_WRAP
      *iv_return = GL_INCR_WRAP;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_LINE_LOOP", 12)) {
    /*                      ^           */
#ifdef GL_LINE_LOOP
      *iv_return = GL_LINE_LOOP;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_LIST_BASE", 12)) {
    /*                      ^           */
#ifdef GL_LIST_BASE
      *iv_return = GL_LIST_BASE;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_LIST_MODE", 12)) {
    /*                      ^           */
#ifdef GL_LIST_MODE
      *iv_return = GL_LIST_MODE;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_READ_ONLY", 12)) {
    /*                      ^           */
#ifdef GL_READ_ONLY
      *iv_return = GL_READ_ONLY;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_RGB4_S3TC", 12)) {
    /*                      ^           */
#ifdef GL_RGB4_S3TC
      *iv_return = GL_RGB4_S3TC;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_RGBA_MODE", 12)) {
    /*                      ^           */
#ifdef GL_RGBA_MODE
      *iv_return = GL_RGBA_MODE;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_RGBA_S3TC", 12)) {
    /*                      ^           */
#ifdef GL_RGBA_S3TC
      *iv_return = GL_RGBA_S3TC;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_SRGB_READ", 12)) {
    /*                      ^           */
#ifdef GL_SRGB_READ
      *iv_return = GL_SRGB_READ;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case 'a':
    if (memEQ(name, "glCopyPathNV", 12)) {
    /*                      ^           */
#ifdef glCopyPathNV
      *iv_return = glCopyPathNV;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glEvalMapsNV", 12)) {
    /*                      ^           */
#ifdef glEvalMapsNV
      *iv_return = glEvalMapsNV;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glTexImage3D", 12)) {
    /*                      ^           */
#ifdef glTexImage3D
      *iv_return = glTexImage3D;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case 'b':
    if (memEQ(name, "glIsEnabledi", 12)) {
    /*                      ^           */
#ifdef glIsEnabledi
      *iv_return = glIsEnabledi;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case 'c':
    if (memEQ(name, "GL_EXT_cmyka", 12)) {
    /*                      ^           */
#ifdef GL_EXT_cmyka
      *iv_return = GL_EXT_cmyka;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case 'd':
    if (memEQ(name, "GL_KHR_debug", 12)) {
    /*                      ^           */
#ifdef GL_KHR_debug
      *iv_return = GL_KHR_debug;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case 'e':
    if (memEQ(name, "glDeleteSync", 12)) {
    /*                      ^           */
#ifdef glDeleteSync
      *iv_return = glDeleteSync;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glGenQueries", 12)) {
    /*                      ^           */
#ifdef glGenQueries
      *iv_return = glGenQueries;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glGetQueryiv", 12)) {
    /*                      ^           */
#ifdef glGetQueryiv
      *iv_return = glGetQueryiv;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case 'f':
    if (memEQ(name, "glGenBuffers", 12)) {
    /*                      ^           */
#ifdef glGenBuffers
      *iv_return = glGenBuffers;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case 'g':
    if (memEQ(name, "glGetLightxv", 12)) {
    /*                      ^           */
#ifdef glGetLightxv
      *iv_return = glGetLightxv;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case 'i':
    if (memEQ(name, "glLineWidthx", 12)) {
    /*                      ^           */
#ifdef glLineWidthx
      *iv_return = glLineWidthx;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glMaterialxv", 12)) {
    /*                      ^           */
#ifdef glMaterialxv
      *iv_return = glMaterialxv;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case 'l':
    if (memEQ(name, "glClipPlanef", 12)) {
    /*                      ^           */
#ifdef glClipPlanef
      *iv_return = glClipPlanef;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glClipPlanex", 12)) {
    /*                      ^           */
#ifdef glClipPlanex
      *iv_return = glClipPlanex;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glNormal3hNV", 12)) {
    /*                      ^           */
#ifdef glNormal3hNV
      *iv_return = glNormal3hNV;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glNormalP3ui", 12)) {
    /*                      ^           */
#ifdef glNormalP3ui
      *iv_return = glNormalP3ui;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glSwizzleEXT", 12)) {
    /*                      ^           */
#ifdef glSwizzleEXT
      *iv_return = glSwizzleEXT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glTranslatex", 12)) {
    /*                      ^           */
#ifdef glTranslatex
      *iv_return = glTranslatex;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case 'n':
    if (memEQ(name, "glSetFenceNV", 12)) {
    /*                      ^           */
#ifdef glSetFenceNV
      *iv_return = glSetFenceNV;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case 'o':
    if (memEQ(name, "glFogCoorddv", 12)) {
    /*                      ^           */
#ifdef glFogCoorddv
      *iv_return = glFogCoorddv;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glFogCoordfv", 12)) {
    /*                      ^           */
#ifdef glFogCoordfv
      *iv_return = glFogCoordfv;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glUseProgram", 12)) {
    /*                      ^           */
#ifdef glUseProgram
      *iv_return = glUseProgram;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case 'r':
    if (memEQ(name, "glBufferData", 12)) {
    /*                      ^           */
#ifdef glBufferData
      *iv_return = glBufferData;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glGetStringi", 12)) {
    /*                      ^           */
#ifdef glGetStringi
      *iv_return = glGetStringi;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glIsQueryARB", 12)) {
    /*                      ^           */
#ifdef glIsQueryARB
      *iv_return = glIsQueryARB;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glUniform1dv", 12)) {
    /*                      ^           */
#ifdef glUniform1dv
      *iv_return = glUniform1dv;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glUniform1fv", 12)) {
    /*                      ^           */
#ifdef glUniform1fv
      *iv_return = glUniform1fv;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glUniform1iv", 12)) {
    /*                      ^           */
#ifdef glUniform1iv
      *iv_return = glUniform1iv;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glUniform1ui", 12)) {
    /*                      ^           */
#ifdef glUniform1ui
      *iv_return = glUniform1ui;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glUniform2dv", 12)) {
    /*                      ^           */
#ifdef glUniform2dv
      *iv_return = glUniform2dv;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glUniform2fv", 12)) {
    /*                      ^           */
#ifdef glUniform2fv
      *iv_return = glUniform2fv;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glUniform2iv", 12)) {
    /*                      ^           */
#ifdef glUniform2iv
      *iv_return = glUniform2iv;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glUniform2ui", 12)) {
    /*                      ^           */
#ifdef glUniform2ui
      *iv_return = glUniform2ui;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glUniform3dv", 12)) {
    /*                      ^           */
#ifdef glUniform3dv
      *iv_return = glUniform3dv;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glUniform3fv", 12)) {
    /*                      ^           */
#ifdef glUniform3fv
      *iv_return = glUniform3fv;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glUniform3iv", 12)) {
    /*                      ^           */
#ifdef glUniform3iv
      *iv_return = glUniform3iv;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glUniform3ui", 12)) {
    /*                      ^           */
#ifdef glUniform3ui
      *iv_return = glUniform3ui;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glUniform4dv", 12)) {
    /*                      ^           */
#ifdef glUniform4dv
      *iv_return = glUniform4dv;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glUniform4fv", 12)) {
    /*                      ^           */
#ifdef glUniform4fv
      *iv_return = glUniform4fv;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glUniform4iv", 12)) {
    /*                      ^           */
#ifdef glUniform4iv
      *iv_return = glUniform4iv;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glUniform4ui", 12)) {
    /*                      ^           */
#ifdef glUniform4ui
      *iv_return = glUniform4ui;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case 't':
    if (memEQ(name, "glGenPathsNV", 12)) {
    /*                      ^           */
#ifdef glGenPathsNV
      *iv_return = glGenPathsNV;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case 'u':
    if (memEQ(name, "glBindBuffer", 12)) {
    /*                      ^           */
#ifdef glBindBuffer
      *iv_return = glBindBuffer;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case 'x':
    if (memEQ(name, "glVertex2hNV", 12)) {
    /*                      ^           */
#ifdef glVertex2hNV
      *iv_return = glVertex2hNV;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glVertex3hNV", 12)) {
    /*                      ^           */
#ifdef glVertex3hNV
      *iv_return = glVertex3hNV;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glVertex4hNV", 12)) {
    /*                      ^           */
#ifdef glVertex4hNV
      *iv_return = glVertex4hNV;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glVertexP2ui", 12)) {
    /*                      ^           */
#ifdef glVertexP2ui
      *iv_return = glVertexP2ui;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glVertexP3ui", 12)) {
    /*                      ^           */
#ifdef glVertexP3ui
      *iv_return = glVertexP3ui;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glVertexP4ui", 12)) {
    /*                      ^           */
#ifdef glVertexP4ui
      *iv_return = glVertexP4ui;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  }
  return PERL_constant_NOTFOUND;
}

static int
constant_13 (pTHX_ const char *name, IV *iv_return) {
  /* When generated this function returned values for the list of names given
     here.  However, subsequent manual editing may have added or removed some.
     GLEW_ARB_sync GLEW_EXT_abgr GLEW_EXT_bgra GLEW_NO_ERROR GLEW_NV_fence
     GL_1PASS_SGIS GL_2X_BIT_ATI GL_4X_BIT_ATI GL_8X_BIT_ATI GL_ADD_SIGNED
     GL_ALPHA4_EXT GL_ALPHA8_EXT GL_ALPHA_BIAS GL_ALPHA_BITS GL_ALPHA_TEST
     GL_ARB_shadow GL_ARRAY_SIZE GL_BACK_RIGHT GL_BLUE_SCALE GL_CODE_REGAL
     GL_DARKEN_KHR GL_DECODE_EXT GL_DEPTH_BIAS GL_DEPTH_BITS GL_DEPTH_FUNC
     GL_DEPTH_TEST GL_DISCARD_NV GL_DOUBLE_EXT GL_DST_OUT_NV GL_DS_BIAS_NV
     GL_DT_BIAS_NV GL_DU8DV8_ATI GL_ENABLE_BIT GL_EVAL_2D_NV GL_EXTENSIONS
     GL_EYE_LINEAR GL_FAILURE_NV GL_FIXED_ONLY GL_FLOAT16_NV GL_FLOAT_MAT2
     GL_FLOAT_MAT3 GL_FLOAT_MAT4 GL_FLOAT_R_NV GL_FLOAT_VEC2 GL_FLOAT_VEC3
     GL_FLOAT_VEC4 GL_FRONT_FACE GL_FRONT_LEFT GL_GREEN_BIAS GL_GREEN_BITS
     GL_HALF_APPLE GL_HALF_FLOAT GL_HARDMIX_NV GL_HIGH_FLOAT GL_HI_BIAS_NV
     GL_HSL_HUE_NV GL_IMAGE_CUBE GL_INDEX_BITS GL_INDEX_MODE GL_INTENSITY4
     GL_INTENSITY8 GL_INVERSE_NV GL_LIGHTEN_NV GL_LINE_STRIP GL_LINE_TOKEN
     GL_LINE_TO_NV GL_LINE_WIDTH GL_LIST_INDEX GL_LOWER_LEFT GL_LO_BIAS_NV
     GL_LUMINANCE4 GL_LUMINANCE8 GL_MAP1_INDEX GL_MAP2_INDEX GL_MATRIX0_NV
     GL_MATRIX1_NV GL_MATRIX2_NV GL_MATRIX3_NV GL_MATRIX4_NV GL_MATRIX5_NV
     GL_MATRIX6_NV GL_MATRIX7_NV GL_MATRIX_EXT GL_MAX_HEIGHT GL_MAX_LAYERS
     GL_MAX_LIGHTS GL_MEDIUM_INT GL_MINMAX_EXT GL_MOVE_TO_NV GL_NORMAL_MAP
     GL_OP_ADD_EXT GL_OP_MAX_EXT GL_OP_MIN_EXT GL_OP_MOV_EXT GL_OP_MUL_EXT
     GL_OP_SUB_EXT GL_OR_REVERSE GL_OVERLAY_NV GL_POINT_SIZE GL_PROJECTION
     GL_QUAD_STRIP GL_QUERY_WAIT GL_READ_WRITE GL_REDUCE_EXT GL_RG16_SNORM
     GL_RGB10_A2UI GL_RGB16F_ARB GL_RGB16I_EXT GL_RGB32F_ARB GL_RGB32I_EXT
     GL_RGB8UI_EXT GL_RGB8_SNORM GL_RGBA12_EXT GL_RGBA16_EXT GL_RGBA4_S3TC
     GL_RGBA8I_EXT GL_RGBA_SNORM GL_RG_INTEGER GL_SAMPLER_1D GL_SAMPLER_2D
     GL_SAMPLER_3D GL_SCALAR_EXT GL_SCREEN_KHR GL_SGIX_async GL_SGIX_ycrcb
     GL_SLUMINANCE GL_SPHERE_MAP GL_SRC0_ALPHA GL_SRC1_ALPHA GL_SRC1_COLOR
     GL_SRC2_ALPHA GL_SRC_OUT_NV GL_SRGB_ALPHA GL_SRGB_WRITE GL_STATIC_ATI
     GL_SUCCESS_NV GL_SUN_vertex GL_SYNC_FENCE GL_SYNC_FLAGS GL_TEXTURE_1D
     GL_TEXTURE_2D GL_TEXTURE_3D GL_UNSIGNALED GL_UPPER_LEFT GL_VECTOR_EXT
     GL_WRITE_ONLY GL_YCBCR_MESA glBindSampler glClearColorx glClearDepthf
     glClearDepthx glClipControl glDepthRangef glDepthRangex glDrawBuffers
     glEndQueryARB glEndSceneEXT glFogCoordhNV glFogFuncSGIS glFrustumfOES
     glGenFencesNV glGenNamesAMD glGenSamplers glGetFloati_v glGetShaderiv
     glGetTexEnvxv glIsBufferARB glIsProgramNV glLightModelx glLinkProgram
     glLoadMatrixx glMultMatrixx glNormal3hvNV glNormalP3uiv glObjectLabel
     glReadnPixels glResetMinmax glSampleMaski glTestFenceNV glTextureView
     glUniform1uiv glUniform2uiv glUniform3uiv glUniform4uiv glUnmapBuffer
     glVDPAUFiniNV glVDPAUInitNV glVertex2hvNV glVertex3hvNV glVertex4hvNV
     glVertexP2uiv glVertexP3uiv glVertexP4uiv glWeightbvARB glWeightdvARB
     glWeightfvARB glWeightivARB glWeightsvARB glWindowPos2d glWindowPos2f
     glWindowPos2i glWindowPos2s glWindowPos3d glWindowPos3f glWindowPos3i
     glWindowPos3s */
  /* Offset 9 gives the best switch position.  */
  switch (name[9]) {
  case '0':
    if (memEQ(name, "GL_MATRIX0_NV", 13)) {
    /*                        ^          */
#ifdef GL_MATRIX0_NV
      *iv_return = GL_MATRIX0_NV;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case '1':
    if (memEQ(name, "GL_MATRIX1_NV", 13)) {
    /*                        ^          */
#ifdef GL_MATRIX1_NV
      *iv_return = GL_MATRIX1_NV;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glUniform1uiv", 13)) {
    /*                        ^          */
#ifdef glUniform1uiv
      *iv_return = glUniform1uiv;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case '2':
    if (memEQ(name, "GL_MATRIX2_NV", 13)) {
    /*                        ^          */
#ifdef GL_MATRIX2_NV
      *iv_return = GL_MATRIX2_NV;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glUniform2uiv", 13)) {
    /*                        ^          */
#ifdef glUniform2uiv
      *iv_return = glUniform2uiv;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glVertexP2uiv", 13)) {
    /*                        ^          */
#ifdef glVertexP2uiv
      *iv_return = glVertexP2uiv;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case '3':
    if (memEQ(name, "GL_MATRIX3_NV", 13)) {
    /*                        ^          */
#ifdef GL_MATRIX3_NV
      *iv_return = GL_MATRIX3_NV;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glNormalP3uiv", 13)) {
    /*                        ^          */
#ifdef glNormalP3uiv
      *iv_return = glNormalP3uiv;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glUniform3uiv", 13)) {
    /*                        ^          */
#ifdef glUniform3uiv
      *iv_return = glUniform3uiv;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glVertexP3uiv", 13)) {
    /*                        ^          */
#ifdef glVertexP3uiv
      *iv_return = glVertexP3uiv;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case '4':
    if (memEQ(name, "GL_MATRIX4_NV", 13)) {
    /*                        ^          */
#ifdef GL_MATRIX4_NV
      *iv_return = GL_MATRIX4_NV;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glUniform4uiv", 13)) {
    /*                        ^          */
#ifdef glUniform4uiv
      *iv_return = glUniform4uiv;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glVertexP4uiv", 13)) {
    /*                        ^          */
#ifdef glVertexP4uiv
      *iv_return = glVertexP4uiv;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case '5':
    if (memEQ(name, "GL_MATRIX5_NV", 13)) {
    /*                        ^          */
#ifdef GL_MATRIX5_NV
      *iv_return = GL_MATRIX5_NV;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case '6':
    if (memEQ(name, "GL_FLOAT16_NV", 13)) {
    /*                        ^          */
#ifdef GL_FLOAT16_NV
      *iv_return = GL_FLOAT16_NV;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_MATRIX6_NV", 13)) {
    /*                        ^          */
#ifdef GL_MATRIX6_NV
      *iv_return = GL_MATRIX6_NV;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case '7':
    if (memEQ(name, "GL_MATRIX7_NV", 13)) {
    /*                        ^          */
#ifdef GL_MATRIX7_NV
      *iv_return = GL_MATRIX7_NV;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case 'A':
    if (memEQ(name, "GL_RGB10_A2UI", 13)) {
    /*                        ^          */
#ifdef GL_RGB10_A2UI
      *iv_return = GL_RGB10_A2UI;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_SLUMINANCE", 13)) {
    /*                        ^          */
#ifdef GL_SLUMINANCE
      *iv_return = GL_SLUMINANCE;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_UNSIGNALED", 13)) {
    /*                        ^          */
#ifdef GL_UNSIGNALED
      *iv_return = GL_UNSIGNALED;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case 'B':
    if (memEQ(name, "GL_ALPHA_BIAS", 13)) {
    /*                        ^          */
#ifdef GL_ALPHA_BIAS
      *iv_return = GL_ALPHA_BIAS;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_ALPHA_BITS", 13)) {
    /*                        ^          */
#ifdef GL_ALPHA_BITS
      *iv_return = GL_ALPHA_BITS;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_DEPTH_BIAS", 13)) {
    /*                        ^          */
#ifdef GL_DEPTH_BIAS
      *iv_return = GL_DEPTH_BIAS;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_DEPTH_BITS", 13)) {
    /*                        ^          */
#ifdef GL_DEPTH_BITS
      *iv_return = GL_DEPTH_BITS;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_GREEN_BIAS", 13)) {
    /*                        ^          */
#ifdef GL_GREEN_BIAS
      *iv_return = GL_GREEN_BIAS;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_GREEN_BITS", 13)) {
    /*                        ^          */
#ifdef GL_GREEN_BITS
      *iv_return = GL_GREEN_BITS;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_INDEX_BITS", 13)) {
    /*                        ^          */
#ifdef GL_INDEX_BITS
      *iv_return = GL_INDEX_BITS;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case 'C':
    if (memEQ(name, "GL_BLUE_SCALE", 13)) {
    /*                        ^          */
#ifdef GL_BLUE_SCALE
      *iv_return = GL_BLUE_SCALE;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_IMAGE_CUBE", 13)) {
    /*                        ^          */
#ifdef GL_IMAGE_CUBE
      *iv_return = GL_IMAGE_CUBE;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case 'D':
    if (memEQ(name, "GL_DISCARD_NV", 13)) {
    /*                        ^          */
#ifdef GL_DISCARD_NV
      *iv_return = GL_DISCARD_NV;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_EVAL_2D_NV", 13)) {
    /*                        ^          */
#ifdef GL_EVAL_2D_NV
      *iv_return = GL_EVAL_2D_NV;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case 'E':
    if (memEQ(name, "GL_CODE_REGAL", 13)) {
    /*                        ^          */
#ifdef GL_CODE_REGAL
      *iv_return = GL_CODE_REGAL;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_FAILURE_NV", 13)) {
    /*                        ^          */
#ifdef GL_FAILURE_NV
      *iv_return = GL_FAILURE_NV;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_HSL_HUE_NV", 13)) {
    /*                        ^          */
#ifdef GL_HSL_HUE_NV
      *iv_return = GL_HSL_HUE_NV;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_INVERSE_NV", 13)) {
    /*                        ^          */
#ifdef GL_INVERSE_NV
      *iv_return = GL_INVERSE_NV;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_OR_REVERSE", 13)) {
    /*                        ^          */
#ifdef GL_OR_REVERSE
      *iv_return = GL_OR_REVERSE;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_RG_INTEGER", 13)) {
    /*                        ^          */
#ifdef GL_RG_INTEGER
      *iv_return = GL_RG_INTEGER;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_SYNC_FENCE", 13)) {
    /*                        ^          */
#ifdef GL_SYNC_FENCE
      *iv_return = GL_SYNC_FENCE;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_TEXTURE_1D", 13)) {
    /*                        ^          */
#ifdef GL_TEXTURE_1D
      *iv_return = GL_TEXTURE_1D;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_TEXTURE_2D", 13)) {
    /*                        ^          */
#ifdef GL_TEXTURE_2D
      *iv_return = GL_TEXTURE_2D;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_TEXTURE_3D", 13)) {
    /*                        ^          */
#ifdef GL_TEXTURE_3D
      *iv_return = GL_TEXTURE_3D;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case 'F':
    if (memEQ(name, "GL_DEPTH_FUNC", 13)) {
    /*                        ^          */
#ifdef GL_DEPTH_FUNC
      *iv_return = GL_DEPTH_FUNC;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_FRONT_FACE", 13)) {
    /*                        ^          */
#ifdef GL_FRONT_FACE
      *iv_return = GL_FRONT_FACE;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case 'G':
    if (memEQ(name, "GL_ADD_SIGNED", 13)) {
    /*                        ^          */
#ifdef GL_ADD_SIGNED
      *iv_return = GL_ADD_SIGNED;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_MAX_LIGHTS", 13)) {
    /*                        ^          */
#ifdef GL_MAX_LIGHTS
      *iv_return = GL_MAX_LIGHTS;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case 'I':
    if (memEQ(name, "GL_BACK_RIGHT", 13)) {
    /*                        ^          */
#ifdef GL_BACK_RIGHT
      *iv_return = GL_BACK_RIGHT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_EXTENSIONS", 13)) {
    /*                        ^          */
#ifdef GL_EXTENSIONS
      *iv_return = GL_EXTENSIONS;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_INTENSITY4", 13)) {
    /*                        ^          */
#ifdef GL_INTENSITY4
      *iv_return = GL_INTENSITY4;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_INTENSITY8", 13)) {
    /*                        ^          */
#ifdef GL_INTENSITY8
      *iv_return = GL_INTENSITY8;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_LINE_WIDTH", 13)) {
    /*                        ^          */
#ifdef GL_LINE_WIDTH
      *iv_return = GL_LINE_WIDTH;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_MAX_HEIGHT", 13)) {
    /*                        ^          */
#ifdef GL_MAX_HEIGHT
      *iv_return = GL_MAX_HEIGHT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case 'L':
    if (memEQ(name, "GL_FRONT_LEFT", 13)) {
    /*                        ^          */
#ifdef GL_FRONT_LEFT
      *iv_return = GL_FRONT_LEFT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_HALF_FLOAT", 13)) {
    /*                        ^          */
#ifdef GL_HALF_FLOAT
      *iv_return = GL_HALF_FLOAT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_HIGH_FLOAT", 13)) {
    /*                        ^          */
#ifdef GL_HIGH_FLOAT
      *iv_return = GL_HIGH_FLOAT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_LOWER_LEFT", 13)) {
    /*                        ^          */
#ifdef GL_LOWER_LEFT
      *iv_return = GL_LOWER_LEFT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_SRC0_ALPHA", 13)) {
    /*                        ^          */
#ifdef GL_SRC0_ALPHA
      *iv_return = GL_SRC0_ALPHA;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_SRC1_ALPHA", 13)) {
    /*                        ^          */
#ifdef GL_SRC1_ALPHA
      *iv_return = GL_SRC1_ALPHA;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_SRC2_ALPHA", 13)) {
    /*                        ^          */
#ifdef GL_SRC2_ALPHA
      *iv_return = GL_SRC2_ALPHA;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_SRGB_ALPHA", 13)) {
    /*                        ^          */
#ifdef GL_SRGB_ALPHA
      *iv_return = GL_SRGB_ALPHA;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_SYNC_FLAGS", 13)) {
    /*                        ^          */
#ifdef GL_SYNC_FLAGS
      *iv_return = GL_SYNC_FLAGS;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_UPPER_LEFT", 13)) {
    /*                        ^          */
#ifdef GL_UPPER_LEFT
      *iv_return = GL_UPPER_LEFT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case 'M':
    if (memEQ(name, "GL_FLOAT_MAT2", 13)) {
    /*                        ^          */
#ifdef GL_FLOAT_MAT2
      *iv_return = GL_FLOAT_MAT2;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_FLOAT_MAT3", 13)) {
    /*                        ^          */
#ifdef GL_FLOAT_MAT3
      *iv_return = GL_FLOAT_MAT3;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_FLOAT_MAT4", 13)) {
    /*                        ^          */
#ifdef GL_FLOAT_MAT4
      *iv_return = GL_FLOAT_MAT4;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_INDEX_MODE", 13)) {
    /*                        ^          */
#ifdef GL_INDEX_MODE
      *iv_return = GL_INDEX_MODE;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_YCBCR_MESA", 13)) {
    /*                        ^          */
#ifdef GL_YCBCR_MESA
      *iv_return = GL_YCBCR_MESA;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case 'N':
    if (memEQ(name, "GL_EYE_LINEAR", 13)) {
    /*                        ^          */
#ifdef GL_EYE_LINEAR
      *iv_return = GL_EYE_LINEAR;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_LIGHTEN_NV", 13)) {
    /*                        ^          */
#ifdef GL_LIGHTEN_NV
      *iv_return = GL_LIGHTEN_NV;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_LIST_INDEX", 13)) {
    /*                        ^          */
#ifdef GL_LIST_INDEX
      *iv_return = GL_LIST_INDEX;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_LUMINANCE4", 13)) {
    /*                        ^          */
#ifdef GL_LUMINANCE4
      *iv_return = GL_LUMINANCE4;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_LUMINANCE8", 13)) {
    /*                        ^          */
#ifdef GL_LUMINANCE8
      *iv_return = GL_LUMINANCE8;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_MAP1_INDEX", 13)) {
    /*                        ^          */
#ifdef GL_MAP1_INDEX
      *iv_return = GL_MAP1_INDEX;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_MAP2_INDEX", 13)) {
    /*                        ^          */
#ifdef GL_MAP2_INDEX
      *iv_return = GL_MAP2_INDEX;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_RG16_SNORM", 13)) {
    /*                        ^          */
#ifdef GL_RG16_SNORM
      *iv_return = GL_RG16_SNORM;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_RGB8_SNORM", 13)) {
    /*                        ^          */
#ifdef GL_RGB8_SNORM
      *iv_return = GL_RGB8_SNORM;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_RGBA_SNORM", 13)) {
    /*                        ^          */
#ifdef GL_RGBA_SNORM
      *iv_return = GL_RGBA_SNORM;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case 'O':
    if (memEQ(name, "GL_FIXED_ONLY", 13)) {
    /*                        ^          */
#ifdef GL_FIXED_ONLY
      *iv_return = GL_FIXED_ONLY;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_LINE_TOKEN", 13)) {
    /*                        ^          */
#ifdef GL_LINE_TOKEN
      *iv_return = GL_LINE_TOKEN;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_LINE_TO_NV", 13)) {
    /*                        ^          */
#ifdef GL_LINE_TO_NV
      *iv_return = GL_LINE_TO_NV;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_MOVE_TO_NV", 13)) {
    /*                        ^          */
#ifdef GL_MOVE_TO_NV
      *iv_return = GL_MOVE_TO_NV;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_SRC1_COLOR", 13)) {
    /*                        ^          */
#ifdef GL_SRC1_COLOR
      *iv_return = GL_SRC1_COLOR;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_WRITE_ONLY", 13)) {
    /*                        ^          */
#ifdef GL_WRITE_ONLY
      *iv_return = GL_WRITE_ONLY;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case 'P':
    if (memEQ(name, "GL_HALF_APPLE", 13)) {
    /*                        ^          */
#ifdef GL_HALF_APPLE
      *iv_return = GL_HALF_APPLE;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case 'R':
    if (memEQ(name, "GLEW_NO_ERROR", 13)) {
    /*                        ^          */
#ifdef GLEW_NO_ERROR
      *iv_return = GLEW_NO_ERROR;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_FLOAT_R_NV", 13)) {
    /*                        ^          */
#ifdef GL_FLOAT_R_NV
      *iv_return = GL_FLOAT_R_NV;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_READ_WRITE", 13)) {
    /*                        ^          */
#ifdef GL_READ_WRITE
      *iv_return = GL_READ_WRITE;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_SAMPLER_1D", 13)) {
    /*                        ^          */
#ifdef GL_SAMPLER_1D
      *iv_return = GL_SAMPLER_1D;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_SAMPLER_2D", 13)) {
    /*                        ^          */
#ifdef GL_SAMPLER_2D
      *iv_return = GL_SAMPLER_2D;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_SAMPLER_3D", 13)) {
    /*                        ^          */
#ifdef GL_SAMPLER_3D
      *iv_return = GL_SAMPLER_3D;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_SRGB_WRITE", 13)) {
    /*                        ^          */
#ifdef GL_SRGB_WRITE
      *iv_return = GL_SRGB_WRITE;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case 'S':
    if (memEQ(name, "GL_1PASS_SGIS", 13)) {
    /*                        ^          */
#ifdef GL_1PASS_SGIS
      *iv_return = GL_1PASS_SGIS;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_ARRAY_SIZE", 13)) {
    /*                        ^          */
#ifdef GL_ARRAY_SIZE
      *iv_return = GL_ARRAY_SIZE;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_DS_BIAS_NV", 13)) {
    /*                        ^          */
#ifdef GL_DS_BIAS_NV
      *iv_return = GL_DS_BIAS_NV;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_DT_BIAS_NV", 13)) {
    /*                        ^          */
#ifdef GL_DT_BIAS_NV
      *iv_return = GL_DT_BIAS_NV;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_HI_BIAS_NV", 13)) {
    /*                        ^          */
#ifdef GL_HI_BIAS_NV
      *iv_return = GL_HI_BIAS_NV;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_LO_BIAS_NV", 13)) {
    /*                        ^          */
#ifdef GL_LO_BIAS_NV
      *iv_return = GL_LO_BIAS_NV;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_POINT_SIZE", 13)) {
    /*                        ^          */
#ifdef GL_POINT_SIZE
      *iv_return = GL_POINT_SIZE;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_RGBA4_S3TC", 13)) {
    /*                        ^          */
#ifdef GL_RGBA4_S3TC
      *iv_return = GL_RGBA4_S3TC;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_SUCCESS_NV", 13)) {
    /*                        ^          */
#ifdef GL_SUCCESS_NV
      *iv_return = GL_SUCCESS_NV;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glFogFuncSGIS", 13)) {
    /*                        ^          */
#ifdef glFogFuncSGIS
      *iv_return = glFogFuncSGIS;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case 'T':
    if (memEQ(name, "GL_ALPHA_TEST", 13)) {
    /*                        ^          */
#ifdef GL_ALPHA_TEST
      *iv_return = GL_ALPHA_TEST;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_DEPTH_TEST", 13)) {
    /*                        ^          */
#ifdef GL_DEPTH_TEST
      *iv_return = GL_DEPTH_TEST;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_DST_OUT_NV", 13)) {
    /*                        ^          */
#ifdef GL_DST_OUT_NV
      *iv_return = GL_DST_OUT_NV;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_LINE_STRIP", 13)) {
    /*                        ^          */
#ifdef GL_LINE_STRIP
      *iv_return = GL_LINE_STRIP;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_PROJECTION", 13)) {
    /*                        ^          */
#ifdef GL_PROJECTION
      *iv_return = GL_PROJECTION;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_QUAD_STRIP", 13)) {
    /*                        ^          */
#ifdef GL_QUAD_STRIP
      *iv_return = GL_QUAD_STRIP;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_SRC_OUT_NV", 13)) {
    /*                        ^          */
#ifdef GL_SRC_OUT_NV
      *iv_return = GL_SRC_OUT_NV;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case 'V':
    if (memEQ(name, "GL_FLOAT_VEC2", 13)) {
    /*                        ^          */
#ifdef GL_FLOAT_VEC2
      *iv_return = GL_FLOAT_VEC2;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_FLOAT_VEC3", 13)) {
    /*                        ^          */
#ifdef GL_FLOAT_VEC3
      *iv_return = GL_FLOAT_VEC3;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_FLOAT_VEC4", 13)) {
    /*                        ^          */
#ifdef GL_FLOAT_VEC4
      *iv_return = GL_FLOAT_VEC4;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glTextureView", 13)) {
    /*                        ^          */
#ifdef glTextureView
      *iv_return = glTextureView;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case 'W':
    if (memEQ(name, "GL_QUERY_WAIT", 13)) {
    /*                        ^          */
#ifdef GL_QUERY_WAIT
      *iv_return = GL_QUERY_WAIT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case 'X':
    if (memEQ(name, "GL_HARDMIX_NV", 13)) {
    /*                        ^          */
#ifdef GL_HARDMIX_NV
      *iv_return = GL_HARDMIX_NV;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case 'Y':
    if (memEQ(name, "GL_MAX_LAYERS", 13)) {
    /*                        ^          */
#ifdef GL_MAX_LAYERS
      *iv_return = GL_MAX_LAYERS;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_OVERLAY_NV", 13)) {
    /*                        ^          */
#ifdef GL_OVERLAY_NV
      *iv_return = GL_OVERLAY_NV;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case '_':
    if (memEQ(name, "GL_2X_BIT_ATI", 13)) {
    /*                        ^          */
#ifdef GL_2X_BIT_ATI
      *iv_return = GL_2X_BIT_ATI;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_4X_BIT_ATI", 13)) {
    /*                        ^          */
#ifdef GL_4X_BIT_ATI
      *iv_return = GL_4X_BIT_ATI;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_8X_BIT_ATI", 13)) {
    /*                        ^          */
#ifdef GL_8X_BIT_ATI
      *iv_return = GL_8X_BIT_ATI;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_ALPHA4_EXT", 13)) {
    /*                        ^          */
#ifdef GL_ALPHA4_EXT
      *iv_return = GL_ALPHA4_EXT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_ALPHA8_EXT", 13)) {
    /*                        ^          */
#ifdef GL_ALPHA8_EXT
      *iv_return = GL_ALPHA8_EXT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_DARKEN_KHR", 13)) {
    /*                        ^          */
#ifdef GL_DARKEN_KHR
      *iv_return = GL_DARKEN_KHR;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_DECODE_EXT", 13)) {
    /*                        ^          */
#ifdef GL_DECODE_EXT
      *iv_return = GL_DECODE_EXT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_DOUBLE_EXT", 13)) {
    /*                        ^          */
#ifdef GL_DOUBLE_EXT
      *iv_return = GL_DOUBLE_EXT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_DU8DV8_ATI", 13)) {
    /*                        ^          */
#ifdef GL_DU8DV8_ATI
      *iv_return = GL_DU8DV8_ATI;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_ENABLE_BIT", 13)) {
    /*                        ^          */
#ifdef GL_ENABLE_BIT
      *iv_return = GL_ENABLE_BIT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_MATRIX_EXT", 13)) {
    /*                        ^          */
#ifdef GL_MATRIX_EXT
      *iv_return = GL_MATRIX_EXT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_MEDIUM_INT", 13)) {
    /*                        ^          */
#ifdef GL_MEDIUM_INT
      *iv_return = GL_MEDIUM_INT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_MINMAX_EXT", 13)) {
    /*                        ^          */
#ifdef GL_MINMAX_EXT
      *iv_return = GL_MINMAX_EXT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_NORMAL_MAP", 13)) {
    /*                        ^          */
#ifdef GL_NORMAL_MAP
      *iv_return = GL_NORMAL_MAP;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_OP_ADD_EXT", 13)) {
    /*                        ^          */
#ifdef GL_OP_ADD_EXT
      *iv_return = GL_OP_ADD_EXT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_OP_MAX_EXT", 13)) {
    /*                        ^          */
#ifdef GL_OP_MAX_EXT
      *iv_return = GL_OP_MAX_EXT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_OP_MIN_EXT", 13)) {
    /*                        ^          */
#ifdef GL_OP_MIN_EXT
      *iv_return = GL_OP_MIN_EXT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_OP_MOV_EXT", 13)) {
    /*                        ^          */
#ifdef GL_OP_MOV_EXT
      *iv_return = GL_OP_MOV_EXT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_OP_MUL_EXT", 13)) {
    /*                        ^          */
#ifdef GL_OP_MUL_EXT
      *iv_return = GL_OP_MUL_EXT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_OP_SUB_EXT", 13)) {
    /*                        ^          */
#ifdef GL_OP_SUB_EXT
      *iv_return = GL_OP_SUB_EXT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_REDUCE_EXT", 13)) {
    /*                        ^          */
#ifdef GL_REDUCE_EXT
      *iv_return = GL_REDUCE_EXT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_RGB16F_ARB", 13)) {
    /*                        ^          */
#ifdef GL_RGB16F_ARB
      *iv_return = GL_RGB16F_ARB;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_RGB16I_EXT", 13)) {
    /*                        ^          */
#ifdef GL_RGB16I_EXT
      *iv_return = GL_RGB16I_EXT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_RGB32F_ARB", 13)) {
    /*                        ^          */
#ifdef GL_RGB32F_ARB
      *iv_return = GL_RGB32F_ARB;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_RGB32I_EXT", 13)) {
    /*                        ^          */
#ifdef GL_RGB32I_EXT
      *iv_return = GL_RGB32I_EXT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_RGB8UI_EXT", 13)) {
    /*                        ^          */
#ifdef GL_RGB8UI_EXT
      *iv_return = GL_RGB8UI_EXT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_RGBA12_EXT", 13)) {
    /*                        ^          */
#ifdef GL_RGBA12_EXT
      *iv_return = GL_RGBA12_EXT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_RGBA16_EXT", 13)) {
    /*                        ^          */
#ifdef GL_RGBA16_EXT
      *iv_return = GL_RGBA16_EXT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_RGBA8I_EXT", 13)) {
    /*                        ^          */
#ifdef GL_RGBA8I_EXT
      *iv_return = GL_RGBA8I_EXT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_SCALAR_EXT", 13)) {
    /*                        ^          */
#ifdef GL_SCALAR_EXT
      *iv_return = GL_SCALAR_EXT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_SCREEN_KHR", 13)) {
    /*                        ^          */
#ifdef GL_SCREEN_KHR
      *iv_return = GL_SCREEN_KHR;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_SPHERE_MAP", 13)) {
    /*                        ^          */
#ifdef GL_SPHERE_MAP
      *iv_return = GL_SPHERE_MAP;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_STATIC_ATI", 13)) {
    /*                        ^          */
#ifdef GL_STATIC_ATI
      *iv_return = GL_STATIC_ATI;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_VECTOR_EXT", 13)) {
    /*                        ^          */
#ifdef GL_VECTOR_EXT
      *iv_return = GL_VECTOR_EXT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case 'a':
    if (memEQ(name, "GLEW_EXT_abgr", 13)) {
    /*                        ^          */
#ifdef GLEW_EXT_abgr
      *iv_return = GLEW_EXT_abgr;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_ARB_shadow", 13)) {
    /*                        ^          */
#ifdef GL_ARB_shadow
      *iv_return = GL_ARB_shadow;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glIsProgramNV", 13)) {
    /*                        ^          */
#ifdef glIsProgramNV
      *iv_return = glIsProgramNV;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glObjectLabel", 13)) {
    /*                        ^          */
#ifdef glObjectLabel
      *iv_return = glObjectLabel;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glSampleMaski", 13)) {
    /*                        ^          */
#ifdef glSampleMaski
      *iv_return = glSampleMaski;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case 'b':
    if (memEQ(name, "GLEW_EXT_bgra", 13)) {
    /*                        ^          */
#ifdef GLEW_EXT_bgra
      *iv_return = GLEW_EXT_bgra;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case 'c':
    if (memEQ(name, "GL_SGIX_ycrcb", 13)) {
    /*                        ^          */
#ifdef GL_SGIX_ycrcb
      *iv_return = GL_SGIX_ycrcb;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glTestFenceNV", 13)) {
    /*                        ^          */
#ifdef glTestFenceNV
      *iv_return = glTestFenceNV;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case 'd':
    if (memEQ(name, "glFogCoordhNV", 13)) {
    /*                        ^          */
#ifdef glFogCoordhNV
      *iv_return = glFogCoordhNV;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glLightModelx", 13)) {
    /*                        ^          */
#ifdef glLightModelx
      *iv_return = glLightModelx;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case 'e':
    if (memEQ(name, "GLEW_NV_fence", 13)) {
    /*                        ^          */
#ifdef GLEW_NV_fence
      *iv_return = GLEW_NV_fence;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glEndSceneEXT", 13)) {
    /*                        ^          */
#ifdef glEndSceneEXT
      *iv_return = glEndSceneEXT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glGenFencesNV", 13)) {
    /*                        ^          */
#ifdef glGenFencesNV
      *iv_return = glGenFencesNV;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glGetShaderiv", 13)) {
    /*                        ^          */
#ifdef glGetShaderiv
      *iv_return = glGetShaderiv;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case 'f':
    if (memEQ(name, "glDrawBuffers", 13)) {
    /*                        ^          */
#ifdef glDrawBuffers
      *iv_return = glDrawBuffers;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glFrustumfOES", 13)) {
    /*                        ^          */
#ifdef glFrustumfOES
      *iv_return = glFrustumfOES;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glUnmapBuffer", 13)) {
    /*                        ^          */
#ifdef glUnmapBuffer
      *iv_return = glUnmapBuffer;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case 'g':
    if (memEQ(name, "glLinkProgram", 13)) {
    /*                        ^          */
#ifdef glLinkProgram
      *iv_return = glLinkProgram;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case 'h':
    if (memEQ(name, "glNormal3hvNV", 13)) {
    /*                        ^          */
#ifdef glNormal3hvNV
      *iv_return = glNormal3hvNV;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glVertex2hvNV", 13)) {
    /*                        ^          */
#ifdef glVertex2hvNV
      *iv_return = glVertex2hvNV;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glVertex3hvNV", 13)) {
    /*                        ^          */
#ifdef glVertex3hvNV
      *iv_return = glVertex3hvNV;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glVertex4hvNV", 13)) {
    /*                        ^          */
#ifdef glVertex4hvNV
      *iv_return = glVertex4hvNV;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case 'i':
    if (memEQ(name, "glVDPAUInitNV", 13)) {
    /*                        ^          */
#ifdef glVDPAUInitNV
      *iv_return = glVDPAUInitNV;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case 'l':
    if (memEQ(name, "glClearColorx", 13)) {
    /*                        ^          */
#ifdef glClearColorx
      *iv_return = glClearColorx;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glGenSamplers", 13)) {
    /*                        ^          */
#ifdef glGenSamplers
      *iv_return = glGenSamplers;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case 'n':
    if (memEQ(name, "glDepthRangef", 13)) {
    /*                        ^          */
#ifdef glDepthRangef
      *iv_return = glDepthRangef;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glDepthRangex", 13)) {
    /*                        ^          */
#ifdef glDepthRangex
      *iv_return = glDepthRangex;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glGetTexEnvxv", 13)) {
    /*                        ^          */
#ifdef glGetTexEnvxv
      *iv_return = glGetTexEnvxv;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glResetMinmax", 13)) {
    /*                        ^          */
#ifdef glResetMinmax
      *iv_return = glResetMinmax;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glVDPAUFiniNV", 13)) {
    /*                        ^          */
#ifdef glVDPAUFiniNV
      *iv_return = glVDPAUFiniNV;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case 'o':
    if (memEQ(name, "glWindowPos2d", 13)) {
    /*                        ^          */
#ifdef glWindowPos2d
      *iv_return = glWindowPos2d;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glWindowPos2f", 13)) {
    /*                        ^          */
#ifdef glWindowPos2f
      *iv_return = glWindowPos2f;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glWindowPos2i", 13)) {
    /*                        ^          */
#ifdef glWindowPos2i
      *iv_return = glWindowPos2i;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glWindowPos2s", 13)) {
    /*                        ^          */
#ifdef glWindowPos2s
      *iv_return = glWindowPos2s;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glWindowPos3d", 13)) {
    /*                        ^          */
#ifdef glWindowPos3d
      *iv_return = glWindowPos3d;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glWindowPos3f", 13)) {
    /*                        ^          */
#ifdef glWindowPos3f
      *iv_return = glWindowPos3f;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glWindowPos3i", 13)) {
    /*                        ^          */
#ifdef glWindowPos3i
      *iv_return = glWindowPos3i;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glWindowPos3s", 13)) {
    /*                        ^          */
#ifdef glWindowPos3s
      *iv_return = glWindowPos3s;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case 'p':
    if (memEQ(name, "glBindSampler", 13)) {
    /*                        ^          */
#ifdef glBindSampler
      *iv_return = glBindSampler;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glClearDepthf", 13)) {
    /*                        ^          */
#ifdef glClearDepthf
      *iv_return = glClearDepthf;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glClearDepthx", 13)) {
    /*                        ^          */
#ifdef glClearDepthx
      *iv_return = glClearDepthx;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case 'r':
    if (memEQ(name, "GL_SUN_vertex", 13)) {
    /*                        ^          */
#ifdef GL_SUN_vertex
      *iv_return = GL_SUN_vertex;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glIsBufferARB", 13)) {
    /*                        ^          */
#ifdef glIsBufferARB
      *iv_return = glIsBufferARB;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glLoadMatrixx", 13)) {
    /*                        ^          */
#ifdef glLoadMatrixx
      *iv_return = glLoadMatrixx;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glMultMatrixx", 13)) {
    /*                        ^          */
#ifdef glMultMatrixx
      *iv_return = glMultMatrixx;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case 's':
    if (memEQ(name, "GLEW_ARB_sync", 13)) {
    /*                        ^          */
#ifdef GLEW_ARB_sync
      *iv_return = GLEW_ARB_sync;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_SGIX_async", 13)) {
    /*                        ^          */
#ifdef GL_SGIX_async
      *iv_return = GL_SGIX_async;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glGenNamesAMD", 13)) {
    /*                        ^          */
#ifdef glGenNamesAMD
      *iv_return = glGenNamesAMD;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case 't':
    if (memEQ(name, "glClipControl", 13)) {
    /*                        ^          */
#ifdef glClipControl
      *iv_return = glClipControl;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glGetFloati_v", 13)) {
    /*                        ^          */
#ifdef glGetFloati_v
      *iv_return = glGetFloati_v;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case 'v':
    if (memEQ(name, "glWeightbvARB", 13)) {
    /*                        ^          */
#ifdef glWeightbvARB
      *iv_return = glWeightbvARB;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glWeightdvARB", 13)) {
    /*                        ^          */
#ifdef glWeightdvARB
      *iv_return = glWeightdvARB;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glWeightfvARB", 13)) {
    /*                        ^          */
#ifdef glWeightfvARB
      *iv_return = glWeightfvARB;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glWeightivARB", 13)) {
    /*                        ^          */
#ifdef glWeightivARB
      *iv_return = glWeightivARB;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glWeightsvARB", 13)) {
    /*                        ^          */
#ifdef glWeightsvARB
      *iv_return = glWeightsvARB;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case 'x':
    if (memEQ(name, "glReadnPixels", 13)) {
    /*                        ^          */
#ifdef glReadnPixels
      *iv_return = glReadnPixels;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case 'y':
    if (memEQ(name, "glEndQueryARB", 13)) {
    /*                        ^          */
#ifdef glEndQueryARB
      *iv_return = glEndQueryARB;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  }
  return PERL_constant_NOTFOUND;
}

static int
constant_14 (pTHX_ const char *name, IV *iv_return) {
  /* When generated this function returned values for the list of names given
     here.  However, subsequent manual editing may have added or removed some.
     GLEW_EXT_cmyka GLEW_KHR_debug GLEW_REGAL_log GL_2PASS_0_EXT GL_2PASS_1_EXT
     GL_422_REV_EXT GL_4PASS_0_EXT GL_4PASS_1_EXT GL_4PASS_2_EXT GL_4PASS_3_EXT
     GL_ALPHA12_EXT GL_ALPHA16_EXT GL_ALPHA8I_EXT GL_ALPHA_SCALE GL_ALPHA_SNORM
     GL_AND_REVERSE GL_APPLE_fence GL_ARB_imaging GL_ATI_meminfo GL_AUTO_NORMAL
     GL_AUX_BUFFERS GL_AVERAGE_EXT GL_BGR_INTEGER GL_BLEND_COLOR GL_BLOCK_INDEX
     GL_BOLD_BIT_NV GL_BUFFER_SIZE GL_C4F_N3F_V3F GL_CACHE_REGAL GL_CLIP_ORIGIN
     GL_CLIP_PLANE0 GL_CLIP_PLANE1 GL_CLIP_PLANE2 GL_CLIP_PLANE3 GL_CLIP_PLANE4
     GL_CLIP_PLANE5 GL_COLOR_ARRAY GL_COLOR_INDEX GL_COLOR_TABLE GL_COMBINE4_NV
     GL_COMBINE_ARB GL_COMBINE_EXT GL_COMBINE_RGB GL_CONJOINT_NV GL_CONTRAST_NV
     GL_COUNT_UP_NV GL_CURRENT_BIT GL_DEBUG_REGAL GL_DEPTH_CLAMP GL_DEPTH_RANGE
     GL_DEPTH_SCALE GL_DISCARD_ATI GL_DISJOINT_NV GL_DOUBLE_MAT2 GL_DOUBLE_MAT3
     GL_DOUBLE_MAT4 GL_DOUBLE_VEC2 GL_DOUBLE_VEC3 GL_DOUBLE_VEC4 GL_DRAW_BUFFER
     GL_DSDT_MAG_NV GL_DST_ATOP_NV GL_DST_OVER_NV GL_DS_SCALE_NV GL_DT_SCALE_NV
     GL_DYNAMIC_ATI GL_ERROR_REGAL GL_EXT_texture GL_FENCE_APPLE GL_FLOAT_RG_NV
     GL_FOG_DENSITY GL_FRAMEBUFFER GL_FRONT_RIGHT GL_GREEN_SCALE GL_HI_SCALE_NV
     GL_HSL_HUE_KHR GL_IDENTITY_NV GL_INDEX_ARRAY GL_INDEX_SHIFT GL_INTENSITY12
     GL_INTENSITY16 GL_INTERPOLATE GL_LIGHTEN_KHR GL_LINE_SMOOTH GL_LINK_STATUS
     GL_LO_SCALE_NV GL_LUMINANCE12 GL_LUMINANCE16 GL_MAP1_NORMAL GL_MAP2_NORMAL
     GL_MAP_STENCIL GL_MATRIX0_ARB GL_MATRIX1_ARB GL_MATRIX2_ARB GL_MATRIX3_ARB
     GL_MATRIX4_ARB GL_MATRIX5_ARB GL_MATRIX6_ARB GL_MATRIX7_ARB GL_MATRIX8_ARB
     GL_MATRIX9_ARB GL_MATRIX_MODE GL_MAX_SAMPLES GL_MINMAX_SINK GL_MULTIPLY_NV
     GL_MULTISAMPLE GL_NAME_LENGTH GL_OBJECT_TYPE GL_OP_DOT3_EXT GL_OP_DOT4_EXT
     GL_OP_FRAC_EXT GL_OP_MADD_EXT GL_OR_INVERTED GL_OVERLAY_KHR GL_PERTURB_EXT
     GL_PINLIGHT_NV GL_POINT_TOKEN GL_POLYGON_BIT GL_READ_BUFFER GL_READ_PIXELS
     GL_RED_BIT_ATI GL_RED_INTEGER GL_RENDER_MODE GL_REPLACE_EXT GL_RESTART_SUN
     GL_RGB16UI_EXT GL_RGB16_SNORM GL_RGB32UI_EXT GL_RGB5_A1_EXT GL_RGB9_E5_EXT
     GL_RGBA16F_ARB GL_RGBA16I_EXT GL_RGBA32F_ARB GL_RGBA32I_EXT GL_RGBA8UI_EXT
     GL_RGBA8_SNORM GL_RGB_INTEGER GL_SAMPLES_ARB GL_SAMPLES_EXT GL_SAMPLE_MASK
     GL_SCISSOR_BIT GL_SCISSOR_BOX GL_SGIX_shadow GL_SGIX_sprite GL_SHADER_TYPE
     GL_SHADE_MODEL GL_SLUMINANCE8 GL_SM_COUNT_NV GL_SOURCE0_RGB GL_SOURCE1_RGB
     GL_SOURCE2_RGB GL_SPOT_CUTOFF GL_SRC_ATOP_NV GL_SRC_OVER_NV GL_STATIC_COPY
     GL_STATIC_DRAW GL_STATIC_READ GL_STENCIL_REF GL_STREAM_COPY GL_STREAM_DRAW
     GL_STREAM_READ GL_SYNC_STATUS GL_T2F_C3F_V3F GL_T2F_N3F_V3F GL_TEXTURE_BIT
     GL_TEXTURE_ENV GL_TRACE_REGAL GL_VARIANT_EXT GL_VERSION_1_1 GL_VERSION_1_2
     GL_VERSION_1_3 GL_VERSION_1_4 GL_VERSION_1_5 GL_VERSION_2_0 GL_VERSION_2_1
     GL_VERSION_3_0 GL_VERSION_3_1 GL_VERSION_3_2 GL_VERSION_3_3 GL_VERSION_4_0
     GL_VERSION_4_1 GL_VERSION_4_2 GL_VERSION_4_3 GL_VERSION_4_4 GL_VERSION_4_5
     GL_WAIT_FAILED GL_WRAP_BORDER GL_ZERO_TO_ONE glAttachShader glBindSamplers
     glBindTextures glCreateShader glDeleteShader glDetachShader glFogCoorddEXT
     glFogCoordfEXT glFogCoordhvNV glGetDoublei_v glGetFenceivNV glGetHandleARB
     glGetHistogram glGetMinmaxEXT glGetProgramiv glGetUniformdv glGetUniformfv
     glGetUniformiv glGetVideoivNV glGetnMapdvARB glGetnMapfvARB glGetnMapivARB
     glGetnTexImage glHistogramEXT glIndexFuncEXT glIsFenceAPPLE glIsProgramARB
     glIsQueryANGLE glIsTextureEXT glLightEnviEXT glLightModelxv glMapBufferARB
     glMatrixPopEXT glPathCoordsNV glPathFogGenNV glPathGlyphsNV glPathStringNV
     glPathTexGenNV glQueryCounter glSampleMapATI glShaderBinary glShaderOp1EXT
     glShaderOp2EXT glShaderOp3EXT glShaderSource glTexBufferARB glTexBufferEXT
     glTexCoord1hNV glTexCoord2hNV glTexCoord3hNV glTexCoord4hNV glTexCoordP1ui
     glTexCoordP2ui glTexCoordP3ui glTexCoordP4ui glTexStorage1D glTexStorage2D
     glTexStorage3D glUniform1fARB glUniform1iARB glUniform2fARB glUniform2iARB
     glUniform3fARB glUniform3iARB glUniform4fARB glUniform4iARB glVariantbvEXT
     glVariantdvEXT glVariantfvEXT glVariantivEXT glVariantsvEXT glWeightubvARB
     glWeightuivARB glWeightusvARB glWindowPos2dv glWindowPos2fv glWindowPos2iv
     glWindowPos2sv glWindowPos3dv glWindowPos3fv glWindowPos3iv glWindowPos3sv
     glWriteMaskEXT */
  /* Offset 9 gives the best switch position.  */
  switch (name[9]) {
  case '0':
    if (memEQ(name, "GL_2PASS_0_EXT", 14)) {
    /*                        ^           */
#ifdef GL_2PASS_0_EXT
      *iv_return = GL_2PASS_0_EXT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_4PASS_0_EXT", 14)) {
    /*                        ^           */
#ifdef GL_4PASS_0_EXT
      *iv_return = GL_4PASS_0_EXT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_MATRIX0_ARB", 14)) {
    /*                        ^           */
#ifdef GL_MATRIX0_ARB
      *iv_return = GL_MATRIX0_ARB;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_SOURCE0_RGB", 14)) {
    /*                        ^           */
#ifdef GL_SOURCE0_RGB
      *iv_return = GL_SOURCE0_RGB;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case '1':
    if (memEQ(name, "GL_2PASS_1_EXT", 14)) {
    /*                        ^           */
#ifdef GL_2PASS_1_EXT
      *iv_return = GL_2PASS_1_EXT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_4PASS_1_EXT", 14)) {
    /*                        ^           */
#ifdef GL_4PASS_1_EXT
      *iv_return = GL_4PASS_1_EXT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_MATRIX1_ARB", 14)) {
    /*                        ^           */
#ifdef GL_MATRIX1_ARB
      *iv_return = GL_MATRIX1_ARB;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_RGB5_A1_EXT", 14)) {
    /*                        ^           */
#ifdef GL_RGB5_A1_EXT
      *iv_return = GL_RGB5_A1_EXT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_SOURCE1_RGB", 14)) {
    /*                        ^           */
#ifdef GL_SOURCE1_RGB
      *iv_return = GL_SOURCE1_RGB;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glUniform1fARB", 14)) {
    /*                        ^           */
#ifdef glUniform1fARB
      *iv_return = glUniform1fARB;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glUniform1iARB", 14)) {
    /*                        ^           */
#ifdef glUniform1iARB
      *iv_return = glUniform1iARB;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case '2':
    if (memEQ(name, "GL_4PASS_2_EXT", 14)) {
    /*                        ^           */
#ifdef GL_4PASS_2_EXT
      *iv_return = GL_4PASS_2_EXT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_ALPHA12_EXT", 14)) {
    /*                        ^           */
#ifdef GL_ALPHA12_EXT
      *iv_return = GL_ALPHA12_EXT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_MATRIX2_ARB", 14)) {
    /*                        ^           */
#ifdef GL_MATRIX2_ARB
      *iv_return = GL_MATRIX2_ARB;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_SOURCE2_RGB", 14)) {
    /*                        ^           */
#ifdef GL_SOURCE2_RGB
      *iv_return = GL_SOURCE2_RGB;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glUniform2fARB", 14)) {
    /*                        ^           */
#ifdef glUniform2fARB
      *iv_return = glUniform2fARB;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glUniform2iARB", 14)) {
    /*                        ^           */
#ifdef glUniform2iARB
      *iv_return = glUniform2iARB;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case '3':
    if (memEQ(name, "GL_4PASS_3_EXT", 14)) {
    /*                        ^           */
#ifdef GL_4PASS_3_EXT
      *iv_return = GL_4PASS_3_EXT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_MATRIX3_ARB", 14)) {
    /*                        ^           */
#ifdef GL_MATRIX3_ARB
      *iv_return = GL_MATRIX3_ARB;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_OP_DOT3_EXT", 14)) {
    /*                        ^           */
#ifdef GL_OP_DOT3_EXT
      *iv_return = GL_OP_DOT3_EXT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glUniform3fARB", 14)) {
    /*                        ^           */
#ifdef glUniform3fARB
      *iv_return = glUniform3fARB;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glUniform3iARB", 14)) {
    /*                        ^           */
#ifdef glUniform3iARB
      *iv_return = glUniform3iARB;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case '4':
    if (memEQ(name, "GL_MATRIX4_ARB", 14)) {
    /*                        ^           */
#ifdef GL_MATRIX4_ARB
      *iv_return = GL_MATRIX4_ARB;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_OP_DOT4_EXT", 14)) {
    /*                        ^           */
#ifdef GL_OP_DOT4_EXT
      *iv_return = GL_OP_DOT4_EXT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glUniform4fARB", 14)) {
    /*                        ^           */
#ifdef glUniform4fARB
      *iv_return = glUniform4fARB;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glUniform4iARB", 14)) {
    /*                        ^           */
#ifdef glUniform4iARB
      *iv_return = glUniform4iARB;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case '5':
    if (memEQ(name, "GL_MATRIX5_ARB", 14)) {
    /*                        ^           */
#ifdef GL_MATRIX5_ARB
      *iv_return = GL_MATRIX5_ARB;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_RGB9_E5_EXT", 14)) {
    /*                        ^           */
#ifdef GL_RGB9_E5_EXT
      *iv_return = GL_RGB9_E5_EXT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case '6':
    if (memEQ(name, "GL_ALPHA16_EXT", 14)) {
    /*                        ^           */
#ifdef GL_ALPHA16_EXT
      *iv_return = GL_ALPHA16_EXT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_MATRIX6_ARB", 14)) {
    /*                        ^           */
#ifdef GL_MATRIX6_ARB
      *iv_return = GL_MATRIX6_ARB;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case '7':
    if (memEQ(name, "GL_MATRIX7_ARB", 14)) {
    /*                        ^           */
#ifdef GL_MATRIX7_ARB
      *iv_return = GL_MATRIX7_ARB;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case '8':
    if (memEQ(name, "GL_MATRIX8_ARB", 14)) {
    /*                        ^           */
#ifdef GL_MATRIX8_ARB
      *iv_return = GL_MATRIX8_ARB;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case '9':
    if (memEQ(name, "GL_MATRIX9_ARB", 14)) {
    /*                        ^           */
#ifdef GL_MATRIX9_ARB
      *iv_return = GL_MATRIX9_ARB;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case 'A':
    if (memEQ(name, "GL_COLOR_ARRAY", 14)) {
    /*                        ^           */
#ifdef GL_COLOR_ARRAY
      *iv_return = GL_COLOR_ARRAY;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_DSDT_MAG_NV", 14)) {
    /*                        ^           */
#ifdef GL_DSDT_MAG_NV
      *iv_return = GL_DSDT_MAG_NV;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_FENCE_APPLE", 14)) {
    /*                        ^           */
#ifdef GL_FENCE_APPLE
      *iv_return = GL_FENCE_APPLE;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_INDEX_ARRAY", 14)) {
    /*                        ^           */
#ifdef GL_INDEX_ARRAY
      *iv_return = GL_INDEX_ARRAY;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_MULTISAMPLE", 14)) {
    /*                        ^           */
#ifdef GL_MULTISAMPLE
      *iv_return = GL_MULTISAMPLE;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_SLUMINANCE8", 14)) {
    /*                        ^           */
#ifdef GL_SLUMINANCE8
      *iv_return = GL_SLUMINANCE8;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_WAIT_FAILED", 14)) {
    /*                        ^           */
#ifdef GL_WAIT_FAILED
      *iv_return = GL_WAIT_FAILED;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glIsFenceAPPLE", 14)) {
    /*                        ^           */
#ifdef glIsFenceAPPLE
      *iv_return = glIsFenceAPPLE;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glIsQueryANGLE", 14)) {
    /*                        ^           */
#ifdef glIsQueryANGLE
      *iv_return = glIsQueryANGLE;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case 'B':
    if (memEQ(name, "GL_PERTURB_EXT", 14)) {
    /*                        ^           */
#ifdef GL_PERTURB_EXT
      *iv_return = GL_PERTURB_EXT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case 'C':
    if (memEQ(name, "GL_BLEND_COLOR", 14)) {
    /*                        ^           */
#ifdef GL_BLEND_COLOR
      *iv_return = GL_BLEND_COLOR;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_DEPTH_CLAMP", 14)) {
    /*                        ^           */
#ifdef GL_DEPTH_CLAMP
      *iv_return = GL_DEPTH_CLAMP;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_DYNAMIC_ATI", 14)) {
    /*                        ^           */
#ifdef GL_DYNAMIC_ATI
      *iv_return = GL_DYNAMIC_ATI;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_OP_FRAC_EXT", 14)) {
    /*                        ^           */
#ifdef GL_OP_FRAC_EXT
      *iv_return = GL_OP_FRAC_EXT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case 'D':
    if (memEQ(name, "GL_DISCARD_ATI", 14)) {
    /*                        ^           */
#ifdef GL_DISCARD_ATI
      *iv_return = GL_DISCARD_ATI;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_OP_MADD_EXT", 14)) {
    /*                        ^           */
#ifdef GL_OP_MADD_EXT
      *iv_return = GL_OP_MADD_EXT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case 'E':
    if (memEQ(name, "GL_AVERAGE_EXT", 14)) {
    /*                        ^           */
#ifdef GL_AVERAGE_EXT
      *iv_return = GL_AVERAGE_EXT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_COMBINE4_NV", 14)) {
    /*                        ^           */
#ifdef GL_COMBINE4_NV
      *iv_return = GL_COMBINE4_NV;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_COMBINE_ARB", 14)) {
    /*                        ^           */
#ifdef GL_COMBINE_ARB
      *iv_return = GL_COMBINE_ARB;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_COMBINE_EXT", 14)) {
    /*                        ^           */
#ifdef GL_COMBINE_EXT
      *iv_return = GL_COMBINE_EXT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_COMBINE_RGB", 14)) {
    /*                        ^           */
#ifdef GL_COMBINE_RGB
      *iv_return = GL_COMBINE_RGB;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_DST_OVER_NV", 14)) {
    /*                        ^           */
#ifdef GL_DST_OVER_NV
      *iv_return = GL_DST_OVER_NV;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_HSL_HUE_KHR", 14)) {
    /*                        ^           */
#ifdef GL_HSL_HUE_KHR
      *iv_return = GL_HSL_HUE_KHR;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_MAP_STENCIL", 14)) {
    /*                        ^           */
#ifdef GL_MAP_STENCIL
      *iv_return = GL_MAP_STENCIL;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_NAME_LENGTH", 14)) {
    /*                        ^           */
#ifdef GL_NAME_LENGTH
      *iv_return = GL_NAME_LENGTH;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_OR_INVERTED", 14)) {
    /*                        ^           */
#ifdef GL_OR_INVERTED
      *iv_return = GL_OR_INVERTED;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_REPLACE_EXT", 14)) {
    /*                        ^           */
#ifdef GL_REPLACE_EXT
      *iv_return = GL_REPLACE_EXT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_SRC_OVER_NV", 14)) {
    /*                        ^           */
#ifdef GL_SRC_OVER_NV
      *iv_return = GL_SRC_OVER_NV;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_TEXTURE_BIT", 14)) {
    /*                        ^           */
#ifdef GL_TEXTURE_BIT
      *iv_return = GL_TEXTURE_BIT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_TEXTURE_ENV", 14)) {
    /*                        ^           */
#ifdef GL_TEXTURE_ENV
      *iv_return = GL_TEXTURE_ENV;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case 'F':
    if (memEQ(name, "GL_AUX_BUFFERS", 14)) {
    /*                        ^           */
#ifdef GL_AUX_BUFFERS
      *iv_return = GL_AUX_BUFFERS;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_C4F_N3F_V3F", 14)) {
    /*                        ^           */
#ifdef GL_C4F_N3F_V3F
      *iv_return = GL_C4F_N3F_V3F;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_RGBA16F_ARB", 14)) {
    /*                        ^           */
#ifdef GL_RGBA16F_ARB
      *iv_return = GL_RGBA16F_ARB;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_RGBA32F_ARB", 14)) {
    /*                        ^           */
#ifdef GL_RGBA32F_ARB
      *iv_return = GL_RGBA32F_ARB;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_T2F_C3F_V3F", 14)) {
    /*                        ^           */
#ifdef GL_T2F_C3F_V3F
      *iv_return = GL_T2F_C3F_V3F;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_T2F_N3F_V3F", 14)) {
    /*                        ^           */
#ifdef GL_T2F_N3F_V3F
      *iv_return = GL_T2F_N3F_V3F;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case 'G':
    if (memEQ(name, "glPathFogGenNV", 14)) {
    /*                        ^           */
#ifdef glPathFogGenNV
      *iv_return = glPathFogGenNV;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glPathTexGenNV", 14)) {
    /*                        ^           */
#ifdef glPathTexGenNV
      *iv_return = glPathTexGenNV;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case 'H':
    if (memEQ(name, "GL_PINLIGHT_NV", 14)) {
    /*                        ^           */
#ifdef GL_PINLIGHT_NV
      *iv_return = GL_PINLIGHT_NV;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case 'I':
    if (memEQ(name, "GL_ALPHA8I_EXT", 14)) {
    /*                        ^           */
#ifdef GL_ALPHA8I_EXT
      *iv_return = GL_ALPHA8I_EXT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_BLOCK_INDEX", 14)) {
    /*                        ^           */
#ifdef GL_BLOCK_INDEX
      *iv_return = GL_BLOCK_INDEX;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_BOLD_BIT_NV", 14)) {
    /*                        ^           */
#ifdef GL_BOLD_BIT_NV
      *iv_return = GL_BOLD_BIT_NV;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_COLOR_INDEX", 14)) {
    /*                        ^           */
#ifdef GL_COLOR_INDEX
      *iv_return = GL_COLOR_INDEX;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_INTENSITY12", 14)) {
    /*                        ^           */
#ifdef GL_INTENSITY12
      *iv_return = GL_INTENSITY12;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_INTENSITY16", 14)) {
    /*                        ^           */
#ifdef GL_INTENSITY16
      *iv_return = GL_INTENSITY16;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_READ_PIXELS", 14)) {
    /*                        ^           */
#ifdef GL_READ_PIXELS
      *iv_return = GL_READ_PIXELS;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_RGB16UI_EXT", 14)) {
    /*                        ^           */
#ifdef GL_RGB16UI_EXT
      *iv_return = GL_RGB16UI_EXT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_RGB32UI_EXT", 14)) {
    /*                        ^           */
#ifdef GL_RGB32UI_EXT
      *iv_return = GL_RGB32UI_EXT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_RGBA16I_EXT", 14)) {
    /*                        ^           */
#ifdef GL_RGBA16I_EXT
      *iv_return = GL_RGBA16I_EXT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_RGBA32I_EXT", 14)) {
    /*                        ^           */
#ifdef GL_RGBA32I_EXT
      *iv_return = GL_RGBA32I_EXT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_RGBA8UI_EXT", 14)) {
    /*                        ^           */
#ifdef GL_RGBA8UI_EXT
      *iv_return = GL_RGBA8UI_EXT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glGetnTexImage", 14)) {
    /*                        ^           */
#ifdef glGetnTexImage
      *iv_return = glGetnTexImage;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case 'L':
    if (memEQ(name, "GLEW_REGAL_log", 14)) {
    /*                        ^           */
#ifdef GLEW_REGAL_log
      *iv_return = GLEW_REGAL_log;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_CLIP_PLANE0", 14)) {
    /*                        ^           */
#ifdef GL_CLIP_PLANE0
      *iv_return = GL_CLIP_PLANE0;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_CLIP_PLANE1", 14)) {
    /*                        ^           */
#ifdef GL_CLIP_PLANE1
      *iv_return = GL_CLIP_PLANE1;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_CLIP_PLANE2", 14)) {
    /*                        ^           */
#ifdef GL_CLIP_PLANE2
      *iv_return = GL_CLIP_PLANE2;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_CLIP_PLANE3", 14)) {
    /*                        ^           */
#ifdef GL_CLIP_PLANE3
      *iv_return = GL_CLIP_PLANE3;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_CLIP_PLANE4", 14)) {
    /*                        ^           */
#ifdef GL_CLIP_PLANE4
      *iv_return = GL_CLIP_PLANE4;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_CLIP_PLANE5", 14)) {
    /*                        ^           */
#ifdef GL_CLIP_PLANE5
      *iv_return = GL_CLIP_PLANE5;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_DS_SCALE_NV", 14)) {
    /*                        ^           */
#ifdef GL_DS_SCALE_NV
      *iv_return = GL_DS_SCALE_NV;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_DT_SCALE_NV", 14)) {
    /*                        ^           */
#ifdef GL_DT_SCALE_NV
      *iv_return = GL_DT_SCALE_NV;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_HI_SCALE_NV", 14)) {
    /*                        ^           */
#ifdef GL_HI_SCALE_NV
      *iv_return = GL_HI_SCALE_NV;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_LO_SCALE_NV", 14)) {
    /*                        ^           */
#ifdef GL_LO_SCALE_NV
      *iv_return = GL_LO_SCALE_NV;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_MULTIPLY_NV", 14)) {
    /*                        ^           */
#ifdef GL_MULTIPLY_NV
      *iv_return = GL_MULTIPLY_NV;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_STENCIL_REF", 14)) {
    /*                        ^           */
#ifdef GL_STENCIL_REF
      *iv_return = GL_STENCIL_REF;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case 'M':
    if (memEQ(name, "GL_LINE_SMOOTH", 14)) {
    /*                        ^           */
#ifdef GL_LINE_SMOOTH
      *iv_return = GL_LINE_SMOOTH;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_MAX_SAMPLES", 14)) {
    /*                        ^           */
#ifdef GL_MAX_SAMPLES
      *iv_return = GL_MAX_SAMPLES;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_SHADE_MODEL", 14)) {
    /*                        ^           */
#ifdef GL_SHADE_MODEL
      *iv_return = GL_SHADE_MODEL;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case 'N':
    if (memEQ(name, "GL_CONJOINT_NV", 14)) {
    /*                        ^           */
#ifdef GL_CONJOINT_NV
      *iv_return = GL_CONJOINT_NV;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_DISJOINT_NV", 14)) {
    /*                        ^           */
#ifdef GL_DISJOINT_NV
      *iv_return = GL_DISJOINT_NV;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_FOG_DENSITY", 14)) {
    /*                        ^           */
#ifdef GL_FOG_DENSITY
      *iv_return = GL_FOG_DENSITY;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_LIGHTEN_KHR", 14)) {
    /*                        ^           */
#ifdef GL_LIGHTEN_KHR
      *iv_return = GL_LIGHTEN_KHR;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_LUMINANCE12", 14)) {
    /*                        ^           */
#ifdef GL_LUMINANCE12
      *iv_return = GL_LUMINANCE12;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_LUMINANCE16", 14)) {
    /*                        ^           */
#ifdef GL_LUMINANCE16
      *iv_return = GL_LUMINANCE16;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_POLYGON_BIT", 14)) {
    /*                        ^           */
#ifdef GL_POLYGON_BIT
      *iv_return = GL_POLYGON_BIT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_SM_COUNT_NV", 14)) {
    /*                        ^           */
#ifdef GL_SM_COUNT_NV
      *iv_return = GL_SM_COUNT_NV;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_VERSION_1_1", 14)) {
    /*                        ^           */
#ifdef GL_VERSION_1_1
      *iv_return = GL_VERSION_1_1;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_VERSION_1_2", 14)) {
    /*                        ^           */
#ifdef GL_VERSION_1_2
      *iv_return = GL_VERSION_1_2;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_VERSION_1_3", 14)) {
    /*                        ^           */
#ifdef GL_VERSION_1_3
      *iv_return = GL_VERSION_1_3;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_VERSION_1_4", 14)) {
    /*                        ^           */
#ifdef GL_VERSION_1_4
      *iv_return = GL_VERSION_1_4;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_VERSION_1_5", 14)) {
    /*                        ^           */
#ifdef GL_VERSION_1_5
      *iv_return = GL_VERSION_1_5;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_VERSION_2_0", 14)) {
    /*                        ^           */
#ifdef GL_VERSION_2_0
      *iv_return = GL_VERSION_2_0;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_VERSION_2_1", 14)) {
    /*                        ^           */
#ifdef GL_VERSION_2_1
      *iv_return = GL_VERSION_2_1;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_VERSION_3_0", 14)) {
    /*                        ^           */
#ifdef GL_VERSION_3_0
      *iv_return = GL_VERSION_3_0;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_VERSION_3_1", 14)) {
    /*                        ^           */
#ifdef GL_VERSION_3_1
      *iv_return = GL_VERSION_3_1;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_VERSION_3_2", 14)) {
    /*                        ^           */
#ifdef GL_VERSION_3_2
      *iv_return = GL_VERSION_3_2;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_VERSION_3_3", 14)) {
    /*                        ^           */
#ifdef GL_VERSION_3_3
      *iv_return = GL_VERSION_3_3;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_VERSION_4_0", 14)) {
    /*                        ^           */
#ifdef GL_VERSION_4_0
      *iv_return = GL_VERSION_4_0;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_VERSION_4_1", 14)) {
    /*                        ^           */
#ifdef GL_VERSION_4_1
      *iv_return = GL_VERSION_4_1;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_VERSION_4_2", 14)) {
    /*                        ^           */
#ifdef GL_VERSION_4_2
      *iv_return = GL_VERSION_4_2;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_VERSION_4_3", 14)) {
    /*                        ^           */
#ifdef GL_VERSION_4_3
      *iv_return = GL_VERSION_4_3;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_VERSION_4_4", 14)) {
    /*                        ^           */
#ifdef GL_VERSION_4_4
      *iv_return = GL_VERSION_4_4;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_VERSION_4_5", 14)) {
    /*                        ^           */
#ifdef GL_VERSION_4_5
      *iv_return = GL_VERSION_4_5;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case 'O':
    if (memEQ(name, "GL_AUTO_NORMAL", 14)) {
    /*                        ^           */
#ifdef GL_AUTO_NORMAL
      *iv_return = GL_AUTO_NORMAL;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_DST_ATOP_NV", 14)) {
    /*                        ^           */
#ifdef GL_DST_ATOP_NV
      *iv_return = GL_DST_ATOP_NV;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_INTERPOLATE", 14)) {
    /*                        ^           */
#ifdef GL_INTERPOLATE
      *iv_return = GL_INTERPOLATE;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_MAP1_NORMAL", 14)) {
    /*                        ^           */
#ifdef GL_MAP1_NORMAL
      *iv_return = GL_MAP1_NORMAL;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_MAP2_NORMAL", 14)) {
    /*                        ^           */
#ifdef GL_MAP2_NORMAL
      *iv_return = GL_MAP2_NORMAL;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_SRC_ATOP_NV", 14)) {
    /*                        ^           */
#ifdef GL_SRC_ATOP_NV
      *iv_return = GL_SRC_ATOP_NV;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_WRAP_BORDER", 14)) {
    /*                        ^           */
#ifdef GL_WRAP_BORDER
      *iv_return = GL_WRAP_BORDER;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_ZERO_TO_ONE", 14)) {
    /*                        ^           */
#ifdef GL_ZERO_TO_ONE
      *iv_return = GL_ZERO_TO_ONE;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case 'R':
    if (memEQ(name, "GL_CACHE_REGAL", 14)) {
    /*                        ^           */
#ifdef GL_CACHE_REGAL
      *iv_return = GL_CACHE_REGAL;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_CLIP_ORIGIN", 14)) {
    /*                        ^           */
#ifdef GL_CLIP_ORIGIN
      *iv_return = GL_CLIP_ORIGIN;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_DEBUG_REGAL", 14)) {
    /*                        ^           */
#ifdef GL_DEBUG_REGAL
      *iv_return = GL_DEBUG_REGAL;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_DEPTH_RANGE", 14)) {
    /*                        ^           */
#ifdef GL_DEPTH_RANGE
      *iv_return = GL_DEPTH_RANGE;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_ERROR_REGAL", 14)) {
    /*                        ^           */
#ifdef GL_ERROR_REGAL
      *iv_return = GL_ERROR_REGAL;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_FLOAT_RG_NV", 14)) {
    /*                        ^           */
#ifdef GL_FLOAT_RG_NV
      *iv_return = GL_FLOAT_RG_NV;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_FRONT_RIGHT", 14)) {
    /*                        ^           */
#ifdef GL_FRONT_RIGHT
      *iv_return = GL_FRONT_RIGHT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_SCISSOR_BIT", 14)) {
    /*                        ^           */
#ifdef GL_SCISSOR_BIT
      *iv_return = GL_SCISSOR_BIT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_SCISSOR_BOX", 14)) {
    /*                        ^           */
#ifdef GL_SCISSOR_BOX
      *iv_return = GL_SCISSOR_BOX;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_TRACE_REGAL", 14)) {
    /*                        ^           */
#ifdef GL_TRACE_REGAL
      *iv_return = GL_TRACE_REGAL;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case 'S':
    if (memEQ(name, "GL_ALPHA_SCALE", 14)) {
    /*                        ^           */
#ifdef GL_ALPHA_SCALE
      *iv_return = GL_ALPHA_SCALE;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_ALPHA_SNORM", 14)) {
    /*                        ^           */
#ifdef GL_ALPHA_SNORM
      *iv_return = GL_ALPHA_SNORM;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_CONTRAST_NV", 14)) {
    /*                        ^           */
#ifdef GL_CONTRAST_NV
      *iv_return = GL_CONTRAST_NV;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_DEPTH_SCALE", 14)) {
    /*                        ^           */
#ifdef GL_DEPTH_SCALE
      *iv_return = GL_DEPTH_SCALE;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_GREEN_SCALE", 14)) {
    /*                        ^           */
#ifdef GL_GREEN_SCALE
      *iv_return = GL_GREEN_SCALE;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_INDEX_SHIFT", 14)) {
    /*                        ^           */
#ifdef GL_INDEX_SHIFT
      *iv_return = GL_INDEX_SHIFT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_RGB16_SNORM", 14)) {
    /*                        ^           */
#ifdef GL_RGB16_SNORM
      *iv_return = GL_RGB16_SNORM;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_RGBA8_SNORM", 14)) {
    /*                        ^           */
#ifdef GL_RGBA8_SNORM
      *iv_return = GL_RGBA8_SNORM;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_SAMPLES_ARB", 14)) {
    /*                        ^           */
#ifdef GL_SAMPLES_ARB
      *iv_return = GL_SAMPLES_ARB;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_SAMPLES_EXT", 14)) {
    /*                        ^           */
#ifdef GL_SAMPLES_EXT
      *iv_return = GL_SAMPLES_EXT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case 'T':
    if (memEQ(name, "GL_BGR_INTEGER", 14)) {
    /*                        ^           */
#ifdef GL_BGR_INTEGER
      *iv_return = GL_BGR_INTEGER;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_COLOR_TABLE", 14)) {
    /*                        ^           */
#ifdef GL_COLOR_TABLE
      *iv_return = GL_COLOR_TABLE;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_CURRENT_BIT", 14)) {
    /*                        ^           */
#ifdef GL_CURRENT_BIT
      *iv_return = GL_CURRENT_BIT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_IDENTITY_NV", 14)) {
    /*                        ^           */
#ifdef GL_IDENTITY_NV
      *iv_return = GL_IDENTITY_NV;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_LINK_STATUS", 14)) {
    /*                        ^           */
#ifdef GL_LINK_STATUS
      *iv_return = GL_LINK_STATUS;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_POINT_TOKEN", 14)) {
    /*                        ^           */
#ifdef GL_POINT_TOKEN
      *iv_return = GL_POINT_TOKEN;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_RED_BIT_ATI", 14)) {
    /*                        ^           */
#ifdef GL_RED_BIT_ATI
      *iv_return = GL_RED_BIT_ATI;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_RED_INTEGER", 14)) {
    /*                        ^           */
#ifdef GL_RED_INTEGER
      *iv_return = GL_RED_INTEGER;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_RESTART_SUN", 14)) {
    /*                        ^           */
#ifdef GL_RESTART_SUN
      *iv_return = GL_RESTART_SUN;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_RGB_INTEGER", 14)) {
    /*                        ^           */
#ifdef GL_RGB_INTEGER
      *iv_return = GL_RGB_INTEGER;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_SYNC_STATUS", 14)) {
    /*                        ^           */
#ifdef GL_SYNC_STATUS
      *iv_return = GL_SYNC_STATUS;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_VARIANT_EXT", 14)) {
    /*                        ^           */
#ifdef GL_VARIANT_EXT
      *iv_return = GL_VARIANT_EXT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case 'U':
    if (memEQ(name, "GL_COUNT_UP_NV", 14)) {
    /*                        ^           */
#ifdef GL_COUNT_UP_NV
      *iv_return = GL_COUNT_UP_NV;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_DRAW_BUFFER", 14)) {
    /*                        ^           */
#ifdef GL_DRAW_BUFFER
      *iv_return = GL_DRAW_BUFFER;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_FRAMEBUFFER", 14)) {
    /*                        ^           */
#ifdef GL_FRAMEBUFFER
      *iv_return = GL_FRAMEBUFFER;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_READ_BUFFER", 14)) {
    /*                        ^           */
#ifdef GL_READ_BUFFER
      *iv_return = GL_READ_BUFFER;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_SPOT_CUTOFF", 14)) {
    /*                        ^           */
#ifdef GL_SPOT_CUTOFF
      *iv_return = GL_SPOT_CUTOFF;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case 'V':
    if (memEQ(name, "GL_422_REV_EXT", 14)) {
    /*                        ^           */
#ifdef GL_422_REV_EXT
      *iv_return = GL_422_REV_EXT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_AND_REVERSE", 14)) {
    /*                        ^           */
#ifdef GL_AND_REVERSE
      *iv_return = GL_AND_REVERSE;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case 'Y':
    if (memEQ(name, "GL_OVERLAY_KHR", 14)) {
    /*                        ^           */
#ifdef GL_OVERLAY_KHR
      *iv_return = GL_OVERLAY_KHR;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case '_':
    if (memEQ(name, "GL_BUFFER_SIZE", 14)) {
    /*                        ^           */
#ifdef GL_BUFFER_SIZE
      *iv_return = GL_BUFFER_SIZE;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_DOUBLE_MAT2", 14)) {
    /*                        ^           */
#ifdef GL_DOUBLE_MAT2
      *iv_return = GL_DOUBLE_MAT2;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_DOUBLE_MAT3", 14)) {
    /*                        ^           */
#ifdef GL_DOUBLE_MAT3
      *iv_return = GL_DOUBLE_MAT3;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_DOUBLE_MAT4", 14)) {
    /*                        ^           */
#ifdef GL_DOUBLE_MAT4
      *iv_return = GL_DOUBLE_MAT4;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_DOUBLE_VEC2", 14)) {
    /*                        ^           */
#ifdef GL_DOUBLE_VEC2
      *iv_return = GL_DOUBLE_VEC2;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_DOUBLE_VEC3", 14)) {
    /*                        ^           */
#ifdef GL_DOUBLE_VEC3
      *iv_return = GL_DOUBLE_VEC3;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_DOUBLE_VEC4", 14)) {
    /*                        ^           */
#ifdef GL_DOUBLE_VEC4
      *iv_return = GL_DOUBLE_VEC4;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_MATRIX_MODE", 14)) {
    /*                        ^           */
#ifdef GL_MATRIX_MODE
      *iv_return = GL_MATRIX_MODE;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_MINMAX_SINK", 14)) {
    /*                        ^           */
#ifdef GL_MINMAX_SINK
      *iv_return = GL_MINMAX_SINK;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_OBJECT_TYPE", 14)) {
    /*                        ^           */
#ifdef GL_OBJECT_TYPE
      *iv_return = GL_OBJECT_TYPE;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_RENDER_MODE", 14)) {
    /*                        ^           */
#ifdef GL_RENDER_MODE
      *iv_return = GL_RENDER_MODE;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_SAMPLE_MASK", 14)) {
    /*                        ^           */
#ifdef GL_SAMPLE_MASK
      *iv_return = GL_SAMPLE_MASK;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_SHADER_TYPE", 14)) {
    /*                        ^           */
#ifdef GL_SHADER_TYPE
      *iv_return = GL_SHADER_TYPE;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_STATIC_COPY", 14)) {
    /*                        ^           */
#ifdef GL_STATIC_COPY
      *iv_return = GL_STATIC_COPY;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_STATIC_DRAW", 14)) {
    /*                        ^           */
#ifdef GL_STATIC_DRAW
      *iv_return = GL_STATIC_DRAW;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_STATIC_READ", 14)) {
    /*                        ^           */
#ifdef GL_STATIC_READ
      *iv_return = GL_STATIC_READ;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_STREAM_COPY", 14)) {
    /*                        ^           */
#ifdef GL_STREAM_COPY
      *iv_return = GL_STREAM_COPY;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_STREAM_DRAW", 14)) {
    /*                        ^           */
#ifdef GL_STREAM_DRAW
      *iv_return = GL_STREAM_DRAW;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_STREAM_READ", 14)) {
    /*                        ^           */
#ifdef GL_STREAM_READ
      *iv_return = GL_STREAM_READ;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case 'a':
    if (memEQ(name, "GL_ARB_imaging", 14)) {
    /*                        ^           */
#ifdef GL_ARB_imaging
      *iv_return = GL_ARB_imaging;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glGetMinmaxEXT", 14)) {
    /*                        ^           */
#ifdef glGetMinmaxEXT
      *iv_return = glGetMinmaxEXT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glHistogramEXT", 14)) {
    /*                        ^           */
#ifdef glHistogramEXT
      *iv_return = glHistogramEXT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glIsProgramARB", 14)) {
    /*                        ^           */
#ifdef glIsProgramARB
      *iv_return = glIsProgramARB;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glSampleMapATI", 14)) {
    /*                        ^           */
#ifdef glSampleMapATI
      *iv_return = glSampleMapATI;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glTexStorage1D", 14)) {
    /*                        ^           */
#ifdef glTexStorage1D
      *iv_return = glTexStorage1D;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glTexStorage2D", 14)) {
    /*                        ^           */
#ifdef glTexStorage2D
      *iv_return = glTexStorage2D;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glTexStorage3D", 14)) {
    /*                        ^           */
#ifdef glTexStorage3D
      *iv_return = glTexStorage3D;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case 'b':
    if (memEQ(name, "glVariantbvEXT", 14)) {
    /*                        ^           */
#ifdef glVariantbvEXT
      *iv_return = glVariantbvEXT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glWeightubvARB", 14)) {
    /*                        ^           */
#ifdef glWeightubvARB
      *iv_return = glWeightubvARB;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case 'c':
    if (memEQ(name, "GLEW_EXT_cmyka", 14)) {
    /*                        ^           */
#ifdef GLEW_EXT_cmyka
      *iv_return = GLEW_EXT_cmyka;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case 'd':
    if (memEQ(name, "GLEW_KHR_debug", 14)) {
    /*                        ^           */
#ifdef GLEW_KHR_debug
      *iv_return = GLEW_KHR_debug;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glFogCoorddEXT", 14)) {
    /*                        ^           */
#ifdef glFogCoorddEXT
      *iv_return = glFogCoorddEXT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glFogCoordfEXT", 14)) {
    /*                        ^           */
#ifdef glFogCoordfEXT
      *iv_return = glFogCoordfEXT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glFogCoordhvNV", 14)) {
    /*                        ^           */
#ifdef glFogCoordhvNV
      *iv_return = glFogCoordhvNV;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glGetnMapdvARB", 14)) {
    /*                        ^           */
#ifdef glGetnMapdvARB
      *iv_return = glGetnMapdvARB;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glLightModelxv", 14)) {
    /*                        ^           */
#ifdef glLightModelxv
      *iv_return = glLightModelxv;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glTexCoord1hNV", 14)) {
    /*                        ^           */
#ifdef glTexCoord1hNV
      *iv_return = glTexCoord1hNV;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glTexCoord2hNV", 14)) {
    /*                        ^           */
#ifdef glTexCoord2hNV
      *iv_return = glTexCoord2hNV;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glTexCoord3hNV", 14)) {
    /*                        ^           */
#ifdef glTexCoord3hNV
      *iv_return = glTexCoord3hNV;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glTexCoord4hNV", 14)) {
    /*                        ^           */
#ifdef glTexCoord4hNV
      *iv_return = glTexCoord4hNV;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glTexCoordP1ui", 14)) {
    /*                        ^           */
#ifdef glTexCoordP1ui
      *iv_return = glTexCoordP1ui;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glTexCoordP2ui", 14)) {
    /*                        ^           */
#ifdef glTexCoordP2ui
      *iv_return = glTexCoordP2ui;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glTexCoordP3ui", 14)) {
    /*                        ^           */
#ifdef glTexCoordP3ui
      *iv_return = glTexCoordP3ui;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glTexCoordP4ui", 14)) {
    /*                        ^           */
#ifdef glTexCoordP4ui
      *iv_return = glTexCoordP4ui;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glVariantdvEXT", 14)) {
    /*                        ^           */
#ifdef glVariantdvEXT
      *iv_return = glVariantdvEXT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case 'e':
    if (memEQ(name, "glGetFenceivNV", 14)) {
    /*                        ^           */
#ifdef glGetFenceivNV
      *iv_return = glGetFenceivNV;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glMapBufferARB", 14)) {
    /*                        ^           */
#ifdef glMapBufferARB
      *iv_return = glMapBufferARB;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glTexBufferARB", 14)) {
    /*                        ^           */
#ifdef glTexBufferARB
      *iv_return = glTexBufferARB;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glTexBufferEXT", 14)) {
    /*                        ^           */
#ifdef glTexBufferEXT
      *iv_return = glTexBufferEXT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case 'f':
    if (memEQ(name, "GL_APPLE_fence", 14)) {
    /*                        ^           */
#ifdef GL_APPLE_fence
      *iv_return = GL_APPLE_fence;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glGetnMapfvARB", 14)) {
    /*                        ^           */
#ifdef glGetnMapfvARB
      *iv_return = glGetnMapfvARB;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glVariantfvEXT", 14)) {
    /*                        ^           */
#ifdef glVariantfvEXT
      *iv_return = glVariantfvEXT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case 'h':
    if (memEQ(name, "GL_SGIX_shadow", 14)) {
    /*                        ^           */
#ifdef GL_SGIX_shadow
      *iv_return = GL_SGIX_shadow;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glAttachShader", 14)) {
    /*                        ^           */
#ifdef glAttachShader
      *iv_return = glAttachShader;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glCreateShader", 14)) {
    /*                        ^           */
#ifdef glCreateShader
      *iv_return = glCreateShader;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glDeleteShader", 14)) {
    /*                        ^           */
#ifdef glDeleteShader
      *iv_return = glDeleteShader;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glDetachShader", 14)) {
    /*                        ^           */
#ifdef glDetachShader
      *iv_return = glDetachShader;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case 'i':
    if (memEQ(name, "glGetnMapivARB", 14)) {
    /*                        ^           */
#ifdef glGetnMapivARB
      *iv_return = glGetnMapivARB;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glPathStringNV", 14)) {
    /*                        ^           */
#ifdef glPathStringNV
      *iv_return = glPathStringNV;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glShaderBinary", 14)) {
    /*                        ^           */
#ifdef glShaderBinary
      *iv_return = glShaderBinary;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glVariantivEXT", 14)) {
    /*                        ^           */
#ifdef glVariantivEXT
      *iv_return = glVariantivEXT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glWeightuivARB", 14)) {
    /*                        ^           */
#ifdef glWeightuivARB
      *iv_return = glWeightuivARB;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case 'l':
    if (memEQ(name, "glGetDoublei_v", 14)) {
    /*                        ^           */
#ifdef glGetDoublei_v
      *iv_return = glGetDoublei_v;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glGetHandleARB", 14)) {
    /*                        ^           */
#ifdef glGetHandleARB
      *iv_return = glGetHandleARB;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case 'm':
    if (memEQ(name, "GL_ATI_meminfo", 14)) {
    /*                        ^           */
#ifdef GL_ATI_meminfo
      *iv_return = GL_ATI_meminfo;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case 'n':
    if (memEQ(name, "glIndexFuncEXT", 14)) {
    /*                        ^           */
#ifdef glIndexFuncEXT
      *iv_return = glIndexFuncEXT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case 'o':
    if (memEQ(name, "glGetHistogram", 14)) {
    /*                        ^           */
#ifdef glGetHistogram
      *iv_return = glGetHistogram;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glGetUniformdv", 14)) {
    /*                        ^           */
#ifdef glGetUniformdv
      *iv_return = glGetUniformdv;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glGetUniformfv", 14)) {
    /*                        ^           */
#ifdef glGetUniformfv
      *iv_return = glGetUniformfv;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glGetUniformiv", 14)) {
    /*                        ^           */
#ifdef glGetUniformiv
      *iv_return = glGetUniformiv;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glGetVideoivNV", 14)) {
    /*                        ^           */
#ifdef glGetVideoivNV
      *iv_return = glGetVideoivNV;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glMatrixPopEXT", 14)) {
    /*                        ^           */
#ifdef glMatrixPopEXT
      *iv_return = glMatrixPopEXT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glShaderSource", 14)) {
    /*                        ^           */
#ifdef glShaderSource
      *iv_return = glShaderSource;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glWindowPos2dv", 14)) {
    /*                        ^           */
#ifdef glWindowPos2dv
      *iv_return = glWindowPos2dv;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glWindowPos2fv", 14)) {
    /*                        ^           */
#ifdef glWindowPos2fv
      *iv_return = glWindowPos2fv;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glWindowPos2iv", 14)) {
    /*                        ^           */
#ifdef glWindowPos2iv
      *iv_return = glWindowPos2iv;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glWindowPos2sv", 14)) {
    /*                        ^           */
#ifdef glWindowPos2sv
      *iv_return = glWindowPos2sv;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glWindowPos3dv", 14)) {
    /*                        ^           */
#ifdef glWindowPos3dv
      *iv_return = glWindowPos3dv;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glWindowPos3fv", 14)) {
    /*                        ^           */
#ifdef glWindowPos3fv
      *iv_return = glWindowPos3fv;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glWindowPos3iv", 14)) {
    /*                        ^           */
#ifdef glWindowPos3iv
      *iv_return = glWindowPos3iv;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glWindowPos3sv", 14)) {
    /*                        ^           */
#ifdef glWindowPos3sv
      *iv_return = glWindowPos3sv;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case 'p':
    if (memEQ(name, "GL_SGIX_sprite", 14)) {
    /*                        ^           */
#ifdef GL_SGIX_sprite
      *iv_return = GL_SGIX_sprite;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glBindSamplers", 14)) {
    /*                        ^           */
#ifdef glBindSamplers
      *iv_return = glBindSamplers;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glPathGlyphsNV", 14)) {
    /*                        ^           */
#ifdef glPathGlyphsNV
      *iv_return = glPathGlyphsNV;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glShaderOp1EXT", 14)) {
    /*                        ^           */
#ifdef glShaderOp1EXT
      *iv_return = glShaderOp1EXT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glShaderOp2EXT", 14)) {
    /*                        ^           */
#ifdef glShaderOp2EXT
      *iv_return = glShaderOp2EXT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glShaderOp3EXT", 14)) {
    /*                        ^           */
#ifdef glShaderOp3EXT
      *iv_return = glShaderOp3EXT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case 'r':
    if (memEQ(name, "glGetProgramiv", 14)) {
    /*                        ^           */
#ifdef glGetProgramiv
      *iv_return = glGetProgramiv;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glIsTextureEXT", 14)) {
    /*                        ^           */
#ifdef glIsTextureEXT
      *iv_return = glIsTextureEXT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glPathCoordsNV", 14)) {
    /*                        ^           */
#ifdef glPathCoordsNV
      *iv_return = glPathCoordsNV;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case 's':
    if (memEQ(name, "glVariantsvEXT", 14)) {
    /*                        ^           */
#ifdef glVariantsvEXT
      *iv_return = glVariantsvEXT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glWeightusvARB", 14)) {
    /*                        ^           */
#ifdef glWeightusvARB
      *iv_return = glWeightusvARB;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glWriteMaskEXT", 14)) {
    /*                        ^           */
#ifdef glWriteMaskEXT
      *iv_return = glWriteMaskEXT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case 't':
    if (memEQ(name, "glBindTextures", 14)) {
    /*                        ^           */
#ifdef glBindTextures
      *iv_return = glBindTextures;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case 'u':
    if (memEQ(name, "glQueryCounter", 14)) {
    /*                        ^           */
#ifdef glQueryCounter
      *iv_return = glQueryCounter;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case 'v':
    if (memEQ(name, "glLightEnviEXT", 14)) {
    /*                        ^           */
#ifdef glLightEnviEXT
      *iv_return = glLightEnviEXT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case 'x':
    if (memEQ(name, "GL_EXT_texture", 14)) {
    /*                        ^           */
#ifdef GL_EXT_texture
      *iv_return = GL_EXT_texture;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  }
  return PERL_constant_NOTFOUND;
}

static int
constant_15 (pTHX_ const char *name, IV *iv_return) {
  /* When generated this function returned values for the list of names given
     here.  However, subsequent manual editing may have added or removed some.
     GLEW_ARB_shadow GLEW_FUN_EXPORT GLEW_SGIX_async GLEW_SGIX_ycrcb
     GLEW_SUN_vertex GLEW_VAR_EXPORT GL_2PASS_0_SGIS GL_2PASS_1_SGIS
     GL_3DFX_tbuffer GL_4PASS_0_SGIS GL_4PASS_1_SGIS GL_4PASS_2_SGIS
     GL_4PASS_3_SGIS GL_AFFINE_2D_NV GL_AFFINE_3D_NV GL_ALPHA16F_ARB
     GL_ALPHA16I_EXT GL_ALPHA32F_ARB GL_ALPHA32I_EXT GL_ALPHA8UI_EXT
     GL_ALPHA8_SNORM GL_AND_INVERTED GL_ARB_cl_event GL_ARB_gl_spirv
     GL_ARRAY_BUFFER GL_ARRAY_STRIDE GL_BGRA_INTEGER GL_BIAS_BIT_ATI
     GL_BITMAP_TOKEN GL_BLUE_BIT_ATI GL_BLUE_INTEGER GL_BUFFER_USAGE
     GL_CLEAR_BUFFER GL_COLORBURN_NV GL_COLOR_MATRIX GL_COMBINER0_NV
     GL_COMBINER1_NV GL_COMBINER2_NV GL_COMBINER3_NV GL_COMBINER4_NV
     GL_COMBINER5_NV GL_COMBINER6_NV GL_COMBINER7_NV GL_COMP_BIT_ATI
     GL_CONSTANT_ARB GL_CONSTANT_EXT GL_CONST_EYE_NV GL_CONTEXT_LOST
     GL_DEBUG_OUTPUT GL_DEPTH_BUFFER GL_DISCRETE_AMD GL_DISPLAY_LIST
     GL_DOT2_ADD_ATI GL_DOT3_RGB_ARB GL_DOT3_RGB_EXT GL_DOUBLEBUFFER
     GL_DRAW_BUFFER0 GL_DRAW_BUFFER1 GL_DRAW_BUFFER2 GL_DRAW_BUFFER3
     GL_DRAW_BUFFER4 GL_DRAW_BUFFER5 GL_DRAW_BUFFER6 GL_DRAW_BUFFER7
     GL_DRAW_BUFFER8 GL_DRAW_BUFFER9 GL_DRIVER_REGAL GL_DYNAMIC_COPY
     GL_DYNAMIC_DRAW GL_DYNAMIC_READ GL_EXCLUSION_NV GL_E_TIMES_F_NV
     GL_FILE_NAME_NV GL_FLOAT_MAT2x3 GL_FLOAT_MAT2x4 GL_FLOAT_MAT3x2
     GL_FLOAT_MAT3x4 GL_FLOAT_MAT4x2 GL_FLOAT_MAT4x3 GL_FLOAT_R16_NV
     GL_FLOAT_R32_NV GL_FLOAT_RGB_NV GL_FULL_SUPPORT GL_FUNC_ADD_EXT
     GL_HALF_BIT_ATI GL_HARDLIGHT_NV GL_HSL_COLOR_NV GL_IMAGE_1D_EXT
     GL_IMAGE_2D_EXT GL_IMAGE_3D_EXT GL_IMAGE_BUFFER GL_INDEX_OFFSET
     GL_INT8_VEC2_NV GL_INT8_VEC3_NV GL_INT8_VEC4_NV GL_INT_IMAGE_1D
     GL_INT_IMAGE_2D GL_INT_IMAGE_3D GL_INT_VEC2_ARB GL_INT_VEC3_ARB
     GL_INT_VEC4_ARB GL_INVALID_ENUM GL_IS_PER_PATCH GL_IS_ROW_MAJOR
     GL_KHR_no_error GL_KTX_Z_REGION GL_LIGHTING_BIT GL_LINE_STIPPLE
     GL_MAP1_COLOR_4 GL_MAP2_COLOR_4 GL_MAP_READ_BIT GL_MATRIX10_ARB
     GL_MATRIX11_ARB GL_MATRIX12_ARB GL_MATRIX13_ARB GL_MATRIX14_ARB
     GL_MATRIX15_ARB GL_MATRIX16_ARB GL_MATRIX17_ARB GL_MATRIX18_ARB
     GL_MATRIX19_ARB GL_MATRIX20_ARB GL_MATRIX21_ARB GL_MATRIX22_ARB
     GL_MATRIX23_ARB GL_MATRIX24_ARB GL_MATRIX25_ARB GL_MATRIX26_ARB
     GL_MATRIX27_ARB GL_MATRIX28_ARB GL_MATRIX29_ARB GL_MATRIX30_ARB
     GL_MATRIX31_ARB GL_MAX_RED_SGIS GL_MEDIUM_FLOAT GL_MIN_RED_SGIS
     GL_MULTIPLY_KHR GL_NORMAL_ARRAY GL_OBJECT_PLANE GL_OML_resample
     GL_OPERAND0_RGB GL_OPERAND1_RGB GL_OPERAND2_RGB GL_OP_CLAMP_EXT
     GL_OP_FLOOR_EXT GL_OP_INDEX_EXT GL_OP_POWER_EXT GL_OP_RECIP_EXT
     GL_OP_ROUND_EXT GL_POINT_SMOOTH GL_POINT_SPRITE GL_POLYGON_MODE
     GL_PRESERVE_ATI GL_PREVIOUS_ARB GL_PREVIOUS_EXT GL_QUERY_BUFFER
     GL_QUERY_RESULT GL_QUERY_TARGET GL_R1UI_V3F_SUN GL_REGAL_enable
     GL_RENDERBUFFER GL_RGB10_A2_EXT GL_RGBA16UI_EXT GL_RGBA16_SNORM
     GL_RGBA32UI_EXT GL_RGBA_INTEGER GL_SAMPLER_CUBE GL_SAMPLES_3DFX
     GL_SAMPLES_SGIS GL_SCISSOR_TEST GL_SEPARABLE_2D GL_SGIX_clipmap
     GL_SINGLE_COLOR GL_SOFTLIGHT_NV GL_SRGB8_ALPHA8 GL_STENCIL_BITS
     GL_STENCIL_FAIL GL_STENCIL_FUNC GL_STENCIL_TEST GL_SUBTRACT_ARB
     GL_T2F_C4UB_V3F GL_TEXTURE0_ARB GL_TEXTURE1_ARB GL_TEXTURE2_ARB
     GL_TEXTURE3_ARB GL_TEXTURE4_ARB GL_TEXTURE5_ARB GL_TEXTURE6_ARB
     GL_TEXTURE7_ARB GL_TEXTURE8_ARB GL_TEXTURE9_ARB GL_TEXTURE_VIEW
     GL_TIME_ELAPSED GL_TRANSPOSE_NV GL_TRIANGLE_FAN GL_UNIFORM_SIZE
     GL_UNIFORM_TYPE GL_UNSIGNED_INT GL_VERTEX_ARRAY GL_VERTEX_ID_NV
     GL_VIEWPORT_BIT GL_WARP_SIZE_NV glActiveTexture glBeginQueryARB
     glBeginSceneEXT glBindBufferARB glBindProgramNV glBlendColorEXT
     glBlendEquation glBlendFunciARB glBufferDataARB glBufferStorage
     glBufferSubData glClampColorARB glClearBufferfi glClearBufferfv
     glClearBufferiv glClearDepthdNV glClearTexImage glClipPlanefOES
     glColorFormatNV glColorSubTable glColorTableEXT glColorTableSGI
     glCompileShader glCreateBuffers glCreateProgram glCreateQueries
     glDeleteBuffers glDeletePathsNV glDeleteProgram glDeleteQueries
     glDepthRangedNV glDrawArraysEXT glDrawTextureNV glDrawVkImageNV
     glEndQueryANGLE glFinishFenceNV glFogCoorddvEXT glFogCoordfvEXT
     glFrameZoomSGIX glGenBuffersARB glGenProgramsNV glGenQueriesARB
     glGenSymbolsEXT glGetBooleani_v glGetClipPlanef glGetClipPlanex
     glGetColorTable glGetInfoLogARB glGetInteger64v glGetIntegeri_v
     glGetMaterialxv glGetQueryivARB glGetUniformuiv glGetVideouivNV
     glGetnMinmaxARB glGetnUniformdv glGetnUniformfv glGetnUniformiv
     glImportSyncEXT glIndexFormatNV glIsFramebuffer glIsVertexArray
     glLoadProgramNV glLockArraysEXT glMatrixPushEXT glMemoryBarrier
     glPollAsyncSGIX glPopDebugGroup glProgramBinary glSampleMaskEXT
     glScissorArrayv glSetFenceAPPLE glTexCoord1hvNV glTexCoord2hvNV
     glTexCoord3hvNV glTexCoord4hvNV glTexCoordP1uiv glTexCoordP2uiv
     glTexCoordP3uiv glTexCoordP4uiv glTexImage3DEXT glTexParameterx
     glTexSubImage3D glTextureBuffer glTrackMatrixNV glUniform1fvARB
     glUniform1i64NV glUniform1ivARB glUniform1uiEXT glUniform2fvARB
     glUniform2i64NV glUniform2ivARB glUniform2uiEXT glUniform3fvARB
     glUniform3i64NV glUniform3ivARB glUniform3uiEXT glUniform4fvARB
     glUniform4i64NV glUniform4ivARB glUniform4uiEXT glUniformui64NV
     glVariantubvEXT glVariantuivEXT glVariantusvEXT glWeightPathsNV */
  /* Offset 10 gives the best switch position.  */
  switch (name[10]) {
  case '0':
    if (memEQ(name, "GL_MATRIX10_ARB", 15)) {
    /*                         ^           */
#ifdef GL_MATRIX10_ARB
      *iv_return = GL_MATRIX10_ARB;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_MATRIX20_ARB", 15)) {
    /*                         ^           */
#ifdef GL_MATRIX20_ARB
      *iv_return = GL_MATRIX20_ARB;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_MATRIX30_ARB", 15)) {
    /*                         ^           */
#ifdef GL_MATRIX30_ARB
      *iv_return = GL_MATRIX30_ARB;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_OPERAND0_RGB", 15)) {
    /*                         ^           */
#ifdef GL_OPERAND0_RGB
      *iv_return = GL_OPERAND0_RGB;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_TEXTURE0_ARB", 15)) {
    /*                         ^           */
#ifdef GL_TEXTURE0_ARB
      *iv_return = GL_TEXTURE0_ARB;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case '1':
    if (memEQ(name, "GL_FLOAT_R16_NV", 15)) {
    /*                         ^           */
#ifdef GL_FLOAT_R16_NV
      *iv_return = GL_FLOAT_R16_NV;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_MATRIX11_ARB", 15)) {
    /*                         ^           */
#ifdef GL_MATRIX11_ARB
      *iv_return = GL_MATRIX11_ARB;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_MATRIX21_ARB", 15)) {
    /*                         ^           */
#ifdef GL_MATRIX21_ARB
      *iv_return = GL_MATRIX21_ARB;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_MATRIX31_ARB", 15)) {
    /*                         ^           */
#ifdef GL_MATRIX31_ARB
      *iv_return = GL_MATRIX31_ARB;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_OPERAND1_RGB", 15)) {
    /*                         ^           */
#ifdef GL_OPERAND1_RGB
      *iv_return = GL_OPERAND1_RGB;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_TEXTURE1_ARB", 15)) {
    /*                         ^           */
#ifdef GL_TEXTURE1_ARB
      *iv_return = GL_TEXTURE1_ARB;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glTexCoord1hvNV", 15)) {
    /*                         ^           */
#ifdef glTexCoord1hvNV
      *iv_return = glTexCoord1hvNV;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case '2':
    if (memEQ(name, "GL_AFFINE_2D_NV", 15)) {
    /*                         ^           */
#ifdef GL_AFFINE_2D_NV
      *iv_return = GL_AFFINE_2D_NV;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_INT_VEC2_ARB", 15)) {
    /*                         ^           */
#ifdef GL_INT_VEC2_ARB
      *iv_return = GL_INT_VEC2_ARB;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_MATRIX12_ARB", 15)) {
    /*                         ^           */
#ifdef GL_MATRIX12_ARB
      *iv_return = GL_MATRIX12_ARB;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_MATRIX22_ARB", 15)) {
    /*                         ^           */
#ifdef GL_MATRIX22_ARB
      *iv_return = GL_MATRIX22_ARB;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_OPERAND2_RGB", 15)) {
    /*                         ^           */
#ifdef GL_OPERAND2_RGB
      *iv_return = GL_OPERAND2_RGB;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_RGB10_A2_EXT", 15)) {
    /*                         ^           */
#ifdef GL_RGB10_A2_EXT
      *iv_return = GL_RGB10_A2_EXT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_TEXTURE2_ARB", 15)) {
    /*                         ^           */
#ifdef GL_TEXTURE2_ARB
      *iv_return = GL_TEXTURE2_ARB;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glTexCoord2hvNV", 15)) {
    /*                         ^           */
#ifdef glTexCoord2hvNV
      *iv_return = glTexCoord2hvNV;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case '3':
    if (memEQ(name, "GL_AFFINE_3D_NV", 15)) {
    /*                         ^           */
#ifdef GL_AFFINE_3D_NV
      *iv_return = GL_AFFINE_3D_NV;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_FLOAT_R32_NV", 15)) {
    /*                         ^           */
#ifdef GL_FLOAT_R32_NV
      *iv_return = GL_FLOAT_R32_NV;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_INT_VEC3_ARB", 15)) {
    /*                         ^           */
#ifdef GL_INT_VEC3_ARB
      *iv_return = GL_INT_VEC3_ARB;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_MATRIX13_ARB", 15)) {
    /*                         ^           */
#ifdef GL_MATRIX13_ARB
      *iv_return = GL_MATRIX13_ARB;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_MATRIX23_ARB", 15)) {
    /*                         ^           */
#ifdef GL_MATRIX23_ARB
      *iv_return = GL_MATRIX23_ARB;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_TEXTURE3_ARB", 15)) {
    /*                         ^           */
#ifdef GL_TEXTURE3_ARB
      *iv_return = GL_TEXTURE3_ARB;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glTexCoord3hvNV", 15)) {
    /*                         ^           */
#ifdef glTexCoord3hvNV
      *iv_return = glTexCoord3hvNV;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glTexImage3DEXT", 15)) {
    /*                         ^           */
#ifdef glTexImage3DEXT
      *iv_return = glTexImage3DEXT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case '4':
    if (memEQ(name, "GL_INT_VEC4_ARB", 15)) {
    /*                         ^           */
#ifdef GL_INT_VEC4_ARB
      *iv_return = GL_INT_VEC4_ARB;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_MATRIX14_ARB", 15)) {
    /*                         ^           */
#ifdef GL_MATRIX14_ARB
      *iv_return = GL_MATRIX14_ARB;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_MATRIX24_ARB", 15)) {
    /*                         ^           */
#ifdef GL_MATRIX24_ARB
      *iv_return = GL_MATRIX24_ARB;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_TEXTURE4_ARB", 15)) {
    /*                         ^           */
#ifdef GL_TEXTURE4_ARB
      *iv_return = GL_TEXTURE4_ARB;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glTexCoord4hvNV", 15)) {
    /*                         ^           */
#ifdef glTexCoord4hvNV
      *iv_return = glTexCoord4hvNV;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case '5':
    if (memEQ(name, "GL_MATRIX15_ARB", 15)) {
    /*                         ^           */
#ifdef GL_MATRIX15_ARB
      *iv_return = GL_MATRIX15_ARB;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_MATRIX25_ARB", 15)) {
    /*                         ^           */
#ifdef GL_MATRIX25_ARB
      *iv_return = GL_MATRIX25_ARB;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_TEXTURE5_ARB", 15)) {
    /*                         ^           */
#ifdef GL_TEXTURE5_ARB
      *iv_return = GL_TEXTURE5_ARB;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case '6':
    if (memEQ(name, "GL_MATRIX16_ARB", 15)) {
    /*                         ^           */
#ifdef GL_MATRIX16_ARB
      *iv_return = GL_MATRIX16_ARB;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_MATRIX26_ARB", 15)) {
    /*                         ^           */
#ifdef GL_MATRIX26_ARB
      *iv_return = GL_MATRIX26_ARB;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_TEXTURE6_ARB", 15)) {
    /*                         ^           */
#ifdef GL_TEXTURE6_ARB
      *iv_return = GL_TEXTURE6_ARB;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case '7':
    if (memEQ(name, "GL_MATRIX17_ARB", 15)) {
    /*                         ^           */
#ifdef GL_MATRIX17_ARB
      *iv_return = GL_MATRIX17_ARB;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_MATRIX27_ARB", 15)) {
    /*                         ^           */
#ifdef GL_MATRIX27_ARB
      *iv_return = GL_MATRIX27_ARB;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_TEXTURE7_ARB", 15)) {
    /*                         ^           */
#ifdef GL_TEXTURE7_ARB
      *iv_return = GL_TEXTURE7_ARB;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case '8':
    if (memEQ(name, "GL_MATRIX18_ARB", 15)) {
    /*                         ^           */
#ifdef GL_MATRIX18_ARB
      *iv_return = GL_MATRIX18_ARB;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_MATRIX28_ARB", 15)) {
    /*                         ^           */
#ifdef GL_MATRIX28_ARB
      *iv_return = GL_MATRIX28_ARB;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_TEXTURE8_ARB", 15)) {
    /*                         ^           */
#ifdef GL_TEXTURE8_ARB
      *iv_return = GL_TEXTURE8_ARB;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case '9':
    if (memEQ(name, "GL_MATRIX19_ARB", 15)) {
    /*                         ^           */
#ifdef GL_MATRIX19_ARB
      *iv_return = GL_MATRIX19_ARB;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_MATRIX29_ARB", 15)) {
    /*                         ^           */
#ifdef GL_MATRIX29_ARB
      *iv_return = GL_MATRIX29_ARB;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_TEXTURE9_ARB", 15)) {
    /*                         ^           */
#ifdef GL_TEXTURE9_ARB
      *iv_return = GL_TEXTURE9_ARB;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case 'A':
    if (memEQ(name, "GL_COLOR_MATRIX", 15)) {
    /*                         ^           */
#ifdef GL_COLOR_MATRIX
      *iv_return = GL_COLOR_MATRIX;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_FLOAT_MAT2x3", 15)) {
    /*                         ^           */
#ifdef GL_FLOAT_MAT2x3
      *iv_return = GL_FLOAT_MAT2x3;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_FLOAT_MAT2x4", 15)) {
    /*                         ^           */
#ifdef GL_FLOAT_MAT2x4
      *iv_return = GL_FLOAT_MAT2x4;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_FLOAT_MAT3x2", 15)) {
    /*                         ^           */
#ifdef GL_FLOAT_MAT3x2
      *iv_return = GL_FLOAT_MAT3x2;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_FLOAT_MAT3x4", 15)) {
    /*                         ^           */
#ifdef GL_FLOAT_MAT3x4
      *iv_return = GL_FLOAT_MAT3x4;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_FLOAT_MAT4x2", 15)) {
    /*                         ^           */
#ifdef GL_FLOAT_MAT4x2
      *iv_return = GL_FLOAT_MAT4x2;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_FLOAT_MAT4x3", 15)) {
    /*                         ^           */
#ifdef GL_FLOAT_MAT4x3
      *iv_return = GL_FLOAT_MAT4x3;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_NORMAL_ARRAY", 15)) {
    /*                         ^           */
#ifdef GL_NORMAL_ARRAY
      *iv_return = GL_NORMAL_ARRAY;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_QUERY_TARGET", 15)) {
    /*                         ^           */
#ifdef GL_QUERY_TARGET
      *iv_return = GL_QUERY_TARGET;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_TIME_ELAPSED", 15)) {
    /*                         ^           */
#ifdef GL_TIME_ELAPSED
      *iv_return = GL_TIME_ELAPSED;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_VERTEX_ARRAY", 15)) {
    /*                         ^           */
#ifdef GL_VERTEX_ARRAY
      *iv_return = GL_VERTEX_ARRAY;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glEndQueryANGLE", 15)) {
    /*                         ^           */
#ifdef glEndQueryANGLE
      *iv_return = glEndQueryANGLE;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glIsVertexArray", 15)) {
    /*                         ^           */
#ifdef glIsVertexArray
      *iv_return = glIsVertexArray;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glSetFenceAPPLE", 15)) {
    /*                         ^           */
#ifdef glSetFenceAPPLE
      *iv_return = glSetFenceAPPLE;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case 'B':
    if (memEQ(name, "GL_DOT3_RGB_ARB", 15)) {
    /*                         ^           */
#ifdef GL_DOT3_RGB_ARB
      *iv_return = GL_DOT3_RGB_ARB;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_DOT3_RGB_EXT", 15)) {
    /*                         ^           */
#ifdef GL_DOT3_RGB_EXT
      *iv_return = GL_DOT3_RGB_EXT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_T2F_C4UB_V3F", 15)) {
    /*                         ^           */
#ifdef GL_T2F_C4UB_V3F
      *iv_return = GL_T2F_C4UB_V3F;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case 'C':
    if (memEQ(name, "GL_INT8_VEC2_NV", 15)) {
    /*                         ^           */
#ifdef GL_INT8_VEC2_NV
      *iv_return = GL_INT8_VEC2_NV;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_INT8_VEC3_NV", 15)) {
    /*                         ^           */
#ifdef GL_INT8_VEC3_NV
      *iv_return = GL_INT8_VEC3_NV;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_INT8_VEC4_NV", 15)) {
    /*                         ^           */
#ifdef GL_INT8_VEC4_NV
      *iv_return = GL_INT8_VEC4_NV;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_SINGLE_COLOR", 15)) {
    /*                         ^           */
#ifdef GL_SINGLE_COLOR
      *iv_return = GL_SINGLE_COLOR;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case 'D':
    if (memEQ(name, "GL_DOT2_ADD_ATI", 15)) {
    /*                         ^           */
#ifdef GL_DOT2_ADD_ATI
      *iv_return = GL_DOT2_ADD_ATI;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_FUNC_ADD_EXT", 15)) {
    /*                         ^           */
#ifdef GL_FUNC_ADD_EXT
      *iv_return = GL_FUNC_ADD_EXT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_IMAGE_1D_EXT", 15)) {
    /*                         ^           */
#ifdef GL_IMAGE_1D_EXT
      *iv_return = GL_IMAGE_1D_EXT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_IMAGE_2D_EXT", 15)) {
    /*                         ^           */
#ifdef GL_IMAGE_2D_EXT
      *iv_return = GL_IMAGE_2D_EXT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_IMAGE_3D_EXT", 15)) {
    /*                         ^           */
#ifdef GL_IMAGE_3D_EXT
      *iv_return = GL_IMAGE_3D_EXT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_MAP_READ_BIT", 15)) {
    /*                         ^           */
#ifdef GL_MAP_READ_BIT
      *iv_return = GL_MAP_READ_BIT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_OP_ROUND_EXT", 15)) {
    /*                         ^           */
#ifdef GL_OP_ROUND_EXT
      *iv_return = GL_OP_ROUND_EXT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_UNSIGNED_INT", 15)) {
    /*                         ^           */
#ifdef GL_UNSIGNED_INT
      *iv_return = GL_UNSIGNED_INT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case 'E':
    if (memEQ(name, "GL_AND_INVERTED", 15)) {
    /*                         ^           */
#ifdef GL_AND_INVERTED
      *iv_return = GL_AND_INVERTED;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_DISCRETE_AMD", 15)) {
    /*                         ^           */
#ifdef GL_DISCRETE_AMD
      *iv_return = GL_DISCRETE_AMD;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_KTX_Z_REGION", 15)) {
    /*                         ^           */
#ifdef GL_KTX_Z_REGION
      *iv_return = GL_KTX_Z_REGION;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_PRESERVE_ATI", 15)) {
    /*                         ^           */
#ifdef GL_PRESERVE_ATI
      *iv_return = GL_PRESERVE_ATI;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_QUERY_RESULT", 15)) {
    /*                         ^           */
#ifdef GL_QUERY_RESULT
      *iv_return = GL_QUERY_RESULT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_TRIANGLE_FAN", 15)) {
    /*                         ^           */
#ifdef GL_TRIANGLE_FAN
      *iv_return = GL_TRIANGLE_FAN;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case 'F':
    if (memEQ(name, "GL_ALPHA16F_ARB", 15)) {
    /*                         ^           */
#ifdef GL_ALPHA16F_ARB
      *iv_return = GL_ALPHA16F_ARB;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_ALPHA32F_ARB", 15)) {
    /*                         ^           */
#ifdef GL_ALPHA32F_ARB
      *iv_return = GL_ALPHA32F_ARB;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_DRAW_BUFFER0", 15)) {
    /*                         ^           */
#ifdef GL_DRAW_BUFFER0
      *iv_return = GL_DRAW_BUFFER0;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_DRAW_BUFFER1", 15)) {
    /*                         ^           */
#ifdef GL_DRAW_BUFFER1
      *iv_return = GL_DRAW_BUFFER1;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_DRAW_BUFFER2", 15)) {
    /*                         ^           */
#ifdef GL_DRAW_BUFFER2
      *iv_return = GL_DRAW_BUFFER2;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_DRAW_BUFFER3", 15)) {
    /*                         ^           */
#ifdef GL_DRAW_BUFFER3
      *iv_return = GL_DRAW_BUFFER3;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_DRAW_BUFFER4", 15)) {
    /*                         ^           */
#ifdef GL_DRAW_BUFFER4
      *iv_return = GL_DRAW_BUFFER4;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_DRAW_BUFFER5", 15)) {
    /*                         ^           */
#ifdef GL_DRAW_BUFFER5
      *iv_return = GL_DRAW_BUFFER5;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_DRAW_BUFFER6", 15)) {
    /*                         ^           */
#ifdef GL_DRAW_BUFFER6
      *iv_return = GL_DRAW_BUFFER6;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_DRAW_BUFFER7", 15)) {
    /*                         ^           */
#ifdef GL_DRAW_BUFFER7
      *iv_return = GL_DRAW_BUFFER7;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_DRAW_BUFFER8", 15)) {
    /*                         ^           */
#ifdef GL_DRAW_BUFFER8
      *iv_return = GL_DRAW_BUFFER8;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_DRAW_BUFFER9", 15)) {
    /*                         ^           */
#ifdef GL_DRAW_BUFFER9
      *iv_return = GL_DRAW_BUFFER9;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_INDEX_OFFSET", 15)) {
    /*                         ^           */
#ifdef GL_INDEX_OFFSET
      *iv_return = GL_INDEX_OFFSET;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_MEDIUM_FLOAT", 15)) {
    /*                         ^           */
#ifdef GL_MEDIUM_FLOAT
      *iv_return = GL_MEDIUM_FLOAT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_R1UI_V3F_SUN", 15)) {
    /*                         ^           */
#ifdef GL_R1UI_V3F_SUN
      *iv_return = GL_R1UI_V3F_SUN;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case 'G':
    if (memEQ(name, "GL_FLOAT_RGB_NV", 15)) {
    /*                         ^           */
#ifdef GL_FLOAT_RGB_NV
      *iv_return = GL_FLOAT_RGB_NV;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_INT_IMAGE_1D", 15)) {
    /*                         ^           */
#ifdef GL_INT_IMAGE_1D
      *iv_return = GL_INT_IMAGE_1D;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_INT_IMAGE_2D", 15)) {
    /*                         ^           */
#ifdef GL_INT_IMAGE_2D
      *iv_return = GL_INT_IMAGE_2D;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_INT_IMAGE_3D", 15)) {
    /*                         ^           */
#ifdef GL_INT_IMAGE_3D
      *iv_return = GL_INT_IMAGE_3D;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_LIGHTING_BIT", 15)) {
    /*                         ^           */
#ifdef GL_LIGHTING_BIT
      *iv_return = GL_LIGHTING_BIT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glPopDebugGroup", 15)) {
    /*                         ^           */
#ifdef glPopDebugGroup
      *iv_return = glPopDebugGroup;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case 'H':
    if (memEQ(name, "GL_HARDLIGHT_NV", 15)) {
    /*                         ^           */
#ifdef GL_HARDLIGHT_NV
      *iv_return = GL_HARDLIGHT_NV;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_SOFTLIGHT_NV", 15)) {
    /*                         ^           */
#ifdef GL_SOFTLIGHT_NV
      *iv_return = GL_SOFTLIGHT_NV;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case 'I':
    if (memEQ(name, "GL_ALPHA16I_EXT", 15)) {
    /*                         ^           */
#ifdef GL_ALPHA16I_EXT
      *iv_return = GL_ALPHA16I_EXT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_ALPHA32I_EXT", 15)) {
    /*                         ^           */
#ifdef GL_ALPHA32I_EXT
      *iv_return = GL_ALPHA32I_EXT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_ALPHA8UI_EXT", 15)) {
    /*                         ^           */
#ifdef GL_ALPHA8UI_EXT
      *iv_return = GL_ALPHA8UI_EXT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_LINE_STIPPLE", 15)) {
    /*                         ^           */
#ifdef GL_LINE_STIPPLE
      *iv_return = GL_LINE_STIPPLE;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_RGBA16UI_EXT", 15)) {
    /*                         ^           */
#ifdef GL_RGBA16UI_EXT
      *iv_return = GL_RGBA16UI_EXT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_RGBA32UI_EXT", 15)) {
    /*                         ^           */
#ifdef GL_RGBA32UI_EXT
      *iv_return = GL_RGBA32UI_EXT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_VERTEX_ID_NV", 15)) {
    /*                         ^           */
#ifdef GL_VERTEX_ID_NV
      *iv_return = GL_VERTEX_ID_NV;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glClearTexImage", 15)) {
    /*                         ^           */
#ifdef glClearTexImage
      *iv_return = glClearTexImage;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case 'L':
    if (memEQ(name, "GL_MAP1_COLOR_4", 15)) {
    /*                         ^           */
#ifdef GL_MAP1_COLOR_4
      *iv_return = GL_MAP1_COLOR_4;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_MAP2_COLOR_4", 15)) {
    /*                         ^           */
#ifdef GL_MAP2_COLOR_4
      *iv_return = GL_MAP2_COLOR_4;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_SEPARABLE_2D", 15)) {
    /*                         ^           */
#ifdef GL_SEPARABLE_2D
      *iv_return = GL_SEPARABLE_2D;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_SRGB8_ALPHA8", 15)) {
    /*                         ^           */
#ifdef GL_SRGB8_ALPHA8
      *iv_return = GL_SRGB8_ALPHA8;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case 'M':
    if (memEQ(name, "GL_FILE_NAME_NV", 15)) {
    /*                         ^           */
#ifdef GL_FILE_NAME_NV
      *iv_return = GL_FILE_NAME_NV;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_IS_ROW_MAJOR", 15)) {
    /*                         ^           */
#ifdef GL_IS_ROW_MAJOR
      *iv_return = GL_IS_ROW_MAJOR;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_POINT_SMOOTH", 15)) {
    /*                         ^           */
#ifdef GL_POINT_SMOOTH
      *iv_return = GL_POINT_SMOOTH;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case 'O':
    if (memEQ(name, "GL_EXCLUSION_NV", 15)) {
    /*                         ^           */
#ifdef GL_EXCLUSION_NV
      *iv_return = GL_EXCLUSION_NV;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_HSL_COLOR_NV", 15)) {
    /*                         ^           */
#ifdef GL_HSL_COLOR_NV
      *iv_return = GL_HSL_COLOR_NV;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case 'P':
    if (memEQ(name, "GL_FULL_SUPPORT", 15)) {
    /*                         ^           */
#ifdef GL_FULL_SUPPORT
      *iv_return = GL_FULL_SUPPORT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_IS_PER_PATCH", 15)) {
    /*                         ^           */
#ifdef GL_IS_PER_PATCH
      *iv_return = GL_IS_PER_PATCH;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_OBJECT_PLANE", 15)) {
    /*                         ^           */
#ifdef GL_OBJECT_PLANE
      *iv_return = GL_OBJECT_PLANE;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_OP_CLAMP_EXT", 15)) {
    /*                         ^           */
#ifdef GL_OP_CLAMP_EXT
      *iv_return = GL_OP_CLAMP_EXT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_OP_RECIP_EXT", 15)) {
    /*                         ^           */
#ifdef GL_OP_RECIP_EXT
      *iv_return = GL_OP_RECIP_EXT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_POINT_SPRITE", 15)) {
    /*                         ^           */
#ifdef GL_POINT_SPRITE
      *iv_return = GL_POINT_SPRITE;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glTexCoordP1uiv", 15)) {
    /*                         ^           */
#ifdef glTexCoordP1uiv
      *iv_return = glTexCoordP1uiv;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glTexCoordP2uiv", 15)) {
    /*                         ^           */
#ifdef glTexCoordP2uiv
      *iv_return = glTexCoordP2uiv;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glTexCoordP3uiv", 15)) {
    /*                         ^           */
#ifdef glTexCoordP3uiv
      *iv_return = glTexCoordP3uiv;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glTexCoordP4uiv", 15)) {
    /*                         ^           */
#ifdef glTexCoordP4uiv
      *iv_return = glTexCoordP4uiv;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case 'R':
    if (memEQ(name, "GL_COLORBURN_NV", 15)) {
    /*                         ^           */
#ifdef GL_COLORBURN_NV
      *iv_return = GL_COLORBURN_NV;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_COMBINER0_NV", 15)) {
    /*                         ^           */
#ifdef GL_COMBINER0_NV
      *iv_return = GL_COMBINER0_NV;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_COMBINER1_NV", 15)) {
    /*                         ^           */
#ifdef GL_COMBINER1_NV
      *iv_return = GL_COMBINER1_NV;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_COMBINER2_NV", 15)) {
    /*                         ^           */
#ifdef GL_COMBINER2_NV
      *iv_return = GL_COMBINER2_NV;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_COMBINER3_NV", 15)) {
    /*                         ^           */
#ifdef GL_COMBINER3_NV
      *iv_return = GL_COMBINER3_NV;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_COMBINER4_NV", 15)) {
    /*                         ^           */
#ifdef GL_COMBINER4_NV
      *iv_return = GL_COMBINER4_NV;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_COMBINER5_NV", 15)) {
    /*                         ^           */
#ifdef GL_COMBINER5_NV
      *iv_return = GL_COMBINER5_NV;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_COMBINER6_NV", 15)) {
    /*                         ^           */
#ifdef GL_COMBINER6_NV
      *iv_return = GL_COMBINER6_NV;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_COMBINER7_NV", 15)) {
    /*                         ^           */
#ifdef GL_COMBINER7_NV
      *iv_return = GL_COMBINER7_NV;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_DRIVER_REGAL", 15)) {
    /*                         ^           */
#ifdef GL_DRIVER_REGAL
      *iv_return = GL_DRIVER_REGAL;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_OP_FLOOR_EXT", 15)) {
    /*                         ^           */
#ifdef GL_OP_FLOOR_EXT
      *iv_return = GL_OP_FLOOR_EXT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_OP_POWER_EXT", 15)) {
    /*                         ^           */
#ifdef GL_OP_POWER_EXT
      *iv_return = GL_OP_POWER_EXT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case 'S':
    if (memEQ(name, "GL_ALPHA8_SNORM", 15)) {
    /*                         ^           */
#ifdef GL_ALPHA8_SNORM
      *iv_return = GL_ALPHA8_SNORM;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_PREVIOUS_ARB", 15)) {
    /*                         ^           */
#ifdef GL_PREVIOUS_ARB
      *iv_return = GL_PREVIOUS_ARB;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_PREVIOUS_EXT", 15)) {
    /*                         ^           */
#ifdef GL_PREVIOUS_EXT
      *iv_return = GL_PREVIOUS_EXT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_RGBA16_SNORM", 15)) {
    /*                         ^           */
#ifdef GL_RGBA16_SNORM
      *iv_return = GL_RGBA16_SNORM;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_TRANSPOSE_NV", 15)) {
    /*                         ^           */
#ifdef GL_TRANSPOSE_NV
      *iv_return = GL_TRANSPOSE_NV;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case 'T':
    if (memEQ(name, "GL_ARRAY_STRIDE", 15)) {
    /*                         ^           */
#ifdef GL_ARRAY_STRIDE
      *iv_return = GL_ARRAY_STRIDE;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_BGRA_INTEGER", 15)) {
    /*                         ^           */
#ifdef GL_BGRA_INTEGER
      *iv_return = GL_BGRA_INTEGER;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_BIAS_BIT_ATI", 15)) {
    /*                         ^           */
#ifdef GL_BIAS_BIT_ATI
      *iv_return = GL_BIAS_BIT_ATI;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_BITMAP_TOKEN", 15)) {
    /*                         ^           */
#ifdef GL_BITMAP_TOKEN
      *iv_return = GL_BITMAP_TOKEN;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_BLUE_BIT_ATI", 15)) {
    /*                         ^           */
#ifdef GL_BLUE_BIT_ATI
      *iv_return = GL_BLUE_BIT_ATI;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_BLUE_INTEGER", 15)) {
    /*                         ^           */
#ifdef GL_BLUE_INTEGER
      *iv_return = GL_BLUE_INTEGER;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_COMP_BIT_ATI", 15)) {
    /*                         ^           */
#ifdef GL_COMP_BIT_ATI
      *iv_return = GL_COMP_BIT_ATI;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_CONSTANT_ARB", 15)) {
    /*                         ^           */
#ifdef GL_CONSTANT_ARB
      *iv_return = GL_CONSTANT_ARB;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_CONSTANT_EXT", 15)) {
    /*                         ^           */
#ifdef GL_CONSTANT_EXT
      *iv_return = GL_CONSTANT_EXT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_HALF_BIT_ATI", 15)) {
    /*                         ^           */
#ifdef GL_HALF_BIT_ATI
      *iv_return = GL_HALF_BIT_ATI;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_RGBA_INTEGER", 15)) {
    /*                         ^           */
#ifdef GL_RGBA_INTEGER
      *iv_return = GL_RGBA_INTEGER;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_SUBTRACT_ARB", 15)) {
    /*                         ^           */
#ifdef GL_SUBTRACT_ARB
      *iv_return = GL_SUBTRACT_ARB;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_VIEWPORT_BIT", 15)) {
    /*                         ^           */
#ifdef GL_VIEWPORT_BIT
      *iv_return = GL_VIEWPORT_BIT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glColorSubTable", 15)) {
    /*                         ^           */
#ifdef glColorSubTable
      *iv_return = glColorSubTable;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glGetColorTable", 15)) {
    /*                         ^           */
#ifdef glGetColorTable
      *iv_return = glGetColorTable;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case 'U':
    if (memEQ(name, "GL_ARRAY_BUFFER", 15)) {
    /*                         ^           */
#ifdef GL_ARRAY_BUFFER
      *iv_return = GL_ARRAY_BUFFER;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_BUFFER_USAGE", 15)) {
    /*                         ^           */
#ifdef GL_BUFFER_USAGE
      *iv_return = GL_BUFFER_USAGE;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_CLEAR_BUFFER", 15)) {
    /*                         ^           */
#ifdef GL_CLEAR_BUFFER
      *iv_return = GL_CLEAR_BUFFER;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_DEBUG_OUTPUT", 15)) {
    /*                         ^           */
#ifdef GL_DEBUG_OUTPUT
      *iv_return = GL_DEBUG_OUTPUT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_DEPTH_BUFFER", 15)) {
    /*                         ^           */
#ifdef GL_DEPTH_BUFFER
      *iv_return = GL_DEPTH_BUFFER;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_DOUBLEBUFFER", 15)) {
    /*                         ^           */
#ifdef GL_DOUBLEBUFFER
      *iv_return = GL_DOUBLEBUFFER;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_IMAGE_BUFFER", 15)) {
    /*                         ^           */
#ifdef GL_IMAGE_BUFFER
      *iv_return = GL_IMAGE_BUFFER;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_QUERY_BUFFER", 15)) {
    /*                         ^           */
#ifdef GL_QUERY_BUFFER
      *iv_return = GL_QUERY_BUFFER;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_RENDERBUFFER", 15)) {
    /*                         ^           */
#ifdef GL_RENDERBUFFER
      *iv_return = GL_RENDERBUFFER;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case 'X':
    if (memEQ(name, "GLEW_FUN_EXPORT", 15)) {
    /*                         ^           */
#ifdef GLEW_FUN_EXPORT
      *iv_return = GLEW_FUN_EXPORT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GLEW_VAR_EXPORT", 15)) {
    /*                         ^           */
#ifdef GLEW_VAR_EXPORT
      *iv_return = GLEW_VAR_EXPORT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_OP_INDEX_EXT", 15)) {
    /*                         ^           */
#ifdef GL_OP_INDEX_EXT
      *iv_return = GL_OP_INDEX_EXT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case 'Y':
    if (memEQ(name, "GL_CONST_EYE_NV", 15)) {
    /*                         ^           */
#ifdef GL_CONST_EYE_NV
      *iv_return = GL_CONST_EYE_NV;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_MULTIPLY_KHR", 15)) {
    /*                         ^           */
#ifdef GL_MULTIPLY_KHR
      *iv_return = GL_MULTIPLY_KHR;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case 'Z':
    if (memEQ(name, "GL_WARP_SIZE_NV", 15)) {
    /*                         ^           */
#ifdef GL_WARP_SIZE_NV
      *iv_return = GL_WARP_SIZE_NV;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case '_':
    if (memEQ(name, "GL_2PASS_0_SGIS", 15)) {
    /*                         ^           */
#ifdef GL_2PASS_0_SGIS
      *iv_return = GL_2PASS_0_SGIS;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_2PASS_1_SGIS", 15)) {
    /*                         ^           */
#ifdef GL_2PASS_1_SGIS
      *iv_return = GL_2PASS_1_SGIS;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_4PASS_0_SGIS", 15)) {
    /*                         ^           */
#ifdef GL_4PASS_0_SGIS
      *iv_return = GL_4PASS_0_SGIS;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_4PASS_1_SGIS", 15)) {
    /*                         ^           */
#ifdef GL_4PASS_1_SGIS
      *iv_return = GL_4PASS_1_SGIS;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_4PASS_2_SGIS", 15)) {
    /*                         ^           */
#ifdef GL_4PASS_2_SGIS
      *iv_return = GL_4PASS_2_SGIS;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_4PASS_3_SGIS", 15)) {
    /*                         ^           */
#ifdef GL_4PASS_3_SGIS
      *iv_return = GL_4PASS_3_SGIS;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_CONTEXT_LOST", 15)) {
    /*                         ^           */
#ifdef GL_CONTEXT_LOST
      *iv_return = GL_CONTEXT_LOST;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_DISPLAY_LIST", 15)) {
    /*                         ^           */
#ifdef GL_DISPLAY_LIST
      *iv_return = GL_DISPLAY_LIST;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_DYNAMIC_COPY", 15)) {
    /*                         ^           */
#ifdef GL_DYNAMIC_COPY
      *iv_return = GL_DYNAMIC_COPY;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_DYNAMIC_DRAW", 15)) {
    /*                         ^           */
#ifdef GL_DYNAMIC_DRAW
      *iv_return = GL_DYNAMIC_DRAW;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_DYNAMIC_READ", 15)) {
    /*                         ^           */
#ifdef GL_DYNAMIC_READ
      *iv_return = GL_DYNAMIC_READ;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_E_TIMES_F_NV", 15)) {
    /*                         ^           */
#ifdef GL_E_TIMES_F_NV
      *iv_return = GL_E_TIMES_F_NV;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_INVALID_ENUM", 15)) {
    /*                         ^           */
#ifdef GL_INVALID_ENUM
      *iv_return = GL_INVALID_ENUM;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_MAX_RED_SGIS", 15)) {
    /*                         ^           */
#ifdef GL_MAX_RED_SGIS
      *iv_return = GL_MAX_RED_SGIS;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_MIN_RED_SGIS", 15)) {
    /*                         ^           */
#ifdef GL_MIN_RED_SGIS
      *iv_return = GL_MIN_RED_SGIS;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_POLYGON_MODE", 15)) {
    /*                         ^           */
#ifdef GL_POLYGON_MODE
      *iv_return = GL_POLYGON_MODE;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_SAMPLER_CUBE", 15)) {
    /*                         ^           */
#ifdef GL_SAMPLER_CUBE
      *iv_return = GL_SAMPLER_CUBE;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_SAMPLES_3DFX", 15)) {
    /*                         ^           */
#ifdef GL_SAMPLES_3DFX
      *iv_return = GL_SAMPLES_3DFX;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_SAMPLES_SGIS", 15)) {
    /*                         ^           */
#ifdef GL_SAMPLES_SGIS
      *iv_return = GL_SAMPLES_SGIS;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_SCISSOR_TEST", 15)) {
    /*                         ^           */
#ifdef GL_SCISSOR_TEST
      *iv_return = GL_SCISSOR_TEST;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_STENCIL_BITS", 15)) {
    /*                         ^           */
#ifdef GL_STENCIL_BITS
      *iv_return = GL_STENCIL_BITS;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_STENCIL_FAIL", 15)) {
    /*                         ^           */
#ifdef GL_STENCIL_FAIL
      *iv_return = GL_STENCIL_FAIL;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_STENCIL_FUNC", 15)) {
    /*                         ^           */
#ifdef GL_STENCIL_FUNC
      *iv_return = GL_STENCIL_FUNC;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_STENCIL_TEST", 15)) {
    /*                         ^           */
#ifdef GL_STENCIL_TEST
      *iv_return = GL_STENCIL_TEST;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_TEXTURE_VIEW", 15)) {
    /*                         ^           */
#ifdef GL_TEXTURE_VIEW
      *iv_return = GL_TEXTURE_VIEW;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_UNIFORM_SIZE", 15)) {
    /*                         ^           */
#ifdef GL_UNIFORM_SIZE
      *iv_return = GL_UNIFORM_SIZE;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_UNIFORM_TYPE", 15)) {
    /*                         ^           */
#ifdef GL_UNIFORM_TYPE
      *iv_return = GL_UNIFORM_TYPE;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case 'a':
    if (memEQ(name, "GLEW_SGIX_async", 15)) {
    /*                         ^           */
#ifdef GLEW_SGIX_async
      *iv_return = GLEW_SGIX_async;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_OML_resample", 15)) {
    /*                         ^           */
#ifdef GL_OML_resample
      *iv_return = GL_OML_resample;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glBlendEquation", 15)) {
    /*                         ^           */
#ifdef glBlendEquation
      *iv_return = glBlendEquation;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glDrawVkImageNV", 15)) {
    /*                         ^           */
#ifdef glDrawVkImageNV
      *iv_return = glDrawVkImageNV;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glGenProgramsNV", 15)) {
    /*                         ^           */
#ifdef glGenProgramsNV
      *iv_return = glGenProgramsNV;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glGetBooleani_v", 15)) {
    /*                         ^           */
#ifdef glGetBooleani_v
      *iv_return = glGetBooleani_v;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glGetnMinmaxARB", 15)) {
    /*                         ^           */
#ifdef glGetnMinmaxARB
      *iv_return = glGetnMinmaxARB;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glTexSubImage3D", 15)) {
    /*                         ^           */
#ifdef glTexSubImage3D
      *iv_return = glTexSubImage3D;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case 'b':
    if (memEQ(name, "glBufferSubData", 15)) {
    /*                         ^           */
#ifdef glBufferSubData
      *iv_return = glBufferSubData;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glVariantubvEXT", 15)) {
    /*                         ^           */
#ifdef glVariantubvEXT
      *iv_return = glVariantubvEXT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case 'c':
    if (memEQ(name, "glBlendFunciARB", 15)) {
    /*                         ^           */
#ifdef glBlendFunciARB
      *iv_return = glBlendFunciARB;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glPollAsyncSGIX", 15)) {
    /*                         ^           */
#ifdef glPollAsyncSGIX
      *iv_return = glPollAsyncSGIX;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case 'd':
    if (memEQ(name, "glFogCoorddvEXT", 15)) {
    /*                         ^           */
#ifdef glFogCoorddvEXT
      *iv_return = glFogCoorddvEXT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case 'e':
    if (memEQ(name, "GLEW_SUN_vertex", 15)) {
    /*                         ^           */
#ifdef GLEW_SUN_vertex
      *iv_return = GLEW_SUN_vertex;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_ARB_cl_event", 15)) {
    /*                         ^           */
#ifdef GL_ARB_cl_event
      *iv_return = GL_ARB_cl_event;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_KHR_no_error", 15)) {
    /*                         ^           */
#ifdef GL_KHR_no_error
      *iv_return = GL_KHR_no_error;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glBindBufferARB", 15)) {
    /*                         ^           */
#ifdef glBindBufferARB
      *iv_return = glBindBufferARB;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glClipPlanefOES", 15)) {
    /*                         ^           */
#ifdef glClipPlanefOES
      *iv_return = glClipPlanefOES;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glCreateQueries", 15)) {
    /*                         ^           */
#ifdef glCreateQueries
      *iv_return = glCreateQueries;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glDeleteQueries", 15)) {
    /*                         ^           */
#ifdef glDeleteQueries
      *iv_return = glDeleteQueries;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glGenQueriesARB", 15)) {
    /*                         ^           */
#ifdef glGenQueriesARB
      *iv_return = glGenQueriesARB;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glGetInteger64v", 15)) {
    /*                         ^           */
#ifdef glGetInteger64v
      *iv_return = glGetInteger64v;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glGetIntegeri_v", 15)) {
    /*                         ^           */
#ifdef glGetIntegeri_v
      *iv_return = glGetIntegeri_v;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glTexParameterx", 15)) {
    /*                         ^           */
#ifdef glTexParameterx
      *iv_return = glTexParameterx;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case 'f':
    if (memEQ(name, "glClearBufferfi", 15)) {
    /*                         ^           */
#ifdef glClearBufferfi
      *iv_return = glClearBufferfi;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glClearBufferfv", 15)) {
    /*                         ^           */
#ifdef glClearBufferfv
      *iv_return = glClearBufferfv;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glClearBufferiv", 15)) {
    /*                         ^           */
#ifdef glClearBufferiv
      *iv_return = glClearBufferiv;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glCreateBuffers", 15)) {
    /*                         ^           */
#ifdef glCreateBuffers
      *iv_return = glCreateBuffers;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glDeleteBuffers", 15)) {
    /*                         ^           */
#ifdef glDeleteBuffers
      *iv_return = glDeleteBuffers;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glFogCoordfvEXT", 15)) {
    /*                         ^           */
#ifdef glFogCoordfvEXT
      *iv_return = glFogCoordfvEXT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glUniform1fvARB", 15)) {
    /*                         ^           */
#ifdef glUniform1fvARB
      *iv_return = glUniform1fvARB;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glUniform2fvARB", 15)) {
    /*                         ^           */
#ifdef glUniform2fvARB
      *iv_return = glUniform2fvARB;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glUniform3fvARB", 15)) {
    /*                         ^           */
#ifdef glUniform3fvARB
      *iv_return = glUniform3fvARB;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glUniform4fvARB", 15)) {
    /*                         ^           */
#ifdef glUniform4fvARB
      *iv_return = glUniform4fvARB;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case 'g':
    if (memEQ(name, "glDepthRangedNV", 15)) {
    /*                         ^           */
#ifdef glDepthRangedNV
      *iv_return = glDepthRangedNV;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case 'h':
    if (memEQ(name, "GLEW_ARB_shadow", 15)) {
    /*                         ^           */
#ifdef GLEW_ARB_shadow
      *iv_return = GLEW_ARB_shadow;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glCompileShader", 15)) {
    /*                         ^           */
#ifdef glCompileShader
      *iv_return = glCompileShader;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case 'i':
    if (memEQ(name, "GL_SGIX_clipmap", 15)) {
    /*                         ^           */
#ifdef GL_SGIX_clipmap
      *iv_return = GL_SGIX_clipmap;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glGetMaterialxv", 15)) {
    /*                         ^           */
#ifdef glGetMaterialxv
      *iv_return = glGetMaterialxv;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glGetQueryivARB", 15)) {
    /*                         ^           */
#ifdef glGetQueryivARB
      *iv_return = glGetQueryivARB;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glProgramBinary", 15)) {
    /*                         ^           */
#ifdef glProgramBinary
      *iv_return = glProgramBinary;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glUniform1i64NV", 15)) {
    /*                         ^           */
#ifdef glUniform1i64NV
      *iv_return = glUniform1i64NV;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glUniform1ivARB", 15)) {
    /*                         ^           */
#ifdef glUniform1ivARB
      *iv_return = glUniform1ivARB;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glUniform2i64NV", 15)) {
    /*                         ^           */
#ifdef glUniform2i64NV
      *iv_return = glUniform2i64NV;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glUniform2ivARB", 15)) {
    /*                         ^           */
#ifdef glUniform2ivARB
      *iv_return = glUniform2ivARB;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glUniform3i64NV", 15)) {
    /*                         ^           */
#ifdef glUniform3i64NV
      *iv_return = glUniform3i64NV;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glUniform3ivARB", 15)) {
    /*                         ^           */
#ifdef glUniform3ivARB
      *iv_return = glUniform3ivARB;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glUniform4i64NV", 15)) {
    /*                         ^           */
#ifdef glUniform4i64NV
      *iv_return = glUniform4i64NV;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glUniform4ivARB", 15)) {
    /*                         ^           */
#ifdef glUniform4ivARB
      *iv_return = glUniform4ivARB;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glUniformui64NV", 15)) {
    /*                         ^           */
#ifdef glUniformui64NV
      *iv_return = glUniformui64NV;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glVariantuivEXT", 15)) {
    /*                         ^           */
#ifdef glVariantuivEXT
      *iv_return = glVariantuivEXT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case 'l':
    if (memEQ(name, "glColorTableEXT", 15)) {
    /*                         ^           */
#ifdef glColorTableEXT
      *iv_return = glColorTableEXT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glColorTableSGI", 15)) {
    /*                         ^           */
#ifdef glColorTableSGI
      *iv_return = glColorTableSGI;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glGenSymbolsEXT", 15)) {
    /*                         ^           */
#ifdef glGenSymbolsEXT
      *iv_return = glGenSymbolsEXT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glGetClipPlanef", 15)) {
    /*                         ^           */
#ifdef glGetClipPlanef
      *iv_return = glGetClipPlanef;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glGetClipPlanex", 15)) {
    /*                         ^           */
#ifdef glGetClipPlanex
      *iv_return = glGetClipPlanex;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case 'm':
    if (memEQ(name, "glColorFormatNV", 15)) {
    /*                         ^           */
#ifdef glColorFormatNV
      *iv_return = glColorFormatNV;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glFrameZoomSGIX", 15)) {
    /*                         ^           */
#ifdef glFrameZoomSGIX
      *iv_return = glFrameZoomSGIX;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glIndexFormatNV", 15)) {
    /*                         ^           */
#ifdef glIndexFormatNV
      *iv_return = glIndexFormatNV;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case 'n':
    if (memEQ(name, "GL_REGAL_enable", 15)) {
    /*                         ^           */
#ifdef GL_REGAL_enable
      *iv_return = GL_REGAL_enable;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glBeginSceneEXT", 15)) {
    /*                         ^           */
#ifdef glBeginSceneEXT
      *iv_return = glBeginSceneEXT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glFinishFenceNV", 15)) {
    /*                         ^           */
#ifdef glFinishFenceNV
      *iv_return = glFinishFenceNV;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glImportSyncEXT", 15)) {
    /*                         ^           */
#ifdef glImportSyncEXT
      *iv_return = glImportSyncEXT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case 'o':
    if (memEQ(name, "glBlendColorEXT", 15)) {
    /*                         ^           */
#ifdef glBlendColorEXT
      *iv_return = glBlendColorEXT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glBufferStorage", 15)) {
    /*                         ^           */
#ifdef glBufferStorage
      *iv_return = glBufferStorage;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glClampColorARB", 15)) {
    /*                         ^           */
#ifdef glClampColorARB
      *iv_return = glClampColorARB;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glCreateProgram", 15)) {
    /*                         ^           */
#ifdef glCreateProgram
      *iv_return = glCreateProgram;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glDeleteProgram", 15)) {
    /*                         ^           */
#ifdef glDeleteProgram
      *iv_return = glDeleteProgram;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glGetInfoLogARB", 15)) {
    /*                         ^           */
#ifdef glGetInfoLogARB
      *iv_return = glGetInfoLogARB;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glGetnUniformdv", 15)) {
    /*                         ^           */
#ifdef glGetnUniformdv
      *iv_return = glGetnUniformdv;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glGetnUniformfv", 15)) {
    /*                         ^           */
#ifdef glGetnUniformfv
      *iv_return = glGetnUniformfv;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glGetnUniformiv", 15)) {
    /*                         ^           */
#ifdef glGetnUniformiv
      *iv_return = glGetnUniformiv;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case 'r':
    if (memEQ(name, "glBeginQueryARB", 15)) {
    /*                         ^           */
#ifdef glBeginQueryARB
      *iv_return = glBeginQueryARB;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glBindProgramNV", 15)) {
    /*                         ^           */
#ifdef glBindProgramNV
      *iv_return = glBindProgramNV;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glGenBuffersARB", 15)) {
    /*                         ^           */
#ifdef glGenBuffersARB
      *iv_return = glGenBuffersARB;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glGetUniformuiv", 15)) {
    /*                         ^           */
#ifdef glGetUniformuiv
      *iv_return = glGetUniformuiv;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glLoadProgramNV", 15)) {
    /*                         ^           */
#ifdef glLoadProgramNV
      *iv_return = glLoadProgramNV;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glMemoryBarrier", 15)) {
    /*                         ^           */
#ifdef glMemoryBarrier
      *iv_return = glMemoryBarrier;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glScissorArrayv", 15)) {
    /*                         ^           */
#ifdef glScissorArrayv
      *iv_return = glScissorArrayv;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glTrackMatrixNV", 15)) {
    /*                         ^           */
#ifdef glTrackMatrixNV
      *iv_return = glTrackMatrixNV;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case 's':
    if (memEQ(name, "GL_ARB_gl_spirv", 15)) {
    /*                         ^           */
#ifdef GL_ARB_gl_spirv
      *iv_return = GL_ARB_gl_spirv;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glMatrixPushEXT", 15)) {
    /*                         ^           */
#ifdef glMatrixPushEXT
      *iv_return = glMatrixPushEXT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glSampleMaskEXT", 15)) {
    /*                         ^           */
#ifdef glSampleMaskEXT
      *iv_return = glSampleMaskEXT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glVariantusvEXT", 15)) {
    /*                         ^           */
#ifdef glVariantusvEXT
      *iv_return = glVariantusvEXT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case 't':
    if (memEQ(name, "glBufferDataARB", 15)) {
    /*                         ^           */
#ifdef glBufferDataARB
      *iv_return = glBufferDataARB;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glClearDepthdNV", 15)) {
    /*                         ^           */
#ifdef glClearDepthdNV
      *iv_return = glClearDepthdNV;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glDeletePathsNV", 15)) {
    /*                         ^           */
#ifdef glDeletePathsNV
      *iv_return = glDeletePathsNV;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glWeightPathsNV", 15)) {
    /*                         ^           */
#ifdef glWeightPathsNV
      *iv_return = glWeightPathsNV;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case 'u':
    if (memEQ(name, "GL_3DFX_tbuffer", 15)) {
    /*                         ^           */
#ifdef GL_3DFX_tbuffer
      *iv_return = GL_3DFX_tbuffer;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glDrawTextureNV", 15)) {
    /*                         ^           */
#ifdef glDrawTextureNV
      *iv_return = glDrawTextureNV;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glGetVideouivNV", 15)) {
    /*                         ^           */
#ifdef glGetVideouivNV
      *iv_return = glGetVideouivNV;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glIsFramebuffer", 15)) {
    /*                         ^           */
#ifdef glIsFramebuffer
      *iv_return = glIsFramebuffer;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glTextureBuffer", 15)) {
    /*                         ^           */
#ifdef glTextureBuffer
      *iv_return = glTextureBuffer;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glUniform1uiEXT", 15)) {
    /*                         ^           */
#ifdef glUniform1uiEXT
      *iv_return = glUniform1uiEXT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glUniform2uiEXT", 15)) {
    /*                         ^           */
#ifdef glUniform2uiEXT
      *iv_return = glUniform2uiEXT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glUniform3uiEXT", 15)) {
    /*                         ^           */
#ifdef glUniform3uiEXT
      *iv_return = glUniform3uiEXT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glUniform4uiEXT", 15)) {
    /*                         ^           */
#ifdef glUniform4uiEXT
      *iv_return = glUniform4uiEXT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case 'x':
    if (memEQ(name, "glActiveTexture", 15)) {
    /*                         ^           */
#ifdef glActiveTexture
      *iv_return = glActiveTexture;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case 'y':
    if (memEQ(name, "GLEW_SGIX_ycrcb", 15)) {
    /*                         ^           */
#ifdef GLEW_SGIX_ycrcb
      *iv_return = GLEW_SGIX_ycrcb;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glDrawArraysEXT", 15)) {
    /*                         ^           */
#ifdef glDrawArraysEXT
      *iv_return = glDrawArraysEXT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glLockArraysEXT", 15)) {
    /*                         ^           */
#ifdef glLockArraysEXT
      *iv_return = glLockArraysEXT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  }
  return PERL_constant_NOTFOUND;
}

static int
constant_16 (pTHX_ const char *name, IV *iv_return) {
  /* When generated this function returned values for the list of names given
     here.  However, subsequent manual editing may have added or removed some.
     GLEW_APPLE_fence GLEW_ARB_imaging GLEW_ATI_meminfo GLEW_EXT_texture
     GLEW_SGIX_shadow GLEW_SGIX_sprite GLEW_VERSION_1_1 GLEW_VERSION_1_2
     GLEW_VERSION_1_3 GLEW_VERSION_1_4 GLEW_VERSION_1_5 GLEW_VERSION_2_0
     GLEW_VERSION_2_1 GLEW_VERSION_3_0 GLEW_VERSION_3_1 GLEW_VERSION_3_2
     GLEW_VERSION_3_3 GLEW_VERSION_4_0 GLEW_VERSION_4_1 GLEW_VERSION_4_2
     GLEW_VERSION_4_3 GLEW_VERSION_4_4 GLEW_VERSION_4_5 GL_ALPHA16UI_EXT
     GL_ALPHA16_SNORM GL_ALPHA32UI_EXT GL_ALPHA_INTEGER GL_APPLE_rgb_422
     GL_BLEND_DST_RGB GL_BLEND_SRC_RGB GL_BOOL_VEC2_ARB GL_BOOL_VEC3_ARB
     GL_BOOL_VEC4_ARB GL_BUFFER_ACCESS GL_BUFFER_MAPPED GL_CLAMP_TO_EDGE
     GL_CLEAR_TEXTURE GL_CLOSE_PATH_NV GL_COLORBURN_KHR GL_COLORDODGE_NV
     GL_COLOR_INDEXES GL_COLOR_SUM_ARB GL_COLOR_SUM_EXT GL_COMBINE_ALPHA
     GL_COMPRESSED_RG GL_CONFORMANT_NV GL_CONTEXT_FLAGS GL_COORD_REPLACE
     GL_COPY_INVERTED GL_COUNT_DOWN_NV GL_CULL_MODES_NV GL_CURRENT_COLOR
     GL_CURRENT_INDEX GL_CURRENT_QUERY GL_DECR_WRAP_EXT GL_DELETE_STATUS
     GL_DEPTH_STENCIL GL_DIFFERENCE_NV GL_DOT3_RGBA_ARB GL_DOT3_RGBA_EXT
     GL_DOUBLE_MAT2x3 GL_DOUBLE_MAT2x4 GL_DOUBLE_MAT3x2 GL_DOUBLE_MAT3x4
     GL_DOUBLE_MAT4x2 GL_DOUBLE_MAT4x3 GL_DRAW_BUFFER10 GL_DRAW_BUFFER11
     GL_DRAW_BUFFER12 GL_DRAW_BUFFER13 GL_DRAW_BUFFER14 GL_DRAW_BUFFER15
     GL_DSDT8_MAG8_NV GL_EMBOSS_MAP_NV GL_EXCLUSION_KHR GL_EXCLUSIVE_EXT
     GL_EXT_Cg_shader GL_EXT_fog_coord GL_EXT_histogram GL_EXT_texture3D
     GL_EYE_LINE_SGIS GL_EYE_RADIAL_NV GL_FLOAT_RG16_NV GL_FLOAT_RG32_NV
     GL_FLOAT_RGBA_NV GL_FOG_COORD_SRC GL_FUNC_SUBTRACT GL_GREEN_BIT_ATI
     GL_GREEN_INTEGER GL_HALF_FLOAT_NV GL_HARDLIGHT_KHR GL_HISTOGRAM_EXT
     GL_HSL_COLOR_KHR GL_IGNORE_BORDER GL_IMAGE_2D_RECT GL_INCLUSIVE_EXT
     GL_INCR_WRAP_EXT GL_INDEX_BIT_PGI GL_INT16_VEC2_NV GL_INT16_VEC3_NV
     GL_INT16_VEC4_NV GL_INT64_VEC2_NV GL_INT64_VEC3_NV GL_INT64_VEC4_NV
     GL_INTENSITY_EXT GL_INTERLACE_OML GL_INVALID_INDEX GL_INVALID_VALUE
     GL_INVARIANT_EXT GL_INVERT_OVG_NV GL_INVERT_RGB_NV GL_ITALIC_BIT_NV
     GL_LINEARBURN_NV GL_LOGIC_OP_MODE GL_LOG_APP_REGAL GL_MAJOR_VERSION
     GL_MAP1_VERTEX_3 GL_MAP1_VERTEX_4 GL_MAP2_VERTEX_3 GL_MAP2_VERTEX_4
     GL_MAP_WRITE_BIT GL_MATRIX_STRIDE GL_MAX_BLUE_SGIS GL_MAX_VIEWPORTS
     GL_MAX_VIEWS_OVR GL_MINMAX_FORMAT GL_MINOR_VERSION GL_MIN_BLUE_SGIS
     GL_MISSING_REGAL GL_NORMAL_MAP_NV GL_NV_copy_image GL_NV_evaluators
     GL_NV_half_float GL_OBJECT_LINEAR GL_OML_interlace GL_OML_subsample
     GL_OP_NEGATE_EXT GL_OP_SET_GE_EXT GL_OP_SET_LT_EXT GL_OUT_OF_MEMORY
     GL_OVR_multiview GL_POLYGON_TOKEN GL_PRIMARY_COLOR GL_PROGRAM_INPUT
     GL_QUAD_MESH_SUN GL_QUERY_NO_WAIT GL_QUERY_WAIT_NV GL_READ_ONLY_ARB
     GL_RGB_422_APPLE GL_RGB_SCALE_ARB GL_RGB_SCALE_EXT GL_SGIX_resample
     GL_SIGNED_RGB_NV GL_SOFTLIGHT_KHR GL_SOURCE0_ALPHA GL_SOURCE1_ALPHA
     GL_SOURCE2_ALPHA GL_SPOT_EXPONENT GL_STENCIL_INDEX GL_SUBPIXEL_BITS
     GL_TESS_GEN_MODE GL_TEXTURE10_ARB GL_TEXTURE11_ARB GL_TEXTURE12_ARB
     GL_TEXTURE13_ARB GL_TEXTURE14_ARB GL_TEXTURE15_ARB GL_TEXTURE16_ARB
     GL_TEXTURE17_ARB GL_TEXTURE18_ARB GL_TEXTURE19_ARB GL_TEXTURE20_ARB
     GL_TEXTURE21_ARB GL_TEXTURE22_ARB GL_TEXTURE23_ARB GL_TEXTURE24_ARB
     GL_TEXTURE25_ARB GL_TEXTURE26_ARB GL_TEXTURE27_ARB GL_TEXTURE28_ARB
     GL_TEXTURE29_ARB GL_TEXTURE30_ARB GL_TEXTURE31_ARB GL_TEXTURE_DEPTH
     GL_TEXTURE_GEN_Q GL_TEXTURE_GEN_R GL_TEXTURE_GEN_S GL_TEXTURE_GEN_T
     GL_TEXTURE_WIDTH GL_TRANSFORM_BIT GL_TRIANGULAR_NV GL_UNIFORM_BLOCK
     GL_UNSIGNED_BYTE GL_VARIABLE_A_NV GL_VARIABLE_B_NV GL_VARIABLE_C_NV
     GL_VARIABLE_D_NV GL_VARIABLE_E_NV GL_VARIABLE_F_NV GL_VARIABLE_G_NV
     GL_VERSION_1_2_1 GL_VERTEX_SHADER GL_VIVIDLIGHT_NV GL_WIN_swap_hint
     glArrayObjectATI glBindBufferBase glBindProgramARB glBindTextureEXT
     glBlendBarrierNV glBlendEquationi glClearBufferuiv glClearDepthfOES
     glClientWaitSync glCopyColorTable glCreateSamplers glCreateStatesNV
     glCreateTextures glDeleteFencesNV glDeleteNamesAMD glDeleteSamplers
     glDeleteStatesNV glDepthBoundsEXT glDepthBoundsdNV glDepthRangefOES
     glDrawBuffersARB glDrawBuffersATI glDrawCommandsNV glGenFencesAPPLE
     glGenProgramsARB glGenTexturesEXT glGenerateMipmap glGetFloati_vEXT
     glGetFogFuncSGIS glGetObjectLabel glGetProgramivNV glGetVideoi64vNV
     glGetnUniformuiv glIsRenderbuffer glLabelObjectEXT glLinkProgramARB
     glMapBufferRange glMapNamedBuffer glMatrixLoaddEXT glMatrixLoadfEXT
     glMatrixMultdEXT glMatrixMultfEXT glMatrixOrthoEXT glNamedStringARB
     glNormalFormatNV glObjectPtrLabel glPathColorGenNV glPathCommandsNV
     glPolygonOffsetx glPushDebugGroup glReadnPixelsARB glResetHistogram
     glResetMinmaxEXT glSampleCoverage glSampleMaskSGIS glScissorIndexed
     glStateCaptureNV glTestFenceAPPLE glTexBufferRange glTexImage4DSGIS
     glTexParameterxv glTextureBarrier glTextureFogSGIX glUniform1i64ARB
     glUniform1i64vNV glUniform1ui64NV glUniform1uivEXT glUniform2i64ARB
     glUniform2i64vNV glUniform2ui64NV glUniform2uivEXT glUniform3i64ARB
     glUniform3i64vNV glUniform3ui64NV glUniform3uivEXT glUniform4i64ARB
     glUniform4i64vNV glUniform4ui64NV glUniform4uivEXT glUniformui64vNV
     glUnmapBufferARB glVertexAttrib1d glVertexAttrib1f glVertexAttrib1s
     glVertexAttrib2d glVertexAttrib2f glVertexAttrib2s glVertexAttrib3d
     glVertexAttrib3f glVertexAttrib3s glVertexAttrib4d glVertexAttrib4f
     glVertexAttrib4s glVertexBlendARB glVertexFormatNV glVideoCaptureNV
     glViewportArrayv glWindowPos2dARB glWindowPos2fARB glWindowPos2iARB
     glWindowPos2sARB glWindowPos3dARB glWindowPos3fARB glWindowPos3iARB
     glWindowPos3sARB */
  /* Offset 11 gives the best switch position.  */
  switch (name[11]) {
  case '0':
    if (memEQ(name, "GL_TEXTURE10_ARB", 16)) {
    /*                          ^           */
#ifdef GL_TEXTURE10_ARB
      *iv_return = GL_TEXTURE10_ARB;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_TEXTURE20_ARB", 16)) {
    /*                          ^           */
#ifdef GL_TEXTURE20_ARB
      *iv_return = GL_TEXTURE20_ARB;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_TEXTURE30_ARB", 16)) {
    /*                          ^           */
#ifdef GL_TEXTURE30_ARB
      *iv_return = GL_TEXTURE30_ARB;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case '1':
    if (memEQ(name, "GL_FLOAT_RG16_NV", 16)) {
    /*                          ^           */
#ifdef GL_FLOAT_RG16_NV
      *iv_return = GL_FLOAT_RG16_NV;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_TEXTURE11_ARB", 16)) {
    /*                          ^           */
#ifdef GL_TEXTURE11_ARB
      *iv_return = GL_TEXTURE11_ARB;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_TEXTURE21_ARB", 16)) {
    /*                          ^           */
#ifdef GL_TEXTURE21_ARB
      *iv_return = GL_TEXTURE21_ARB;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_TEXTURE31_ARB", 16)) {
    /*                          ^           */
#ifdef GL_TEXTURE31_ARB
      *iv_return = GL_TEXTURE31_ARB;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_VERSION_1_2_1", 16)) {
    /*                          ^           */
#ifdef GL_VERSION_1_2_1
      *iv_return = GL_VERSION_1_2_1;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case '2':
    if (memEQ(name, "GL_BOOL_VEC2_ARB", 16)) {
    /*                          ^           */
#ifdef GL_BOOL_VEC2_ARB
      *iv_return = GL_BOOL_VEC2_ARB;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_TEXTURE12_ARB", 16)) {
    /*                          ^           */
#ifdef GL_TEXTURE12_ARB
      *iv_return = GL_TEXTURE12_ARB;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_TEXTURE22_ARB", 16)) {
    /*                          ^           */
#ifdef GL_TEXTURE22_ARB
      *iv_return = GL_TEXTURE22_ARB;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glWindowPos2dARB", 16)) {
    /*                          ^           */
#ifdef glWindowPos2dARB
      *iv_return = glWindowPos2dARB;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glWindowPos2fARB", 16)) {
    /*                          ^           */
#ifdef glWindowPos2fARB
      *iv_return = glWindowPos2fARB;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glWindowPos2iARB", 16)) {
    /*                          ^           */
#ifdef glWindowPos2iARB
      *iv_return = glWindowPos2iARB;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glWindowPos2sARB", 16)) {
    /*                          ^           */
#ifdef glWindowPos2sARB
      *iv_return = glWindowPos2sARB;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case '3':
    if (memEQ(name, "GL_BOOL_VEC3_ARB", 16)) {
    /*                          ^           */
#ifdef GL_BOOL_VEC3_ARB
      *iv_return = GL_BOOL_VEC3_ARB;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_FLOAT_RG32_NV", 16)) {
    /*                          ^           */
#ifdef GL_FLOAT_RG32_NV
      *iv_return = GL_FLOAT_RG32_NV;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_TEXTURE13_ARB", 16)) {
    /*                          ^           */
#ifdef GL_TEXTURE13_ARB
      *iv_return = GL_TEXTURE13_ARB;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_TEXTURE23_ARB", 16)) {
    /*                          ^           */
#ifdef GL_TEXTURE23_ARB
      *iv_return = GL_TEXTURE23_ARB;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glWindowPos3dARB", 16)) {
    /*                          ^           */
#ifdef glWindowPos3dARB
      *iv_return = glWindowPos3dARB;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glWindowPos3fARB", 16)) {
    /*                          ^           */
#ifdef glWindowPos3fARB
      *iv_return = glWindowPos3fARB;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glWindowPos3iARB", 16)) {
    /*                          ^           */
#ifdef glWindowPos3iARB
      *iv_return = glWindowPos3iARB;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glWindowPos3sARB", 16)) {
    /*                          ^           */
#ifdef glWindowPos3sARB
      *iv_return = glWindowPos3sARB;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case '4':
    if (memEQ(name, "GL_BOOL_VEC4_ARB", 16)) {
    /*                          ^           */
#ifdef GL_BOOL_VEC4_ARB
      *iv_return = GL_BOOL_VEC4_ARB;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_TEXTURE14_ARB", 16)) {
    /*                          ^           */
#ifdef GL_TEXTURE14_ARB
      *iv_return = GL_TEXTURE14_ARB;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_TEXTURE24_ARB", 16)) {
    /*                          ^           */
#ifdef GL_TEXTURE24_ARB
      *iv_return = GL_TEXTURE24_ARB;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case '5':
    if (memEQ(name, "GL_TEXTURE15_ARB", 16)) {
    /*                          ^           */
#ifdef GL_TEXTURE15_ARB
      *iv_return = GL_TEXTURE15_ARB;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_TEXTURE25_ARB", 16)) {
    /*                          ^           */
#ifdef GL_TEXTURE25_ARB
      *iv_return = GL_TEXTURE25_ARB;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case '6':
    if (memEQ(name, "GL_TEXTURE16_ARB", 16)) {
    /*                          ^           */
#ifdef GL_TEXTURE16_ARB
      *iv_return = GL_TEXTURE16_ARB;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_TEXTURE26_ARB", 16)) {
    /*                          ^           */
#ifdef GL_TEXTURE26_ARB
      *iv_return = GL_TEXTURE26_ARB;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glGetVideoi64vNV", 16)) {
    /*                          ^           */
#ifdef glGetVideoi64vNV
      *iv_return = glGetVideoi64vNV;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glUniform1i64ARB", 16)) {
    /*                          ^           */
#ifdef glUniform1i64ARB
      *iv_return = glUniform1i64ARB;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glUniform1i64vNV", 16)) {
    /*                          ^           */
#ifdef glUniform1i64vNV
      *iv_return = glUniform1i64vNV;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glUniform2i64ARB", 16)) {
    /*                          ^           */
#ifdef glUniform2i64ARB
      *iv_return = glUniform2i64ARB;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glUniform2i64vNV", 16)) {
    /*                          ^           */
#ifdef glUniform2i64vNV
      *iv_return = glUniform2i64vNV;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glUniform3i64ARB", 16)) {
    /*                          ^           */
#ifdef glUniform3i64ARB
      *iv_return = glUniform3i64ARB;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glUniform3i64vNV", 16)) {
    /*                          ^           */
#ifdef glUniform3i64vNV
      *iv_return = glUniform3i64vNV;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glUniform4i64ARB", 16)) {
    /*                          ^           */
#ifdef glUniform4i64ARB
      *iv_return = glUniform4i64ARB;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glUniform4i64vNV", 16)) {
    /*                          ^           */
#ifdef glUniform4i64vNV
      *iv_return = glUniform4i64vNV;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glUniformui64vNV", 16)) {
    /*                          ^           */
#ifdef glUniformui64vNV
      *iv_return = glUniformui64vNV;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case '7':
    if (memEQ(name, "GL_TEXTURE17_ARB", 16)) {
    /*                          ^           */
#ifdef GL_TEXTURE17_ARB
      *iv_return = GL_TEXTURE17_ARB;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_TEXTURE27_ARB", 16)) {
    /*                          ^           */
#ifdef GL_TEXTURE27_ARB
      *iv_return = GL_TEXTURE27_ARB;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case '8':
    if (memEQ(name, "GL_TEXTURE18_ARB", 16)) {
    /*                          ^           */
#ifdef GL_TEXTURE18_ARB
      *iv_return = GL_TEXTURE18_ARB;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_TEXTURE28_ARB", 16)) {
    /*                          ^           */
#ifdef GL_TEXTURE28_ARB
      *iv_return = GL_TEXTURE28_ARB;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case '9':
    if (memEQ(name, "GL_TEXTURE19_ARB", 16)) {
    /*                          ^           */
#ifdef GL_TEXTURE19_ARB
      *iv_return = GL_TEXTURE19_ARB;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_TEXTURE29_ARB", 16)) {
    /*                          ^           */
#ifdef GL_TEXTURE29_ARB
      *iv_return = GL_TEXTURE29_ARB;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case 'A':
    if (memEQ(name, "GL_BUFFER_MAPPED", 16)) {
    /*                          ^           */
#ifdef GL_BUFFER_MAPPED
      *iv_return = GL_BUFFER_MAPPED;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_COMBINE_ALPHA", 16)) {
    /*                          ^           */
#ifdef GL_COMBINE_ALPHA
      *iv_return = GL_COMBINE_ALPHA;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_DOT3_RGBA_ARB", 16)) {
    /*                          ^           */
#ifdef GL_DOT3_RGBA_ARB
      *iv_return = GL_DOT3_RGBA_ARB;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_DOT3_RGBA_EXT", 16)) {
    /*                          ^           */
#ifdef GL_DOT3_RGBA_EXT
      *iv_return = GL_DOT3_RGBA_EXT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_DOUBLE_MAT2x3", 16)) {
    /*                          ^           */
#ifdef GL_DOUBLE_MAT2x3
      *iv_return = GL_DOUBLE_MAT2x3;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_DOUBLE_MAT2x4", 16)) {
    /*                          ^           */
#ifdef GL_DOUBLE_MAT2x4
      *iv_return = GL_DOUBLE_MAT2x4;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_DOUBLE_MAT3x2", 16)) {
    /*                          ^           */
#ifdef GL_DOUBLE_MAT3x2
      *iv_return = GL_DOUBLE_MAT3x2;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_DOUBLE_MAT3x4", 16)) {
    /*                          ^           */
#ifdef GL_DOUBLE_MAT3x4
      *iv_return = GL_DOUBLE_MAT3x4;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_DOUBLE_MAT4x2", 16)) {
    /*                          ^           */
#ifdef GL_DOUBLE_MAT4x2
      *iv_return = GL_DOUBLE_MAT4x2;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_DOUBLE_MAT4x3", 16)) {
    /*                          ^           */
#ifdef GL_DOUBLE_MAT4x3
      *iv_return = GL_DOUBLE_MAT4x3;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_EMBOSS_MAP_NV", 16)) {
    /*                          ^           */
#ifdef GL_EMBOSS_MAP_NV
      *iv_return = GL_EMBOSS_MAP_NV;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_EYE_RADIAL_NV", 16)) {
    /*                          ^           */
#ifdef GL_EYE_RADIAL_NV
      *iv_return = GL_EYE_RADIAL_NV;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_HALF_FLOAT_NV", 16)) {
    /*                          ^           */
#ifdef GL_HALF_FLOAT_NV
      *iv_return = GL_HALF_FLOAT_NV;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_NORMAL_MAP_NV", 16)) {
    /*                          ^           */
#ifdef GL_NORMAL_MAP_NV
      *iv_return = GL_NORMAL_MAP_NV;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_RGB_422_APPLE", 16)) {
    /*                          ^           */
#ifdef GL_RGB_422_APPLE
      *iv_return = GL_RGB_422_APPLE;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_SOURCE0_ALPHA", 16)) {
    /*                          ^           */
#ifdef GL_SOURCE0_ALPHA
      *iv_return = GL_SOURCE0_ALPHA;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_SOURCE1_ALPHA", 16)) {
    /*                          ^           */
#ifdef GL_SOURCE1_ALPHA
      *iv_return = GL_SOURCE1_ALPHA;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_SOURCE2_ALPHA", 16)) {
    /*                          ^           */
#ifdef GL_SOURCE2_ALPHA
      *iv_return = GL_SOURCE2_ALPHA;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_TRIANGULAR_NV", 16)) {
    /*                          ^           */
#ifdef GL_TRIANGULAR_NV
      *iv_return = GL_TRIANGULAR_NV;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glGenFencesAPPLE", 16)) {
    /*                          ^           */
#ifdef glGenFencesAPPLE
      *iv_return = glGenFencesAPPLE;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glTestFenceAPPLE", 16)) {
    /*                          ^           */
#ifdef glTestFenceAPPLE
      *iv_return = glTestFenceAPPLE;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case 'B':
    if (memEQ(name, "GL_FLOAT_RGBA_NV", 16)) {
    /*                          ^           */
#ifdef GL_FLOAT_RGBA_NV
      *iv_return = GL_FLOAT_RGBA_NV;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_UNIFORM_BLOCK", 16)) {
    /*                          ^           */
#ifdef GL_UNIFORM_BLOCK
      *iv_return = GL_UNIFORM_BLOCK;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case 'C':
    if (memEQ(name, "GL_BLEND_SRC_RGB", 16)) {
    /*                          ^           */
#ifdef GL_BLEND_SRC_RGB
      *iv_return = GL_BLEND_SRC_RGB;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_BUFFER_ACCESS", 16)) {
    /*                          ^           */
#ifdef GL_BUFFER_ACCESS
      *iv_return = GL_BUFFER_ACCESS;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_CURRENT_COLOR", 16)) {
    /*                          ^           */
#ifdef GL_CURRENT_COLOR
      *iv_return = GL_CURRENT_COLOR;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_DIFFERENCE_NV", 16)) {
    /*                          ^           */
#ifdef GL_DIFFERENCE_NV
      *iv_return = GL_DIFFERENCE_NV;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_INT16_VEC2_NV", 16)) {
    /*                          ^           */
#ifdef GL_INT16_VEC2_NV
      *iv_return = GL_INT16_VEC2_NV;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_INT16_VEC3_NV", 16)) {
    /*                          ^           */
#ifdef GL_INT16_VEC3_NV
      *iv_return = GL_INT16_VEC3_NV;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_INT16_VEC4_NV", 16)) {
    /*                          ^           */
#ifdef GL_INT16_VEC4_NV
      *iv_return = GL_INT16_VEC4_NV;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_INT64_VEC2_NV", 16)) {
    /*                          ^           */
#ifdef GL_INT64_VEC2_NV
      *iv_return = GL_INT64_VEC2_NV;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_INT64_VEC3_NV", 16)) {
    /*                          ^           */
#ifdef GL_INT64_VEC3_NV
      *iv_return = GL_INT64_VEC3_NV;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_INT64_VEC4_NV", 16)) {
    /*                          ^           */
#ifdef GL_INT64_VEC4_NV
      *iv_return = GL_INT64_VEC4_NV;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_PRIMARY_COLOR", 16)) {
    /*                          ^           */
#ifdef GL_PRIMARY_COLOR
      *iv_return = GL_PRIMARY_COLOR;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case 'D':
    if (memEQ(name, "GL_COLOR_INDEXES", 16)) {
    /*                          ^           */
#ifdef GL_COLOR_INDEXES
      *iv_return = GL_COLOR_INDEXES;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_FOG_COORD_SRC", 16)) {
    /*                          ^           */
#ifdef GL_FOG_COORD_SRC
      *iv_return = GL_FOG_COORD_SRC;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_TEXTURE_DEPTH", 16)) {
    /*                          ^           */
#ifdef GL_TEXTURE_DEPTH
      *iv_return = GL_TEXTURE_DEPTH;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glTexImage4DSGIS", 16)) {
    /*                          ^           */
#ifdef glTexImage4DSGIS
      *iv_return = glTexImage4DSGIS;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case 'E':
    if (memEQ(name, "GL_COMPRESSED_RG", 16)) {
    /*                          ^           */
#ifdef GL_COMPRESSED_RG
      *iv_return = GL_COMPRESSED_RG;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_COPY_INVERTED", 16)) {
    /*                          ^           */
#ifdef GL_COPY_INVERTED
      *iv_return = GL_COPY_INVERTED;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_CULL_MODES_NV", 16)) {
    /*                          ^           */
#ifdef GL_CULL_MODES_NV
      *iv_return = GL_CULL_MODES_NV;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_DEPTH_STENCIL", 16)) {
    /*                          ^           */
#ifdef GL_DEPTH_STENCIL
      *iv_return = GL_DEPTH_STENCIL;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_EXCLUSIVE_EXT", 16)) {
    /*                          ^           */
#ifdef GL_EXCLUSIVE_EXT
      *iv_return = GL_EXCLUSIVE_EXT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_INCLUSIVE_EXT", 16)) {
    /*                          ^           */
#ifdef GL_INCLUSIVE_EXT
      *iv_return = GL_INCLUSIVE_EXT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_INTERLACE_OML", 16)) {
    /*                          ^           */
#ifdef GL_INTERLACE_OML
      *iv_return = GL_INTERLACE_OML;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_MAP_WRITE_BIT", 16)) {
    /*                          ^           */
#ifdef GL_MAP_WRITE_BIT
      *iv_return = GL_MAP_WRITE_BIT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_OP_NEGATE_EXT", 16)) {
    /*                          ^           */
#ifdef GL_OP_NEGATE_EXT
      *iv_return = GL_OP_NEGATE_EXT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_OP_SET_GE_EXT", 16)) {
    /*                          ^           */
#ifdef GL_OP_SET_GE_EXT
      *iv_return = GL_OP_SET_GE_EXT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_OUT_OF_MEMORY", 16)) {
    /*                          ^           */
#ifdef GL_OUT_OF_MEMORY
      *iv_return = GL_OUT_OF_MEMORY;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_RGB_SCALE_ARB", 16)) {
    /*                          ^           */
#ifdef GL_RGB_SCALE_ARB
      *iv_return = GL_RGB_SCALE_ARB;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_RGB_SCALE_EXT", 16)) {
    /*                          ^           */
#ifdef GL_RGB_SCALE_EXT
      *iv_return = GL_RGB_SCALE_EXT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case 'F':
    if (memEQ(name, "GL_CONTEXT_FLAGS", 16)) {
    /*                          ^           */
#ifdef GL_CONTEXT_FLAGS
      *iv_return = GL_CONTEXT_FLAGS;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_DRAW_BUFFER10", 16)) {
    /*                          ^           */
#ifdef GL_DRAW_BUFFER10
      *iv_return = GL_DRAW_BUFFER10;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_DRAW_BUFFER11", 16)) {
    /*                          ^           */
#ifdef GL_DRAW_BUFFER11
      *iv_return = GL_DRAW_BUFFER11;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_DRAW_BUFFER12", 16)) {
    /*                          ^           */
#ifdef GL_DRAW_BUFFER12
      *iv_return = GL_DRAW_BUFFER12;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_DRAW_BUFFER13", 16)) {
    /*                          ^           */
#ifdef GL_DRAW_BUFFER13
      *iv_return = GL_DRAW_BUFFER13;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_DRAW_BUFFER14", 16)) {
    /*                          ^           */
#ifdef GL_DRAW_BUFFER14
      *iv_return = GL_DRAW_BUFFER14;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_DRAW_BUFFER15", 16)) {
    /*                          ^           */
#ifdef GL_DRAW_BUFFER15
      *iv_return = GL_DRAW_BUFFER15;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case 'G':
    if (memEQ(name, "GL_COLORDODGE_NV", 16)) {
    /*                          ^           */
#ifdef GL_COLORDODGE_NV
      *iv_return = GL_COLORDODGE_NV;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_DSDT8_MAG8_NV", 16)) {
    /*                          ^           */
#ifdef GL_DSDT8_MAG8_NV
      *iv_return = GL_DSDT8_MAG8_NV;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_INVERT_RGB_NV", 16)) {
    /*                          ^           */
#ifdef GL_INVERT_RGB_NV
      *iv_return = GL_INVERT_RGB_NV;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_SIGNED_RGB_NV", 16)) {
    /*                          ^           */
#ifdef GL_SIGNED_RGB_NV
      *iv_return = GL_SIGNED_RGB_NV;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_TEXTURE_GEN_Q", 16)) {
    /*                          ^           */
#ifdef GL_TEXTURE_GEN_Q
      *iv_return = GL_TEXTURE_GEN_Q;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_TEXTURE_GEN_R", 16)) {
    /*                          ^           */
#ifdef GL_TEXTURE_GEN_R
      *iv_return = GL_TEXTURE_GEN_R;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_TEXTURE_GEN_S", 16)) {
    /*                          ^           */
#ifdef GL_TEXTURE_GEN_S
      *iv_return = GL_TEXTURE_GEN_S;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_TEXTURE_GEN_T", 16)) {
    /*                          ^           */
#ifdef GL_TEXTURE_GEN_T
      *iv_return = GL_TEXTURE_GEN_T;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glPathColorGenNV", 16)) {
    /*                          ^           */
#ifdef glPathColorGenNV
      *iv_return = glPathColorGenNV;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glPushDebugGroup", 16)) {
    /*                          ^           */
#ifdef glPushDebugGroup
      *iv_return = glPushDebugGroup;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case 'H':
    if (memEQ(name, "GL_QUAD_MESH_SUN", 16)) {
    /*                          ^           */
#ifdef GL_QUAD_MESH_SUN
      *iv_return = GL_QUAD_MESH_SUN;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_VERTEX_SHADER", 16)) {
    /*                          ^           */
#ifdef GL_VERTEX_SHADER
      *iv_return = GL_VERTEX_SHADER;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_VIVIDLIGHT_NV", 16)) {
    /*                          ^           */
#ifdef GL_VIVIDLIGHT_NV
      *iv_return = GL_VIVIDLIGHT_NV;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case 'I':
    if (memEQ(name, "GL_ALPHA16UI_EXT", 16)) {
    /*                          ^           */
#ifdef GL_ALPHA16UI_EXT
      *iv_return = GL_ALPHA16UI_EXT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_ALPHA32UI_EXT", 16)) {
    /*                          ^           */
#ifdef GL_ALPHA32UI_EXT
      *iv_return = GL_ALPHA32UI_EXT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_CURRENT_INDEX", 16)) {
    /*                          ^           */
#ifdef GL_CURRENT_INDEX
      *iv_return = GL_CURRENT_INDEX;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_INVALID_INDEX", 16)) {
    /*                          ^           */
#ifdef GL_INVALID_INDEX
      *iv_return = GL_INVALID_INDEX;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_ITALIC_BIT_NV", 16)) {
    /*                          ^           */
#ifdef GL_ITALIC_BIT_NV
      *iv_return = GL_ITALIC_BIT_NV;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_OBJECT_LINEAR", 16)) {
    /*                          ^           */
#ifdef GL_OBJECT_LINEAR
      *iv_return = GL_OBJECT_LINEAR;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_PROGRAM_INPUT", 16)) {
    /*                          ^           */
#ifdef GL_PROGRAM_INPUT
      *iv_return = GL_PROGRAM_INPUT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_QUERY_WAIT_NV", 16)) {
    /*                          ^           */
#ifdef GL_QUERY_WAIT_NV
      *iv_return = GL_QUERY_WAIT_NV;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_STENCIL_INDEX", 16)) {
    /*                          ^           */
#ifdef GL_STENCIL_INDEX
      *iv_return = GL_STENCIL_INDEX;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case 'L':
    if (memEQ(name, "glGetObjectLabel", 16)) {
    /*                          ^           */
#ifdef glGetObjectLabel
      *iv_return = glGetObjectLabel;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glObjectPtrLabel", 16)) {
    /*                          ^           */
#ifdef glObjectPtrLabel
      *iv_return = glObjectPtrLabel;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case 'M':
    if (memEQ(name, "GL_COLOR_SUM_ARB", 16)) {
    /*                          ^           */
#ifdef GL_COLOR_SUM_ARB
      *iv_return = GL_COLOR_SUM_ARB;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_COLOR_SUM_EXT", 16)) {
    /*                          ^           */
#ifdef GL_COLOR_SUM_EXT
      *iv_return = GL_COLOR_SUM_EXT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_HISTOGRAM_EXT", 16)) {
    /*                          ^           */
#ifdef GL_HISTOGRAM_EXT
      *iv_return = GL_HISTOGRAM_EXT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_TRANSFORM_BIT", 16)) {
    /*                          ^           */
#ifdef GL_TRANSFORM_BIT
      *iv_return = GL_TRANSFORM_BIT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case 'N':
    if (memEQ(name, "GLEW_VERSION_1_1", 16)) {
    /*                          ^           */
#ifdef GLEW_VERSION_1_1
      *iv_return = GLEW_VERSION_1_1;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GLEW_VERSION_1_2", 16)) {
    /*                          ^           */
#ifdef GLEW_VERSION_1_2
      *iv_return = GLEW_VERSION_1_2;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GLEW_VERSION_1_3", 16)) {
    /*                          ^           */
#ifdef GLEW_VERSION_1_3
      *iv_return = GLEW_VERSION_1_3;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GLEW_VERSION_1_4", 16)) {
    /*                          ^           */
#ifdef GLEW_VERSION_1_4
      *iv_return = GLEW_VERSION_1_4;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GLEW_VERSION_1_5", 16)) {
    /*                          ^           */
#ifdef GLEW_VERSION_1_5
      *iv_return = GLEW_VERSION_1_5;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GLEW_VERSION_2_0", 16)) {
    /*                          ^           */
#ifdef GLEW_VERSION_2_0
      *iv_return = GLEW_VERSION_2_0;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GLEW_VERSION_2_1", 16)) {
    /*                          ^           */
#ifdef GLEW_VERSION_2_1
      *iv_return = GLEW_VERSION_2_1;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GLEW_VERSION_3_0", 16)) {
    /*                          ^           */
#ifdef GLEW_VERSION_3_0
      *iv_return = GLEW_VERSION_3_0;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GLEW_VERSION_3_1", 16)) {
    /*                          ^           */
#ifdef GLEW_VERSION_3_1
      *iv_return = GLEW_VERSION_3_1;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GLEW_VERSION_3_2", 16)) {
    /*                          ^           */
#ifdef GLEW_VERSION_3_2
      *iv_return = GLEW_VERSION_3_2;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GLEW_VERSION_3_3", 16)) {
    /*                          ^           */
#ifdef GLEW_VERSION_3_3
      *iv_return = GLEW_VERSION_3_3;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GLEW_VERSION_4_0", 16)) {
    /*                          ^           */
#ifdef GLEW_VERSION_4_0
      *iv_return = GLEW_VERSION_4_0;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GLEW_VERSION_4_1", 16)) {
    /*                          ^           */
#ifdef GLEW_VERSION_4_1
      *iv_return = GLEW_VERSION_4_1;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GLEW_VERSION_4_2", 16)) {
    /*                          ^           */
#ifdef GLEW_VERSION_4_2
      *iv_return = GLEW_VERSION_4_2;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GLEW_VERSION_4_3", 16)) {
    /*                          ^           */
#ifdef GLEW_VERSION_4_3
      *iv_return = GLEW_VERSION_4_3;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GLEW_VERSION_4_4", 16)) {
    /*                          ^           */
#ifdef GLEW_VERSION_4_4
      *iv_return = GLEW_VERSION_4_4;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GLEW_VERSION_4_5", 16)) {
    /*                          ^           */
#ifdef GLEW_VERSION_4_5
      *iv_return = GLEW_VERSION_4_5;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_COLORBURN_KHR", 16)) {
    /*                          ^           */
#ifdef GL_COLORBURN_KHR
      *iv_return = GL_COLORBURN_KHR;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_CONFORMANT_NV", 16)) {
    /*                          ^           */
#ifdef GL_CONFORMANT_NV
      *iv_return = GL_CONFORMANT_NV;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_EXCLUSION_KHR", 16)) {
    /*                          ^           */
#ifdef GL_EXCLUSION_KHR
      *iv_return = GL_EXCLUSION_KHR;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case 'O':
    if (memEQ(name, "GL_IGNORE_BORDER", 16)) {
    /*                          ^           */
#ifdef GL_IGNORE_BORDER
      *iv_return = GL_IGNORE_BORDER;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_MINMAX_FORMAT", 16)) {
    /*                          ^           */
#ifdef GL_MINMAX_FORMAT
      *iv_return = GL_MINMAX_FORMAT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_SPOT_EXPONENT", 16)) {
    /*                          ^           */
#ifdef GL_SPOT_EXPONENT
      *iv_return = GL_SPOT_EXPONENT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case 'P':
    if (memEQ(name, "GL_COORD_REPLACE", 16)) {
    /*                          ^           */
#ifdef GL_COORD_REPLACE
      *iv_return = GL_COORD_REPLACE;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_DECR_WRAP_EXT", 16)) {
    /*                          ^           */
#ifdef GL_DECR_WRAP_EXT
      *iv_return = GL_DECR_WRAP_EXT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_INCR_WRAP_EXT", 16)) {
    /*                          ^           */
#ifdef GL_INCR_WRAP_EXT
      *iv_return = GL_INCR_WRAP_EXT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_MAX_VIEWPORTS", 16)) {
    /*                          ^           */
#ifdef GL_MAX_VIEWPORTS
      *iv_return = GL_MAX_VIEWPORTS;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case 'Q':
    if (memEQ(name, "GL_CURRENT_QUERY", 16)) {
    /*                          ^           */
#ifdef GL_CURRENT_QUERY
      *iv_return = GL_CURRENT_QUERY;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case 'R':
    if (memEQ(name, "GL_HSL_COLOR_KHR", 16)) {
    /*                          ^           */
#ifdef GL_HSL_COLOR_KHR
      *iv_return = GL_HSL_COLOR_KHR;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_LINEARBURN_NV", 16)) {
    /*                          ^           */
#ifdef GL_LINEARBURN_NV
      *iv_return = GL_LINEARBURN_NV;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_LOG_APP_REGAL", 16)) {
    /*                          ^           */
#ifdef GL_LOG_APP_REGAL
      *iv_return = GL_LOG_APP_REGAL;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_MAJOR_VERSION", 16)) {
    /*                          ^           */
#ifdef GL_MAJOR_VERSION
      *iv_return = GL_MAJOR_VERSION;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_MINOR_VERSION", 16)) {
    /*                          ^           */
#ifdef GL_MINOR_VERSION
      *iv_return = GL_MINOR_VERSION;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_MISSING_REGAL", 16)) {
    /*                          ^           */
#ifdef GL_MISSING_REGAL
      *iv_return = GL_MISSING_REGAL;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glMapBufferRange", 16)) {
    /*                          ^           */
#ifdef glMapBufferRange
      *iv_return = glMapBufferRange;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glTexBufferRange", 16)) {
    /*                          ^           */
#ifdef glTexBufferRange
      *iv_return = glTexBufferRange;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case 'S':
    if (memEQ(name, "GL_ALPHA16_SNORM", 16)) {
    /*                          ^           */
#ifdef GL_ALPHA16_SNORM
      *iv_return = GL_ALPHA16_SNORM;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_MAX_VIEWS_OVR", 16)) {
    /*                          ^           */
#ifdef GL_MAX_VIEWS_OVR
      *iv_return = GL_MAX_VIEWS_OVR;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case 'T':
    if (memEQ(name, "GL_ALPHA_INTEGER", 16)) {
    /*                          ^           */
#ifdef GL_ALPHA_INTEGER
      *iv_return = GL_ALPHA_INTEGER;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_BLEND_DST_RGB", 16)) {
    /*                          ^           */
#ifdef GL_BLEND_DST_RGB
      *iv_return = GL_BLEND_DST_RGB;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_CLOSE_PATH_NV", 16)) {
    /*                          ^           */
#ifdef GL_CLOSE_PATH_NV
      *iv_return = GL_CLOSE_PATH_NV;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_DELETE_STATUS", 16)) {
    /*                          ^           */
#ifdef GL_DELETE_STATUS
      *iv_return = GL_DELETE_STATUS;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_FUNC_SUBTRACT", 16)) {
    /*                          ^           */
#ifdef GL_FUNC_SUBTRACT
      *iv_return = GL_FUNC_SUBTRACT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_GREEN_BIT_ATI", 16)) {
    /*                          ^           */
#ifdef GL_GREEN_BIT_ATI
      *iv_return = GL_GREEN_BIT_ATI;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_GREEN_INTEGER", 16)) {
    /*                          ^           */
#ifdef GL_GREEN_INTEGER
      *iv_return = GL_GREEN_INTEGER;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_HARDLIGHT_KHR", 16)) {
    /*                          ^           */
#ifdef GL_HARDLIGHT_KHR
      *iv_return = GL_HARDLIGHT_KHR;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_INDEX_BIT_PGI", 16)) {
    /*                          ^           */
#ifdef GL_INDEX_BIT_PGI
      *iv_return = GL_INDEX_BIT_PGI;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_INVARIANT_EXT", 16)) {
    /*                          ^           */
#ifdef GL_INVARIANT_EXT
      *iv_return = GL_INVARIANT_EXT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_MAP1_VERTEX_3", 16)) {
    /*                          ^           */
#ifdef GL_MAP1_VERTEX_3
      *iv_return = GL_MAP1_VERTEX_3;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_MAP1_VERTEX_4", 16)) {
    /*                          ^           */
#ifdef GL_MAP1_VERTEX_4
      *iv_return = GL_MAP1_VERTEX_4;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_MAP2_VERTEX_3", 16)) {
    /*                          ^           */
#ifdef GL_MAP2_VERTEX_3
      *iv_return = GL_MAP2_VERTEX_3;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_MAP2_VERTEX_4", 16)) {
    /*                          ^           */
#ifdef GL_MAP2_VERTEX_4
      *iv_return = GL_MAP2_VERTEX_4;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_MATRIX_STRIDE", 16)) {
    /*                          ^           */
#ifdef GL_MATRIX_STRIDE
      *iv_return = GL_MATRIX_STRIDE;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_OP_SET_LT_EXT", 16)) {
    /*                          ^           */
#ifdef GL_OP_SET_LT_EXT
      *iv_return = GL_OP_SET_LT_EXT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_POLYGON_TOKEN", 16)) {
    /*                          ^           */
#ifdef GL_POLYGON_TOKEN
      *iv_return = GL_POLYGON_TOKEN;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_SOFTLIGHT_KHR", 16)) {
    /*                          ^           */
#ifdef GL_SOFTLIGHT_KHR
      *iv_return = GL_SOFTLIGHT_KHR;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glCopyColorTable", 16)) {
    /*                          ^           */
#ifdef glCopyColorTable
      *iv_return = glCopyColorTable;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case 'V':
    if (memEQ(name, "GL_INVALID_VALUE", 16)) {
    /*                          ^           */
#ifdef GL_INVALID_VALUE
      *iv_return = GL_INVALID_VALUE;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_INVERT_OVG_NV", 16)) {
    /*                          ^           */
#ifdef GL_INVERT_OVG_NV
      *iv_return = GL_INVERT_OVG_NV;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case 'W':
    if (memEQ(name, "GL_COUNT_DOWN_NV", 16)) {
    /*                          ^           */
#ifdef GL_COUNT_DOWN_NV
      *iv_return = GL_COUNT_DOWN_NV;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_TEXTURE_WIDTH", 16)) {
    /*                          ^           */
#ifdef GL_TEXTURE_WIDTH
      *iv_return = GL_TEXTURE_WIDTH;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case 'X':
    if (memEQ(name, "GL_CLEAR_TEXTURE", 16)) {
    /*                          ^           */
#ifdef GL_CLEAR_TEXTURE
      *iv_return = GL_CLEAR_TEXTURE;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case 'Y':
    if (memEQ(name, "GL_INTENSITY_EXT", 16)) {
    /*                          ^           */
#ifdef GL_INTENSITY_EXT
      *iv_return = GL_INTENSITY_EXT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_READ_ONLY_ARB", 16)) {
    /*                          ^           */
#ifdef GL_READ_ONLY_ARB
      *iv_return = GL_READ_ONLY_ARB;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case '_':
    if (memEQ(name, "GL_CLAMP_TO_EDGE", 16)) {
    /*                          ^           */
#ifdef GL_CLAMP_TO_EDGE
      *iv_return = GL_CLAMP_TO_EDGE;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_EYE_LINE_SGIS", 16)) {
    /*                          ^           */
#ifdef GL_EYE_LINE_SGIS
      *iv_return = GL_EYE_LINE_SGIS;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_IMAGE_2D_RECT", 16)) {
    /*                          ^           */
#ifdef GL_IMAGE_2D_RECT
      *iv_return = GL_IMAGE_2D_RECT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_LOGIC_OP_MODE", 16)) {
    /*                          ^           */
#ifdef GL_LOGIC_OP_MODE
      *iv_return = GL_LOGIC_OP_MODE;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_MAX_BLUE_SGIS", 16)) {
    /*                          ^           */
#ifdef GL_MAX_BLUE_SGIS
      *iv_return = GL_MAX_BLUE_SGIS;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_MIN_BLUE_SGIS", 16)) {
    /*                          ^           */
#ifdef GL_MIN_BLUE_SGIS
      *iv_return = GL_MIN_BLUE_SGIS;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_QUERY_NO_WAIT", 16)) {
    /*                          ^           */
#ifdef GL_QUERY_NO_WAIT
      *iv_return = GL_QUERY_NO_WAIT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_SUBPIXEL_BITS", 16)) {
    /*                          ^           */
#ifdef GL_SUBPIXEL_BITS
      *iv_return = GL_SUBPIXEL_BITS;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_TESS_GEN_MODE", 16)) {
    /*                          ^           */
#ifdef GL_TESS_GEN_MODE
      *iv_return = GL_TESS_GEN_MODE;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_UNSIGNED_BYTE", 16)) {
    /*                          ^           */
#ifdef GL_UNSIGNED_BYTE
      *iv_return = GL_UNSIGNED_BYTE;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_VARIABLE_A_NV", 16)) {
    /*                          ^           */
#ifdef GL_VARIABLE_A_NV
      *iv_return = GL_VARIABLE_A_NV;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_VARIABLE_B_NV", 16)) {
    /*                          ^           */
#ifdef GL_VARIABLE_B_NV
      *iv_return = GL_VARIABLE_B_NV;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_VARIABLE_C_NV", 16)) {
    /*                          ^           */
#ifdef GL_VARIABLE_C_NV
      *iv_return = GL_VARIABLE_C_NV;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_VARIABLE_D_NV", 16)) {
    /*                          ^           */
#ifdef GL_VARIABLE_D_NV
      *iv_return = GL_VARIABLE_D_NV;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_VARIABLE_E_NV", 16)) {
    /*                          ^           */
#ifdef GL_VARIABLE_E_NV
      *iv_return = GL_VARIABLE_E_NV;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_VARIABLE_F_NV", 16)) {
    /*                          ^           */
#ifdef GL_VARIABLE_F_NV
      *iv_return = GL_VARIABLE_F_NV;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_VARIABLE_G_NV", 16)) {
    /*                          ^           */
#ifdef GL_VARIABLE_G_NV
      *iv_return = GL_VARIABLE_G_NV;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_WIN_swap_hint", 16)) {
    /*                          ^           */
#ifdef GL_WIN_swap_hint
      *iv_return = GL_WIN_swap_hint;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glGetFloati_vEXT", 16)) {
    /*                          ^           */
#ifdef glGetFloati_vEXT
      *iv_return = glGetFloati_vEXT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case 'a':
    if (memEQ(name, "GLEW_ARB_imaging", 16)) {
    /*                          ^           */
#ifdef GLEW_ARB_imaging
      *iv_return = GLEW_ARB_imaging;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_NV_evaluators", 16)) {
    /*                          ^           */
#ifdef GL_NV_evaluators
      *iv_return = GL_NV_evaluators;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_OML_subsample", 16)) {
    /*                          ^           */
#ifdef GL_OML_subsample
      *iv_return = GL_OML_subsample;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_SGIX_resample", 16)) {
    /*                          ^           */
#ifdef GL_SGIX_resample
      *iv_return = GL_SGIX_resample;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glBindProgramARB", 16)) {
    /*                          ^           */
#ifdef glBindProgramARB
      *iv_return = glBindProgramARB;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glLinkProgramARB", 16)) {
    /*                          ^           */
#ifdef glLinkProgramARB
      *iv_return = glLinkProgramARB;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glResetMinmaxEXT", 16)) {
    /*                          ^           */
#ifdef glResetMinmaxEXT
      *iv_return = glResetMinmaxEXT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case 'b':
    if (memEQ(name, "GL_APPLE_rgb_422", 16)) {
    /*                          ^           */
#ifdef GL_APPLE_rgb_422
      *iv_return = GL_APPLE_rgb_422;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case 'c':
    if (memEQ(name, "GL_EXT_fog_coord", 16)) {
    /*                          ^           */
#ifdef GL_EXT_fog_coord
      *iv_return = GL_EXT_fog_coord;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glArrayObjectATI", 16)) {
    /*                          ^           */
#ifdef glArrayObjectATI
      *iv_return = glArrayObjectATI;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glDeleteFencesNV", 16)) {
    /*                          ^           */
#ifdef glDeleteFencesNV
      *iv_return = glDeleteFencesNV;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glGetFogFuncSGIS", 16)) {
    /*                          ^           */
#ifdef glGetFogFuncSGIS
      *iv_return = glGetFogFuncSGIS;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glLabelObjectEXT", 16)) {
    /*                          ^           */
#ifdef glLabelObjectEXT
      *iv_return = glLabelObjectEXT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case 'd':
    if (memEQ(name, "glDepthBoundsEXT", 16)) {
    /*                          ^           */
#ifdef glDepthBoundsEXT
      *iv_return = glDepthBoundsEXT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glDepthBoundsdNV", 16)) {
    /*                          ^           */
#ifdef glDepthBoundsdNV
      *iv_return = glDepthBoundsdNV;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glMatrixLoaddEXT", 16)) {
    /*                          ^           */
#ifdef glMatrixLoaddEXT
      *iv_return = glMatrixLoaddEXT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glMatrixLoadfEXT", 16)) {
    /*                          ^           */
#ifdef glMatrixLoadfEXT
      *iv_return = glMatrixLoadfEXT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glScissorIndexed", 16)) {
    /*                          ^           */
#ifdef glScissorIndexed
      *iv_return = glScissorIndexed;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case 'e':
    if (memEQ(name, "glClearBufferuiv", 16)) {
    /*                          ^           */
#ifdef glClearBufferuiv
      *iv_return = glClearBufferuiv;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glDeleteNamesAMD", 16)) {
    /*                          ^           */
#ifdef glDeleteNamesAMD
      *iv_return = glDeleteNamesAMD;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glDepthRangefOES", 16)) {
    /*                          ^           */
#ifdef glDepthRangefOES
      *iv_return = glDepthRangefOES;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glGenTexturesEXT", 16)) {
    /*                          ^           */
#ifdef glGenTexturesEXT
      *iv_return = glGenTexturesEXT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glSampleCoverage", 16)) {
    /*                          ^           */
#ifdef glSampleCoverage
      *iv_return = glSampleCoverage;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glUnmapBufferARB", 16)) {
    /*                          ^           */
#ifdef glUnmapBufferARB
      *iv_return = glUnmapBufferARB;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case 'f':
    if (memEQ(name, "GLEW_APPLE_fence", 16)) {
    /*                          ^           */
#ifdef GLEW_APPLE_fence
      *iv_return = GLEW_APPLE_fence;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_NV_half_float", 16)) {
    /*                          ^           */
#ifdef GL_NV_half_float
      *iv_return = GL_NV_half_float;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glPolygonOffsetx", 16)) {
    /*                          ^           */
#ifdef glPolygonOffsetx
      *iv_return = glPolygonOffsetx;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case 'g':
    if (memEQ(name, "glTextureFogSGIX", 16)) {
    /*                          ^           */
#ifdef glTextureFogSGIX
      *iv_return = glTextureFogSGIX;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case 'h':
    if (memEQ(name, "GLEW_SGIX_shadow", 16)) {
    /*                          ^           */
#ifdef GLEW_SGIX_shadow
      *iv_return = GLEW_SGIX_shadow;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_EXT_Cg_shader", 16)) {
    /*                          ^           */
#ifdef GL_EXT_Cg_shader
      *iv_return = GL_EXT_Cg_shader;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glClearDepthfOES", 16)) {
    /*                          ^           */
#ifdef glClearDepthfOES
      *iv_return = glClearDepthfOES;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glMatrixOrthoEXT", 16)) {
    /*                          ^           */
#ifdef glMatrixOrthoEXT
      *iv_return = glMatrixOrthoEXT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case 'i':
    if (memEQ(name, "GL_NV_copy_image", 16)) {
    /*                          ^           */
#ifdef GL_NV_copy_image
      *iv_return = GL_NV_copy_image;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_OVR_multiview", 16)) {
    /*                          ^           */
#ifdef GL_OVR_multiview
      *iv_return = GL_OVR_multiview;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glBlendBarrierNV", 16)) {
    /*                          ^           */
#ifdef glBlendBarrierNV
      *iv_return = glBlendBarrierNV;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glGenerateMipmap", 16)) {
    /*                          ^           */
#ifdef glGenerateMipmap
      *iv_return = glGenerateMipmap;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glUniform1ui64NV", 16)) {
    /*                          ^           */
#ifdef glUniform1ui64NV
      *iv_return = glUniform1ui64NV;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glUniform1uivEXT", 16)) {
    /*                          ^           */
#ifdef glUniform1uivEXT
      *iv_return = glUniform1uivEXT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glUniform2ui64NV", 16)) {
    /*                          ^           */
#ifdef glUniform2ui64NV
      *iv_return = glUniform2ui64NV;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glUniform2uivEXT", 16)) {
    /*                          ^           */
#ifdef glUniform2uivEXT
      *iv_return = glUniform2uivEXT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glUniform3ui64NV", 16)) {
    /*                          ^           */
#ifdef glUniform3ui64NV
      *iv_return = glUniform3ui64NV;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glUniform3uivEXT", 16)) {
    /*                          ^           */
#ifdef glUniform3uivEXT
      *iv_return = glUniform3uivEXT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glUniform4ui64NV", 16)) {
    /*                          ^           */
#ifdef glUniform4ui64NV
      *iv_return = glUniform4ui64NV;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glUniform4uivEXT", 16)) {
    /*                          ^           */
#ifdef glUniform4uivEXT
      *iv_return = glUniform4uivEXT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case 'k':
    if (memEQ(name, "glSampleMaskSGIS", 16)) {
    /*                          ^           */
#ifdef glSampleMaskSGIS
      *iv_return = glSampleMaskSGIS;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case 'l':
    if (memEQ(name, "glReadnPixelsARB", 16)) {
    /*                          ^           */
#ifdef glReadnPixelsARB
      *iv_return = glReadnPixelsARB;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case 'm':
    if (memEQ(name, "GLEW_ATI_meminfo", 16)) {
    /*                          ^           */
#ifdef GLEW_ATI_meminfo
      *iv_return = GLEW_ATI_meminfo;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glGenProgramsARB", 16)) {
    /*                          ^           */
#ifdef glGenProgramsARB
      *iv_return = glGenProgramsARB;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glGetProgramivNV", 16)) {
    /*                          ^           */
#ifdef glGetProgramivNV
      *iv_return = glGetProgramivNV;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glNormalFormatNV", 16)) {
    /*                          ^           */
#ifdef glNormalFormatNV
      *iv_return = glNormalFormatNV;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glVertexFormatNV", 16)) {
    /*                          ^           */
#ifdef glVertexFormatNV
      *iv_return = glVertexFormatNV;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case 'n':
    if (memEQ(name, "glDrawCommandsNV", 16)) {
    /*                          ^           */
#ifdef glDrawCommandsNV
      *iv_return = glDrawCommandsNV;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glNamedStringARB", 16)) {
    /*                          ^           */
#ifdef glNamedStringARB
      *iv_return = glNamedStringARB;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glPathCommandsNV", 16)) {
    /*                          ^           */
#ifdef glPathCommandsNV
      *iv_return = glPathCommandsNV;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glVertexBlendARB", 16)) {
    /*                          ^           */
#ifdef glVertexBlendARB
      *iv_return = glVertexBlendARB;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case 'o':
    if (memEQ(name, "GL_EXT_histogram", 16)) {
    /*                          ^           */
#ifdef GL_EXT_histogram
      *iv_return = GL_EXT_histogram;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glResetHistogram", 16)) {
    /*                          ^           */
#ifdef glResetHistogram
      *iv_return = glResetHistogram;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case 'p':
    if (memEQ(name, "GLEW_SGIX_sprite", 16)) {
    /*                          ^           */
#ifdef GLEW_SGIX_sprite
      *iv_return = GLEW_SGIX_sprite;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glCreateSamplers", 16)) {
    /*                          ^           */
#ifdef glCreateSamplers
      *iv_return = glCreateSamplers;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glDeleteSamplers", 16)) {
    /*                          ^           */
#ifdef glDeleteSamplers
      *iv_return = glDeleteSamplers;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case 'r':
    if (memEQ(name, "GL_OML_interlace", 16)) {
    /*                          ^           */
#ifdef GL_OML_interlace
      *iv_return = GL_OML_interlace;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glBindBufferBase", 16)) {
    /*                          ^           */
#ifdef glBindBufferBase
      *iv_return = glBindBufferBase;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glBindTextureEXT", 16)) {
    /*                          ^           */
#ifdef glBindTextureEXT
      *iv_return = glBindTextureEXT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glDrawBuffersARB", 16)) {
    /*                          ^           */
#ifdef glDrawBuffersARB
      *iv_return = glDrawBuffersARB;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glDrawBuffersATI", 16)) {
    /*                          ^           */
#ifdef glDrawBuffersATI
      *iv_return = glDrawBuffersATI;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glGetnUniformuiv", 16)) {
    /*                          ^           */
#ifdef glGetnUniformuiv
      *iv_return = glGetnUniformuiv;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glTextureBarrier", 16)) {
    /*                          ^           */
#ifdef glTextureBarrier
      *iv_return = glTextureBarrier;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glVertexAttrib1d", 16)) {
    /*                          ^           */
#ifdef glVertexAttrib1d
      *iv_return = glVertexAttrib1d;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glVertexAttrib1f", 16)) {
    /*                          ^           */
#ifdef glVertexAttrib1f
      *iv_return = glVertexAttrib1f;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glVertexAttrib1s", 16)) {
    /*                          ^           */
#ifdef glVertexAttrib1s
      *iv_return = glVertexAttrib1s;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glVertexAttrib2d", 16)) {
    /*                          ^           */
#ifdef glVertexAttrib2d
      *iv_return = glVertexAttrib2d;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glVertexAttrib2f", 16)) {
    /*                          ^           */
#ifdef glVertexAttrib2f
      *iv_return = glVertexAttrib2f;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glVertexAttrib2s", 16)) {
    /*                          ^           */
#ifdef glVertexAttrib2s
      *iv_return = glVertexAttrib2s;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glVertexAttrib3d", 16)) {
    /*                          ^           */
#ifdef glVertexAttrib3d
      *iv_return = glVertexAttrib3d;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glVertexAttrib3f", 16)) {
    /*                          ^           */
#ifdef glVertexAttrib3f
      *iv_return = glVertexAttrib3f;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glVertexAttrib3s", 16)) {
    /*                          ^           */
#ifdef glVertexAttrib3s
      *iv_return = glVertexAttrib3s;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glVertexAttrib4d", 16)) {
    /*                          ^           */
#ifdef glVertexAttrib4d
      *iv_return = glVertexAttrib4d;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glVertexAttrib4f", 16)) {
    /*                          ^           */
#ifdef glVertexAttrib4f
      *iv_return = glVertexAttrib4f;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glVertexAttrib4s", 16)) {
    /*                          ^           */
#ifdef glVertexAttrib4s
      *iv_return = glVertexAttrib4s;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glViewportArrayv", 16)) {
    /*                          ^           */
#ifdef glViewportArrayv
      *iv_return = glViewportArrayv;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case 't':
    if (memEQ(name, "glBlendEquationi", 16)) {
    /*                          ^           */
#ifdef glBlendEquationi
      *iv_return = glBlendEquationi;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glClientWaitSync", 16)) {
    /*                          ^           */
#ifdef glClientWaitSync
      *iv_return = glClientWaitSync;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glCreateStatesNV", 16)) {
    /*                          ^           */
#ifdef glCreateStatesNV
      *iv_return = glCreateStatesNV;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glCreateTextures", 16)) {
    /*                          ^           */
#ifdef glCreateTextures
      *iv_return = glCreateTextures;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glDeleteStatesNV", 16)) {
    /*                          ^           */
#ifdef glDeleteStatesNV
      *iv_return = glDeleteStatesNV;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glMatrixMultdEXT", 16)) {
    /*                          ^           */
#ifdef glMatrixMultdEXT
      *iv_return = glMatrixMultdEXT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glMatrixMultfEXT", 16)) {
    /*                          ^           */
#ifdef glMatrixMultfEXT
      *iv_return = glMatrixMultfEXT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glTexParameterxv", 16)) {
    /*                          ^           */
#ifdef glTexParameterxv
      *iv_return = glTexParameterxv;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case 'u':
    if (memEQ(name, "GL_EXT_texture3D", 16)) {
    /*                          ^           */
#ifdef GL_EXT_texture3D
      *iv_return = GL_EXT_texture3D;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glIsRenderbuffer", 16)) {
    /*                          ^           */
#ifdef glIsRenderbuffer
      *iv_return = glIsRenderbuffer;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glMapNamedBuffer", 16)) {
    /*                          ^           */
#ifdef glMapNamedBuffer
      *iv_return = glMapNamedBuffer;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glStateCaptureNV", 16)) {
    /*                          ^           */
#ifdef glStateCaptureNV
      *iv_return = glStateCaptureNV;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glVideoCaptureNV", 16)) {
    /*                          ^           */
#ifdef glVideoCaptureNV
      *iv_return = glVideoCaptureNV;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case 'x':
    if (memEQ(name, "GLEW_EXT_texture", 16)) {
    /*                          ^           */
#ifdef GLEW_EXT_texture
      *iv_return = GLEW_EXT_texture;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  }
  return PERL_constant_NOTFOUND;
}

static int
constant_17 (pTHX_ const char *name, IV *iv_return) {
  /* When generated this function returned values for the list of names given
     here.  However, subsequent manual editing may have added or removed some.
     GLEW_3DFX_tbuffer GLEW_ARB_cl_event GLEW_ARB_gl_spirv GLEW_KHR_no_error
     GLEW_OML_resample GLEW_REGAL_enable GLEW_SGIX_clipmap GL_ACCUM_RED_BITS
     GL_ACTIVE_PROGRAM GL_ACTIVE_TEXTURE GL_ADD_SIGNED_ARB GL_ADD_SIGNED_EXT
     GL_ALPHA_MAX_SGIX GL_ALPHA_MIN_SGIX GL_ALPHA_TEST_REF GL_AMD_gcn_shader
     GL_ARB_copy_image GL_ARB_multi_bind GL_ARB_robustness GL_ARB_texture_rg
     GL_ARB_window_pos GL_BLEND_EQUATION GL_BUFFER_BINDING GL_CAVEAT_SUPPORT
     GL_CLIP_DISTANCE0 GL_CLIP_DISTANCE1 GL_CLIP_DISTANCE2 GL_CLIP_DISTANCE3
     GL_CLIP_DISTANCE4 GL_CLIP_DISTANCE5 GL_COLOR3_BIT_PGI GL_COLOR4_BIT_PGI
     GL_COLORDODGE_KHR GL_COLOR_ENCODING GL_COLOR_LOGIC_OP GL_COLOR_MATERIAL
     GL_COMPILE_STATUS GL_COMPRESSED_RED GL_COMPRESSED_RGB GL_COMPUTE_SHADER
     GL_CONSTANT_ALPHA GL_CONSTANT_COLOR GL_CONTINUOUS_AMD GL_CONVEX_HULL_NV
     GL_CONVOLUTION_1D GL_CONVOLUTION_2D GL_CULL_FACE_MODE GL_CURRENT_NORMAL
     GL_DEPTH_CLAMP_NV GL_DIFFERENCE_KHR GL_DOT_PRODUCT_NV GL_EIGHTH_BIT_ATI
     GL_EXT_422_pixels GL_EXT_index_func GL_EXT_subtexture GL_EYE_POINT_SGIS
     GL_FACTOR_MAX_AMD GL_FACTOR_MIN_AMD GL_FIELD_LOWER_NV GL_FIELD_UPPER_NV
     GL_FIXED_ONLY_ARB GL_FLOAT_MAT2_ARB GL_FLOAT_MAT3_ARB GL_FLOAT_MAT4_ARB
     GL_FLOAT_RGB16_NV GL_FLOAT_RGB32_NV GL_FLOAT_VEC2_ARB GL_FLOAT_VEC3_ARB
     GL_FLOAT_VEC4_ARB GL_FOG_COORDINATE GL_FRACTIONAL_ODD GL_FRAGMENT_DEPTH
     GL_FRONT_AND_BACK GL_FULL_RANGE_EXT GL_GPU_ADDRESS_NV GL_HALF_FLOAT_ARB
     GL_HISTOGRAM_SINK GL_IMAGE_1D_ARRAY GL_IMAGE_2D_ARRAY GL_IMAGE_CUBE_EXT
     GL_INDEX_LOGIC_OP GL_INT64_VEC2_ARB GL_INT64_VEC3_ARB GL_INT64_VEC4_ARB
     GL_INTENSITY4_EXT GL_INTENSITY8_EXT GL_INTERLACE_SGIX GL_INT_IMAGE_CUBE
     GL_INT_SAMPLER_1D GL_INT_SAMPLER_2D GL_INT_SAMPLER_3D GL_KHR_robustness
     GL_LINEARDODGE_NV GL_LINEARLIGHT_NV GL_LOCATION_INDEX GL_LOG_HTTP_REGAL
     GL_LOG_INFO_REGAL GL_LUMINANCE4_EXT GL_LUMINANCE8_EXT GL_MAX_ALPHA_SGIS
     GL_MAX_EVAL_ORDER GL_MAX_GREEN_SGIS GL_MIN_ALPHA_SGIS GL_MIN_GREEN_SGIS
     GL_MODELVIEW0_ARB GL_MODELVIEW0_EXT GL_MODELVIEW1_ARB GL_MODELVIEW1_EXT
     GL_MODELVIEW2_ARB GL_MODELVIEW3_ARB GL_MODELVIEW4_ARB GL_MODELVIEW5_ARB
     GL_MODELVIEW6_ARB GL_MODELVIEW7_ARB GL_MODELVIEW8_ARB GL_MODELVIEW9_ARB
     GL_MVP_MATRIX_EXT GL_NEGATE_BIT_ATI GL_NEGATIVE_W_EXT GL_NEGATIVE_X_EXT
     GL_NEGATIVE_Y_EXT GL_NEGATIVE_Z_EXT GL_NOP_COMMAND_NV GL_NORMAL_BIT_PGI
     GL_NORMAL_MAP_ARB GL_NORMAL_MAP_EXT GL_NUM_EXTENSIONS GL_NUM_PASSES_ATI
     GL_NV_depth_clamp GL_NV_gpu_shader5 GL_OPERAND0_ALPHA GL_OPERAND1_ALPHA
     GL_OPERAND2_ALPHA GL_OUTPUT_FOG_EXT GL_OVR_multiview2 GL_PACK_ALIGNMENT
     GL_PACK_LSB_FIRST GL_PACK_SKIP_ROWS GL_PATCH_VERTICES GL_PERCENTAGE_AMD
     GL_PGI_misc_hints GL_PHONG_HINT_WIN GL_PIXEL_COUNT_NV GL_PIXEL_MODE_BIT
     GL_PLUS_DARKER_NV GL_POINT_SIZE_MAX GL_POINT_SIZE_MIN GL_POLYGON_SMOOTH
     GL_PROGRAM_OUTPUT GL_R11F_G11F_B10F GL_READ_WRITE_ARB GL_REFLECTION_MAP
     GL_RELEASED_APPLE GL_RESCALE_NORMAL GL_RETAINED_APPLE GL_RGBA_DXT5_S3TC
     GL_SAMPLER_1D_ARB GL_SAMPLER_2D_ARB GL_SAMPLER_3D_ARB GL_SAMPLER_BUFFER
     GL_SAMPLES_PASSED GL_SAMPLE_BUFFERS GL_SAMPLE_MASK_NV GL_SAMPLE_SHADING
     GL_SGIS_texture4D GL_SGIX_framezoom GL_SGIX_interlace GL_SHARED_EDGE_NV
     GL_SIGNED_HILO_NV GL_SIGNED_RGB8_NV GL_SIGNED_RGBA_NV GL_SLUMINANCE_EXT
     GL_SOURCE3_RGB_NV GL_SPOT_DIRECTION GL_SRGB_ALPHA_EXT GL_STACK_OVERFLOW
     GL_STENCIL_BUFFER GL_STENCIL_INDEX1 GL_STENCIL_INDEX4 GL_STENCIL_INDEX8
     GL_SUN_mesh_array GL_SYNC_CONDITION GL_TEXTURE_3D_EXT GL_TEXTURE_BORDER
     GL_TEXTURE_BUFFER GL_TEXTURE_GATHER GL_TEXTURE_HEIGHT GL_TEXTURE_MATRIX
     GL_TEXTURE_SHADOW GL_TEXTURE_TARGET GL_TEXTURE_WRAP_R GL_TEXTURE_WRAP_S
     GL_TEXTURE_WRAP_T GL_TRANSLATE_X_NV GL_TRANSLATE_Y_NV GL_TRIANGLE_STRIP
     GL_UNIFORM_BUFFER GL_UNIFORM_OFFSET GL_UNSIGNED_SHORT GL_VERTEX_TEXTURE
     GL_VOLATILE_APPLE GL_WRITE_ONLY_ARB GL_YCBYCR8_422_NV glActiveVaryingNV
     glApplyTextureEXT glArrayElementEXT glAsyncMarkerSGIX glAttachObjectARB
     glBeginQueryANGLE glBindBufferRange glBindBuffersBase glBindFramebuffer
     glBindTextureUnit glBindVertexArray glBlendBarrierKHR glBlitFramebuffer
     glClearBufferData glClearColorIiEXT glColorPointerEXT glCombinerInputNV
     glCoverFillPathNV glDeleteObjectARB glDetachObjectARB glDispatchCompute
     glEndQueryIndexed glFinishAsyncSGIX glFlushRasterSGIX glFogCoordPointer
     glGenFramebuffers glGenQueriesANGLE glGenVertexArrays glGetActiveAttrib
     glGetDoublei_vEXT glGetHistogramEXT glGetInteger64i_v glGetPathCoordsNV
     glGetPathLengthNV glGetProgramivARB glGetQueryivANGLE glGetShaderSource
     glGetStageIndexNV glGetTextureImage glGetUniformfvARB glGetUniformivARB
     glGetVideoui64vNV glGetVkProcAddrNV glGetnTexImageARB glIndexPointerEXT
     glIsCommandListNV glMatrixScaledEXT glMatrixScalefEXT glMultiDrawArrays
     glMultiTexCoord1d glMultiTexCoord1f glMultiTexCoord1i glMultiTexCoord1s
     glMultiTexCoord2d glMultiTexCoord2f glMultiTexCoord2i glMultiTexCoord2s
     glMultiTexCoord3d glMultiTexCoord3f glMultiTexCoord3i glMultiTexCoord3s
     glMultiTexCoord4d glMultiTexCoord4f glMultiTexCoord4i glMultiTexCoord4s
     glMultiTexCoord4x glMultiTexEnvfEXT glMultiTexEnviEXT glMultiTexGendEXT
     glMultiTexGenfEXT glMultiTexGeniEXT glNamedBufferData glNewBufferRegion
     glPNTrianglesfATI glPNTrianglesiATI glPassTexCoordATI glPatchParameteri
     glPathDashArrayNV glPathSubCoordsNV glPixelTexGenSGIX glPointParameterf
     glPointParameteri glPointParameterx glProvokingVertex glRenderGpuMaskNV
     glSampleCoveragex glScissorIndexedv glSetInvariantEXT glShaderSourceARB
     glSignalVkFenceNV glTbufferMask3DFX glTestObjectAPPLE glTexParameterIiv
     glTexScissorINTEL glTextureLightEXT glTransformPathNV glUniform1i64vARB
     glUniform1ui64ARB glUniform1ui64vNV glUniform2i64vARB glUniform2ui64ARB
     glUniform2ui64vNV glUniform3i64vARB glUniform3ui64ARB glUniform3ui64vNV
     glUniform4i64vARB glUniform4ui64ARB glUniform4ui64vNV glUnlockArraysEXT
     glValidateProgram glVertexAttrib1dv glVertexAttrib1fv glVertexAttrib1sv
     glVertexAttrib2dv glVertexAttrib2fv glVertexAttrib2sv glVertexAttrib3dv
     glVertexAttrib3fv glVertexAttrib3sv glVertexAttrib4bv glVertexAttrib4dv
     glVertexAttrib4fv glVertexAttrib4iv glVertexAttrib4sv glVertexAttribI1i
     glVertexAttribI2i glVertexAttribI3i glVertexAttribI4i glVertexAttribL1d
     glVertexAttribL2d glVertexAttribL3d glVertexAttribL4d glVertexWeighthNV
     glWindowPos2dMESA glWindowPos2dvARB glWindowPos2fMESA glWindowPos2fvARB
     glWindowPos2iMESA glWindowPos2ivARB glWindowPos2sMESA glWindowPos2svARB
     glWindowPos3dMESA glWindowPos3dvARB glWindowPos3fMESA glWindowPos3fvARB
     glWindowPos3iMESA glWindowPos3ivARB glWindowPos3sMESA glWindowPos3svARB
     glWindowPos4dMESA glWindowPos4fMESA glWindowPos4iMESA glWindowPos4sMESA */
  /* Offset 12 gives the best switch position.  */
  switch (name[12]) {
  case '0':
    if (memEQ(name, "GL_MODELVIEW0_ARB", 17)) {
    /*                           ^           */
#ifdef GL_MODELVIEW0_ARB
      *iv_return = GL_MODELVIEW0_ARB;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_MODELVIEW0_EXT", 17)) {
    /*                           ^           */
#ifdef GL_MODELVIEW0_EXT
      *iv_return = GL_MODELVIEW0_EXT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case '1':
    if (memEQ(name, "GL_FLOAT_RGB16_NV", 17)) {
    /*                           ^           */
#ifdef GL_FLOAT_RGB16_NV
      *iv_return = GL_FLOAT_RGB16_NV;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_MODELVIEW1_ARB", 17)) {
    /*                           ^           */
#ifdef GL_MODELVIEW1_ARB
      *iv_return = GL_MODELVIEW1_ARB;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_MODELVIEW1_EXT", 17)) {
    /*                           ^           */
#ifdef GL_MODELVIEW1_EXT
      *iv_return = GL_MODELVIEW1_EXT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case '2':
    if (memEQ(name, "GL_FLOAT_MAT2_ARB", 17)) {
    /*                           ^           */
#ifdef GL_FLOAT_MAT2_ARB
      *iv_return = GL_FLOAT_MAT2_ARB;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_FLOAT_VEC2_ARB", 17)) {
    /*                           ^           */
#ifdef GL_FLOAT_VEC2_ARB
      *iv_return = GL_FLOAT_VEC2_ARB;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_INT64_VEC2_ARB", 17)) {
    /*                           ^           */
#ifdef GL_INT64_VEC2_ARB
      *iv_return = GL_INT64_VEC2_ARB;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_MODELVIEW2_ARB", 17)) {
    /*                           ^           */
#ifdef GL_MODELVIEW2_ARB
      *iv_return = GL_MODELVIEW2_ARB;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_YCBYCR8_422_NV", 17)) {
    /*                           ^           */
#ifdef GL_YCBYCR8_422_NV
      *iv_return = GL_YCBYCR8_422_NV;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case '3':
    if (memEQ(name, "GL_FLOAT_MAT3_ARB", 17)) {
    /*                           ^           */
#ifdef GL_FLOAT_MAT3_ARB
      *iv_return = GL_FLOAT_MAT3_ARB;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_FLOAT_RGB32_NV", 17)) {
    /*                           ^           */
#ifdef GL_FLOAT_RGB32_NV
      *iv_return = GL_FLOAT_RGB32_NV;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_FLOAT_VEC3_ARB", 17)) {
    /*                           ^           */
#ifdef GL_FLOAT_VEC3_ARB
      *iv_return = GL_FLOAT_VEC3_ARB;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_INT64_VEC3_ARB", 17)) {
    /*                           ^           */
#ifdef GL_INT64_VEC3_ARB
      *iv_return = GL_INT64_VEC3_ARB;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_MODELVIEW3_ARB", 17)) {
    /*                           ^           */
#ifdef GL_MODELVIEW3_ARB
      *iv_return = GL_MODELVIEW3_ARB;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case '4':
    if (memEQ(name, "GL_FLOAT_MAT4_ARB", 17)) {
    /*                           ^           */
#ifdef GL_FLOAT_MAT4_ARB
      *iv_return = GL_FLOAT_MAT4_ARB;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_FLOAT_VEC4_ARB", 17)) {
    /*                           ^           */
#ifdef GL_FLOAT_VEC4_ARB
      *iv_return = GL_FLOAT_VEC4_ARB;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_INT64_VEC4_ARB", 17)) {
    /*                           ^           */
#ifdef GL_INT64_VEC4_ARB
      *iv_return = GL_INT64_VEC4_ARB;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_INTENSITY4_EXT", 17)) {
    /*                           ^           */
#ifdef GL_INTENSITY4_EXT
      *iv_return = GL_INTENSITY4_EXT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_LUMINANCE4_EXT", 17)) {
    /*                           ^           */
#ifdef GL_LUMINANCE4_EXT
      *iv_return = GL_LUMINANCE4_EXT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_MODELVIEW4_ARB", 17)) {
    /*                           ^           */
#ifdef GL_MODELVIEW4_ARB
      *iv_return = GL_MODELVIEW4_ARB;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glUniform1i64vARB", 17)) {
    /*                           ^           */
#ifdef glUniform1i64vARB
      *iv_return = glUniform1i64vARB;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glUniform2i64vARB", 17)) {
    /*                           ^           */
#ifdef glUniform2i64vARB
      *iv_return = glUniform2i64vARB;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glUniform3i64vARB", 17)) {
    /*                           ^           */
#ifdef glUniform3i64vARB
      *iv_return = glUniform3i64vARB;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glUniform4i64vARB", 17)) {
    /*                           ^           */
#ifdef glUniform4i64vARB
      *iv_return = glUniform4i64vARB;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case '5':
    if (memEQ(name, "GL_MODELVIEW5_ARB", 17)) {
    /*                           ^           */
#ifdef GL_MODELVIEW5_ARB
      *iv_return = GL_MODELVIEW5_ARB;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case '6':
    if (memEQ(name, "GL_MODELVIEW6_ARB", 17)) {
    /*                           ^           */
#ifdef GL_MODELVIEW6_ARB
      *iv_return = GL_MODELVIEW6_ARB;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glGetInteger64i_v", 17)) {
    /*                           ^           */
#ifdef glGetInteger64i_v
      *iv_return = glGetInteger64i_v;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glGetVideoui64vNV", 17)) {
    /*                           ^           */
#ifdef glGetVideoui64vNV
      *iv_return = glGetVideoui64vNV;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glUniform1ui64ARB", 17)) {
    /*                           ^           */
#ifdef glUniform1ui64ARB
      *iv_return = glUniform1ui64ARB;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glUniform1ui64vNV", 17)) {
    /*                           ^           */
#ifdef glUniform1ui64vNV
      *iv_return = glUniform1ui64vNV;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glUniform2ui64ARB", 17)) {
    /*                           ^           */
#ifdef glUniform2ui64ARB
      *iv_return = glUniform2ui64ARB;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glUniform2ui64vNV", 17)) {
    /*                           ^           */
#ifdef glUniform2ui64vNV
      *iv_return = glUniform2ui64vNV;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glUniform3ui64ARB", 17)) {
    /*                           ^           */
#ifdef glUniform3ui64ARB
      *iv_return = glUniform3ui64ARB;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glUniform3ui64vNV", 17)) {
    /*                           ^           */
#ifdef glUniform3ui64vNV
      *iv_return = glUniform3ui64vNV;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glUniform4ui64ARB", 17)) {
    /*                           ^           */
#ifdef glUniform4ui64ARB
      *iv_return = glUniform4ui64ARB;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glUniform4ui64vNV", 17)) {
    /*                           ^           */
#ifdef glUniform4ui64vNV
      *iv_return = glUniform4ui64vNV;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case '7':
    if (memEQ(name, "GL_MODELVIEW7_ARB", 17)) {
    /*                           ^           */
#ifdef GL_MODELVIEW7_ARB
      *iv_return = GL_MODELVIEW7_ARB;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case '8':
    if (memEQ(name, "GL_INTENSITY8_EXT", 17)) {
    /*                           ^           */
#ifdef GL_INTENSITY8_EXT
      *iv_return = GL_INTENSITY8_EXT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_LUMINANCE8_EXT", 17)) {
    /*                           ^           */
#ifdef GL_LUMINANCE8_EXT
      *iv_return = GL_LUMINANCE8_EXT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_MODELVIEW8_ARB", 17)) {
    /*                           ^           */
#ifdef GL_MODELVIEW8_ARB
      *iv_return = GL_MODELVIEW8_ARB;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case '9':
    if (memEQ(name, "GL_MODELVIEW9_ARB", 17)) {
    /*                           ^           */
#ifdef GL_MODELVIEW9_ARB
      *iv_return = GL_MODELVIEW9_ARB;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case 'A':
    if (memEQ(name, "GL_BLEND_EQUATION", 17)) {
    /*                           ^           */
#ifdef GL_BLEND_EQUATION
      *iv_return = GL_BLEND_EQUATION;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_CLIP_DISTANCE0", 17)) {
    /*                           ^           */
#ifdef GL_CLIP_DISTANCE0
      *iv_return = GL_CLIP_DISTANCE0;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_CLIP_DISTANCE1", 17)) {
    /*                           ^           */
#ifdef GL_CLIP_DISTANCE1
      *iv_return = GL_CLIP_DISTANCE1;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_CLIP_DISTANCE2", 17)) {
    /*                           ^           */
#ifdef GL_CLIP_DISTANCE2
      *iv_return = GL_CLIP_DISTANCE2;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_CLIP_DISTANCE3", 17)) {
    /*                           ^           */
#ifdef GL_CLIP_DISTANCE3
      *iv_return = GL_CLIP_DISTANCE3;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_CLIP_DISTANCE4", 17)) {
    /*                           ^           */
#ifdef GL_CLIP_DISTANCE4
      *iv_return = GL_CLIP_DISTANCE4;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_CLIP_DISTANCE5", 17)) {
    /*                           ^           */
#ifdef GL_CLIP_DISTANCE5
      *iv_return = GL_CLIP_DISTANCE5;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_CONSTANT_ALPHA", 17)) {
    /*                           ^           */
#ifdef GL_CONSTANT_ALPHA
      *iv_return = GL_CONSTANT_ALPHA;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_IMAGE_1D_ARRAY", 17)) {
    /*                           ^           */
#ifdef GL_IMAGE_1D_ARRAY
      *iv_return = GL_IMAGE_1D_ARRAY;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_IMAGE_2D_ARRAY", 17)) {
    /*                           ^           */
#ifdef GL_IMAGE_2D_ARRAY
      *iv_return = GL_IMAGE_2D_ARRAY;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_OPERAND0_ALPHA", 17)) {
    /*                           ^           */
#ifdef GL_OPERAND0_ALPHA
      *iv_return = GL_OPERAND0_ALPHA;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_OPERAND1_ALPHA", 17)) {
    /*                           ^           */
#ifdef GL_OPERAND1_ALPHA
      *iv_return = GL_OPERAND1_ALPHA;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_OPERAND2_ALPHA", 17)) {
    /*                           ^           */
#ifdef GL_OPERAND2_ALPHA
      *iv_return = GL_OPERAND2_ALPHA;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_RELEASED_APPLE", 17)) {
    /*                           ^           */
#ifdef GL_RELEASED_APPLE
      *iv_return = GL_RELEASED_APPLE;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_RETAINED_APPLE", 17)) {
    /*                           ^           */
#ifdef GL_RETAINED_APPLE
      *iv_return = GL_RETAINED_APPLE;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_SAMPLES_PASSED", 17)) {
    /*                           ^           */
#ifdef GL_SAMPLES_PASSED
      *iv_return = GL_SAMPLES_PASSED;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_SAMPLE_SHADING", 17)) {
    /*                           ^           */
#ifdef GL_SAMPLE_SHADING
      *iv_return = GL_SAMPLE_SHADING;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_SRGB_ALPHA_EXT", 17)) {
    /*                           ^           */
#ifdef GL_SRGB_ALPHA_EXT
      *iv_return = GL_SRGB_ALPHA_EXT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_TEXTURE_GATHER", 17)) {
    /*                           ^           */
#ifdef GL_TEXTURE_GATHER
      *iv_return = GL_TEXTURE_GATHER;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_TEXTURE_MATRIX", 17)) {
    /*                           ^           */
#ifdef GL_TEXTURE_MATRIX
      *iv_return = GL_TEXTURE_MATRIX;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_TEXTURE_TARGET", 17)) {
    /*                           ^           */
#ifdef GL_TEXTURE_TARGET
      *iv_return = GL_TEXTURE_TARGET;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_VOLATILE_APPLE", 17)) {
    /*                           ^           */
#ifdef GL_VOLATILE_APPLE
      *iv_return = GL_VOLATILE_APPLE;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glBeginQueryANGLE", 17)) {
    /*                           ^           */
#ifdef glBeginQueryANGLE
      *iv_return = glBeginQueryANGLE;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glBindVertexArray", 17)) {
    /*                           ^           */
#ifdef glBindVertexArray
      *iv_return = glBindVertexArray;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glGenQueriesANGLE", 17)) {
    /*                           ^           */
#ifdef glGenQueriesANGLE
      *iv_return = glGenQueriesANGLE;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glGetQueryivANGLE", 17)) {
    /*                           ^           */
#ifdef glGetQueryivANGLE
      *iv_return = glGetQueryivANGLE;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glTestObjectAPPLE", 17)) {
    /*                           ^           */
#ifdef glTestObjectAPPLE
      *iv_return = glTestObjectAPPLE;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case 'B':
    if (memEQ(name, "GL_SIGNED_RGB8_NV", 17)) {
    /*                           ^           */
#ifdef GL_SIGNED_RGB8_NV
      *iv_return = GL_SIGNED_RGB8_NV;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_SIGNED_RGBA_NV", 17)) {
    /*                           ^           */
#ifdef GL_SIGNED_RGBA_NV
      *iv_return = GL_SIGNED_RGBA_NV;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case 'C':
    if (memEQ(name, "GL_CONSTANT_COLOR", 17)) {
    /*                           ^           */
#ifdef GL_CONSTANT_COLOR
      *iv_return = GL_CONSTANT_COLOR;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_DOT_PRODUCT_NV", 17)) {
    /*                           ^           */
#ifdef GL_DOT_PRODUCT_NV
      *iv_return = GL_DOT_PRODUCT_NV;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_SPOT_DIRECTION", 17)) {
    /*                           ^           */
#ifdef GL_SPOT_DIRECTION
      *iv_return = GL_SPOT_DIRECTION;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case 'D':
    if (memEQ(name, "GL_ADD_SIGNED_ARB", 17)) {
    /*                           ^           */
#ifdef GL_ADD_SIGNED_ARB
      *iv_return = GL_ADD_SIGNED_ARB;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_ADD_SIGNED_EXT", 17)) {
    /*                           ^           */
#ifdef GL_ADD_SIGNED_EXT
      *iv_return = GL_ADD_SIGNED_EXT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_COMPRESSED_RED", 17)) {
    /*                           ^           */
#ifdef GL_COMPRESSED_RED
      *iv_return = GL_COMPRESSED_RED;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_COMPRESSED_RGB", 17)) {
    /*                           ^           */
#ifdef GL_COMPRESSED_RGB
      *iv_return = GL_COMPRESSED_RGB;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_FRAGMENT_DEPTH", 17)) {
    /*                           ^           */
#ifdef GL_FRAGMENT_DEPTH
      *iv_return = GL_FRAGMENT_DEPTH;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_SAMPLER_1D_ARB", 17)) {
    /*                           ^           */
#ifdef GL_SAMPLER_1D_ARB
      *iv_return = GL_SAMPLER_1D_ARB;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_SAMPLER_2D_ARB", 17)) {
    /*                           ^           */
#ifdef GL_SAMPLER_2D_ARB
      *iv_return = GL_SAMPLER_2D_ARB;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_SAMPLER_3D_ARB", 17)) {
    /*                           ^           */
#ifdef GL_SAMPLER_3D_ARB
      *iv_return = GL_SAMPLER_3D_ARB;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_TEXTURE_3D_EXT", 17)) {
    /*                           ^           */
#ifdef GL_TEXTURE_3D_EXT
      *iv_return = GL_TEXTURE_3D_EXT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case 'E':
    if (memEQ(name, "GL_COLORDODGE_KHR", 17)) {
    /*                           ^           */
#ifdef GL_COLORDODGE_KHR
      *iv_return = GL_COLORDODGE_KHR;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_COLOR_MATERIAL", 17)) {
    /*                           ^           */
#ifdef GL_COLOR_MATERIAL
      *iv_return = GL_COLOR_MATERIAL;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_DIFFERENCE_KHR", 17)) {
    /*                           ^           */
#ifdef GL_DIFFERENCE_KHR
      *iv_return = GL_DIFFERENCE_KHR;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_FIELD_LOWER_NV", 17)) {
    /*                           ^           */
#ifdef GL_FIELD_LOWER_NV
      *iv_return = GL_FIELD_LOWER_NV;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_FIELD_UPPER_NV", 17)) {
    /*                           ^           */
#ifdef GL_FIELD_UPPER_NV
      *iv_return = GL_FIELD_UPPER_NV;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_FULL_RANGE_EXT", 17)) {
    /*                           ^           */
#ifdef GL_FULL_RANGE_EXT
      *iv_return = GL_FULL_RANGE_EXT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_IMAGE_CUBE_EXT", 17)) {
    /*                           ^           */
#ifdef GL_IMAGE_CUBE_EXT
      *iv_return = GL_IMAGE_CUBE_EXT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_INT_SAMPLER_1D", 17)) {
    /*                           ^           */
#ifdef GL_INT_SAMPLER_1D
      *iv_return = GL_INT_SAMPLER_1D;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_INT_SAMPLER_2D", 17)) {
    /*                           ^           */
#ifdef GL_INT_SAMPLER_2D
      *iv_return = GL_INT_SAMPLER_2D;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_INT_SAMPLER_3D", 17)) {
    /*                           ^           */
#ifdef GL_INT_SAMPLER_3D
      *iv_return = GL_INT_SAMPLER_3D;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_PERCENTAGE_AMD", 17)) {
    /*                           ^           */
#ifdef GL_PERCENTAGE_AMD
      *iv_return = GL_PERCENTAGE_AMD;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_PIXEL_MODE_BIT", 17)) {
    /*                           ^           */
#ifdef GL_PIXEL_MODE_BIT
      *iv_return = GL_PIXEL_MODE_BIT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_PLUS_DARKER_NV", 17)) {
    /*                           ^           */
#ifdef GL_PLUS_DARKER_NV
      *iv_return = GL_PLUS_DARKER_NV;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_POINT_SIZE_MAX", 17)) {
    /*                           ^           */
#ifdef GL_POINT_SIZE_MAX
      *iv_return = GL_POINT_SIZE_MAX;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_POINT_SIZE_MIN", 17)) {
    /*                           ^           */
#ifdef GL_POINT_SIZE_MIN
      *iv_return = GL_POINT_SIZE_MIN;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_READ_WRITE_ARB", 17)) {
    /*                           ^           */
#ifdef GL_READ_WRITE_ARB
      *iv_return = GL_READ_WRITE_ARB;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_SLUMINANCE_EXT", 17)) {
    /*                           ^           */
#ifdef GL_SLUMINANCE_EXT
      *iv_return = GL_SLUMINANCE_EXT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_TEXTURE_HEIGHT", 17)) {
    /*                           ^           */
#ifdef GL_TEXTURE_HEIGHT
      *iv_return = GL_TEXTURE_HEIGHT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case 'F':
    if (memEQ(name, "GL_PACK_LSB_FIRST", 17)) {
    /*                           ^           */
#ifdef GL_PACK_LSB_FIRST
      *iv_return = GL_PACK_LSB_FIRST;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_SAMPLE_BUFFERS", 17)) {
    /*                           ^           */
#ifdef GL_SAMPLE_BUFFERS
      *iv_return = GL_SAMPLE_BUFFERS;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_UNIFORM_OFFSET", 17)) {
    /*                           ^           */
#ifdef GL_UNIFORM_OFFSET
      *iv_return = GL_UNIFORM_OFFSET;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case 'G':
    if (memEQ(name, "GL_LINEARDODGE_NV", 17)) {
    /*                           ^           */
#ifdef GL_LINEARDODGE_NV
      *iv_return = GL_LINEARDODGE_NV;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_OUTPUT_FOG_EXT", 17)) {
    /*                           ^           */
#ifdef GL_OUTPUT_FOG_EXT
      *iv_return = GL_OUTPUT_FOG_EXT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_SHARED_EDGE_NV", 17)) {
    /*                           ^           */
#ifdef GL_SHARED_EDGE_NV
      *iv_return = GL_SHARED_EDGE_NV;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_SOURCE3_RGB_NV", 17)) {
    /*                           ^           */
#ifdef GL_SOURCE3_RGB_NV
      *iv_return = GL_SOURCE3_RGB_NV;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case 'H':
    if (memEQ(name, "GL_COMPUTE_SHADER", 17)) {
    /*                           ^           */
#ifdef GL_COMPUTE_SHADER
      *iv_return = GL_COMPUTE_SHADER;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_LINEARLIGHT_NV", 17)) {
    /*                           ^           */
#ifdef GL_LINEARLIGHT_NV
      *iv_return = GL_LINEARLIGHT_NV;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_TEXTURE_SHADOW", 17)) {
    /*                           ^           */
#ifdef GL_TEXTURE_SHADOW
      *iv_return = GL_TEXTURE_SHADOW;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case 'I':
    if (memEQ(name, "GL_COLOR_LOGIC_OP", 17)) {
    /*                           ^           */
#ifdef GL_COLOR_LOGIC_OP
      *iv_return = GL_COLOR_LOGIC_OP;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_FOG_COORDINATE", 17)) {
    /*                           ^           */
#ifdef GL_FOG_COORDINATE
      *iv_return = GL_FOG_COORDINATE;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_INDEX_LOGIC_OP", 17)) {
    /*                           ^           */
#ifdef GL_INDEX_LOGIC_OP
      *iv_return = GL_INDEX_LOGIC_OP;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_LOCATION_INDEX", 17)) {
    /*                           ^           */
#ifdef GL_LOCATION_INDEX
      *iv_return = GL_LOCATION_INDEX;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_SYNC_CONDITION", 17)) {
    /*                           ^           */
#ifdef GL_SYNC_CONDITION
      *iv_return = GL_SYNC_CONDITION;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glClearColorIiEXT", 17)) {
    /*                           ^           */
#ifdef glClearColorIiEXT
      *iv_return = glClearColorIiEXT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glGetTextureImage", 17)) {
    /*                           ^           */
#ifdef glGetTextureImage
      *iv_return = glGetTextureImage;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glTexScissorINTEL", 17)) {
    /*                           ^           */
#ifdef glTexScissorINTEL
      *iv_return = glTexScissorINTEL;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case 'L':
    if (memEQ(name, "GL_CONVEX_HULL_NV", 17)) {
    /*                           ^           */
#ifdef GL_CONVEX_HULL_NV
      *iv_return = GL_CONVEX_HULL_NV;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_FRACTIONAL_ODD", 17)) {
    /*                           ^           */
#ifdef GL_FRACTIONAL_ODD
      *iv_return = GL_FRACTIONAL_ODD;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_SIGNED_HILO_NV", 17)) {
    /*                           ^           */
#ifdef GL_SIGNED_HILO_NV
      *iv_return = GL_SIGNED_HILO_NV;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case 'M':
    if (memEQ(name, "GL_DEPTH_CLAMP_NV", 17)) {
    /*                           ^           */
#ifdef GL_DEPTH_CLAMP_NV
      *iv_return = GL_DEPTH_CLAMP_NV;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_POLYGON_SMOOTH", 17)) {
    /*                           ^           */
#ifdef GL_POLYGON_SMOOTH
      *iv_return = GL_POLYGON_SMOOTH;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case 'N':
    if (memEQ(name, "GL_BUFFER_BINDING", 17)) {
    /*                           ^           */
#ifdef GL_BUFFER_BINDING
      *iv_return = GL_BUFFER_BINDING;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_FACTOR_MIN_AMD", 17)) {
    /*                           ^           */
#ifdef GL_FACTOR_MIN_AMD
      *iv_return = GL_FACTOR_MIN_AMD;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_NOP_COMMAND_NV", 17)) {
    /*                           ^           */
#ifdef GL_NOP_COMMAND_NV
      *iv_return = GL_NOP_COMMAND_NV;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_PACK_ALIGNMENT", 17)) {
    /*                           ^           */
#ifdef GL_PACK_ALIGNMENT
      *iv_return = GL_PACK_ALIGNMENT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_PIXEL_COUNT_NV", 17)) {
    /*                           ^           */
#ifdef GL_PIXEL_COUNT_NV
      *iv_return = GL_PIXEL_COUNT_NV;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_REFLECTION_MAP", 17)) {
    /*                           ^           */
#ifdef GL_REFLECTION_MAP
      *iv_return = GL_REFLECTION_MAP;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_STENCIL_INDEX1", 17)) {
    /*                           ^           */
#ifdef GL_STENCIL_INDEX1
      *iv_return = GL_STENCIL_INDEX1;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_STENCIL_INDEX4", 17)) {
    /*                           ^           */
#ifdef GL_STENCIL_INDEX4
      *iv_return = GL_STENCIL_INDEX4;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_STENCIL_INDEX8", 17)) {
    /*                           ^           */
#ifdef GL_STENCIL_INDEX8
      *iv_return = GL_STENCIL_INDEX8;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case 'O':
    if (memEQ(name, "GL_ACTIVE_PROGRAM", 17)) {
    /*                           ^           */
#ifdef GL_ACTIVE_PROGRAM
      *iv_return = GL_ACTIVE_PROGRAM;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_COLOR_ENCODING", 17)) {
    /*                           ^           */
#ifdef GL_COLOR_ENCODING
      *iv_return = GL_COLOR_ENCODING;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_CONVOLUTION_1D", 17)) {
    /*                           ^           */
#ifdef GL_CONVOLUTION_1D
      *iv_return = GL_CONVOLUTION_1D;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_CONVOLUTION_2D", 17)) {
    /*                           ^           */
#ifdef GL_CONVOLUTION_2D
      *iv_return = GL_CONVOLUTION_2D;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_CURRENT_NORMAL", 17)) {
    /*                           ^           */
#ifdef GL_CURRENT_NORMAL
      *iv_return = GL_CURRENT_NORMAL;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_MAX_EVAL_ORDER", 17)) {
    /*                           ^           */
#ifdef GL_MAX_EVAL_ORDER
      *iv_return = GL_MAX_EVAL_ORDER;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_RESCALE_NORMAL", 17)) {
    /*                           ^           */
#ifdef GL_RESCALE_NORMAL
      *iv_return = GL_RESCALE_NORMAL;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_TEXTURE_BORDER", 17)) {
    /*                           ^           */
#ifdef GL_TEXTURE_BORDER
      *iv_return = GL_TEXTURE_BORDER;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case 'P':
    if (memEQ(name, "GL_CAVEAT_SUPPORT", 17)) {
    /*                           ^           */
#ifdef GL_CAVEAT_SUPPORT
      *iv_return = GL_CAVEAT_SUPPORT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_NORMAL_MAP_ARB", 17)) {
    /*                           ^           */
#ifdef GL_NORMAL_MAP_ARB
      *iv_return = GL_NORMAL_MAP_ARB;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_NORMAL_MAP_EXT", 17)) {
    /*                           ^           */
#ifdef GL_NORMAL_MAP_EXT
      *iv_return = GL_NORMAL_MAP_EXT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case 'R':
    if (memEQ(name, "GL_LOG_HTTP_REGAL", 17)) {
    /*                           ^           */
#ifdef GL_LOG_HTTP_REGAL
      *iv_return = GL_LOG_HTTP_REGAL;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_LOG_INFO_REGAL", 17)) {
    /*                           ^           */
#ifdef GL_LOG_INFO_REGAL
      *iv_return = GL_LOG_INFO_REGAL;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_STACK_OVERFLOW", 17)) {
    /*                           ^           */
#ifdef GL_STACK_OVERFLOW
      *iv_return = GL_STACK_OVERFLOW;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_TEXTURE_WRAP_R", 17)) {
    /*                           ^           */
#ifdef GL_TEXTURE_WRAP_R
      *iv_return = GL_TEXTURE_WRAP_R;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_TEXTURE_WRAP_S", 17)) {
    /*                           ^           */
#ifdef GL_TEXTURE_WRAP_S
      *iv_return = GL_TEXTURE_WRAP_S;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_TEXTURE_WRAP_T", 17)) {
    /*                           ^           */
#ifdef GL_TEXTURE_WRAP_T
      *iv_return = GL_TEXTURE_WRAP_T;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glBindBufferRange", 17)) {
    /*                           ^           */
#ifdef glBindBufferRange
      *iv_return = glBindBufferRange;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case 'S':
    if (memEQ(name, "GL_CONTINUOUS_AMD", 17)) {
    /*                           ^           */
#ifdef GL_CONTINUOUS_AMD
      *iv_return = GL_CONTINUOUS_AMD;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_GPU_ADDRESS_NV", 17)) {
    /*                           ^           */
#ifdef GL_GPU_ADDRESS_NV
      *iv_return = GL_GPU_ADDRESS_NV;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_NUM_EXTENSIONS", 17)) {
    /*                           ^           */
#ifdef GL_NUM_EXTENSIONS
      *iv_return = GL_NUM_EXTENSIONS;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_NUM_PASSES_ATI", 17)) {
    /*                           ^           */
#ifdef GL_NUM_PASSES_ATI
      *iv_return = GL_NUM_PASSES_ATI;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_SAMPLE_MASK_NV", 17)) {
    /*                           ^           */
#ifdef GL_SAMPLE_MASK_NV
      *iv_return = GL_SAMPLE_MASK_NV;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_TRIANGLE_STRIP", 17)) {
    /*                           ^           */
#ifdef GL_TRIANGLE_STRIP
      *iv_return = GL_TRIANGLE_STRIP;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_UNSIGNED_SHORT", 17)) {
    /*                           ^           */
#ifdef GL_UNSIGNED_SHORT
      *iv_return = GL_UNSIGNED_SHORT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case 'T':
    if (memEQ(name, "GL_ALPHA_TEST_REF", 17)) {
    /*                           ^           */
#ifdef GL_ALPHA_TEST_REF
      *iv_return = GL_ALPHA_TEST_REF;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_COLOR3_BIT_PGI", 17)) {
    /*                           ^           */
#ifdef GL_COLOR3_BIT_PGI
      *iv_return = GL_COLOR3_BIT_PGI;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_COLOR4_BIT_PGI", 17)) {
    /*                           ^           */
#ifdef GL_COLOR4_BIT_PGI
      *iv_return = GL_COLOR4_BIT_PGI;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_COMPILE_STATUS", 17)) {
    /*                           ^           */
#ifdef GL_COMPILE_STATUS
      *iv_return = GL_COMPILE_STATUS;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_EIGHTH_BIT_ATI", 17)) {
    /*                           ^           */
#ifdef GL_EIGHTH_BIT_ATI
      *iv_return = GL_EIGHTH_BIT_ATI;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_HALF_FLOAT_ARB", 17)) {
    /*                           ^           */
#ifdef GL_HALF_FLOAT_ARB
      *iv_return = GL_HALF_FLOAT_ARB;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_NEGATE_BIT_ATI", 17)) {
    /*                           ^           */
#ifdef GL_NEGATE_BIT_ATI
      *iv_return = GL_NEGATE_BIT_ATI;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_NORMAL_BIT_PGI", 17)) {
    /*                           ^           */
#ifdef GL_NORMAL_BIT_PGI
      *iv_return = GL_NORMAL_BIT_PGI;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_PATCH_VERTICES", 17)) {
    /*                           ^           */
#ifdef GL_PATCH_VERTICES
      *iv_return = GL_PATCH_VERTICES;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_PHONG_HINT_WIN", 17)) {
    /*                           ^           */
#ifdef GL_PHONG_HINT_WIN
      *iv_return = GL_PHONG_HINT_WIN;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case 'U':
    if (memEQ(name, "GL_PROGRAM_OUTPUT", 17)) {
    /*                           ^           */
#ifdef GL_PROGRAM_OUTPUT
      *iv_return = GL_PROGRAM_OUTPUT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_SAMPLER_BUFFER", 17)) {
    /*                           ^           */
#ifdef GL_SAMPLER_BUFFER
      *iv_return = GL_SAMPLER_BUFFER;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_STENCIL_BUFFER", 17)) {
    /*                           ^           */
#ifdef GL_STENCIL_BUFFER
      *iv_return = GL_STENCIL_BUFFER;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_TEXTURE_BUFFER", 17)) {
    /*                           ^           */
#ifdef GL_TEXTURE_BUFFER
      *iv_return = GL_TEXTURE_BUFFER;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_UNIFORM_BUFFER", 17)) {
    /*                           ^           */
#ifdef GL_UNIFORM_BUFFER
      *iv_return = GL_UNIFORM_BUFFER;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case 'W':
    if (memEQ(name, "GL_NEGATIVE_W_EXT", 17)) {
    /*                           ^           */
#ifdef GL_NEGATIVE_W_EXT
      *iv_return = GL_NEGATIVE_W_EXT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case 'X':
    if (memEQ(name, "GL_ACTIVE_TEXTURE", 17)) {
    /*                           ^           */
#ifdef GL_ACTIVE_TEXTURE
      *iv_return = GL_ACTIVE_TEXTURE;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_FACTOR_MAX_AMD", 17)) {
    /*                           ^           */
#ifdef GL_FACTOR_MAX_AMD
      *iv_return = GL_FACTOR_MAX_AMD;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_MVP_MATRIX_EXT", 17)) {
    /*                           ^           */
#ifdef GL_MVP_MATRIX_EXT
      *iv_return = GL_MVP_MATRIX_EXT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_NEGATIVE_X_EXT", 17)) {
    /*                           ^           */
#ifdef GL_NEGATIVE_X_EXT
      *iv_return = GL_NEGATIVE_X_EXT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_VERTEX_TEXTURE", 17)) {
    /*                           ^           */
#ifdef GL_VERTEX_TEXTURE
      *iv_return = GL_VERTEX_TEXTURE;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case 'Y':
    if (memEQ(name, "GL_FIXED_ONLY_ARB", 17)) {
    /*                           ^           */
#ifdef GL_FIXED_ONLY_ARB
      *iv_return = GL_FIXED_ONLY_ARB;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_NEGATIVE_Y_EXT", 17)) {
    /*                           ^           */
#ifdef GL_NEGATIVE_Y_EXT
      *iv_return = GL_NEGATIVE_Y_EXT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_WRITE_ONLY_ARB", 17)) {
    /*                           ^           */
#ifdef GL_WRITE_ONLY_ARB
      *iv_return = GL_WRITE_ONLY_ARB;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case 'Z':
    if (memEQ(name, "GL_NEGATIVE_Z_EXT", 17)) {
    /*                           ^           */
#ifdef GL_NEGATIVE_Z_EXT
      *iv_return = GL_NEGATIVE_Z_EXT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case '_':
    if (memEQ(name, "GL_ACCUM_RED_BITS", 17)) {
    /*                           ^           */
#ifdef GL_ACCUM_RED_BITS
      *iv_return = GL_ACCUM_RED_BITS;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_ALPHA_MAX_SGIX", 17)) {
    /*                           ^           */
#ifdef GL_ALPHA_MAX_SGIX
      *iv_return = GL_ALPHA_MAX_SGIX;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_ALPHA_MIN_SGIX", 17)) {
    /*                           ^           */
#ifdef GL_ALPHA_MIN_SGIX
      *iv_return = GL_ALPHA_MIN_SGIX;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_ARB_multi_bind", 17)) {
    /*                           ^           */
#ifdef GL_ARB_multi_bind
      *iv_return = GL_ARB_multi_bind;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_CULL_FACE_MODE", 17)) {
    /*                           ^           */
#ifdef GL_CULL_FACE_MODE
      *iv_return = GL_CULL_FACE_MODE;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_EXT_index_func", 17)) {
    /*                           ^           */
#ifdef GL_EXT_index_func
      *iv_return = GL_EXT_index_func;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_EYE_POINT_SGIS", 17)) {
    /*                           ^           */
#ifdef GL_EYE_POINT_SGIS
      *iv_return = GL_EYE_POINT_SGIS;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_FRONT_AND_BACK", 17)) {
    /*                           ^           */
#ifdef GL_FRONT_AND_BACK
      *iv_return = GL_FRONT_AND_BACK;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_HISTOGRAM_SINK", 17)) {
    /*                           ^           */
#ifdef GL_HISTOGRAM_SINK
      *iv_return = GL_HISTOGRAM_SINK;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_INTERLACE_SGIX", 17)) {
    /*                           ^           */
#ifdef GL_INTERLACE_SGIX
      *iv_return = GL_INTERLACE_SGIX;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_INT_IMAGE_CUBE", 17)) {
    /*                           ^           */
#ifdef GL_INT_IMAGE_CUBE
      *iv_return = GL_INT_IMAGE_CUBE;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_MAX_ALPHA_SGIS", 17)) {
    /*                           ^           */
#ifdef GL_MAX_ALPHA_SGIS
      *iv_return = GL_MAX_ALPHA_SGIS;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_MAX_GREEN_SGIS", 17)) {
    /*                           ^           */
#ifdef GL_MAX_GREEN_SGIS
      *iv_return = GL_MAX_GREEN_SGIS;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_MIN_ALPHA_SGIS", 17)) {
    /*                           ^           */
#ifdef GL_MIN_ALPHA_SGIS
      *iv_return = GL_MIN_ALPHA_SGIS;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_MIN_GREEN_SGIS", 17)) {
    /*                           ^           */
#ifdef GL_MIN_GREEN_SGIS
      *iv_return = GL_MIN_GREEN_SGIS;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_PACK_SKIP_ROWS", 17)) {
    /*                           ^           */
#ifdef GL_PACK_SKIP_ROWS
      *iv_return = GL_PACK_SKIP_ROWS;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_R11F_G11F_B10F", 17)) {
    /*                           ^           */
#ifdef GL_R11F_G11F_B10F
      *iv_return = GL_R11F_G11F_B10F;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_RGBA_DXT5_S3TC", 17)) {
    /*                           ^           */
#ifdef GL_RGBA_DXT5_S3TC
      *iv_return = GL_RGBA_DXT5_S3TC;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_TRANSLATE_X_NV", 17)) {
    /*                           ^           */
#ifdef GL_TRANSLATE_X_NV
      *iv_return = GL_TRANSLATE_X_NV;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_TRANSLATE_Y_NV", 17)) {
    /*                           ^           */
#ifdef GL_TRANSLATE_Y_NV
      *iv_return = GL_TRANSLATE_Y_NV;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glGetDoublei_vEXT", 17)) {
    /*                           ^           */
#ifdef glGetDoublei_vEXT
      *iv_return = glGetDoublei_vEXT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case 'a':
    if (memEQ(name, "GLEW_OML_resample", 17)) {
    /*                           ^           */
#ifdef GLEW_OML_resample
      *iv_return = GLEW_OML_resample;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_NV_gpu_shader5", 17)) {
    /*                           ^           */
#ifdef GL_NV_gpu_shader5
      *iv_return = GL_NV_gpu_shader5;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_SUN_mesh_array", 17)) {
    /*                           ^           */
#ifdef GL_SUN_mesh_array
      *iv_return = GL_SUN_mesh_array;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glCoverFillPathNV", 17)) {
    /*                           ^           */
#ifdef glCoverFillPathNV
      *iv_return = glCoverFillPathNV;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glGetHistogramEXT", 17)) {
    /*                           ^           */
#ifdef glGetHistogramEXT
      *iv_return = glGetHistogramEXT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glRenderGpuMaskNV", 17)) {
    /*                           ^           */
#ifdef glRenderGpuMaskNV
      *iv_return = glRenderGpuMaskNV;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glTransformPathNV", 17)) {
    /*                           ^           */
#ifdef glTransformPathNV
      *iv_return = glTransformPathNV;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case 'c':
    if (memEQ(name, "GL_NV_depth_clamp", 17)) {
    /*                           ^           */
#ifdef GL_NV_depth_clamp
      *iv_return = GL_NV_depth_clamp;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glAttachObjectARB", 17)) {
    /*                           ^           */
#ifdef glAttachObjectARB
      *iv_return = glAttachObjectARB;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glDeleteObjectARB", 17)) {
    /*                           ^           */
#ifdef glDeleteObjectARB
      *iv_return = glDeleteObjectARB;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glDetachObjectARB", 17)) {
    /*                           ^           */
#ifdef glDetachObjectARB
      *iv_return = glDetachObjectARB;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glFinishAsyncSGIX", 17)) {
    /*                           ^           */
#ifdef glFinishAsyncSGIX
      *iv_return = glFinishAsyncSGIX;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glShaderSourceARB", 17)) {
    /*                           ^           */
#ifdef glShaderSourceARB
      *iv_return = glShaderSourceARB;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case 'd':
    if (memEQ(name, "glEndQueryIndexed", 17)) {
    /*                           ^           */
#ifdef glEndQueryIndexed
      *iv_return = glEndQueryIndexed;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glGetStageIndexNV", 17)) {
    /*                           ^           */
#ifdef glGetStageIndexNV
      *iv_return = glGetStageIndexNV;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glGetVkProcAddrNV", 17)) {
    /*                           ^           */
#ifdef glGetVkProcAddrNV
      *iv_return = glGetVkProcAddrNV;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glWindowPos2dMESA", 17)) {
    /*                           ^           */
#ifdef glWindowPos2dMESA
      *iv_return = glWindowPos2dMESA;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glWindowPos2dvARB", 17)) {
    /*                           ^           */
#ifdef glWindowPos2dvARB
      *iv_return = glWindowPos2dvARB;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glWindowPos3dMESA", 17)) {
    /*                           ^           */
#ifdef glWindowPos3dMESA
      *iv_return = glWindowPos3dMESA;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glWindowPos3dvARB", 17)) {
    /*                           ^           */
#ifdef glWindowPos3dvARB
      *iv_return = glWindowPos3dvARB;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glWindowPos4dMESA", 17)) {
    /*                           ^           */
#ifdef glWindowPos4dMESA
      *iv_return = glWindowPos4dMESA;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case 'e':
    if (memEQ(name, "GLEW_ARB_cl_event", 17)) {
    /*                           ^           */
#ifdef GLEW_ARB_cl_event
      *iv_return = GLEW_ARB_cl_event;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GLEW_KHR_no_error", 17)) {
    /*                           ^           */
#ifdef GLEW_KHR_no_error
      *iv_return = GLEW_KHR_no_error;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_SGIX_framezoom", 17)) {
    /*                           ^           */
#ifdef GL_SGIX_framezoom
      *iv_return = GL_SGIX_framezoom;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glBindTextureUnit", 17)) {
    /*                           ^           */
#ifdef glBindTextureUnit
      *iv_return = glBindTextureUnit;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glBlendBarrierKHR", 17)) {
    /*                           ^           */
#ifdef glBlendBarrierKHR
      *iv_return = glBlendBarrierKHR;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glColorPointerEXT", 17)) {
    /*                           ^           */
#ifdef glColorPointerEXT
      *iv_return = glColorPointerEXT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glIndexPointerEXT", 17)) {
    /*                           ^           */
#ifdef glIndexPointerEXT
      *iv_return = glIndexPointerEXT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glMatrixScaledEXT", 17)) {
    /*                           ^           */
#ifdef glMatrixScaledEXT
      *iv_return = glMatrixScaledEXT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glMatrixScalefEXT", 17)) {
    /*                           ^           */
#ifdef glMatrixScalefEXT
      *iv_return = glMatrixScalefEXT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glNewBufferRegion", 17)) {
    /*                           ^           */
#ifdef glNewBufferRegion
      *iv_return = glNewBufferRegion;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glPatchParameteri", 17)) {
    /*                           ^           */
#ifdef glPatchParameteri
      *iv_return = glPatchParameteri;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glPointParameterf", 17)) {
    /*                           ^           */
#ifdef glPointParameterf
      *iv_return = glPointParameterf;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glPointParameteri", 17)) {
    /*                           ^           */
#ifdef glPointParameteri
      *iv_return = glPointParameteri;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glPointParameterx", 17)) {
    /*                           ^           */
#ifdef glPointParameterx
      *iv_return = glPointParameterx;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glProvokingVertex", 17)) {
    /*                           ^           */
#ifdef glProvokingVertex
      *iv_return = glProvokingVertex;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glScissorIndexedv", 17)) {
    /*                           ^           */
#ifdef glScissorIndexedv
      *iv_return = glScissorIndexedv;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glTexParameterIiv", 17)) {
    /*                           ^           */
#ifdef glTexParameterIiv
      *iv_return = glTexParameterIiv;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case 'f':
    if (memEQ(name, "glGenFramebuffers", 17)) {
    /*                           ^           */
#ifdef glGenFramebuffers
      *iv_return = glGenFramebuffers;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glGetUniformfvARB", 17)) {
    /*                           ^           */
#ifdef glGetUniformfvARB
      *iv_return = glGetUniformfvARB;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glWindowPos2fMESA", 17)) {
    /*                           ^           */
#ifdef glWindowPos2fMESA
      *iv_return = glWindowPos2fMESA;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glWindowPos2fvARB", 17)) {
    /*                           ^           */
#ifdef glWindowPos2fvARB
      *iv_return = glWindowPos2fvARB;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glWindowPos3fMESA", 17)) {
    /*                           ^           */
#ifdef glWindowPos3fMESA
      *iv_return = glWindowPos3fMESA;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glWindowPos3fvARB", 17)) {
    /*                           ^           */
#ifdef glWindowPos3fvARB
      *iv_return = glWindowPos3fvARB;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glWindowPos4fMESA", 17)) {
    /*                           ^           */
#ifdef glWindowPos4fMESA
      *iv_return = glWindowPos4fMESA;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case 'g':
    if (memEQ(name, "glGetPathLengthNV", 17)) {
    /*                           ^           */
#ifdef glGetPathLengthNV
      *iv_return = glGetPathLengthNV;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glGetnTexImageARB", 17)) {
    /*                           ^           */
#ifdef glGetnTexImageARB
      *iv_return = glGetnTexImageARB;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case 'h':
    if (memEQ(name, "GL_AMD_gcn_shader", 17)) {
    /*                           ^           */
#ifdef GL_AMD_gcn_shader
      *iv_return = GL_AMD_gcn_shader;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_PGI_misc_hints", 17)) {
    /*                           ^           */
#ifdef GL_PGI_misc_hints
      *iv_return = GL_PGI_misc_hints;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glTextureLightEXT", 17)) {
    /*                           ^           */
#ifdef glTextureLightEXT
      *iv_return = glTextureLightEXT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glVertexWeighthNV", 17)) {
    /*                           ^           */
#ifdef glVertexWeighthNV
      *iv_return = glVertexWeighthNV;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case 'i':
    if (memEQ(name, "GLEW_SGIX_clipmap", 17)) {
    /*                           ^           */
#ifdef GLEW_SGIX_clipmap
      *iv_return = GLEW_SGIX_clipmap;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_ARB_copy_image", 17)) {
    /*                           ^           */
#ifdef GL_ARB_copy_image
      *iv_return = GL_ARB_copy_image;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_EXT_422_pixels", 17)) {
    /*                           ^           */
#ifdef GL_EXT_422_pixels
      *iv_return = GL_EXT_422_pixels;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glActiveVaryingNV", 17)) {
    /*                           ^           */
#ifdef glActiveVaryingNV
      *iv_return = glActiveVaryingNV;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glFogCoordPointer", 17)) {
    /*                           ^           */
#ifdef glFogCoordPointer
      *iv_return = glFogCoordPointer;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glGetProgramivARB", 17)) {
    /*                           ^           */
#ifdef glGetProgramivARB
      *iv_return = glGetProgramivARB;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glGetUniformivARB", 17)) {
    /*                           ^           */
#ifdef glGetUniformivARB
      *iv_return = glGetUniformivARB;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glIsCommandListNV", 17)) {
    /*                           ^           */
#ifdef glIsCommandListNV
      *iv_return = glIsCommandListNV;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glVertexAttrib1dv", 17)) {
    /*                           ^           */
#ifdef glVertexAttrib1dv
      *iv_return = glVertexAttrib1dv;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glVertexAttrib1fv", 17)) {
    /*                           ^           */
#ifdef glVertexAttrib1fv
      *iv_return = glVertexAttrib1fv;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glVertexAttrib1sv", 17)) {
    /*                           ^           */
#ifdef glVertexAttrib1sv
      *iv_return = glVertexAttrib1sv;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glVertexAttrib2dv", 17)) {
    /*                           ^           */
#ifdef glVertexAttrib2dv
      *iv_return = glVertexAttrib2dv;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glVertexAttrib2fv", 17)) {
    /*                           ^           */
#ifdef glVertexAttrib2fv
      *iv_return = glVertexAttrib2fv;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glVertexAttrib2sv", 17)) {
    /*                           ^           */
#ifdef glVertexAttrib2sv
      *iv_return = glVertexAttrib2sv;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glVertexAttrib3dv", 17)) {
    /*                           ^           */
#ifdef glVertexAttrib3dv
      *iv_return = glVertexAttrib3dv;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glVertexAttrib3fv", 17)) {
    /*                           ^           */
#ifdef glVertexAttrib3fv
      *iv_return = glVertexAttrib3fv;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glVertexAttrib3sv", 17)) {
    /*                           ^           */
#ifdef glVertexAttrib3sv
      *iv_return = glVertexAttrib3sv;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glVertexAttrib4bv", 17)) {
    /*                           ^           */
#ifdef glVertexAttrib4bv
      *iv_return = glVertexAttrib4bv;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glVertexAttrib4dv", 17)) {
    /*                           ^           */
#ifdef glVertexAttrib4dv
      *iv_return = glVertexAttrib4dv;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glVertexAttrib4fv", 17)) {
    /*                           ^           */
#ifdef glVertexAttrib4fv
      *iv_return = glVertexAttrib4fv;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glVertexAttrib4iv", 17)) {
    /*                           ^           */
#ifdef glVertexAttrib4iv
      *iv_return = glVertexAttrib4iv;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glVertexAttrib4sv", 17)) {
    /*                           ^           */
#ifdef glVertexAttrib4sv
      *iv_return = glVertexAttrib4sv;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glVertexAttribI1i", 17)) {
    /*                           ^           */
#ifdef glVertexAttribI1i
      *iv_return = glVertexAttribI1i;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glVertexAttribI2i", 17)) {
    /*                           ^           */
#ifdef glVertexAttribI2i
      *iv_return = glVertexAttribI2i;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glVertexAttribI3i", 17)) {
    /*                           ^           */
#ifdef glVertexAttribI3i
      *iv_return = glVertexAttribI3i;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glVertexAttribI4i", 17)) {
    /*                           ^           */
#ifdef glVertexAttribI4i
      *iv_return = glVertexAttribI4i;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glVertexAttribL1d", 17)) {
    /*                           ^           */
#ifdef glVertexAttribL1d
      *iv_return = glVertexAttribL1d;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glVertexAttribL2d", 17)) {
    /*                           ^           */
#ifdef glVertexAttribL2d
      *iv_return = glVertexAttribL2d;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glVertexAttribL3d", 17)) {
    /*                           ^           */
#ifdef glVertexAttribL3d
      *iv_return = glVertexAttribL3d;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glVertexAttribL4d", 17)) {
    /*                           ^           */
#ifdef glVertexAttribL4d
      *iv_return = glVertexAttribL4d;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glWindowPos2iMESA", 17)) {
    /*                           ^           */
#ifdef glWindowPos2iMESA
      *iv_return = glWindowPos2iMESA;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glWindowPos2ivARB", 17)) {
    /*                           ^           */
#ifdef glWindowPos2ivARB
      *iv_return = glWindowPos2ivARB;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glWindowPos3iMESA", 17)) {
    /*                           ^           */
#ifdef glWindowPos3iMESA
      *iv_return = glWindowPos3iMESA;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glWindowPos3ivARB", 17)) {
    /*                           ^           */
#ifdef glWindowPos3ivARB
      *iv_return = glWindowPos3ivARB;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glWindowPos4iMESA", 17)) {
    /*                           ^           */
#ifdef glWindowPos4iMESA
      *iv_return = glWindowPos4iMESA;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case 'k':
    if (memEQ(name, "glTbufferMask3DFX", 17)) {
    /*                           ^           */
#ifdef glTbufferMask3DFX
      *iv_return = glTbufferMask3DFX;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case 'm':
    if (memEQ(name, "glDispatchCompute", 17)) {
    /*                           ^           */
#ifdef glDispatchCompute
      *iv_return = glDispatchCompute;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case 'n':
    if (memEQ(name, "GLEW_REGAL_enable", 17)) {
    /*                           ^           */
#ifdef GLEW_REGAL_enable
      *iv_return = GLEW_REGAL_enable;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glArrayElementEXT", 17)) {
    /*                           ^           */
#ifdef glArrayElementEXT
      *iv_return = glArrayElementEXT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glMultiTexGendEXT", 17)) {
    /*                           ^           */
#ifdef glMultiTexGendEXT
      *iv_return = glMultiTexGendEXT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glMultiTexGenfEXT", 17)) {
    /*                           ^           */
#ifdef glMultiTexGenfEXT
      *iv_return = glMultiTexGenfEXT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glMultiTexGeniEXT", 17)) {
    /*                           ^           */
#ifdef glMultiTexGeniEXT
      *iv_return = glMultiTexGeniEXT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glPixelTexGenSGIX", 17)) {
    /*                           ^           */
#ifdef glPixelTexGenSGIX
      *iv_return = glPixelTexGenSGIX;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glSetInvariantEXT", 17)) {
    /*                           ^           */
#ifdef glSetInvariantEXT
      *iv_return = glSetInvariantEXT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glSignalVkFenceNV", 17)) {
    /*                           ^           */
#ifdef glSignalVkFenceNV
      *iv_return = glSignalVkFenceNV;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case 'o':
    if (memEQ(name, "glGetShaderSource", 17)) {
    /*                           ^           */
#ifdef glGetShaderSource
      *iv_return = glGetShaderSource;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glMultiTexCoord1d", 17)) {
    /*                           ^           */
#ifdef glMultiTexCoord1d
      *iv_return = glMultiTexCoord1d;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glMultiTexCoord1f", 17)) {
    /*                           ^           */
#ifdef glMultiTexCoord1f
      *iv_return = glMultiTexCoord1f;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glMultiTexCoord1i", 17)) {
    /*                           ^           */
#ifdef glMultiTexCoord1i
      *iv_return = glMultiTexCoord1i;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glMultiTexCoord1s", 17)) {
    /*                           ^           */
#ifdef glMultiTexCoord1s
      *iv_return = glMultiTexCoord1s;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glMultiTexCoord2d", 17)) {
    /*                           ^           */
#ifdef glMultiTexCoord2d
      *iv_return = glMultiTexCoord2d;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glMultiTexCoord2f", 17)) {
    /*                           ^           */
#ifdef glMultiTexCoord2f
      *iv_return = glMultiTexCoord2f;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glMultiTexCoord2i", 17)) {
    /*                           ^           */
#ifdef glMultiTexCoord2i
      *iv_return = glMultiTexCoord2i;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glMultiTexCoord2s", 17)) {
    /*                           ^           */
#ifdef glMultiTexCoord2s
      *iv_return = glMultiTexCoord2s;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glMultiTexCoord3d", 17)) {
    /*                           ^           */
#ifdef glMultiTexCoord3d
      *iv_return = glMultiTexCoord3d;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glMultiTexCoord3f", 17)) {
    /*                           ^           */
#ifdef glMultiTexCoord3f
      *iv_return = glMultiTexCoord3f;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glMultiTexCoord3i", 17)) {
    /*                           ^           */
#ifdef glMultiTexCoord3i
      *iv_return = glMultiTexCoord3i;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glMultiTexCoord3s", 17)) {
    /*                           ^           */
#ifdef glMultiTexCoord3s
      *iv_return = glMultiTexCoord3s;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glMultiTexCoord4d", 17)) {
    /*                           ^           */
#ifdef glMultiTexCoord4d
      *iv_return = glMultiTexCoord4d;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glMultiTexCoord4f", 17)) {
    /*                           ^           */
#ifdef glMultiTexCoord4f
      *iv_return = glMultiTexCoord4f;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glMultiTexCoord4i", 17)) {
    /*                           ^           */
#ifdef glMultiTexCoord4i
      *iv_return = glMultiTexCoord4i;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glMultiTexCoord4s", 17)) {
    /*                           ^           */
#ifdef glMultiTexCoord4s
      *iv_return = glMultiTexCoord4s;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glMultiTexCoord4x", 17)) {
    /*                           ^           */
#ifdef glMultiTexCoord4x
      *iv_return = glMultiTexCoord4x;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glValidateProgram", 17)) {
    /*                           ^           */
#ifdef glValidateProgram
      *iv_return = glValidateProgram;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case 'p':
    if (memEQ(name, "glCombinerInputNV", 17)) {
    /*                           ^           */
#ifdef glCombinerInputNV
      *iv_return = glCombinerInputNV;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case 'r':
    if (memEQ(name, "GL_ARB_texture_rg", 17)) {
    /*                           ^           */
#ifdef GL_ARB_texture_rg
      *iv_return = GL_ARB_texture_rg;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_SGIX_interlace", 17)) {
    /*                           ^           */
#ifdef GL_SGIX_interlace
      *iv_return = GL_SGIX_interlace;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glApplyTextureEXT", 17)) {
    /*                           ^           */
#ifdef glApplyTextureEXT
      *iv_return = glApplyTextureEXT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glAsyncMarkerSGIX", 17)) {
    /*                           ^           */
#ifdef glAsyncMarkerSGIX
      *iv_return = glAsyncMarkerSGIX;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glClearBufferData", 17)) {
    /*                           ^           */
#ifdef glClearBufferData
      *iv_return = glClearBufferData;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glFlushRasterSGIX", 17)) {
    /*                           ^           */
#ifdef glFlushRasterSGIX
      *iv_return = glFlushRasterSGIX;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glGenVertexArrays", 17)) {
    /*                           ^           */
#ifdef glGenVertexArrays
      *iv_return = glGenVertexArrays;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glGetPathCoordsNV", 17)) {
    /*                           ^           */
#ifdef glGetPathCoordsNV
      *iv_return = glGetPathCoordsNV;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glMultiDrawArrays", 17)) {
    /*                           ^           */
#ifdef glMultiDrawArrays
      *iv_return = glMultiDrawArrays;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glNamedBufferData", 17)) {
    /*                           ^           */
#ifdef glNamedBufferData
      *iv_return = glNamedBufferData;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glPassTexCoordATI", 17)) {
    /*                           ^           */
#ifdef glPassTexCoordATI
      *iv_return = glPassTexCoordATI;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glPathDashArrayNV", 17)) {
    /*                           ^           */
#ifdef glPathDashArrayNV
      *iv_return = glPathDashArrayNV;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glPathSubCoordsNV", 17)) {
    /*                           ^           */
#ifdef glPathSubCoordsNV
      *iv_return = glPathSubCoordsNV;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glSampleCoveragex", 17)) {
    /*                           ^           */
#ifdef glSampleCoveragex
      *iv_return = glSampleCoveragex;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case 's':
    if (memEQ(name, "GLEW_ARB_gl_spirv", 17)) {
    /*                           ^           */
#ifdef GLEW_ARB_gl_spirv
      *iv_return = GLEW_ARB_gl_spirv;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glBindBuffersBase", 17)) {
    /*                           ^           */
#ifdef glBindBuffersBase
      *iv_return = glBindBuffersBase;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glPNTrianglesfATI", 17)) {
    /*                           ^           */
#ifdef glPNTrianglesfATI
      *iv_return = glPNTrianglesfATI;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glPNTrianglesiATI", 17)) {
    /*                           ^           */
#ifdef glPNTrianglesiATI
      *iv_return = glPNTrianglesiATI;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glWindowPos2sMESA", 17)) {
    /*                           ^           */
#ifdef glWindowPos2sMESA
      *iv_return = glWindowPos2sMESA;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glWindowPos2svARB", 17)) {
    /*                           ^           */
#ifdef glWindowPos2svARB
      *iv_return = glWindowPos2svARB;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glWindowPos3sMESA", 17)) {
    /*                           ^           */
#ifdef glWindowPos3sMESA
      *iv_return = glWindowPos3sMESA;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glWindowPos3svARB", 17)) {
    /*                           ^           */
#ifdef glWindowPos3svARB
      *iv_return = glWindowPos3svARB;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glWindowPos4sMESA", 17)) {
    /*                           ^           */
#ifdef glWindowPos4sMESA
      *iv_return = glWindowPos4sMESA;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case 't':
    if (memEQ(name, "GL_ARB_robustness", 17)) {
    /*                           ^           */
#ifdef GL_ARB_robustness
      *iv_return = GL_ARB_robustness;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_KHR_robustness", 17)) {
    /*                           ^           */
#ifdef GL_KHR_robustness
      *iv_return = GL_KHR_robustness;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glGetActiveAttrib", 17)) {
    /*                           ^           */
#ifdef glGetActiveAttrib
      *iv_return = glGetActiveAttrib;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case 'u':
    if (memEQ(name, "GLEW_3DFX_tbuffer", 17)) {
    /*                           ^           */
#ifdef GLEW_3DFX_tbuffer
      *iv_return = GLEW_3DFX_tbuffer;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_SGIS_texture4D", 17)) {
    /*                           ^           */
#ifdef GL_SGIS_texture4D
      *iv_return = GL_SGIS_texture4D;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glBindFramebuffer", 17)) {
    /*                           ^           */
#ifdef glBindFramebuffer
      *iv_return = glBindFramebuffer;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glBlitFramebuffer", 17)) {
    /*                           ^           */
#ifdef glBlitFramebuffer
      *iv_return = glBlitFramebuffer;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case 'v':
    if (memEQ(name, "GL_OVR_multiview2", 17)) {
    /*                           ^           */
#ifdef GL_OVR_multiview2
      *iv_return = GL_OVR_multiview2;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glMultiTexEnvfEXT", 17)) {
    /*                           ^           */
#ifdef glMultiTexEnvfEXT
      *iv_return = glMultiTexEnvfEXT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glMultiTexEnviEXT", 17)) {
    /*                           ^           */
#ifdef glMultiTexEnviEXT
      *iv_return = glMultiTexEnviEXT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case 'w':
    if (memEQ(name, "GL_ARB_window_pos", 17)) {
    /*                           ^           */
#ifdef GL_ARB_window_pos
      *iv_return = GL_ARB_window_pos;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case 'x':
    if (memEQ(name, "GL_EXT_subtexture", 17)) {
    /*                           ^           */
#ifdef GL_EXT_subtexture
      *iv_return = GL_EXT_subtexture;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case 'y':
    if (memEQ(name, "glUnlockArraysEXT", 17)) {
    /*                           ^           */
#ifdef glUnlockArraysEXT
      *iv_return = glUnlockArraysEXT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  }
  return PERL_constant_NOTFOUND;
}

static int
constant_18 (pTHX_ const char *name, IV *iv_return) {
  /* When generated this function returned values for the list of names given
     here.  However, subsequent manual editing may have added or removed some.
     GLEW_APPLE_rgb_422 GLEW_EXT_Cg_shader GLEW_EXT_fog_coord
     GLEW_EXT_histogram GLEW_EXT_texture3D GLEW_NV_copy_image
     GLEW_NV_evaluators GLEW_NV_half_float GLEW_OML_interlace
     GLEW_OML_subsample GLEW_OVR_multiview GLEW_SGIX_resample
     GLEW_VERSION_1_2_1 GLEW_VERSION_MAJOR GLEW_VERSION_MICRO
     GLEW_VERSION_MINOR GLEW_WIN_swap_hint GL_422_AVERAGE_EXT
     GL_ACCUM_BLUE_BITS GL_ACTIVE_UNIFORMS GL_ALL_ATTRIB_BITS
     GL_ALL_SHADER_BITS GL_ALPHA_TEST_FUNC GL_APPLE_row_bytes
     GL_APPLE_ycbcr_422 GL_ARB_copy_buffer GL_ARB_depth_clamp
     GL_ARB_gpu_shader5 GL_ARB_multisample GL_ARB_timer_query
     GL_ATTENUATION_EXT GL_BGR_INTEGER_EXT GL_BLEND_COLOR_EXT
     GL_BLEND_DST_ALPHA GL_BLEND_SRC_ALPHA GL_BOUNDING_BOX_NV
     GL_BUFFER_SIZE_ARB GL_BUFFER_VARIABLE GL_BUMP_ENVMAP_ATI
     GL_BUMP_TARGET_ATI GL_CLAMP_TO_BORDER GL_CLIP_DEPTH_MODE
     GL_COLOR_ARRAY_EXT GL_COLOR_TABLE_SGI GL_COLOR_WRITEMASK
     GL_COMBINE_RGB_ARB GL_COMBINE_RGB_EXT GL_COMPRESSED_RGBA
     GL_COMPRESSED_SRGB GL_COMPUTE_TEXTURE GL_CONSTANT_BORDER
     GL_CULL_VERTEX_EXT GL_CULL_VERTEX_IBM GL_CURRENT_PROGRAM
     GL_CURRENT_TIME_NV GL_DATA_BUFFER_AMD GL_DEPTH_COMPONENT
     GL_DEPTH_WRITEMASK GL_DOUBLE_MAT2_EXT GL_DOUBLE_MAT3_EXT
     GL_DOUBLE_MAT4_EXT GL_DOUBLE_VEC2_EXT GL_DOUBLE_VEC3_EXT
     GL_DOUBLE_VEC4_EXT GL_DSDT_MAG_VIB_NV GL_EDGE_FLAG_ARRAY
     GL_EMBOSS_LIGHT_NV GL_EMULATION_REGAL GL_EXT_blend_color
     GL_EXT_convolution GL_EXT_cull_vertex GL_EXT_debug_label
     GL_EXT_gpu_shader4 GL_EXT_multisample GL_EXT_texture_env
     GL_EXT_timer_query GL_FENCE_STATUS_NV GL_FLOAT16_VEC2_NV
     GL_FLOAT16_VEC3_NV GL_FLOAT16_VEC4_NV GL_FLOAT_RGBA16_NV
     GL_FLOAT_RGBA32_NV GL_FOG_COORD_ARRAY GL_FOG_OFFSET_SGIX
     GL_FRACTIONAL_EVEN GL_FRAGMENT_SHADER GL_FRAMEBUFFER_EXT
     GL_GENERATE_MIPMAP GL_GEOMETRY_SHADER GL_HISTOGRAM_WIDTH
     GL_IBM_cull_vertex GL_IBM_static_data GL_INDEX_ARRAY_EXT
     GL_INDEX_WRITEMASK GL_INFO_LOG_LENGTH GL_INTENSITY12_EXT
     GL_INTENSITY16_EXT GL_INTENSITY8I_EXT GL_INTENSITY_SNORM
     GL_INTERPOLATE_ARB GL_INTERPOLATE_EXT GL_KTX_BACK_REGION
     GL_LINES_ADJACENCY GL_LOG_DEBUG_REGAL GL_LOG_ERROR_REGAL
     GL_LUMINANCE12_EXT GL_LUMINANCE16_EXT GL_LUMINANCE8I_EXT
     GL_LUMINANCE_ALPHA GL_LUMINANCE_SNORM GL_MAX_CLIP_PLANES
     GL_MAX_IMAGE_UNITS GL_MAX_NAME_LENGTH GL_MAX_SAMPLES_EXT
     GL_MAX_SUBROUTINES GL_MESA_window_pos GL_MINMAX_SINK_EXT
     GL_MIRRORED_REPEAT GL_MITER_REVERT_NV GL_MODELVIEW10_ARB
     GL_MODELVIEW11_ARB GL_MODELVIEW12_ARB GL_MODELVIEW13_ARB
     GL_MODELVIEW14_ARB GL_MODELVIEW15_ARB GL_MODELVIEW16_ARB
     GL_MODELVIEW17_ARB GL_MODELVIEW18_ARB GL_MODELVIEW19_ARB
     GL_MODELVIEW20_ARB GL_MODELVIEW21_ARB GL_MODELVIEW22_ARB
     GL_MODELVIEW23_ARB GL_MODELVIEW24_ARB GL_MODELVIEW25_ARB
     GL_MODELVIEW26_ARB GL_MODELVIEW27_ARB GL_MODELVIEW28_ARB
     GL_MODELVIEW29_ARB GL_MODELVIEW30_ARB GL_MODELVIEW31_ARB
     GL_MULTISAMPLES_NV GL_MULTISAMPLE_ARB GL_MULTISAMPLE_BIT
     GL_MULTISAMPLE_EXT GL_NV_blend_square GL_NV_command_list
     GL_NV_draw_texture GL_NV_float_buffer GL_NV_fog_distance
     GL_NV_gpu_program4 GL_NV_gpu_program5 GL_NV_point_sprite
     GL_OBJECT_TYPE_ARB GL_OES_read_format GL_OPERAND3_RGB_NV
     GL_PACK_ROW_LENGTH GL_PACK_SWAP_BYTES GL_PASS_THROUGH_NV
     GL_PLUS_CLAMPED_NV GL_POINT_SPRITE_NV GL_POLYGON_STIPPLE
     GL_PRESENT_TIME_NV GL_PRIMITIVE_ID_NV GL_PROXY_HISTOGRAM
     GL_PURGEABLE_APPLE GL_QUARTER_BIT_ATI GL_QUERY_RESULT_NV
     GL_RED_INTEGER_EXT GL_RESTART_PATH_NV GL_RGBA4_DXT5_S3TC
     GL_RGB_FLOAT16_ATI GL_RGB_FLOAT32_ATI GL_RGB_INTEGER_EXT
     GL_RGB_SIGNED_SGIX GL_ROUNDED_RECT_NV GL_SAMPLER_2D_RECT
     GL_SAMPLER_BINDING GL_SAMPLE_COUNT_NV GL_SAMPLE_COVERAGE
     GL_SAMPLE_MASK_EXT GL_SAMPLE_POSITION GL_SCALE_BY_TWO_NV
     GL_SGIX_fog_offset GL_SGI_color_table GL_SHADER_COMPILER
     GL_SIGNED_ALPHA_NV GL_SIGNED_HILO8_NV GL_SIGNED_RGBA8_NV
     GL_SKIP_DECODE_EXT GL_SLICE_ACCUM_SUN GL_SLUMINANCE8_EXT
     GL_SOURCE0_RGB_ARB GL_SOURCE0_RGB_EXT GL_SOURCE1_RGB_ARB
     GL_SOURCE1_RGB_EXT GL_SOURCE2_RGB_ARB GL_SOURCE2_RGB_EXT
     GL_SRGB_DECODE_ARB GL_STACK_UNDERFLOW GL_STATIC_COPY_ARB
     GL_STATIC_DRAW_ARB GL_STATIC_READ_ARB GL_STENCIL_INDEX16
     GL_STREAM_COPY_ARB GL_STREAM_DRAW_ARB GL_STREAM_READ_ARB
     GL_SUN_slice_accum GL_SWIZZLE_STQ_ATI GL_SWIZZLE_STR_ATI
     GL_T2F_C4F_N3F_V3F GL_T4F_C4F_N3F_V4F GL_TABLE_TOO_LARGE
     GL_TEXTURE_MAX_LOD GL_TEXTURE_MIN_LOD GL_TEXTURE_SAMPLES
     GL_TIMEOUT_EXPIRED GL_TIMEOUT_IGNORED GL_TIMESTAMP_ANGLE
     GL_TRACK_MATRIX_NV GL_TRANSLATE_2D_NV GL_TRANSLATE_3D_NV
     GL_UNCORRELATED_NV GL_UNDEFINED_APPLE GL_VALIDATE_STATUS
     GL_VERTEX4_BIT_PGI GL_VIDEO_BUFFER_NV GL_WARPS_PER_SM_NV
     GL_WRAP_BORDER_SUN GL_YCBCR_422_APPLE glActiveProgramEXT
     glActiveTextureARB glBindBufferBaseNV glBindBuffersRange
     glBindImageTexture glBindParameterEXT glBindRenderbuffer
     glBindVertexBuffer glBlendEquationEXT glBufferSubDataARB
     glClearColorIuiEXT glClearTexSubImage glColorSubTableEXT
     glCombinerOutputNV glCompileShaderARB glCopyImageSubData
     glDeleteBuffersARB glDeleteProgramsNV glDeleteQueriesARB
     glDepthRangeArrayv glDrawBufferRegion glEdgeFlagFormatNV
     glEnableIndexedEXT glErrorStringREGAL glExecuteProgramNV
     glFinishFenceAPPLE glFogCoordFormatNV glGenRenderbuffers
     glGetActiveUniform glGetBufferSubData glGetClipPlanefOES
     glGetColorTableEXT glGetColorTableSGI glGetFragDataIndex
     glGetImageHandleNV glGetMultisamplefv glGetPathMetricsNV
     glGetPathSpacingNV glGetPointeri_vEXT glGetProgramBinary
     glGetQueryObjectiv glGetShaderInfoLog glGetUniformi64vNV
     glGetUniformuivEXT glGetVertexArrayiv glGetnHistogramARB
     glGetnUniformdvARB glGetnUniformfvARB glGetnUniformivARB
     glIndexMaterialEXT glIsFramebufferEXT glIsNamedStringARB
     glIsSupportedREGAL glLGPUInterlockNVX glMapParameterfvNV
     glMapParameterivNV glMatrixFrustumEXT glMatrixLoad3x2fNV
     glMatrixLoad3x3fNV glMatrixMult3x2fNV glMatrixMult3x3fNV
     glMatrixRotatedEXT glMatrixRotatefEXT glMemoryBarrierEXT
     glMinSampleShading glMultiTexCoord1dv glMultiTexCoord1fv
     glMultiTexCoord1iv glMultiTexCoord1sv glMultiTexCoord2dv
     glMultiTexCoord2fv glMultiTexCoord2iv glMultiTexCoord2sv
     glMultiTexCoord3dv glMultiTexCoord3fv glMultiTexCoord3iv
     glMultiTexCoord3sv glMultiTexCoord4dv glMultiTexCoord4fv
     glMultiTexCoord4iv glMultiTexCoord4sv glMultiTexEnvfvEXT
     glMultiTexEnvivEXT glMultiTexGendvEXT glMultiTexGenfvEXT
     glMultiTexGenivEXT glNormalPointerEXT glPatchParameterfv
     glPathGlyphRangeNV glPathParameterfNV glPathParameteriNV
     glPixelDataRangeNV glPointAlongPathNV glPointParameterfv
     glPointParameteriv glPointParameterxv glPolygonOffsetEXT
     glProgramStringARB glProgramUniform1d glProgramUniform1f
     glProgramUniform1i glProgramUniform2d glProgramUniform2f
     glProgramUniform2i glProgramUniform3d glProgramUniform3f
     glProgramUniform3i glProgramUniform4d glProgramUniform4f
     glProgramUniform4i glRasterSamplesEXT glReadBufferRegion
     glSamplePatternEXT glSecondaryColor3b glSecondaryColor3d
     glSecondaryColor3f glSecondaryColor3i glSecondaryColor3s
     glSyncTextureINTEL glTexCoordFormatNV glTexParameterIuiv
     glTexSubImage1DEXT glTexSubImage2DEXT glTexSubImage3DEXT
     glTextureBarrierNV glTextureBufferEXT glTextureNormalEXT
     glTextureStorage1D glTextureStorage2D glTextureStorage3D
     glUniform1ui64vARB glUniform2ui64vARB glUniform3ui64vARB
     glUniform4ui64vARB glUniformBufferEXT glUniformMatrix2dv
     glUniformMatrix2fv glUniformMatrix3dv glUniformMatrix3fv
     glUniformMatrix4dv glUniformMatrix4fv glUnmapNamedBuffer
     glUseProgramStages glVDPAUIsSurfaceNV glVertexAttrib1dNV
     glVertexAttrib1fNV glVertexAttrib1hNV glVertexAttrib1sNV
     glVertexAttrib2dNV glVertexAttrib2fNV glVertexAttrib2hNV
     glVertexAttrib2sNV glVertexAttrib3dNV glVertexAttrib3fNV
     glVertexAttrib3hNV glVertexAttrib3sNV glVertexAttrib4Nbv
     glVertexAttrib4Niv glVertexAttrib4Nsv glVertexAttrib4Nub
     glVertexAttrib4dNV glVertexAttrib4fNV glVertexAttrib4hNV
     glVertexAttrib4sNV glVertexAttrib4ubv glVertexAttrib4uiv
     glVertexAttrib4usv glVertexAttribI1iv glVertexAttribI1ui
     glVertexAttribI2iv glVertexAttribI2ui glVertexAttribI3iv
     glVertexAttribI3ui glVertexAttribI4bv glVertexAttribI4iv
     glVertexAttribI4sv glVertexAttribI4ui glVertexAttribL1dv
     glVertexAttribL2dv glVertexAttribL3dv glVertexAttribL4dv
     glVertexAttribP1ui glVertexAttribP2ui glVertexAttribP3ui
     glVertexAttribP4ui glVertexPointerEXT glVertexWeightfEXT
     glVertexWeighthvNV glViewportIndexedf glWeightPointerARB
     glWindowPos2dvMESA glWindowPos2fvMESA glWindowPos2ivMESA
     glWindowPos2svMESA glWindowPos3dvMESA glWindowPos3fvMESA
     glWindowPos3ivMESA glWindowPos3svMESA glWindowPos4dvMESA
     glWindowPos4fvMESA glWindowPos4ivMESA glWindowPos4svMESA */
  /* Offset 13 gives the best switch position.  */
  switch (name[13]) {
  case '0':
    if (memEQ(name, "GL_MODELVIEW10_ARB", 18)) {
    /*                            ^           */
#ifdef GL_MODELVIEW10_ARB
      *iv_return = GL_MODELVIEW10_ARB;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_MODELVIEW20_ARB", 18)) {
    /*                            ^           */
#ifdef GL_MODELVIEW20_ARB
      *iv_return = GL_MODELVIEW20_ARB;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_MODELVIEW30_ARB", 18)) {
    /*                            ^           */
#ifdef GL_MODELVIEW30_ARB
      *iv_return = GL_MODELVIEW30_ARB;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case '1':
    if (memEQ(name, "GLEW_VERSION_1_2_1", 18)) {
    /*                            ^           */
#ifdef GLEW_VERSION_1_2_1
      *iv_return = GLEW_VERSION_1_2_1;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_FLOAT_RGBA16_NV", 18)) {
    /*                            ^           */
#ifdef GL_FLOAT_RGBA16_NV
      *iv_return = GL_FLOAT_RGBA16_NV;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_MODELVIEW11_ARB", 18)) {
    /*                            ^           */
#ifdef GL_MODELVIEW11_ARB
      *iv_return = GL_MODELVIEW11_ARB;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_MODELVIEW21_ARB", 18)) {
    /*                            ^           */
#ifdef GL_MODELVIEW21_ARB
      *iv_return = GL_MODELVIEW21_ARB;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_MODELVIEW31_ARB", 18)) {
    /*                            ^           */
#ifdef GL_MODELVIEW31_ARB
      *iv_return = GL_MODELVIEW31_ARB;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glTexSubImage1DEXT", 18)) {
    /*                            ^           */
#ifdef glTexSubImage1DEXT
      *iv_return = glTexSubImage1DEXT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case '2':
    if (memEQ(name, "GL_DOUBLE_MAT2_EXT", 18)) {
    /*                            ^           */
#ifdef GL_DOUBLE_MAT2_EXT
      *iv_return = GL_DOUBLE_MAT2_EXT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_DOUBLE_VEC2_EXT", 18)) {
    /*                            ^           */
#ifdef GL_DOUBLE_VEC2_EXT
      *iv_return = GL_DOUBLE_VEC2_EXT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_INTENSITY12_EXT", 18)) {
    /*                            ^           */
#ifdef GL_INTENSITY12_EXT
      *iv_return = GL_INTENSITY12_EXT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_LUMINANCE12_EXT", 18)) {
    /*                            ^           */
#ifdef GL_LUMINANCE12_EXT
      *iv_return = GL_LUMINANCE12_EXT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_MODELVIEW12_ARB", 18)) {
    /*                            ^           */
#ifdef GL_MODELVIEW12_ARB
      *iv_return = GL_MODELVIEW12_ARB;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_MODELVIEW22_ARB", 18)) {
    /*                            ^           */
#ifdef GL_MODELVIEW22_ARB
      *iv_return = GL_MODELVIEW22_ARB;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_RGB_FLOAT32_ATI", 18)) {
    /*                            ^           */
#ifdef GL_RGB_FLOAT32_ATI
      *iv_return = GL_RGB_FLOAT32_ATI;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_TRANSLATE_2D_NV", 18)) {
    /*                            ^           */
#ifdef GL_TRANSLATE_2D_NV
      *iv_return = GL_TRANSLATE_2D_NV;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glTexSubImage2DEXT", 18)) {
    /*                            ^           */
#ifdef glTexSubImage2DEXT
      *iv_return = glTexSubImage2DEXT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case '3':
    if (memEQ(name, "GL_DOUBLE_MAT3_EXT", 18)) {
    /*                            ^           */
#ifdef GL_DOUBLE_MAT3_EXT
      *iv_return = GL_DOUBLE_MAT3_EXT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_DOUBLE_VEC3_EXT", 18)) {
    /*                            ^           */
#ifdef GL_DOUBLE_VEC3_EXT
      *iv_return = GL_DOUBLE_VEC3_EXT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_FLOAT_RGBA32_NV", 18)) {
    /*                            ^           */
#ifdef GL_FLOAT_RGBA32_NV
      *iv_return = GL_FLOAT_RGBA32_NV;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_MODELVIEW13_ARB", 18)) {
    /*                            ^           */
#ifdef GL_MODELVIEW13_ARB
      *iv_return = GL_MODELVIEW13_ARB;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_MODELVIEW23_ARB", 18)) {
    /*                            ^           */
#ifdef GL_MODELVIEW23_ARB
      *iv_return = GL_MODELVIEW23_ARB;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_TRANSLATE_3D_NV", 18)) {
    /*                            ^           */
#ifdef GL_TRANSLATE_3D_NV
      *iv_return = GL_TRANSLATE_3D_NV;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glTexSubImage3DEXT", 18)) {
    /*                            ^           */
#ifdef glTexSubImage3DEXT
      *iv_return = glTexSubImage3DEXT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case '4':
    if (memEQ(name, "GL_DOUBLE_MAT4_EXT", 18)) {
    /*                            ^           */
#ifdef GL_DOUBLE_MAT4_EXT
      *iv_return = GL_DOUBLE_MAT4_EXT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_DOUBLE_VEC4_EXT", 18)) {
    /*                            ^           */
#ifdef GL_DOUBLE_VEC4_EXT
      *iv_return = GL_DOUBLE_VEC4_EXT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_MODELVIEW14_ARB", 18)) {
    /*                            ^           */
#ifdef GL_MODELVIEW14_ARB
      *iv_return = GL_MODELVIEW14_ARB;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_MODELVIEW24_ARB", 18)) {
    /*                            ^           */
#ifdef GL_MODELVIEW24_ARB
      *iv_return = GL_MODELVIEW24_ARB;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glUniform1ui64vARB", 18)) {
    /*                            ^           */
#ifdef glUniform1ui64vARB
      *iv_return = glUniform1ui64vARB;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glUniform2ui64vARB", 18)) {
    /*                            ^           */
#ifdef glUniform2ui64vARB
      *iv_return = glUniform2ui64vARB;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glUniform3ui64vARB", 18)) {
    /*                            ^           */
#ifdef glUniform3ui64vARB
      *iv_return = glUniform3ui64vARB;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glUniform4ui64vARB", 18)) {
    /*                            ^           */
#ifdef glUniform4ui64vARB
      *iv_return = glUniform4ui64vARB;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case '5':
    if (memEQ(name, "GL_MODELVIEW15_ARB", 18)) {
    /*                            ^           */
#ifdef GL_MODELVIEW15_ARB
      *iv_return = GL_MODELVIEW15_ARB;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_MODELVIEW25_ARB", 18)) {
    /*                            ^           */
#ifdef GL_MODELVIEW25_ARB
      *iv_return = GL_MODELVIEW25_ARB;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case '6':
    if (memEQ(name, "GL_INTENSITY16_EXT", 18)) {
    /*                            ^           */
#ifdef GL_INTENSITY16_EXT
      *iv_return = GL_INTENSITY16_EXT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_LUMINANCE16_EXT", 18)) {
    /*                            ^           */
#ifdef GL_LUMINANCE16_EXT
      *iv_return = GL_LUMINANCE16_EXT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_MODELVIEW16_ARB", 18)) {
    /*                            ^           */
#ifdef GL_MODELVIEW16_ARB
      *iv_return = GL_MODELVIEW16_ARB;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_MODELVIEW26_ARB", 18)) {
    /*                            ^           */
#ifdef GL_MODELVIEW26_ARB
      *iv_return = GL_MODELVIEW26_ARB;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_RGB_FLOAT16_ATI", 18)) {
    /*                            ^           */
#ifdef GL_RGB_FLOAT16_ATI
      *iv_return = GL_RGB_FLOAT16_ATI;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glGetUniformi64vNV", 18)) {
    /*                            ^           */
#ifdef glGetUniformi64vNV
      *iv_return = glGetUniformi64vNV;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case '7':
    if (memEQ(name, "GL_MODELVIEW17_ARB", 18)) {
    /*                            ^           */
#ifdef GL_MODELVIEW17_ARB
      *iv_return = GL_MODELVIEW17_ARB;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_MODELVIEW27_ARB", 18)) {
    /*                            ^           */
#ifdef GL_MODELVIEW27_ARB
      *iv_return = GL_MODELVIEW27_ARB;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case '8':
    if (memEQ(name, "GL_MODELVIEW18_ARB", 18)) {
    /*                            ^           */
#ifdef GL_MODELVIEW18_ARB
      *iv_return = GL_MODELVIEW18_ARB;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_MODELVIEW28_ARB", 18)) {
    /*                            ^           */
#ifdef GL_MODELVIEW28_ARB
      *iv_return = GL_MODELVIEW28_ARB;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_SLUMINANCE8_EXT", 18)) {
    /*                            ^           */
#ifdef GL_SLUMINANCE8_EXT
      *iv_return = GL_SLUMINANCE8_EXT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case '9':
    if (memEQ(name, "GL_MODELVIEW19_ARB", 18)) {
    /*                            ^           */
#ifdef GL_MODELVIEW19_ARB
      *iv_return = GL_MODELVIEW19_ARB;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_MODELVIEW29_ARB", 18)) {
    /*                            ^           */
#ifdef GL_MODELVIEW29_ARB
      *iv_return = GL_MODELVIEW29_ARB;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case 'A':
    if (memEQ(name, "GL_BLEND_DST_ALPHA", 18)) {
    /*                            ^           */
#ifdef GL_BLEND_DST_ALPHA
      *iv_return = GL_BLEND_DST_ALPHA;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_BLEND_SRC_ALPHA", 18)) {
    /*                            ^           */
#ifdef GL_BLEND_SRC_ALPHA
      *iv_return = GL_BLEND_SRC_ALPHA;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_EDGE_FLAG_ARRAY", 18)) {
    /*                            ^           */
#ifdef GL_EDGE_FLAG_ARRAY
      *iv_return = GL_EDGE_FLAG_ARRAY;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_FOG_COORD_ARRAY", 18)) {
    /*                            ^           */
#ifdef GL_FOG_COORD_ARRAY
      *iv_return = GL_FOG_COORD_ARRAY;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_LUMINANCE_ALPHA", 18)) {
    /*                            ^           */
#ifdef GL_LUMINANCE_ALPHA
      *iv_return = GL_LUMINANCE_ALPHA;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_PURGEABLE_APPLE", 18)) {
    /*                            ^           */
#ifdef GL_PURGEABLE_APPLE
      *iv_return = GL_PURGEABLE_APPLE;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_SIGNED_RGBA8_NV", 18)) {
    /*                            ^           */
#ifdef GL_SIGNED_RGBA8_NV
      *iv_return = GL_SIGNED_RGBA8_NV;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_TIMESTAMP_ANGLE", 18)) {
    /*                            ^           */
#ifdef GL_TIMESTAMP_ANGLE
      *iv_return = GL_TIMESTAMP_ANGLE;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_UNDEFINED_APPLE", 18)) {
    /*                            ^           */
#ifdef GL_UNDEFINED_APPLE
      *iv_return = GL_UNDEFINED_APPLE;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_YCBCR_422_APPLE", 18)) {
    /*                            ^           */
#ifdef GL_YCBCR_422_APPLE
      *iv_return = GL_YCBCR_422_APPLE;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glFinishFenceAPPLE", 18)) {
    /*                            ^           */
#ifdef glFinishFenceAPPLE
      *iv_return = glFinishFenceAPPLE;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case 'B':
    if (memEQ(name, "GL_COMBINE_RGB_ARB", 18)) {
    /*                            ^           */
#ifdef GL_COMBINE_RGB_ARB
      *iv_return = GL_COMBINE_RGB_ARB;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_COMBINE_RGB_EXT", 18)) {
    /*                            ^           */
#ifdef GL_COMBINE_RGB_EXT
      *iv_return = GL_COMBINE_RGB_EXT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_PACK_SWAP_BYTES", 18)) {
    /*                            ^           */
#ifdef GL_PACK_SWAP_BYTES
      *iv_return = GL_PACK_SWAP_BYTES;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_SOURCE0_RGB_ARB", 18)) {
    /*                            ^           */
#ifdef GL_SOURCE0_RGB_ARB
      *iv_return = GL_SOURCE0_RGB_ARB;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_SOURCE0_RGB_EXT", 18)) {
    /*                            ^           */
#ifdef GL_SOURCE0_RGB_EXT
      *iv_return = GL_SOURCE0_RGB_EXT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_SOURCE1_RGB_ARB", 18)) {
    /*                            ^           */
#ifdef GL_SOURCE1_RGB_ARB
      *iv_return = GL_SOURCE1_RGB_ARB;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_SOURCE1_RGB_EXT", 18)) {
    /*                            ^           */
#ifdef GL_SOURCE1_RGB_EXT
      *iv_return = GL_SOURCE1_RGB_EXT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_SOURCE2_RGB_ARB", 18)) {
    /*                            ^           */
#ifdef GL_SOURCE2_RGB_ARB
      *iv_return = GL_SOURCE2_RGB_ARB;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_SOURCE2_RGB_EXT", 18)) {
    /*                            ^           */
#ifdef GL_SOURCE2_RGB_EXT
      *iv_return = GL_SOURCE2_RGB_EXT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case 'C':
    if (memEQ(name, "GL_FLOAT16_VEC2_NV", 18)) {
    /*                            ^           */
#ifdef GL_FLOAT16_VEC2_NV
      *iv_return = GL_FLOAT16_VEC2_NV;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_FLOAT16_VEC3_NV", 18)) {
    /*                            ^           */
#ifdef GL_FLOAT16_VEC3_NV
      *iv_return = GL_FLOAT16_VEC3_NV;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_FLOAT16_VEC4_NV", 18)) {
    /*                            ^           */
#ifdef GL_FLOAT16_VEC4_NV
      *iv_return = GL_FLOAT16_VEC4_NV;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_LINES_ADJACENCY", 18)) {
    /*                            ^           */
#ifdef GL_LINES_ADJACENCY
      *iv_return = GL_LINES_ADJACENCY;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_ROUNDED_RECT_NV", 18)) {
    /*                            ^           */
#ifdef GL_ROUNDED_RECT_NV
      *iv_return = GL_ROUNDED_RECT_NV;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case 'D':
    if (memEQ(name, "GL_STATIC_READ_ARB", 18)) {
    /*                            ^           */
#ifdef GL_STATIC_READ_ARB
      *iv_return = GL_STATIC_READ_ARB;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_STENCIL_INDEX16", 18)) {
    /*                            ^           */
#ifdef GL_STENCIL_INDEX16
      *iv_return = GL_STENCIL_INDEX16;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_STREAM_READ_ARB", 18)) {
    /*                            ^           */
#ifdef GL_STREAM_READ_ARB
      *iv_return = GL_STREAM_READ_ARB;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case 'E':
    if (memEQ(name, "GL_422_AVERAGE_EXT", 18)) {
    /*                            ^           */
#ifdef GL_422_AVERAGE_EXT
      *iv_return = GL_422_AVERAGE_EXT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_BUFFER_SIZE_ARB", 18)) {
    /*                            ^           */
#ifdef GL_BUFFER_SIZE_ARB
      *iv_return = GL_BUFFER_SIZE_ARB;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_COLOR_TABLE_SGI", 18)) {
    /*                            ^           */
#ifdef GL_COLOR_TABLE_SGI
      *iv_return = GL_COLOR_TABLE_SGI;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_COLOR_WRITEMASK", 18)) {
    /*                            ^           */
#ifdef GL_COLOR_WRITEMASK
      *iv_return = GL_COLOR_WRITEMASK;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_DEPTH_WRITEMASK", 18)) {
    /*                            ^           */
#ifdef GL_DEPTH_WRITEMASK
      *iv_return = GL_DEPTH_WRITEMASK;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_INDEX_WRITEMASK", 18)) {
    /*                            ^           */
#ifdef GL_INDEX_WRITEMASK
      *iv_return = GL_INDEX_WRITEMASK;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_INFO_LOG_LENGTH", 18)) {
    /*                            ^           */
#ifdef GL_INFO_LOG_LENGTH
      *iv_return = GL_INFO_LOG_LENGTH;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_INTERPOLATE_ARB", 18)) {
    /*                            ^           */
#ifdef GL_INTERPOLATE_ARB
      *iv_return = GL_INTERPOLATE_ARB;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_INTERPOLATE_EXT", 18)) {
    /*                            ^           */
#ifdef GL_INTERPOLATE_EXT
      *iv_return = GL_INTERPOLATE_EXT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_KTX_BACK_REGION", 18)) {
    /*                            ^           */
#ifdef GL_KTX_BACK_REGION
      *iv_return = GL_KTX_BACK_REGION;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_MAX_NAME_LENGTH", 18)) {
    /*                            ^           */
#ifdef GL_MAX_NAME_LENGTH
      *iv_return = GL_MAX_NAME_LENGTH;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_MIRRORED_REPEAT", 18)) {
    /*                            ^           */
#ifdef GL_MIRRORED_REPEAT
      *iv_return = GL_MIRRORED_REPEAT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_MULTISAMPLES_NV", 18)) {
    /*                            ^           */
#ifdef GL_MULTISAMPLES_NV
      *iv_return = GL_MULTISAMPLES_NV;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_MULTISAMPLE_ARB", 18)) {
    /*                            ^           */
#ifdef GL_MULTISAMPLE_ARB
      *iv_return = GL_MULTISAMPLE_ARB;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_MULTISAMPLE_BIT", 18)) {
    /*                            ^           */
#ifdef GL_MULTISAMPLE_BIT
      *iv_return = GL_MULTISAMPLE_BIT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_MULTISAMPLE_EXT", 18)) {
    /*                            ^           */
#ifdef GL_MULTISAMPLE_EXT
      *iv_return = GL_MULTISAMPLE_EXT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_OBJECT_TYPE_ARB", 18)) {
    /*                            ^           */
#ifdef GL_OBJECT_TYPE_ARB
      *iv_return = GL_OBJECT_TYPE_ARB;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_PACK_ROW_LENGTH", 18)) {
    /*                            ^           */
#ifdef GL_PACK_ROW_LENGTH
      *iv_return = GL_PACK_ROW_LENGTH;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_PLUS_CLAMPED_NV", 18)) {
    /*                            ^           */
#ifdef GL_PLUS_CLAMPED_NV
      *iv_return = GL_PLUS_CLAMPED_NV;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_SAMPLE_COVERAGE", 18)) {
    /*                            ^           */
#ifdef GL_SAMPLE_COVERAGE
      *iv_return = GL_SAMPLE_COVERAGE;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_SKIP_DECODE_EXT", 18)) {
    /*                            ^           */
#ifdef GL_SKIP_DECODE_EXT
      *iv_return = GL_SKIP_DECODE_EXT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_SRGB_DECODE_ARB", 18)) {
    /*                            ^           */
#ifdef GL_SRGB_DECODE_ARB
      *iv_return = GL_SRGB_DECODE_ARB;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_UNCORRELATED_NV", 18)) {
    /*                            ^           */
#ifdef GL_UNCORRELATED_NV
      *iv_return = GL_UNCORRELATED_NV;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_VIDEO_BUFFER_NV", 18)) {
    /*                            ^           */
#ifdef GL_VIDEO_BUFFER_NV
      *iv_return = GL_VIDEO_BUFFER_NV;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case 'F':
    if (memEQ(name, "GL_ACTIVE_UNIFORMS", 18)) {
    /*                            ^           */
#ifdef GL_ACTIVE_UNIFORMS
      *iv_return = GL_ACTIVE_UNIFORMS;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_T2F_C4F_N3F_V3F", 18)) {
    /*                            ^           */
#ifdef GL_T2F_C4F_N3F_V3F
      *iv_return = GL_T2F_C4F_N3F_V3F;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_T4F_C4F_N3F_V4F", 18)) {
    /*                            ^           */
#ifdef GL_T4F_C4F_N3F_V4F
      *iv_return = GL_T4F_C4F_N3F_V4F;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case 'G':
    if (memEQ(name, "GL_OPERAND3_RGB_NV", 18)) {
    /*                            ^           */
#ifdef GL_OPERAND3_RGB_NV
      *iv_return = GL_OPERAND3_RGB_NV;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_PASS_THROUGH_NV", 18)) {
    /*                            ^           */
#ifdef GL_PASS_THROUGH_NV
      *iv_return = GL_PASS_THROUGH_NV;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case 'H':
    if (memEQ(name, "GL_EMBOSS_LIGHT_NV", 18)) {
    /*                            ^           */
#ifdef GL_EMBOSS_LIGHT_NV
      *iv_return = GL_EMBOSS_LIGHT_NV;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_FRAGMENT_SHADER", 18)) {
    /*                            ^           */
#ifdef GL_FRAGMENT_SHADER
      *iv_return = GL_FRAGMENT_SHADER;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_GEOMETRY_SHADER", 18)) {
    /*                            ^           */
#ifdef GL_GEOMETRY_SHADER
      *iv_return = GL_GEOMETRY_SHADER;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_SIGNED_ALPHA_NV", 18)) {
    /*                            ^           */
#ifdef GL_SIGNED_ALPHA_NV
      *iv_return = GL_SIGNED_ALPHA_NV;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case 'I':
    if (memEQ(name, "GL_BUFFER_VARIABLE", 18)) {
    /*                            ^           */
#ifdef GL_BUFFER_VARIABLE
      *iv_return = GL_BUFFER_VARIABLE;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_DSDT_MAG_VIB_NV", 18)) {
    /*                            ^           */
#ifdef GL_DSDT_MAG_VIB_NV
      *iv_return = GL_DSDT_MAG_VIB_NV;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_GENERATE_MIPMAP", 18)) {
    /*                            ^           */
#ifdef GL_GENERATE_MIPMAP
      *iv_return = GL_GENERATE_MIPMAP;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_INTENSITY8I_EXT", 18)) {
    /*                            ^           */
#ifdef GL_INTENSITY8I_EXT
      *iv_return = GL_INTENSITY8I_EXT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_LUMINANCE8I_EXT", 18)) {
    /*                            ^           */
#ifdef GL_LUMINANCE8I_EXT
      *iv_return = GL_LUMINANCE8I_EXT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_POLYGON_STIPPLE", 18)) {
    /*                            ^           */
#ifdef GL_POLYGON_STIPPLE
      *iv_return = GL_POLYGON_STIPPLE;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_PRIMITIVE_ID_NV", 18)) {
    /*                            ^           */
#ifdef GL_PRIMITIVE_ID_NV
      *iv_return = GL_PRIMITIVE_ID_NV;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_SAMPLE_POSITION", 18)) {
    /*                            ^           */
#ifdef GL_SAMPLE_POSITION
      *iv_return = GL_SAMPLE_POSITION;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_TRACK_MATRIX_NV", 18)) {
    /*                            ^           */
#ifdef GL_TRACK_MATRIX_NV
      *iv_return = GL_TRACK_MATRIX_NV;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glClearTexSubImage", 18)) {
    /*                            ^           */
#ifdef glClearTexSubImage
      *iv_return = glClearTexSubImage;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glGetFragDataIndex", 18)) {
    /*                            ^           */
#ifdef glGetFragDataIndex
      *iv_return = glGetFragDataIndex;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glSyncTextureINTEL", 18)) {
    /*                            ^           */
#ifdef glSyncTextureINTEL
      *iv_return = glSyncTextureINTEL;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case 'K':
    if (memEQ(name, "GL_MINMAX_SINK_EXT", 18)) {
    /*                            ^           */
#ifdef GL_MINMAX_SINK_EXT
      *iv_return = GL_MINMAX_SINK_EXT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_SAMPLE_MASK_EXT", 18)) {
    /*                            ^           */
#ifdef GL_SAMPLE_MASK_EXT
      *iv_return = GL_SAMPLE_MASK_EXT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case 'L':
    if (memEQ(name, "GL_MAX_CLIP_PLANES", 18)) {
    /*                            ^           */
#ifdef GL_MAX_CLIP_PLANES
      *iv_return = GL_MAX_CLIP_PLANES;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_QUERY_RESULT_NV", 18)) {
    /*                            ^           */
#ifdef GL_QUERY_RESULT_NV
      *iv_return = GL_QUERY_RESULT_NV;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_TABLE_TOO_LARGE", 18)) {
    /*                            ^           */
#ifdef GL_TABLE_TOO_LARGE
      *iv_return = GL_TABLE_TOO_LARGE;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case 'M':
    if (memEQ(name, "GLEW_VERSION_MAJOR", 18)) {
    /*                            ^           */
#ifdef GLEW_VERSION_MAJOR
      *iv_return = GLEW_VERSION_MAJOR;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GLEW_VERSION_MICRO", 18)) {
    /*                            ^           */
#ifdef GLEW_VERSION_MICRO
      *iv_return = GLEW_VERSION_MICRO;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GLEW_VERSION_MINOR", 18)) {
    /*                            ^           */
#ifdef GLEW_VERSION_MINOR
      *iv_return = GLEW_VERSION_MINOR;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_CURRENT_TIME_NV", 18)) {
    /*                            ^           */
#ifdef GL_CURRENT_TIME_NV
      *iv_return = GL_CURRENT_TIME_NV;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_PRESENT_TIME_NV", 18)) {
    /*                            ^           */
#ifdef GL_PRESENT_TIME_NV
      *iv_return = GL_PRESENT_TIME_NV;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_SLICE_ACCUM_SUN", 18)) {
    /*                            ^           */
#ifdef GL_SLICE_ACCUM_SUN
      *iv_return = GL_SLICE_ACCUM_SUN;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_TEXTURE_SAMPLES", 18)) {
    /*                            ^           */
#ifdef GL_TEXTURE_SAMPLES
      *iv_return = GL_TEXTURE_SAMPLES;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case 'N':
    if (memEQ(name, "GL_ATTENUATION_EXT", 18)) {
    /*                            ^           */
#ifdef GL_ATTENUATION_EXT
      *iv_return = GL_ATTENUATION_EXT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_SAMPLER_BINDING", 18)) {
    /*                            ^           */
#ifdef GL_SAMPLER_BINDING
      *iv_return = GL_SAMPLER_BINDING;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_SAMPLE_COUNT_NV", 18)) {
    /*                            ^           */
#ifdef GL_SAMPLE_COUNT_NV
      *iv_return = GL_SAMPLE_COUNT_NV;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_TEXTURE_MIN_LOD", 18)) {
    /*                            ^           */
#ifdef GL_TEXTURE_MIN_LOD
      *iv_return = GL_TEXTURE_MIN_LOD;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_TIMEOUT_IGNORED", 18)) {
    /*                            ^           */
#ifdef GL_TIMEOUT_IGNORED
      *iv_return = GL_TIMEOUT_IGNORED;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case 'O':
    if (memEQ(name, "GL_BOUNDING_BOX_NV", 18)) {
    /*                            ^           */
#ifdef GL_BOUNDING_BOX_NV
      *iv_return = GL_BOUNDING_BOX_NV;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_CLAMP_TO_BORDER", 18)) {
    /*                            ^           */
#ifdef GL_CLAMP_TO_BORDER
      *iv_return = GL_CLAMP_TO_BORDER;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_CONSTANT_BORDER", 18)) {
    /*                            ^           */
#ifdef GL_CONSTANT_BORDER
      *iv_return = GL_CONSTANT_BORDER;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_CURRENT_PROGRAM", 18)) {
    /*                            ^           */
#ifdef GL_CURRENT_PROGRAM
      *iv_return = GL_CURRENT_PROGRAM;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_DEPTH_COMPONENT", 18)) {
    /*                            ^           */
#ifdef GL_DEPTH_COMPONENT
      *iv_return = GL_DEPTH_COMPONENT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_PROXY_HISTOGRAM", 18)) {
    /*                            ^           */
#ifdef GL_PROXY_HISTOGRAM
      *iv_return = GL_PROXY_HISTOGRAM;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_SIGNED_HILO8_NV", 18)) {
    /*                            ^           */
#ifdef GL_SIGNED_HILO8_NV
      *iv_return = GL_SIGNED_HILO8_NV;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case 'P':
    if (memEQ(name, "GL_BUMP_ENVMAP_ATI", 18)) {
    /*                            ^           */
#ifdef GL_BUMP_ENVMAP_ATI
      *iv_return = GL_BUMP_ENVMAP_ATI;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_SHADER_COMPILER", 18)) {
    /*                            ^           */
#ifdef GL_SHADER_COMPILER
      *iv_return = GL_SHADER_COMPILER;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_TIMEOUT_EXPIRED", 18)) {
    /*                            ^           */
#ifdef GL_TIMEOUT_EXPIRED
      *iv_return = GL_TIMEOUT_EXPIRED;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case 'Q':
    if (memEQ(name, "GL_SWIZZLE_STQ_ATI", 18)) {
    /*                            ^           */
#ifdef GL_SWIZZLE_STQ_ATI
      *iv_return = GL_SWIZZLE_STQ_ATI;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case 'R':
    if (memEQ(name, "GL_BGR_INTEGER_EXT", 18)) {
    /*                            ^           */
#ifdef GL_BGR_INTEGER_EXT
      *iv_return = GL_BGR_INTEGER_EXT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_BLEND_COLOR_EXT", 18)) {
    /*                            ^           */
#ifdef GL_BLEND_COLOR_EXT
      *iv_return = GL_BLEND_COLOR_EXT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_DATA_BUFFER_AMD", 18)) {
    /*                            ^           */
#ifdef GL_DATA_BUFFER_AMD
      *iv_return = GL_DATA_BUFFER_AMD;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_EMULATION_REGAL", 18)) {
    /*                            ^           */
#ifdef GL_EMULATION_REGAL
      *iv_return = GL_EMULATION_REGAL;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_FRAMEBUFFER_EXT", 18)) {
    /*                            ^           */
#ifdef GL_FRAMEBUFFER_EXT
      *iv_return = GL_FRAMEBUFFER_EXT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_LOG_DEBUG_REGAL", 18)) {
    /*                            ^           */
#ifdef GL_LOG_DEBUG_REGAL
      *iv_return = GL_LOG_DEBUG_REGAL;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_LOG_ERROR_REGAL", 18)) {
    /*                            ^           */
#ifdef GL_LOG_ERROR_REGAL
      *iv_return = GL_LOG_ERROR_REGAL;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_MITER_REVERT_NV", 18)) {
    /*                            ^           */
#ifdef GL_MITER_REVERT_NV
      *iv_return = GL_MITER_REVERT_NV;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_RED_INTEGER_EXT", 18)) {
    /*                            ^           */
#ifdef GL_RED_INTEGER_EXT
      *iv_return = GL_RED_INTEGER_EXT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_RGB_INTEGER_EXT", 18)) {
    /*                            ^           */
#ifdef GL_RGB_INTEGER_EXT
      *iv_return = GL_RGB_INTEGER_EXT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_STACK_UNDERFLOW", 18)) {
    /*                            ^           */
#ifdef GL_STACK_UNDERFLOW
      *iv_return = GL_STACK_UNDERFLOW;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_SWIZZLE_STR_ATI", 18)) {
    /*                            ^           */
#ifdef GL_SWIZZLE_STR_ATI
      *iv_return = GL_SWIZZLE_STR_ATI;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_WRAP_BORDER_SUN", 18)) {
    /*                            ^           */
#ifdef GL_WRAP_BORDER_SUN
      *iv_return = GL_WRAP_BORDER_SUN;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glBindBuffersRange", 18)) {
    /*                            ^           */
#ifdef glBindBuffersRange
      *iv_return = glBindBuffersRange;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glErrorStringREGAL", 18)) {
    /*                            ^           */
#ifdef glErrorStringREGAL
      *iv_return = glErrorStringREGAL;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glIsSupportedREGAL", 18)) {
    /*                            ^           */
#ifdef glIsSupportedREGAL
      *iv_return = glIsSupportedREGAL;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case 'S':
    if (memEQ(name, "GL_INTENSITY_SNORM", 18)) {
    /*                            ^           */
#ifdef GL_INTENSITY_SNORM
      *iv_return = GL_INTENSITY_SNORM;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_LUMINANCE_SNORM", 18)) {
    /*                            ^           */
#ifdef GL_LUMINANCE_SNORM
      *iv_return = GL_LUMINANCE_SNORM;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_MAX_SAMPLES_EXT", 18)) {
    /*                            ^           */
#ifdef GL_MAX_SAMPLES_EXT
      *iv_return = GL_MAX_SAMPLES_EXT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_WARPS_PER_SM_NV", 18)) {
    /*                            ^           */
#ifdef GL_WARPS_PER_SM_NV
      *iv_return = GL_WARPS_PER_SM_NV;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case 'T':
    if (memEQ(name, "GL_BUMP_TARGET_ATI", 18)) {
    /*                            ^           */
#ifdef GL_BUMP_TARGET_ATI
      *iv_return = GL_BUMP_TARGET_ATI;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_MAX_SUBROUTINES", 18)) {
    /*                            ^           */
#ifdef GL_MAX_SUBROUTINES
      *iv_return = GL_MAX_SUBROUTINES;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_POINT_SPRITE_NV", 18)) {
    /*                            ^           */
#ifdef GL_POINT_SPRITE_NV
      *iv_return = GL_POINT_SPRITE_NV;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_QUARTER_BIT_ATI", 18)) {
    /*                            ^           */
#ifdef GL_QUARTER_BIT_ATI
      *iv_return = GL_QUARTER_BIT_ATI;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_RESTART_PATH_NV", 18)) {
    /*                            ^           */
#ifdef GL_RESTART_PATH_NV
      *iv_return = GL_RESTART_PATH_NV;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_VALIDATE_STATUS", 18)) {
    /*                            ^           */
#ifdef GL_VALIDATE_STATUS
      *iv_return = GL_VALIDATE_STATUS;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_VERTEX4_BIT_PGI", 18)) {
    /*                            ^           */
#ifdef GL_VERTEX4_BIT_PGI
      *iv_return = GL_VERTEX4_BIT_PGI;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case 'U':
    if (memEQ(name, "GL_FENCE_STATUS_NV", 18)) {
    /*                            ^           */
#ifdef GL_FENCE_STATUS_NV
      *iv_return = GL_FENCE_STATUS_NV;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_MAX_IMAGE_UNITS", 18)) {
    /*                            ^           */
#ifdef GL_MAX_IMAGE_UNITS
      *iv_return = GL_MAX_IMAGE_UNITS;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case 'W':
    if (memEQ(name, "GL_HISTOGRAM_WIDTH", 18)) {
    /*                            ^           */
#ifdef GL_HISTOGRAM_WIDTH
      *iv_return = GL_HISTOGRAM_WIDTH;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_SCALE_BY_TWO_NV", 18)) {
    /*                            ^           */
#ifdef GL_SCALE_BY_TWO_NV
      *iv_return = GL_SCALE_BY_TWO_NV;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_STATIC_DRAW_ARB", 18)) {
    /*                            ^           */
#ifdef GL_STATIC_DRAW_ARB
      *iv_return = GL_STATIC_DRAW_ARB;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_STREAM_DRAW_ARB", 18)) {
    /*                            ^           */
#ifdef GL_STREAM_DRAW_ARB
      *iv_return = GL_STREAM_DRAW_ARB;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case 'X':
    if (memEQ(name, "GL_COMPUTE_TEXTURE", 18)) {
    /*                            ^           */
#ifdef GL_COMPUTE_TEXTURE
      *iv_return = GL_COMPUTE_TEXTURE;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_CULL_VERTEX_EXT", 18)) {
    /*                            ^           */
#ifdef GL_CULL_VERTEX_EXT
      *iv_return = GL_CULL_VERTEX_EXT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_CULL_VERTEX_IBM", 18)) {
    /*                            ^           */
#ifdef GL_CULL_VERTEX_IBM
      *iv_return = GL_CULL_VERTEX_IBM;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_TEXTURE_MAX_LOD", 18)) {
    /*                            ^           */
#ifdef GL_TEXTURE_MAX_LOD
      *iv_return = GL_TEXTURE_MAX_LOD;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case 'Y':
    if (memEQ(name, "GL_COLOR_ARRAY_EXT", 18)) {
    /*                            ^           */
#ifdef GL_COLOR_ARRAY_EXT
      *iv_return = GL_COLOR_ARRAY_EXT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_INDEX_ARRAY_EXT", 18)) {
    /*                            ^           */
#ifdef GL_INDEX_ARRAY_EXT
      *iv_return = GL_INDEX_ARRAY_EXT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_STATIC_COPY_ARB", 18)) {
    /*                            ^           */
#ifdef GL_STATIC_COPY_ARB
      *iv_return = GL_STATIC_COPY_ARB;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_STREAM_COPY_ARB", 18)) {
    /*                            ^           */
#ifdef GL_STREAM_COPY_ARB
      *iv_return = GL_STREAM_COPY_ARB;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case '_':
    if (memEQ(name, "GLEW_WIN_swap_hint", 18)) {
    /*                            ^           */
#ifdef GLEW_WIN_swap_hint
      *iv_return = GLEW_WIN_swap_hint;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_ACCUM_BLUE_BITS", 18)) {
    /*                            ^           */
#ifdef GL_ACCUM_BLUE_BITS
      *iv_return = GL_ACCUM_BLUE_BITS;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_ALL_ATTRIB_BITS", 18)) {
    /*                            ^           */
#ifdef GL_ALL_ATTRIB_BITS
      *iv_return = GL_ALL_ATTRIB_BITS;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_ALL_SHADER_BITS", 18)) {
    /*                            ^           */
#ifdef GL_ALL_SHADER_BITS
      *iv_return = GL_ALL_SHADER_BITS;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_ALPHA_TEST_FUNC", 18)) {
    /*                            ^           */
#ifdef GL_ALPHA_TEST_FUNC
      *iv_return = GL_ALPHA_TEST_FUNC;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_CLIP_DEPTH_MODE", 18)) {
    /*                            ^           */
#ifdef GL_CLIP_DEPTH_MODE
      *iv_return = GL_CLIP_DEPTH_MODE;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_COMPRESSED_RGBA", 18)) {
    /*                            ^           */
#ifdef GL_COMPRESSED_RGBA
      *iv_return = GL_COMPRESSED_RGBA;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_COMPRESSED_SRGB", 18)) {
    /*                            ^           */
#ifdef GL_COMPRESSED_SRGB
      *iv_return = GL_COMPRESSED_SRGB;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_FOG_OFFSET_SGIX", 18)) {
    /*                            ^           */
#ifdef GL_FOG_OFFSET_SGIX
      *iv_return = GL_FOG_OFFSET_SGIX;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_FRACTIONAL_EVEN", 18)) {
    /*                            ^           */
#ifdef GL_FRACTIONAL_EVEN
      *iv_return = GL_FRACTIONAL_EVEN;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_IBM_static_data", 18)) {
    /*                            ^           */
#ifdef GL_IBM_static_data
      *iv_return = GL_IBM_static_data;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_NV_command_list", 18)) {
    /*                            ^           */
#ifdef GL_NV_command_list
      *iv_return = GL_NV_command_list;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_RGBA4_DXT5_S3TC", 18)) {
    /*                            ^           */
#ifdef GL_RGBA4_DXT5_S3TC
      *iv_return = GL_RGBA4_DXT5_S3TC;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_RGB_SIGNED_SGIX", 18)) {
    /*                            ^           */
#ifdef GL_RGB_SIGNED_SGIX
      *iv_return = GL_RGB_SIGNED_SGIX;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_SAMPLER_2D_RECT", 18)) {
    /*                            ^           */
#ifdef GL_SAMPLER_2D_RECT
      *iv_return = GL_SAMPLER_2D_RECT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glGetPointeri_vEXT", 18)) {
    /*                            ^           */
#ifdef glGetPointeri_vEXT
      *iv_return = glGetPointeri_vEXT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case 'a':
    if (memEQ(name, "GLEW_NV_evaluators", 18)) {
    /*                            ^           */
#ifdef GLEW_NV_evaluators
      *iv_return = GLEW_NV_evaluators;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GLEW_OML_subsample", 18)) {
    /*                            ^           */
#ifdef GLEW_OML_subsample
      *iv_return = GLEW_OML_subsample;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GLEW_SGIX_resample", 18)) {
    /*                            ^           */
#ifdef GLEW_SGIX_resample
      *iv_return = GLEW_SGIX_resample;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_ARB_gpu_shader5", 18)) {
    /*                            ^           */
#ifdef GL_ARB_gpu_shader5
      *iv_return = GL_ARB_gpu_shader5;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_ARB_multisample", 18)) {
    /*                            ^           */
#ifdef GL_ARB_multisample
      *iv_return = GL_ARB_multisample;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_EXT_gpu_shader4", 18)) {
    /*                            ^           */
#ifdef GL_EXT_gpu_shader4
      *iv_return = GL_EXT_gpu_shader4;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_EXT_multisample", 18)) {
    /*                            ^           */
#ifdef GL_EXT_multisample
      *iv_return = GL_EXT_multisample;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_SUN_slice_accum", 18)) {
    /*                            ^           */
#ifdef GL_SUN_slice_accum
      *iv_return = GL_SUN_slice_accum;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glActiveProgramEXT", 18)) {
    /*                            ^           */
#ifdef glActiveProgramEXT
      *iv_return = glActiveProgramEXT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glBindBufferBaseNV", 18)) {
    /*                            ^           */
#ifdef glBindBufferBaseNV
      *iv_return = glBindBufferBaseNV;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glDeleteProgramsNV", 18)) {
    /*                            ^           */
#ifdef glDeleteProgramsNV
      *iv_return = glDeleteProgramsNV;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glGetnHistogramARB", 18)) {
    /*                            ^           */
#ifdef glGetnHistogramARB
      *iv_return = glGetnHistogramARB;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glIndexMaterialEXT", 18)) {
    /*                            ^           */
#ifdef glIndexMaterialEXT
      *iv_return = glIndexMaterialEXT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glMinSampleShading", 18)) {
    /*                            ^           */
#ifdef glMinSampleShading
      *iv_return = glMinSampleShading;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glPointAlongPathNV", 18)) {
    /*                            ^           */
#ifdef glPointAlongPathNV
      *iv_return = glPointAlongPathNV;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glTextureNormalEXT", 18)) {
    /*                            ^           */
#ifdef glTextureNormalEXT
      *iv_return = glTextureNormalEXT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glTextureStorage1D", 18)) {
    /*                            ^           */
#ifdef glTextureStorage1D
      *iv_return = glTextureStorage1D;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glTextureStorage2D", 18)) {
    /*                            ^           */
#ifdef glTextureStorage2D
      *iv_return = glTextureStorage2D;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glTextureStorage3D", 18)) {
    /*                            ^           */
#ifdef glTextureStorage3D
      *iv_return = glTextureStorage3D;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glVDPAUIsSurfaceNV", 18)) {
    /*                            ^           */
#ifdef glVDPAUIsSurfaceNV
      *iv_return = glVDPAUIsSurfaceNV;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case 'b':
    if (memEQ(name, "GLEW_APPLE_rgb_422", 18)) {
    /*                            ^           */
#ifdef GLEW_APPLE_rgb_422
      *iv_return = GLEW_APPLE_rgb_422;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_APPLE_row_bytes", 18)) {
    /*                            ^           */
#ifdef GL_APPLE_row_bytes
      *iv_return = GL_APPLE_row_bytes;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glCopyImageSubData", 18)) {
    /*                            ^           */
#ifdef glCopyImageSubData
      *iv_return = glCopyImageSubData;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glGetBufferSubData", 18)) {
    /*                            ^           */
#ifdef glGetBufferSubData
      *iv_return = glGetBufferSubData;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glVertexAttrib1dNV", 18)) {
    /*                            ^           */
#ifdef glVertexAttrib1dNV
      *iv_return = glVertexAttrib1dNV;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glVertexAttrib1fNV", 18)) {
    /*                            ^           */
#ifdef glVertexAttrib1fNV
      *iv_return = glVertexAttrib1fNV;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glVertexAttrib1hNV", 18)) {
    /*                            ^           */
#ifdef glVertexAttrib1hNV
      *iv_return = glVertexAttrib1hNV;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glVertexAttrib1sNV", 18)) {
    /*                            ^           */
#ifdef glVertexAttrib1sNV
      *iv_return = glVertexAttrib1sNV;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glVertexAttrib2dNV", 18)) {
    /*                            ^           */
#ifdef glVertexAttrib2dNV
      *iv_return = glVertexAttrib2dNV;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glVertexAttrib2fNV", 18)) {
    /*                            ^           */
#ifdef glVertexAttrib2fNV
      *iv_return = glVertexAttrib2fNV;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glVertexAttrib2hNV", 18)) {
    /*                            ^           */
#ifdef glVertexAttrib2hNV
      *iv_return = glVertexAttrib2hNV;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glVertexAttrib2sNV", 18)) {
    /*                            ^           */
#ifdef glVertexAttrib2sNV
      *iv_return = glVertexAttrib2sNV;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glVertexAttrib3dNV", 18)) {
    /*                            ^           */
#ifdef glVertexAttrib3dNV
      *iv_return = glVertexAttrib3dNV;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glVertexAttrib3fNV", 18)) {
    /*                            ^           */
#ifdef glVertexAttrib3fNV
      *iv_return = glVertexAttrib3fNV;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glVertexAttrib3hNV", 18)) {
    /*                            ^           */
#ifdef glVertexAttrib3hNV
      *iv_return = glVertexAttrib3hNV;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glVertexAttrib3sNV", 18)) {
    /*                            ^           */
#ifdef glVertexAttrib3sNV
      *iv_return = glVertexAttrib3sNV;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glVertexAttrib4Nbv", 18)) {
    /*                            ^           */
#ifdef glVertexAttrib4Nbv
      *iv_return = glVertexAttrib4Nbv;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glVertexAttrib4Niv", 18)) {
    /*                            ^           */
#ifdef glVertexAttrib4Niv
      *iv_return = glVertexAttrib4Niv;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glVertexAttrib4Nsv", 18)) {
    /*                            ^           */
#ifdef glVertexAttrib4Nsv
      *iv_return = glVertexAttrib4Nsv;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glVertexAttrib4Nub", 18)) {
    /*                            ^           */
#ifdef glVertexAttrib4Nub
      *iv_return = glVertexAttrib4Nub;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glVertexAttrib4dNV", 18)) {
    /*                            ^           */
#ifdef glVertexAttrib4dNV
      *iv_return = glVertexAttrib4dNV;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glVertexAttrib4fNV", 18)) {
    /*                            ^           */
#ifdef glVertexAttrib4fNV
      *iv_return = glVertexAttrib4fNV;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glVertexAttrib4hNV", 18)) {
    /*                            ^           */
#ifdef glVertexAttrib4hNV
      *iv_return = glVertexAttrib4hNV;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glVertexAttrib4sNV", 18)) {
    /*                            ^           */
#ifdef glVertexAttrib4sNV
      *iv_return = glVertexAttrib4sNV;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glVertexAttrib4ubv", 18)) {
    /*                            ^           */
#ifdef glVertexAttrib4ubv
      *iv_return = glVertexAttrib4ubv;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glVertexAttrib4uiv", 18)) {
    /*                            ^           */
#ifdef glVertexAttrib4uiv
      *iv_return = glVertexAttrib4uiv;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glVertexAttrib4usv", 18)) {
    /*                            ^           */
#ifdef glVertexAttrib4usv
      *iv_return = glVertexAttrib4usv;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glVertexAttribI1iv", 18)) {
    /*                            ^           */
#ifdef glVertexAttribI1iv
      *iv_return = glVertexAttribI1iv;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glVertexAttribI1ui", 18)) {
    /*                            ^           */
#ifdef glVertexAttribI1ui
      *iv_return = glVertexAttribI1ui;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glVertexAttribI2iv", 18)) {
    /*                            ^           */
#ifdef glVertexAttribI2iv
      *iv_return = glVertexAttribI2iv;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glVertexAttribI2ui", 18)) {
    /*                            ^           */
#ifdef glVertexAttribI2ui
      *iv_return = glVertexAttribI2ui;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glVertexAttribI3iv", 18)) {
    /*                            ^           */
#ifdef glVertexAttribI3iv
      *iv_return = glVertexAttribI3iv;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glVertexAttribI3ui", 18)) {
    /*                            ^           */
#ifdef glVertexAttribI3ui
      *iv_return = glVertexAttribI3ui;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glVertexAttribI4bv", 18)) {
    /*                            ^           */
#ifdef glVertexAttribI4bv
      *iv_return = glVertexAttribI4bv;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glVertexAttribI4iv", 18)) {
    /*                            ^           */
#ifdef glVertexAttribI4iv
      *iv_return = glVertexAttribI4iv;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glVertexAttribI4sv", 18)) {
    /*                            ^           */
#ifdef glVertexAttribI4sv
      *iv_return = glVertexAttribI4sv;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glVertexAttribI4ui", 18)) {
    /*                            ^           */
#ifdef glVertexAttribI4ui
      *iv_return = glVertexAttribI4ui;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glVertexAttribL1dv", 18)) {
    /*                            ^           */
#ifdef glVertexAttribL1dv
      *iv_return = glVertexAttribL1dv;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glVertexAttribL2dv", 18)) {
    /*                            ^           */
#ifdef glVertexAttribL2dv
      *iv_return = glVertexAttribL2dv;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glVertexAttribL3dv", 18)) {
    /*                            ^           */
#ifdef glVertexAttribL3dv
      *iv_return = glVertexAttribL3dv;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glVertexAttribL4dv", 18)) {
    /*                            ^           */
#ifdef glVertexAttribL4dv
      *iv_return = glVertexAttribL4dv;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glVertexAttribP1ui", 18)) {
    /*                            ^           */
#ifdef glVertexAttribP1ui
      *iv_return = glVertexAttribP1ui;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glVertexAttribP2ui", 18)) {
    /*                            ^           */
#ifdef glVertexAttribP2ui
      *iv_return = glVertexAttribP2ui;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glVertexAttribP3ui", 18)) {
    /*                            ^           */
#ifdef glVertexAttribP3ui
      *iv_return = glVertexAttribP3ui;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glVertexAttribP4ui", 18)) {
    /*                            ^           */
#ifdef glVertexAttribP4ui
      *iv_return = glVertexAttribP4ui;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case 'c':
    if (memEQ(name, "GLEW_EXT_fog_coord", 18)) {
    /*                            ^           */
#ifdef GLEW_EXT_fog_coord
      *iv_return = GLEW_EXT_fog_coord;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_ARB_depth_clamp", 18)) {
    /*                            ^           */
#ifdef GL_ARB_depth_clamp
      *iv_return = GL_ARB_depth_clamp;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_EXT_blend_color", 18)) {
    /*                            ^           */
#ifdef GL_EXT_blend_color
      *iv_return = GL_EXT_blend_color;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glLGPUInterlockNVX", 18)) {
    /*                            ^           */
#ifdef glLGPUInterlockNVX
      *iv_return = glLGPUInterlockNVX;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case 'd':
    if (memEQ(name, "glGetImageHandleNV", 18)) {
    /*                            ^           */
#ifdef glGetImageHandleNV
      *iv_return = glGetImageHandleNV;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glGetnUniformdvARB", 18)) {
    /*                            ^           */
#ifdef glGetnUniformdvARB
      *iv_return = glGetnUniformdvARB;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glMultiTexGendvEXT", 18)) {
    /*                            ^           */
#ifdef glMultiTexGendvEXT
      *iv_return = glMultiTexGendvEXT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case 'e':
    if (memEQ(name, "GL_EXT_cull_vertex", 18)) {
    /*                            ^           */
#ifdef GL_EXT_cull_vertex
      *iv_return = GL_EXT_cull_vertex;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_EXT_texture_env", 18)) {
    /*                            ^           */
#ifdef GL_EXT_texture_env
      *iv_return = GL_EXT_texture_env;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_IBM_cull_vertex", 18)) {
    /*                            ^           */
#ifdef GL_IBM_cull_vertex
      *iv_return = GL_IBM_cull_vertex;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glBindParameterEXT", 18)) {
    /*                            ^           */
#ifdef glBindParameterEXT
      *iv_return = glBindParameterEXT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glCompileShaderARB", 18)) {
    /*                            ^           */
#ifdef glCompileShaderARB
      *iv_return = glCompileShaderARB;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glDeleteQueriesARB", 18)) {
    /*                            ^           */
#ifdef glDeleteQueriesARB
      *iv_return = glDeleteQueriesARB;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glDrawBufferRegion", 18)) {
    /*                            ^           */
#ifdef glDrawBufferRegion
      *iv_return = glDrawBufferRegion;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glEnableIndexedEXT", 18)) {
    /*                            ^           */
#ifdef glEnableIndexedEXT
      *iv_return = glEnableIndexedEXT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glGetClipPlanefOES", 18)) {
    /*                            ^           */
#ifdef glGetClipPlanefOES
      *iv_return = glGetClipPlanefOES;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glGetQueryObjectiv", 18)) {
    /*                            ^           */
#ifdef glGetQueryObjectiv
      *iv_return = glGetQueryObjectiv;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glIsFramebufferEXT", 18)) {
    /*                            ^           */
#ifdef glIsFramebufferEXT
      *iv_return = glIsFramebufferEXT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glMatrixRotatedEXT", 18)) {
    /*                            ^           */
#ifdef glMatrixRotatedEXT
      *iv_return = glMatrixRotatedEXT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glMatrixRotatefEXT", 18)) {
    /*                            ^           */
#ifdef glMatrixRotatefEXT
      *iv_return = glMatrixRotatefEXT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glMemoryBarrierEXT", 18)) {
    /*                            ^           */
#ifdef glMemoryBarrierEXT
      *iv_return = glMemoryBarrierEXT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glNormalPointerEXT", 18)) {
    /*                            ^           */
#ifdef glNormalPointerEXT
      *iv_return = glNormalPointerEXT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glPathParameterfNV", 18)) {
    /*                            ^           */
#ifdef glPathParameterfNV
      *iv_return = glPathParameterfNV;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glPathParameteriNV", 18)) {
    /*                            ^           */
#ifdef glPathParameteriNV
      *iv_return = glPathParameteriNV;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glPolygonOffsetEXT", 18)) {
    /*                            ^           */
#ifdef glPolygonOffsetEXT
      *iv_return = glPolygonOffsetEXT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glRasterSamplesEXT", 18)) {
    /*                            ^           */
#ifdef glRasterSamplesEXT
      *iv_return = glRasterSamplesEXT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glReadBufferRegion", 18)) {
    /*                            ^           */
#ifdef glReadBufferRegion
      *iv_return = glReadBufferRegion;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glTextureBufferEXT", 18)) {
    /*                            ^           */
#ifdef glTextureBufferEXT
      *iv_return = glTextureBufferEXT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glUniformBufferEXT", 18)) {
    /*                            ^           */
#ifdef glUniformBufferEXT
      *iv_return = glUniformBufferEXT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glVertexPointerEXT", 18)) {
    /*                            ^           */
#ifdef glVertexPointerEXT
      *iv_return = glVertexPointerEXT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glViewportIndexedf", 18)) {
    /*                            ^           */
#ifdef glViewportIndexedf
      *iv_return = glViewportIndexedf;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glWeightPointerARB", 18)) {
    /*                            ^           */
#ifdef glWeightPointerARB
      *iv_return = glWeightPointerARB;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case 'f':
    if (memEQ(name, "GLEW_NV_half_float", 18)) {
    /*                            ^           */
#ifdef GLEW_NV_half_float
      *iv_return = GLEW_NV_half_float;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_SGIX_fog_offset", 18)) {
    /*                            ^           */
#ifdef GL_SGIX_fog_offset
      *iv_return = GL_SGIX_fog_offset;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glGenRenderbuffers", 18)) {
    /*                            ^           */
#ifdef glGenRenderbuffers
      *iv_return = glGenRenderbuffers;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glGetShaderInfoLog", 18)) {
    /*                            ^           */
#ifdef glGetShaderInfoLog
      *iv_return = glGetShaderInfoLog;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glGetnUniformfvARB", 18)) {
    /*                            ^           */
#ifdef glGetnUniformfvARB
      *iv_return = glGetnUniformfvARB;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glMultiTexEnvfvEXT", 18)) {
    /*                            ^           */
#ifdef glMultiTexEnvfvEXT
      *iv_return = glMultiTexEnvfvEXT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glMultiTexGenfvEXT", 18)) {
    /*                            ^           */
#ifdef glMultiTexGenfvEXT
      *iv_return = glMultiTexGenfvEXT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case 'g':
    if (memEQ(name, "GL_NV_gpu_program4", 18)) {
    /*                            ^           */
#ifdef GL_NV_gpu_program4
      *iv_return = GL_NV_gpu_program4;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_NV_gpu_program5", 18)) {
    /*                            ^           */
#ifdef GL_NV_gpu_program5
      *iv_return = GL_NV_gpu_program5;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case 'h':
    if (memEQ(name, "GLEW_EXT_Cg_shader", 18)) {
    /*                            ^           */
#ifdef GLEW_EXT_Cg_shader
      *iv_return = GLEW_EXT_Cg_shader;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case 'i':
    if (memEQ(name, "GLEW_NV_copy_image", 18)) {
    /*                            ^           */
#ifdef GLEW_NV_copy_image
      *iv_return = GLEW_NV_copy_image;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GLEW_OVR_multiview", 18)) {
    /*                            ^           */
#ifdef GLEW_OVR_multiview
      *iv_return = GLEW_OVR_multiview;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glGetActiveUniform", 18)) {
    /*                            ^           */
#ifdef glGetActiveUniform
      *iv_return = glGetActiveUniform;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glGetPathMetricsNV", 18)) {
    /*                            ^           */
#ifdef glGetPathMetricsNV
      *iv_return = glGetPathMetricsNV;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glGetPathSpacingNV", 18)) {
    /*                            ^           */
#ifdef glGetPathSpacingNV
      *iv_return = glGetPathSpacingNV;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glGetProgramBinary", 18)) {
    /*                            ^           */
#ifdef glGetProgramBinary
      *iv_return = glGetProgramBinary;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glGetUniformuivEXT", 18)) {
    /*                            ^           */
#ifdef glGetUniformuivEXT
      *iv_return = glGetUniformuivEXT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glGetnUniformivARB", 18)) {
    /*                            ^           */
#ifdef glGetnUniformivARB
      *iv_return = glGetnUniformivARB;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glMultiTexEnvivEXT", 18)) {
    /*                            ^           */
#ifdef glMultiTexEnvivEXT
      *iv_return = glMultiTexEnvivEXT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glMultiTexGenivEXT", 18)) {
    /*                            ^           */
#ifdef glMultiTexGenivEXT
      *iv_return = glMultiTexGenivEXT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glTextureBarrierNV", 18)) {
    /*                            ^           */
#ifdef glTextureBarrierNV
      *iv_return = glTextureBarrierNV;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glUniformMatrix2dv", 18)) {
    /*                            ^           */
#ifdef glUniformMatrix2dv
      *iv_return = glUniformMatrix2dv;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glUniformMatrix2fv", 18)) {
    /*                            ^           */
#ifdef glUniformMatrix2fv
      *iv_return = glUniformMatrix2fv;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glUniformMatrix3dv", 18)) {
    /*                            ^           */
#ifdef glUniformMatrix3dv
      *iv_return = glUniformMatrix3dv;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glUniformMatrix3fv", 18)) {
    /*                            ^           */
#ifdef glUniformMatrix3fv
      *iv_return = glUniformMatrix3fv;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glUniformMatrix4dv", 18)) {
    /*                            ^           */
#ifdef glUniformMatrix4dv
      *iv_return = glUniformMatrix4dv;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glUniformMatrix4fv", 18)) {
    /*                            ^           */
#ifdef glUniformMatrix4fv
      *iv_return = glUniformMatrix4fv;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case 'l':
    if (memEQ(name, "GL_EXT_debug_label", 18)) {
    /*                            ^           */
#ifdef GL_EXT_debug_label
      *iv_return = GL_EXT_debug_label;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glColorSubTableEXT", 18)) {
    /*                            ^           */
#ifdef glColorSubTableEXT
      *iv_return = glColorSubTableEXT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glGetColorTableEXT", 18)) {
    /*                            ^           */
#ifdef glGetColorTableEXT
      *iv_return = glGetColorTableEXT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glGetColorTableSGI", 18)) {
    /*                            ^           */
#ifdef glGetColorTableSGI
      *iv_return = glGetColorTableSGI;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glSecondaryColor3b", 18)) {
    /*                            ^           */
#ifdef glSecondaryColor3b
      *iv_return = glSecondaryColor3b;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glSecondaryColor3d", 18)) {
    /*                            ^           */
#ifdef glSecondaryColor3d
      *iv_return = glSecondaryColor3d;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glSecondaryColor3f", 18)) {
    /*                            ^           */
#ifdef glSecondaryColor3f
      *iv_return = glSecondaryColor3f;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glSecondaryColor3i", 18)) {
    /*                            ^           */
#ifdef glSecondaryColor3i
      *iv_return = glSecondaryColor3i;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glSecondaryColor3s", 18)) {
    /*                            ^           */
#ifdef glSecondaryColor3s
      *iv_return = glSecondaryColor3s;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case 'm':
    if (memEQ(name, "glEdgeFlagFormatNV", 18)) {
    /*                            ^           */
#ifdef glEdgeFlagFormatNV
      *iv_return = glEdgeFlagFormatNV;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glFogCoordFormatNV", 18)) {
    /*                            ^           */
#ifdef glFogCoordFormatNV
      *iv_return = glFogCoordFormatNV;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glTexCoordFormatNV", 18)) {
    /*                            ^           */
#ifdef glTexCoordFormatNV
      *iv_return = glTexCoordFormatNV;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case 'n':
    if (memEQ(name, "glIsNamedStringARB", 18)) {
    /*                            ^           */
#ifdef glIsNamedStringARB
      *iv_return = glIsNamedStringARB;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glPathGlyphRangeNV", 18)) {
    /*                            ^           */
#ifdef glPathGlyphRangeNV
      *iv_return = glPathGlyphRangeNV;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glPixelDataRangeNV", 18)) {
    /*                            ^           */
#ifdef glPixelDataRangeNV
      *iv_return = glPixelDataRangeNV;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glProgramStringARB", 18)) {
    /*                            ^           */
#ifdef glProgramStringARB
      *iv_return = glProgramStringARB;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case 'o':
    if (memEQ(name, "GLEW_EXT_histogram", 18)) {
    /*                            ^           */
#ifdef GLEW_EXT_histogram
      *iv_return = GLEW_EXT_histogram;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_OES_read_format", 18)) {
    /*                            ^           */
#ifdef GL_OES_read_format
      *iv_return = GL_OES_read_format;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glBlendEquationEXT", 18)) {
    /*                            ^           */
#ifdef glBlendEquationEXT
      *iv_return = glBlendEquationEXT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glProgramUniform1d", 18)) {
    /*                            ^           */
#ifdef glProgramUniform1d
      *iv_return = glProgramUniform1d;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glProgramUniform1f", 18)) {
    /*                            ^           */
#ifdef glProgramUniform1f
      *iv_return = glProgramUniform1f;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glProgramUniform1i", 18)) {
    /*                            ^           */
#ifdef glProgramUniform1i
      *iv_return = glProgramUniform1i;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glProgramUniform2d", 18)) {
    /*                            ^           */
#ifdef glProgramUniform2d
      *iv_return = glProgramUniform2d;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glProgramUniform2f", 18)) {
    /*                            ^           */
#ifdef glProgramUniform2f
      *iv_return = glProgramUniform2f;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glProgramUniform2i", 18)) {
    /*                            ^           */
#ifdef glProgramUniform2i
      *iv_return = glProgramUniform2i;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glProgramUniform3d", 18)) {
    /*                            ^           */
#ifdef glProgramUniform3d
      *iv_return = glProgramUniform3d;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glProgramUniform3f", 18)) {
    /*                            ^           */
#ifdef glProgramUniform3f
      *iv_return = glProgramUniform3f;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glProgramUniform3i", 18)) {
    /*                            ^           */
#ifdef glProgramUniform3i
      *iv_return = glProgramUniform3i;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glProgramUniform4d", 18)) {
    /*                            ^           */
#ifdef glProgramUniform4d
      *iv_return = glProgramUniform4d;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glProgramUniform4f", 18)) {
    /*                            ^           */
#ifdef glProgramUniform4f
      *iv_return = glProgramUniform4f;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glProgramUniform4i", 18)) {
    /*                            ^           */
#ifdef glProgramUniform4i
      *iv_return = glProgramUniform4i;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case 'p':
    if (memEQ(name, "GL_NV_point_sprite", 18)) {
    /*                            ^           */
#ifdef GL_NV_point_sprite
      *iv_return = GL_NV_point_sprite;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glCombinerOutputNV", 18)) {
    /*                            ^           */
#ifdef glCombinerOutputNV
      *iv_return = glCombinerOutputNV;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glGetMultisamplefv", 18)) {
    /*                            ^           */
#ifdef glGetMultisamplefv
      *iv_return = glGetMultisamplefv;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case 'q':
    if (memEQ(name, "GL_ARB_timer_query", 18)) {
    /*                            ^           */
#ifdef GL_ARB_timer_query
      *iv_return = GL_ARB_timer_query;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_EXT_timer_query", 18)) {
    /*                            ^           */
#ifdef GL_EXT_timer_query
      *iv_return = GL_EXT_timer_query;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_NV_blend_square", 18)) {
    /*                            ^           */
#ifdef GL_NV_blend_square
      *iv_return = GL_NV_blend_square;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case 'r':
    if (memEQ(name, "GLEW_OML_interlace", 18)) {
    /*                            ^           */
#ifdef GLEW_OML_interlace
      *iv_return = GLEW_OML_interlace;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_APPLE_ycbcr_422", 18)) {
    /*                            ^           */
#ifdef GL_APPLE_ycbcr_422
      *iv_return = GL_APPLE_ycbcr_422;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glActiveTextureARB", 18)) {
    /*                            ^           */
#ifdef glActiveTextureARB
      *iv_return = glActiveTextureARB;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glDeleteBuffersARB", 18)) {
    /*                            ^           */
#ifdef glDeleteBuffersARB
      *iv_return = glDeleteBuffersARB;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glDepthRangeArrayv", 18)) {
    /*                            ^           */
#ifdef glDepthRangeArrayv
      *iv_return = glDepthRangeArrayv;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glExecuteProgramNV", 18)) {
    /*                            ^           */
#ifdef glExecuteProgramNV
      *iv_return = glExecuteProgramNV;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glGetVertexArrayiv", 18)) {
    /*                            ^           */
#ifdef glGetVertexArrayiv
      *iv_return = glGetVertexArrayiv;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glMapParameterfvNV", 18)) {
    /*                            ^           */
#ifdef glMapParameterfvNV
      *iv_return = glMapParameterfvNV;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glMapParameterivNV", 18)) {
    /*                            ^           */
#ifdef glMapParameterivNV
      *iv_return = glMapParameterivNV;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glMultiTexCoord1dv", 18)) {
    /*                            ^           */
#ifdef glMultiTexCoord1dv
      *iv_return = glMultiTexCoord1dv;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glMultiTexCoord1fv", 18)) {
    /*                            ^           */
#ifdef glMultiTexCoord1fv
      *iv_return = glMultiTexCoord1fv;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glMultiTexCoord1iv", 18)) {
    /*                            ^           */
#ifdef glMultiTexCoord1iv
      *iv_return = glMultiTexCoord1iv;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glMultiTexCoord1sv", 18)) {
    /*                            ^           */
#ifdef glMultiTexCoord1sv
      *iv_return = glMultiTexCoord1sv;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glMultiTexCoord2dv", 18)) {
    /*                            ^           */
#ifdef glMultiTexCoord2dv
      *iv_return = glMultiTexCoord2dv;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glMultiTexCoord2fv", 18)) {
    /*                            ^           */
#ifdef glMultiTexCoord2fv
      *iv_return = glMultiTexCoord2fv;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glMultiTexCoord2iv", 18)) {
    /*                            ^           */
#ifdef glMultiTexCoord2iv
      *iv_return = glMultiTexCoord2iv;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glMultiTexCoord2sv", 18)) {
    /*                            ^           */
#ifdef glMultiTexCoord2sv
      *iv_return = glMultiTexCoord2sv;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glMultiTexCoord3dv", 18)) {
    /*                            ^           */
#ifdef glMultiTexCoord3dv
      *iv_return = glMultiTexCoord3dv;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glMultiTexCoord3fv", 18)) {
    /*                            ^           */
#ifdef glMultiTexCoord3fv
      *iv_return = glMultiTexCoord3fv;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glMultiTexCoord3iv", 18)) {
    /*                            ^           */
#ifdef glMultiTexCoord3iv
      *iv_return = glMultiTexCoord3iv;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glMultiTexCoord3sv", 18)) {
    /*                            ^           */
#ifdef glMultiTexCoord3sv
      *iv_return = glMultiTexCoord3sv;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glMultiTexCoord4dv", 18)) {
    /*                            ^           */
#ifdef glMultiTexCoord4dv
      *iv_return = glMultiTexCoord4dv;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glMultiTexCoord4fv", 18)) {
    /*                            ^           */
#ifdef glMultiTexCoord4fv
      *iv_return = glMultiTexCoord4fv;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glMultiTexCoord4iv", 18)) {
    /*                            ^           */
#ifdef glMultiTexCoord4iv
      *iv_return = glMultiTexCoord4iv;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glMultiTexCoord4sv", 18)) {
    /*                            ^           */
#ifdef glMultiTexCoord4sv
      *iv_return = glMultiTexCoord4sv;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glSamplePatternEXT", 18)) {
    /*                            ^           */
#ifdef glSamplePatternEXT
      *iv_return = glSamplePatternEXT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glTexParameterIuiv", 18)) {
    /*                            ^           */
#ifdef glTexParameterIuiv
      *iv_return = glTexParameterIuiv;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case 't':
    if (memEQ(name, "GL_NV_fog_distance", 18)) {
    /*                            ^           */
#ifdef GL_NV_fog_distance
      *iv_return = GL_NV_fog_distance;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_SGI_color_table", 18)) {
    /*                            ^           */
#ifdef GL_SGI_color_table
      *iv_return = GL_SGI_color_table;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glBufferSubDataARB", 18)) {
    /*                            ^           */
#ifdef glBufferSubDataARB
      *iv_return = glBufferSubDataARB;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glPatchParameterfv", 18)) {
    /*                            ^           */
#ifdef glPatchParameterfv
      *iv_return = glPatchParameterfv;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glPointParameterfv", 18)) {
    /*                            ^           */
#ifdef glPointParameterfv
      *iv_return = glPointParameterfv;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glPointParameteriv", 18)) {
    /*                            ^           */
#ifdef glPointParameteriv
      *iv_return = glPointParameteriv;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glPointParameterxv", 18)) {
    /*                            ^           */
#ifdef glPointParameterxv
      *iv_return = glPointParameterxv;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glUseProgramStages", 18)) {
    /*                            ^           */
#ifdef glUseProgramStages
      *iv_return = glUseProgramStages;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glVertexWeightfEXT", 18)) {
    /*                            ^           */
#ifdef glVertexWeightfEXT
      *iv_return = glVertexWeightfEXT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glVertexWeighthvNV", 18)) {
    /*                            ^           */
#ifdef glVertexWeighthvNV
      *iv_return = glVertexWeighthvNV;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case 'u':
    if (memEQ(name, "GLEW_EXT_texture3D", 18)) {
    /*                            ^           */
#ifdef GLEW_EXT_texture3D
      *iv_return = GLEW_EXT_texture3D;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_ARB_copy_buffer", 18)) {
    /*                            ^           */
#ifdef GL_ARB_copy_buffer
      *iv_return = GL_ARB_copy_buffer;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_EXT_convolution", 18)) {
    /*                            ^           */
#ifdef GL_EXT_convolution
      *iv_return = GL_EXT_convolution;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_NV_float_buffer", 18)) {
    /*                            ^           */
#ifdef GL_NV_float_buffer
      *iv_return = GL_NV_float_buffer;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glBindRenderbuffer", 18)) {
    /*                            ^           */
#ifdef glBindRenderbuffer
      *iv_return = glBindRenderbuffer;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glBindVertexBuffer", 18)) {
    /*                            ^           */
#ifdef glBindVertexBuffer
      *iv_return = glBindVertexBuffer;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glClearColorIuiEXT", 18)) {
    /*                            ^           */
#ifdef glClearColorIuiEXT
      *iv_return = glClearColorIuiEXT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glMatrixFrustumEXT", 18)) {
    /*                            ^           */
#ifdef glMatrixFrustumEXT
      *iv_return = glMatrixFrustumEXT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glUnmapNamedBuffer", 18)) {
    /*                            ^           */
#ifdef glUnmapNamedBuffer
      *iv_return = glUnmapNamedBuffer;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case 'v':
    if (memEQ(name, "glWindowPos2dvMESA", 18)) {
    /*                            ^           */
#ifdef glWindowPos2dvMESA
      *iv_return = glWindowPos2dvMESA;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glWindowPos2fvMESA", 18)) {
    /*                            ^           */
#ifdef glWindowPos2fvMESA
      *iv_return = glWindowPos2fvMESA;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glWindowPos2ivMESA", 18)) {
    /*                            ^           */
#ifdef glWindowPos2ivMESA
      *iv_return = glWindowPos2ivMESA;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glWindowPos2svMESA", 18)) {
    /*                            ^           */
#ifdef glWindowPos2svMESA
      *iv_return = glWindowPos2svMESA;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glWindowPos3dvMESA", 18)) {
    /*                            ^           */
#ifdef glWindowPos3dvMESA
      *iv_return = glWindowPos3dvMESA;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glWindowPos3fvMESA", 18)) {
    /*                            ^           */
#ifdef glWindowPos3fvMESA
      *iv_return = glWindowPos3fvMESA;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glWindowPos3ivMESA", 18)) {
    /*                            ^           */
#ifdef glWindowPos3ivMESA
      *iv_return = glWindowPos3ivMESA;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glWindowPos3svMESA", 18)) {
    /*                            ^           */
#ifdef glWindowPos3svMESA
      *iv_return = glWindowPos3svMESA;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glWindowPos4dvMESA", 18)) {
    /*                            ^           */
#ifdef glWindowPos4dvMESA
      *iv_return = glWindowPos4dvMESA;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glWindowPos4fvMESA", 18)) {
    /*                            ^           */
#ifdef glWindowPos4fvMESA
      *iv_return = glWindowPos4fvMESA;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glWindowPos4ivMESA", 18)) {
    /*                            ^           */
#ifdef glWindowPos4ivMESA
      *iv_return = glWindowPos4ivMESA;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glWindowPos4svMESA", 18)) {
    /*                            ^           */
#ifdef glWindowPos4svMESA
      *iv_return = glWindowPos4svMESA;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case 'w':
    if (memEQ(name, "GL_MESA_window_pos", 18)) {
    /*                            ^           */
#ifdef GL_MESA_window_pos
      *iv_return = GL_MESA_window_pos;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case 'x':
    if (memEQ(name, "GL_NV_draw_texture", 18)) {
    /*                            ^           */
#ifdef GL_NV_draw_texture
      *iv_return = GL_NV_draw_texture;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glBindImageTexture", 18)) {
    /*                            ^           */
#ifdef glBindImageTexture
      *iv_return = glBindImageTexture;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glMatrixLoad3x2fNV", 18)) {
    /*                            ^           */
#ifdef glMatrixLoad3x2fNV
      *iv_return = glMatrixLoad3x2fNV;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glMatrixLoad3x3fNV", 18)) {
    /*                            ^           */
#ifdef glMatrixLoad3x3fNV
      *iv_return = glMatrixLoad3x3fNV;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glMatrixMult3x2fNV", 18)) {
    /*                            ^           */
#ifdef glMatrixMult3x2fNV
      *iv_return = glMatrixMult3x2fNV;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glMatrixMult3x3fNV", 18)) {
    /*                            ^           */
#ifdef glMatrixMult3x3fNV
      *iv_return = glMatrixMult3x3fNV;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  }
  return PERL_constant_NOTFOUND;
}

static int
constant_19 (pTHX_ const char *name, IV *iv_return) {
  /* When generated this function returned values for the list of names given
     here.  However, subsequent manual editing may have added or removed some.
     GLEW_AMD_gcn_shader GLEW_ARB_copy_image GLEW_ARB_multi_bind
     GLEW_ARB_robustness GLEW_ARB_texture_rg GLEW_ARB_window_pos
     GLEW_EXT_422_pixels GLEW_EXT_index_func GLEW_EXT_subtexture
     GLEW_KHR_robustness GLEW_NV_depth_clamp GLEW_NV_gpu_shader5
     GLEW_OVR_multiview2 GLEW_PGI_misc_hints GLEW_SGIS_texture4D
     GLEW_SGIX_framezoom GLEW_SGIX_interlace GLEW_SUN_mesh_array
     GL_3DFX_multisample GL_3D_COLOR_TEXTURE GL_4D_COLOR_TEXTURE
     GL_ACCUM_ALPHA_BITS GL_ACCUM_BUFFER_BIT GL_ACCUM_GREEN_BITS
     GL_ACTIVE_RESOURCES GL_ACTIVE_VARIABLES GL_ALL_BARRIER_BITS
     GL_ALL_COMPLETED_NV GL_ALREADY_SIGNALED GL_AMD_debug_output
     GL_ARB_clip_control GL_ARB_debug_output GL_ARB_draw_buffers
     GL_ARB_multitexture GL_ARB_point_sprite GL_ARB_shader_clock
     GL_ARB_texture_view GL_ARB_vertex_blend GL_ARRAY_BUFFER_ARB
     GL_ATI_draw_buffers GL_ATI_pn_triangles GL_ATTACHED_SHADERS
     GL_BGRA_INTEGER_EXT GL_BLEND_OVERLAP_NV GL_BLUE_INTEGER_EXT
     GL_BUFFER_DATA_SIZE GL_BUFFER_USAGE_ARB GL_CLAMP_READ_COLOR
     GL_CLIP_DISTANCE_NV GL_COLOR_ARRAY_SIZE GL_COLOR_ARRAY_TYPE
     GL_COLOR_BUFFER_BIT GL_COLOR_COMPONENTS GL_COLOR_INDEX1_EXT
     GL_COLOR_INDEX2_EXT GL_COLOR_INDEX4_EXT GL_COLOR_INDEX8_EXT
     GL_COLOR_MATRIX_SGI GL_COLOR_RENDERABLE GL_COLOR_SAMPLES_NV
     GL_COLOR_TABLE_BIAS GL_COMBINER_BIAS_NV GL_COMPRESSED_ALPHA
     GL_COORD_REPLACE_NV GL_COPY_PIXEL_TOKEN GL_COPY_READ_BUFFER
     GL_COUNTER_TYPE_AMD GL_CULL_FRAGMENT_NV GL_DEBUG_SOURCE_API
     GL_DEBUG_TYPE_ERROR GL_DEBUG_TYPE_OTHER GL_DEPTH24_STENCIL8
     GL_DEPTH_ATTACHMENT GL_DEPTH_BOUNDS_EXT GL_DEPTH_BUFFER_BIT
     GL_DEPTH_COMPONENTS GL_DEPTH_RENDERABLE GL_DEPTH_SAMPLES_NV
     GL_DEPTH_STENCIL_NV GL_DRAW_BUFFER0_ARB GL_DRAW_BUFFER0_ATI
     GL_DRAW_BUFFER1_ARB GL_DRAW_BUFFER1_ATI GL_DRAW_BUFFER2_ARB
     GL_DRAW_BUFFER2_ATI GL_DRAW_BUFFER3_ARB GL_DRAW_BUFFER3_ATI
     GL_DRAW_BUFFER4_ARB GL_DRAW_BUFFER4_ATI GL_DRAW_BUFFER5_ARB
     GL_DRAW_BUFFER5_ATI GL_DRAW_BUFFER6_ARB GL_DRAW_BUFFER6_ATI
     GL_DRAW_BUFFER7_ARB GL_DRAW_BUFFER7_ATI GL_DRAW_BUFFER8_ARB
     GL_DRAW_BUFFER8_ATI GL_DRAW_BUFFER9_ARB GL_DRAW_BUFFER9_ATI
     GL_DRAW_FRAMEBUFFER GL_DRAW_PIXEL_TOKEN GL_DYNAMIC_COPY_ARB
     GL_DYNAMIC_DRAW_ARB GL_DYNAMIC_READ_ARB GL_EDGEFLAG_BIT_PGI
     GL_EXPAND_NEGATE_NV GL_EXPAND_NORMAL_NV GL_EXT_blend_minmax
     GL_EXT_copy_texture GL_EXT_debug_marker GL_EXT_packed_float
     GL_EXT_scene_marker GL_EXT_shadow_funcs GL_EXT_stencil_wrap
     GL_EXT_texture_sRGB GL_EXT_vertex_array GL_FIRST_TO_REST_NV
     GL_FRAGMENT_TEXTURE GL_FRAMEBUFFER_SRGB GL_GEOMETRY_TEXTURE
     GL_GLOBAL_ALPHA_SUN GL_HISTOGRAM_FORMAT GL_IMAGE_BUFFER_EXT
     GL_IMAGE_PIXEL_TYPE GL_IMAGE_TEXEL_SIZE GL_INDEX_ARRAY_TYPE
     GL_INGR_color_clamp GL_INTENSITY16F_ARB GL_INTENSITY16I_EXT
     GL_INTENSITY32F_ARB GL_INTENSITY32I_EXT GL_INTENSITY8UI_EXT
     GL_INTENSITY8_SNORM GL_INT_IMAGE_1D_EXT GL_INT_IMAGE_2D_EXT
     GL_INT_IMAGE_3D_EXT GL_INT_IMAGE_BUFFER GL_INT_SAMPLER_CUBE
     GL_KTX_FRONT_REGION GL_LINE_RESET_TOKEN GL_LINE_SMOOTH_HINT
     GL_LINE_WIDTH_RANGE GL_LOG_DRIVER_REGAL GL_LOG_STATUS_REGAL
     GL_LUMINANCE16F_ARB GL_LUMINANCE16I_EXT GL_LUMINANCE32F_ARB
     GL_LUMINANCE32I_EXT GL_LUMINANCE8UI_EXT GL_LUMINANCE8_SNORM
     GL_MAP1_GRID_DOMAIN GL_MAP1_TANGENT_EXT GL_MAP2_GRID_DOMAIN
     GL_MAP2_TANGENT_EXT GL_MAP_COHERENT_BIT GL_MAX_DRAW_BUFFERS
     GL_MAX_LABEL_LENGTH GL_MAX_LIST_NESTING GL_MAX_SHININESS_NV
     GL_MAX_TEXTURE_SIZE GL_MESA_pack_invert GL_MINUS_CLAMPED_NV
     GL_MIRROR_CLAMP_ATI GL_MIRROR_CLAMP_EXT GL_MODELVIEW_MATRIX
     GL_MODULATE_ADD_ATI GL_MULTISAMPLE_3DFX GL_MULTISAMPLE_SGIS
     GL_NAME_STACK_DEPTH GL_NEGATIVE_ONE_EXT GL_NORMAL_ARRAY_EXT
     GL_NV_gpu_multicast GL_NV_present_video GL_NV_texgen_emboss
     GL_NV_vdpau_interop GL_NV_video_capture GL_OBJECT_LINE_SGIS
     GL_OPERAND0_RGB_ARB GL_OPERAND0_RGB_EXT GL_OPERAND1_RGB_ARB
     GL_OPERAND1_RGB_EXT GL_OPERAND2_RGB_ARB GL_OPERAND2_RGB_EXT
     GL_PACK_INVERT_MESA GL_PACK_SKIP_IMAGES GL_PACK_SKIP_PIXELS
     GL_PATH_END_CAPS_NV GL_PATH_GEN_MODE_NV GL_PGI_vertex_hints
     GL_PIXEL_MAP_A_TO_A GL_PIXEL_MAP_B_TO_B GL_PIXEL_MAP_G_TO_G
     GL_PIXEL_MAP_I_TO_A GL_PIXEL_MAP_I_TO_B GL_PIXEL_MAP_I_TO_G
     GL_PIXEL_MAP_I_TO_I GL_PIXEL_MAP_I_TO_R GL_PIXEL_MAP_R_TO_R
     GL_PIXEL_MAP_S_TO_S GL_PN_TRIANGLES_ATI GL_POINT_SIZE_RANGE
     GL_POINT_SPRITE_ARB GL_PRIMARY_COLOR_NV GL_PROGRAM_PIPELINE
     GL_PROVOKING_VERTEX GL_PROXY_TEXTURE_1D GL_PROXY_TEXTURE_2D
     GL_PROXY_TEXTURE_3D GL_QUERY_BUFFER_AMD GL_QUERY_NO_WAIT_NV
     GL_QUERY_OBJECT_AMD GL_QUERY_OBJECT_EXT GL_QUERY_RESULT_ARB
     GL_R1UI_C3F_V3F_SUN GL_R1UI_N3F_V3F_SUN GL_R1UI_T2F_V3F_SUN
     GL_READ_FRAMEBUFFER GL_READ_PIXELS_TYPE GL_RELATIVE_RECT_NV
     GL_RENDERBUFFER_EXT GL_REPLICATE_BORDER GL_RGBA_FLOAT16_ATI
     GL_RGBA_FLOAT32_ATI GL_RGBA_INTEGER_EXT GL_RGBA_SIGNED_SGIX
     GL_ROUNDED_RECT2_NV GL_ROUNDED_RECT4_NV GL_ROUNDED_RECT8_NV
     GL_SAMPLER_1D_ARRAY GL_SAMPLER_2D_ARRAY GL_SAMPLER_CUBE_ARB
     GL_SAMPLE_MASK_SGIS GL_SATURATE_BIT_ATI GL_SCALE_BY_FOUR_NV
     GL_SEPARABLE_2D_EXT GL_SEPARATE_ATTRIBS GL_SGIS_color_range
     GL_SGIS_multisample GL_SGIS_texture_lod GL_SGIX_async_pixel
     GL_SGIX_fog_texture GL_SGI_color_matrix GL_SIGNED_ALPHA8_NV
     GL_SIGNED_HILO16_NV GL_SIGNED_NEGATE_NV GL_SINGLE_COLOR_EXT
     GL_SLUMINANCE_ALPHA GL_SOURCE3_ALPHA_NV GL_SRGB8_ALPHA8_EXT
     GL_STATISTICS_REGAL GL_STENCIL_BACK_REF GL_SUN_global_alpha
     GL_SURFACE_STATE_NV GL_SWIZZLE_STRQ_ATI GL_TESS_GEN_SPACING
     GL_TEXTURE_1D_ARRAY GL_TEXTURE_2D_ARRAY GL_TEXTURE_COORD_NV
     GL_TEXTURE_CUBE_MAP GL_TEXTURE_ENV_MODE GL_TEXTURE_GEN_MODE
     GL_TEXTURE_LOD_BIAS GL_TEXTURE_PRIORITY GL_TEXTURE_RED_SIZE
     GL_TEXTURE_RED_TYPE GL_TEXTURE_RESIDENT GL_TIME_ELAPSED_EXT
     GL_UNDEFINED_VERTEX GL_UNPACK_ALIGNMENT GL_UNPACK_LSB_FIRST
     GL_UNPACK_SKIP_ROWS GL_UNSIGNED_INT8_NV GL_VERTEX23_BIT_PGI
     GL_VERTEX_ARRAY_EXT GL_VERTEX_BLEND_ARB GL_VIBRANCE_BIAS_NV
     GL_WEIGHT_ARRAY_ARB GL_WIN_specular_fog GL_WRITE_DISCARD_NV
     glBeginQueryIndexed glBindBufferBaseEXT glBindBufferRangeNV
     glBindImageTextures glBindVertexBuffers glBlendEquationiARB
     glBlendFuncSeparate glBlendParameteriNV glCallCommandListNV
     glCopyBufferSubData glCopyColorSubTable glCopyColorTableSGI
     glCopyTexImage1DEXT glCopyTexImage2DEXT glCopyTexSubImage3D
     glCoverStrokePathNV glDeleteFencesAPPLE glDeleteProgramsARB
     glDeleteTexturesEXT glDepthRangeIndexed glDetailTexFuncSGIS
     glDisableIndexedEXT glDrawRangeElements glElementPointerATI
     glEndPerfMonitorAMD glEndPerfQueryINTEL glEndVideoCaptureNV
     glFinishObjectAPPLE glFinishTextureSUNX glFragmentLightfEXT
     glFragmentLightiEXT glGenerateMipmapEXT glGetAttribLocation
     glGetBufferPointerv glGetExtensionREGAL glGetImageHandleARB
     glGetIntegerui64vNV glGetNamedStringARB glGetObjectLabelEXT
     glGetObjectPtrLabel glGetPathCommandsNV glGetPathTexGenfvNV
     glGetPathTexGenivNV glGetProgramInfoLog glGetProgramStageiv
     glGetQueryIndexediv glGetQueryObjectuiv glGetTexParameterxv
     glGetUniformIndices glGetUniformi64vARB glGetUniformui64vNV
     glGetVertexAttribdv glGetVertexAttribfv glGetVertexAttribiv
     glGetnColorTableARB glGetnPixelMapfvARB glGetnUniformuivARB
     glIsAsyncMarkerSGIX glIsObjectBufferATI glIsProgramPipeline
     glIsRenderbufferEXT glMapNamedBufferEXT glMapTexture2DINTEL
     glMatrixIndexubvARB glMatrixIndexuivARB glMatrixIndexusvARB
     glMultiDrawElements glMultiTexBufferEXT glMultiTexCoord1hNV
     glMultiTexCoord2hNV glMultiTexCoord3hNV glMultiTexCoord4hNV
     glMultiTexCoordP1ui glMultiTexCoordP2ui glMultiTexCoordP3ui
     glMultiTexCoordP4ui glNormalStream3bATI glNormalStream3dATI
     glNormalStream3fATI glNormalStream3iATI glNormalStream3sATI
     glPathParameterfvNV glPathParameterivNV glPathStencilFuncNV
     glPathSubCommandsNV glPointParameteriNV glPopGroupMarkerEXT
     glProgramParameteri glProgramUniform1dv glProgramUniform1fv
     glProgramUniform1iv glProgramUniform1ui glProgramUniform2dv
     glProgramUniform2fv glProgramUniform2iv glProgramUniform2ui
     glProgramUniform3dv glProgramUniform3fv glProgramUniform3iv
     glProgramUniform3ui glProgramUniform4dv glProgramUniform4fv
     glProgramUniform4iv glProgramUniform4ui glQueryCounterANGLE
     glResetHistogramEXT glResizeBuffersMESA glSampleCoverageARB
     glSamplePatternSGIS glSamplerParameterf glSamplerParameteri
     glSecondaryColor3bv glSecondaryColor3dv glSecondaryColor3fv
     glSecondaryColor3iv glSecondaryColor3sv glSecondaryColor3ub
     glSecondaryColor3ui glSecondaryColor3us glSeparableFilter2D
     glStencilFillPathNV glStencilOpSeparate glStencilOpValueAMD
     glTangentPointerEXT glTexFilterFuncSGIS glTexRenderbufferNV
     glTexSubImage4DSGIS glTextureImage1DEXT glTextureImage2DEXT
     glTextureImage3DEXT glTextureParameterf glTextureParameteri
     glTextureRangeAPPLE glTextureSubImage1D glTextureSubImage2D
     glTextureSubImage3D glVariantPointerEXT glVertexAttrib1dARB
     glVertexAttrib1dvNV glVertexAttrib1fARB glVertexAttrib1fvNV
     glVertexAttrib1hvNV glVertexAttrib1sARB glVertexAttrib1svNV
     glVertexAttrib2dARB glVertexAttrib2dvNV glVertexAttrib2fARB
     glVertexAttrib2fvNV glVertexAttrib2hvNV glVertexAttrib2sARB
     glVertexAttrib2svNV glVertexAttrib3dARB glVertexAttrib3dvNV
     glVertexAttrib3fARB glVertexAttrib3fvNV glVertexAttrib3hvNV
     glVertexAttrib3sARB glVertexAttrib3svNV glVertexAttrib4Nubv
     glVertexAttrib4Nuiv glVertexAttrib4Nusv glVertexAttrib4dARB
     glVertexAttrib4dvNV glVertexAttrib4fARB glVertexAttrib4fvNV
     glVertexAttrib4hvNV glVertexAttrib4sARB glVertexAttrib4svNV
     glVertexAttrib4ubNV glVertexAttribI1uiv glVertexAttribI2uiv
     glVertexAttribI3uiv glVertexAttribI4ubv glVertexAttribI4uiv
     glVertexAttribI4usv glVertexAttribP1uiv glVertexAttribP2uiv
     glVertexAttribP3uiv glVertexAttribP4uiv glVertexStream1dATI
     glVertexStream1fATI glVertexStream1iATI glVertexStream1sATI
     glVertexStream2dATI glVertexStream2fATI glVertexStream2iATI
     glVertexStream2sATI glVertexStream3dATI glVertexStream3fATI
     glVertexStream3iATI glVertexStream3sATI glVertexStream4dATI
     glVertexStream4fATI glVertexStream4iATI glVertexStream4sATI
     glVertexWeightfvEXT glViewportIndexedfv glViewportSwizzleNV
     glWaitVkSemaphoreNV */
  /* Offset 14 gives the best switch position.  */
  switch (name[14]) {
  case '0':
    if (memEQ(name, "GL_DRAW_BUFFER0_ARB", 19)) {
    /*                             ^           */
#ifdef GL_DRAW_BUFFER0_ARB
      *iv_return = GL_DRAW_BUFFER0_ARB;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_DRAW_BUFFER0_ATI", 19)) {
    /*                             ^           */
#ifdef GL_DRAW_BUFFER0_ATI
      *iv_return = GL_DRAW_BUFFER0_ATI;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case '1':
    if (memEQ(name, "GL_COLOR_INDEX1_EXT", 19)) {
    /*                             ^           */
#ifdef GL_COLOR_INDEX1_EXT
      *iv_return = GL_COLOR_INDEX1_EXT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_DRAW_BUFFER1_ARB", 19)) {
    /*                             ^           */
#ifdef GL_DRAW_BUFFER1_ARB
      *iv_return = GL_DRAW_BUFFER1_ARB;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_DRAW_BUFFER1_ATI", 19)) {
    /*                             ^           */
#ifdef GL_DRAW_BUFFER1_ATI
      *iv_return = GL_DRAW_BUFFER1_ATI;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_SIGNED_HILO16_NV", 19)) {
    /*                             ^           */
#ifdef GL_SIGNED_HILO16_NV
      *iv_return = GL_SIGNED_HILO16_NV;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glCopyTexImage1DEXT", 19)) {
    /*                             ^           */
#ifdef glCopyTexImage1DEXT
      *iv_return = glCopyTexImage1DEXT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glTextureImage1DEXT", 19)) {
    /*                             ^           */
#ifdef glTextureImage1DEXT
      *iv_return = glTextureImage1DEXT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glVertexAttrib1dARB", 19)) {
    /*                             ^           */
#ifdef glVertexAttrib1dARB
      *iv_return = glVertexAttrib1dARB;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glVertexAttrib1dvNV", 19)) {
    /*                             ^           */
#ifdef glVertexAttrib1dvNV
      *iv_return = glVertexAttrib1dvNV;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glVertexAttrib1fARB", 19)) {
    /*                             ^           */
#ifdef glVertexAttrib1fARB
      *iv_return = glVertexAttrib1fARB;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glVertexAttrib1fvNV", 19)) {
    /*                             ^           */
#ifdef glVertexAttrib1fvNV
      *iv_return = glVertexAttrib1fvNV;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glVertexAttrib1hvNV", 19)) {
    /*                             ^           */
#ifdef glVertexAttrib1hvNV
      *iv_return = glVertexAttrib1hvNV;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glVertexAttrib1sARB", 19)) {
    /*                             ^           */
#ifdef glVertexAttrib1sARB
      *iv_return = glVertexAttrib1sARB;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glVertexAttrib1svNV", 19)) {
    /*                             ^           */
#ifdef glVertexAttrib1svNV
      *iv_return = glVertexAttrib1svNV;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glVertexStream1dATI", 19)) {
    /*                             ^           */
#ifdef glVertexStream1dATI
      *iv_return = glVertexStream1dATI;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glVertexStream1fATI", 19)) {
    /*                             ^           */
#ifdef glVertexStream1fATI
      *iv_return = glVertexStream1fATI;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glVertexStream1iATI", 19)) {
    /*                             ^           */
#ifdef glVertexStream1iATI
      *iv_return = glVertexStream1iATI;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glVertexStream1sATI", 19)) {
    /*                             ^           */
#ifdef glVertexStream1sATI
      *iv_return = glVertexStream1sATI;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case '2':
    if (memEQ(name, "GL_COLOR_INDEX2_EXT", 19)) {
    /*                             ^           */
#ifdef GL_COLOR_INDEX2_EXT
      *iv_return = GL_COLOR_INDEX2_EXT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_DRAW_BUFFER2_ARB", 19)) {
    /*                             ^           */
#ifdef GL_DRAW_BUFFER2_ARB
      *iv_return = GL_DRAW_BUFFER2_ARB;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_DRAW_BUFFER2_ATI", 19)) {
    /*                             ^           */
#ifdef GL_DRAW_BUFFER2_ATI
      *iv_return = GL_DRAW_BUFFER2_ATI;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_RGBA_FLOAT32_ATI", 19)) {
    /*                             ^           */
#ifdef GL_RGBA_FLOAT32_ATI
      *iv_return = GL_RGBA_FLOAT32_ATI;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glCopyTexImage2DEXT", 19)) {
    /*                             ^           */
#ifdef glCopyTexImage2DEXT
      *iv_return = glCopyTexImage2DEXT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glTextureImage2DEXT", 19)) {
    /*                             ^           */
#ifdef glTextureImage2DEXT
      *iv_return = glTextureImage2DEXT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glVertexAttrib2dARB", 19)) {
    /*                             ^           */
#ifdef glVertexAttrib2dARB
      *iv_return = glVertexAttrib2dARB;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glVertexAttrib2dvNV", 19)) {
    /*                             ^           */
#ifdef glVertexAttrib2dvNV
      *iv_return = glVertexAttrib2dvNV;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glVertexAttrib2fARB", 19)) {
    /*                             ^           */
#ifdef glVertexAttrib2fARB
      *iv_return = glVertexAttrib2fARB;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glVertexAttrib2fvNV", 19)) {
    /*                             ^           */
#ifdef glVertexAttrib2fvNV
      *iv_return = glVertexAttrib2fvNV;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glVertexAttrib2hvNV", 19)) {
    /*                             ^           */
#ifdef glVertexAttrib2hvNV
      *iv_return = glVertexAttrib2hvNV;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glVertexAttrib2sARB", 19)) {
    /*                             ^           */
#ifdef glVertexAttrib2sARB
      *iv_return = glVertexAttrib2sARB;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glVertexAttrib2svNV", 19)) {
    /*                             ^           */
#ifdef glVertexAttrib2svNV
      *iv_return = glVertexAttrib2svNV;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glVertexStream2dATI", 19)) {
    /*                             ^           */
#ifdef glVertexStream2dATI
      *iv_return = glVertexStream2dATI;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glVertexStream2fATI", 19)) {
    /*                             ^           */
#ifdef glVertexStream2fATI
      *iv_return = glVertexStream2fATI;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glVertexStream2iATI", 19)) {
    /*                             ^           */
#ifdef glVertexStream2iATI
      *iv_return = glVertexStream2iATI;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glVertexStream2sATI", 19)) {
    /*                             ^           */
#ifdef glVertexStream2sATI
      *iv_return = glVertexStream2sATI;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case '3':
    if (memEQ(name, "GL_DRAW_BUFFER3_ARB", 19)) {
    /*                             ^           */
#ifdef GL_DRAW_BUFFER3_ARB
      *iv_return = GL_DRAW_BUFFER3_ARB;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_DRAW_BUFFER3_ATI", 19)) {
    /*                             ^           */
#ifdef GL_DRAW_BUFFER3_ATI
      *iv_return = GL_DRAW_BUFFER3_ATI;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glNormalStream3bATI", 19)) {
    /*                             ^           */
#ifdef glNormalStream3bATI
      *iv_return = glNormalStream3bATI;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glNormalStream3dATI", 19)) {
    /*                             ^           */
#ifdef glNormalStream3dATI
      *iv_return = glNormalStream3dATI;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glNormalStream3fATI", 19)) {
    /*                             ^           */
#ifdef glNormalStream3fATI
      *iv_return = glNormalStream3fATI;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glNormalStream3iATI", 19)) {
    /*                             ^           */
#ifdef glNormalStream3iATI
      *iv_return = glNormalStream3iATI;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glNormalStream3sATI", 19)) {
    /*                             ^           */
#ifdef glNormalStream3sATI
      *iv_return = glNormalStream3sATI;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glTextureImage3DEXT", 19)) {
    /*                             ^           */
#ifdef glTextureImage3DEXT
      *iv_return = glTextureImage3DEXT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glVertexAttrib3dARB", 19)) {
    /*                             ^           */
#ifdef glVertexAttrib3dARB
      *iv_return = glVertexAttrib3dARB;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glVertexAttrib3dvNV", 19)) {
    /*                             ^           */
#ifdef glVertexAttrib3dvNV
      *iv_return = glVertexAttrib3dvNV;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glVertexAttrib3fARB", 19)) {
    /*                             ^           */
#ifdef glVertexAttrib3fARB
      *iv_return = glVertexAttrib3fARB;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glVertexAttrib3fvNV", 19)) {
    /*                             ^           */
#ifdef glVertexAttrib3fvNV
      *iv_return = glVertexAttrib3fvNV;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glVertexAttrib3hvNV", 19)) {
    /*                             ^           */
#ifdef glVertexAttrib3hvNV
      *iv_return = glVertexAttrib3hvNV;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glVertexAttrib3sARB", 19)) {
    /*                             ^           */
#ifdef glVertexAttrib3sARB
      *iv_return = glVertexAttrib3sARB;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glVertexAttrib3svNV", 19)) {
    /*                             ^           */
#ifdef glVertexAttrib3svNV
      *iv_return = glVertexAttrib3svNV;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glVertexStream3dATI", 19)) {
    /*                             ^           */
#ifdef glVertexStream3dATI
      *iv_return = glVertexStream3dATI;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glVertexStream3fATI", 19)) {
    /*                             ^           */
#ifdef glVertexStream3fATI
      *iv_return = glVertexStream3fATI;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glVertexStream3iATI", 19)) {
    /*                             ^           */
#ifdef glVertexStream3iATI
      *iv_return = glVertexStream3iATI;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glVertexStream3sATI", 19)) {
    /*                             ^           */
#ifdef glVertexStream3sATI
      *iv_return = glVertexStream3sATI;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case '4':
    if (memEQ(name, "GL_COLOR_INDEX4_EXT", 19)) {
    /*                             ^           */
#ifdef GL_COLOR_INDEX4_EXT
      *iv_return = GL_COLOR_INDEX4_EXT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_DRAW_BUFFER4_ARB", 19)) {
    /*                             ^           */
#ifdef GL_DRAW_BUFFER4_ARB
      *iv_return = GL_DRAW_BUFFER4_ARB;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_DRAW_BUFFER4_ATI", 19)) {
    /*                             ^           */
#ifdef GL_DRAW_BUFFER4_ATI
      *iv_return = GL_DRAW_BUFFER4_ATI;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glGetUniformi64vARB", 19)) {
    /*                             ^           */
#ifdef glGetUniformi64vARB
      *iv_return = glGetUniformi64vARB;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glVertexAttrib4Nubv", 19)) {
    /*                             ^           */
#ifdef glVertexAttrib4Nubv
      *iv_return = glVertexAttrib4Nubv;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glVertexAttrib4Nuiv", 19)) {
    /*                             ^           */
#ifdef glVertexAttrib4Nuiv
      *iv_return = glVertexAttrib4Nuiv;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glVertexAttrib4Nusv", 19)) {
    /*                             ^           */
#ifdef glVertexAttrib4Nusv
      *iv_return = glVertexAttrib4Nusv;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glVertexAttrib4dARB", 19)) {
    /*                             ^           */
#ifdef glVertexAttrib4dARB
      *iv_return = glVertexAttrib4dARB;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glVertexAttrib4dvNV", 19)) {
    /*                             ^           */
#ifdef glVertexAttrib4dvNV
      *iv_return = glVertexAttrib4dvNV;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glVertexAttrib4fARB", 19)) {
    /*                             ^           */
#ifdef glVertexAttrib4fARB
      *iv_return = glVertexAttrib4fARB;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glVertexAttrib4fvNV", 19)) {
    /*                             ^           */
#ifdef glVertexAttrib4fvNV
      *iv_return = glVertexAttrib4fvNV;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glVertexAttrib4hvNV", 19)) {
    /*                             ^           */
#ifdef glVertexAttrib4hvNV
      *iv_return = glVertexAttrib4hvNV;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glVertexAttrib4sARB", 19)) {
    /*                             ^           */
#ifdef glVertexAttrib4sARB
      *iv_return = glVertexAttrib4sARB;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glVertexAttrib4svNV", 19)) {
    /*                             ^           */
#ifdef glVertexAttrib4svNV
      *iv_return = glVertexAttrib4svNV;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glVertexAttrib4ubNV", 19)) {
    /*                             ^           */
#ifdef glVertexAttrib4ubNV
      *iv_return = glVertexAttrib4ubNV;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glVertexStream4dATI", 19)) {
    /*                             ^           */
#ifdef glVertexStream4dATI
      *iv_return = glVertexStream4dATI;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glVertexStream4fATI", 19)) {
    /*                             ^           */
#ifdef glVertexStream4fATI
      *iv_return = glVertexStream4fATI;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glVertexStream4iATI", 19)) {
    /*                             ^           */
#ifdef glVertexStream4iATI
      *iv_return = glVertexStream4iATI;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glVertexStream4sATI", 19)) {
    /*                             ^           */
#ifdef glVertexStream4sATI
      *iv_return = glVertexStream4sATI;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case '5':
    if (memEQ(name, "GL_DRAW_BUFFER5_ARB", 19)) {
    /*                             ^           */
#ifdef GL_DRAW_BUFFER5_ARB
      *iv_return = GL_DRAW_BUFFER5_ARB;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_DRAW_BUFFER5_ATI", 19)) {
    /*                             ^           */
#ifdef GL_DRAW_BUFFER5_ATI
      *iv_return = GL_DRAW_BUFFER5_ATI;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case '6':
    if (memEQ(name, "GL_DRAW_BUFFER6_ARB", 19)) {
    /*                             ^           */
#ifdef GL_DRAW_BUFFER6_ARB
      *iv_return = GL_DRAW_BUFFER6_ARB;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_DRAW_BUFFER6_ATI", 19)) {
    /*                             ^           */
#ifdef GL_DRAW_BUFFER6_ATI
      *iv_return = GL_DRAW_BUFFER6_ATI;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_RGBA_FLOAT16_ATI", 19)) {
    /*                             ^           */
#ifdef GL_RGBA_FLOAT16_ATI
      *iv_return = GL_RGBA_FLOAT16_ATI;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glGetIntegerui64vNV", 19)) {
    /*                             ^           */
#ifdef glGetIntegerui64vNV
      *iv_return = glGetIntegerui64vNV;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glGetUniformui64vNV", 19)) {
    /*                             ^           */
#ifdef glGetUniformui64vNV
      *iv_return = glGetUniformui64vNV;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case '7':
    if (memEQ(name, "GL_DRAW_BUFFER7_ARB", 19)) {
    /*                             ^           */
#ifdef GL_DRAW_BUFFER7_ARB
      *iv_return = GL_DRAW_BUFFER7_ARB;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_DRAW_BUFFER7_ATI", 19)) {
    /*                             ^           */
#ifdef GL_DRAW_BUFFER7_ATI
      *iv_return = GL_DRAW_BUFFER7_ATI;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case '8':
    if (memEQ(name, "GL_COLOR_INDEX8_EXT", 19)) {
    /*                             ^           */
#ifdef GL_COLOR_INDEX8_EXT
      *iv_return = GL_COLOR_INDEX8_EXT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_DRAW_BUFFER8_ARB", 19)) {
    /*                             ^           */
#ifdef GL_DRAW_BUFFER8_ARB
      *iv_return = GL_DRAW_BUFFER8_ARB;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_DRAW_BUFFER8_ATI", 19)) {
    /*                             ^           */
#ifdef GL_DRAW_BUFFER8_ATI
      *iv_return = GL_DRAW_BUFFER8_ATI;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_SRGB8_ALPHA8_EXT", 19)) {
    /*                             ^           */
#ifdef GL_SRGB8_ALPHA8_EXT
      *iv_return = GL_SRGB8_ALPHA8_EXT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case '9':
    if (memEQ(name, "GL_DRAW_BUFFER9_ARB", 19)) {
    /*                             ^           */
#ifdef GL_DRAW_BUFFER9_ARB
      *iv_return = GL_DRAW_BUFFER9_ARB;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_DRAW_BUFFER9_ATI", 19)) {
    /*                             ^           */
#ifdef GL_DRAW_BUFFER9_ATI
      *iv_return = GL_DRAW_BUFFER9_ATI;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case 'A':
    if (memEQ(name, "GL_ACTIVE_VARIABLES", 19)) {
    /*                             ^           */
#ifdef GL_ACTIVE_VARIABLES
      *iv_return = GL_ACTIVE_VARIABLES;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_ATTACHED_SHADERS", 19)) {
    /*                             ^           */
#ifdef GL_ATTACHED_SHADERS
      *iv_return = GL_ATTACHED_SHADERS;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_BLEND_OVERLAP_NV", 19)) {
    /*                             ^           */
#ifdef GL_BLEND_OVERLAP_NV
      *iv_return = GL_BLEND_OVERLAP_NV;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_COMBINER_BIAS_NV", 19)) {
    /*                             ^           */
#ifdef GL_COMBINER_BIAS_NV
      *iv_return = GL_COMBINER_BIAS_NV;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_COMPRESSED_ALPHA", 19)) {
    /*                             ^           */
#ifdef GL_COMPRESSED_ALPHA
      *iv_return = GL_COMPRESSED_ALPHA;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_EXPAND_NORMAL_NV", 19)) {
    /*                             ^           */
#ifdef GL_EXPAND_NORMAL_NV
      *iv_return = GL_EXPAND_NORMAL_NV;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_GLOBAL_ALPHA_SUN", 19)) {
    /*                             ^           */
#ifdef GL_GLOBAL_ALPHA_SUN
      *iv_return = GL_GLOBAL_ALPHA_SUN;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_MODELVIEW_MATRIX", 19)) {
    /*                             ^           */
#ifdef GL_MODELVIEW_MATRIX
      *iv_return = GL_MODELVIEW_MATRIX;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_SAMPLER_1D_ARRAY", 19)) {
    /*                             ^           */
#ifdef GL_SAMPLER_1D_ARRAY
      *iv_return = GL_SAMPLER_1D_ARRAY;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_SAMPLER_2D_ARRAY", 19)) {
    /*                             ^           */
#ifdef GL_SAMPLER_2D_ARRAY
      *iv_return = GL_SAMPLER_2D_ARRAY;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_SIGNED_ALPHA8_NV", 19)) {
    /*                             ^           */
#ifdef GL_SIGNED_ALPHA8_NV
      *iv_return = GL_SIGNED_ALPHA8_NV;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_SLUMINANCE_ALPHA", 19)) {
    /*                             ^           */
#ifdef GL_SLUMINANCE_ALPHA
      *iv_return = GL_SLUMINANCE_ALPHA;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_TESS_GEN_SPACING", 19)) {
    /*                             ^           */
#ifdef GL_TESS_GEN_SPACING
      *iv_return = GL_TESS_GEN_SPACING;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_TEXTURE_1D_ARRAY", 19)) {
    /*                             ^           */
#ifdef GL_TEXTURE_1D_ARRAY
      *iv_return = GL_TEXTURE_1D_ARRAY;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_TEXTURE_2D_ARRAY", 19)) {
    /*                             ^           */
#ifdef GL_TEXTURE_2D_ARRAY
      *iv_return = GL_TEXTURE_2D_ARRAY;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_VIBRANCE_BIAS_NV", 19)) {
    /*                             ^           */
#ifdef GL_VIBRANCE_BIAS_NV
      *iv_return = GL_VIBRANCE_BIAS_NV;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glDeleteFencesAPPLE", 19)) {
    /*                             ^           */
#ifdef glDeleteFencesAPPLE
      *iv_return = glDeleteFencesAPPLE;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glFinishObjectAPPLE", 19)) {
    /*                             ^           */
#ifdef glFinishObjectAPPLE
      *iv_return = glFinishObjectAPPLE;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glQueryCounterANGLE", 19)) {
    /*                             ^           */
#ifdef glQueryCounterANGLE
      *iv_return = glQueryCounterANGLE;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glTextureRangeAPPLE", 19)) {
    /*                             ^           */
#ifdef glTextureRangeAPPLE
      *iv_return = glTextureRangeAPPLE;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case 'B':
    if (memEQ(name, "GL_OPERAND0_RGB_ARB", 19)) {
    /*                             ^           */
#ifdef GL_OPERAND0_RGB_ARB
      *iv_return = GL_OPERAND0_RGB_ARB;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_OPERAND0_RGB_EXT", 19)) {
    /*                             ^           */
#ifdef GL_OPERAND0_RGB_EXT
      *iv_return = GL_OPERAND0_RGB_EXT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_OPERAND1_RGB_ARB", 19)) {
    /*                             ^           */
#ifdef GL_OPERAND1_RGB_ARB
      *iv_return = GL_OPERAND1_RGB_ARB;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_OPERAND1_RGB_EXT", 19)) {
    /*                             ^           */
#ifdef GL_OPERAND1_RGB_EXT
      *iv_return = GL_OPERAND1_RGB_EXT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_OPERAND2_RGB_ARB", 19)) {
    /*                             ^           */
#ifdef GL_OPERAND2_RGB_ARB
      *iv_return = GL_OPERAND2_RGB_ARB;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_OPERAND2_RGB_EXT", 19)) {
    /*                             ^           */
#ifdef GL_OPERAND2_RGB_EXT
      *iv_return = GL_OPERAND2_RGB_EXT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case 'C':
    if (memEQ(name, "GL_CLAMP_READ_COLOR", 19)) {
    /*                             ^           */
#ifdef GL_CLAMP_READ_COLOR
      *iv_return = GL_CLAMP_READ_COLOR;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_CLIP_DISTANCE_NV", 19)) {
    /*                             ^           */
#ifdef GL_CLIP_DISTANCE_NV
      *iv_return = GL_CLIP_DISTANCE_NV;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_COORD_REPLACE_NV", 19)) {
    /*                             ^           */
#ifdef GL_COORD_REPLACE_NV
      *iv_return = GL_COORD_REPLACE_NV;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_RELATIVE_RECT_NV", 19)) {
    /*                             ^           */
#ifdef GL_RELATIVE_RECT_NV
      *iv_return = GL_RELATIVE_RECT_NV;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case 'D':
    if (memEQ(name, "GL_DYNAMIC_READ_ARB", 19)) {
    /*                             ^           */
#ifdef GL_DYNAMIC_READ_ARB
      *iv_return = GL_DYNAMIC_READ_ARB;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_INT_IMAGE_1D_EXT", 19)) {
    /*                             ^           */
#ifdef GL_INT_IMAGE_1D_EXT
      *iv_return = GL_INT_IMAGE_1D_EXT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_INT_IMAGE_2D_EXT", 19)) {
    /*                             ^           */
#ifdef GL_INT_IMAGE_2D_EXT
      *iv_return = GL_INT_IMAGE_2D_EXT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_INT_IMAGE_3D_EXT", 19)) {
    /*                             ^           */
#ifdef GL_INT_IMAGE_3D_EXT
      *iv_return = GL_INT_IMAGE_3D_EXT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_MODULATE_ADD_ATI", 19)) {
    /*                             ^           */
#ifdef GL_MODULATE_ADD_ATI
      *iv_return = GL_MODULATE_ADD_ATI;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_NAME_STACK_DEPTH", 19)) {
    /*                             ^           */
#ifdef GL_NAME_STACK_DEPTH
      *iv_return = GL_NAME_STACK_DEPTH;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_PATH_GEN_MODE_NV", 19)) {
    /*                             ^           */
#ifdef GL_PATH_GEN_MODE_NV
      *iv_return = GL_PATH_GEN_MODE_NV;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_SEPARABLE_2D_EXT", 19)) {
    /*                             ^           */
#ifdef GL_SEPARABLE_2D_EXT
      *iv_return = GL_SEPARABLE_2D_EXT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_TIME_ELAPSED_EXT", 19)) {
    /*                             ^           */
#ifdef GL_TIME_ELAPSED_EXT
      *iv_return = GL_TIME_ELAPSED_EXT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_VERTEX_BLEND_ARB", 19)) {
    /*                             ^           */
#ifdef GL_VERTEX_BLEND_ARB
      *iv_return = GL_VERTEX_BLEND_ARB;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glTexSubImage4DSGIS", 19)) {
    /*                             ^           */
#ifdef glTexSubImage4DSGIS
      *iv_return = glTexSubImage4DSGIS;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case 'E':
    if (memEQ(name, "GL_ALL_COMPLETED_NV", 19)) {
    /*                             ^           */
#ifdef GL_ALL_COMPLETED_NV
      *iv_return = GL_ALL_COMPLETED_NV;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_BUFFER_USAGE_ARB", 19)) {
    /*                             ^           */
#ifdef GL_BUFFER_USAGE_ARB
      *iv_return = GL_BUFFER_USAGE_ARB;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_COLOR_SAMPLES_NV", 19)) {
    /*                             ^           */
#ifdef GL_COLOR_SAMPLES_NV
      *iv_return = GL_COLOR_SAMPLES_NV;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_COUNTER_TYPE_AMD", 19)) {
    /*                             ^           */
#ifdef GL_COUNTER_TYPE_AMD
      *iv_return = GL_COUNTER_TYPE_AMD;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_DEBUG_SOURCE_API", 19)) {
    /*                             ^           */
#ifdef GL_DEBUG_SOURCE_API
      *iv_return = GL_DEBUG_SOURCE_API;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_DEBUG_TYPE_ERROR", 19)) {
    /*                             ^           */
#ifdef GL_DEBUG_TYPE_ERROR
      *iv_return = GL_DEBUG_TYPE_ERROR;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_DEPTH_SAMPLES_NV", 19)) {
    /*                             ^           */
#ifdef GL_DEPTH_SAMPLES_NV
      *iv_return = GL_DEPTH_SAMPLES_NV;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_KTX_FRONT_REGION", 19)) {
    /*                             ^           */
#ifdef GL_KTX_FRONT_REGION
      *iv_return = GL_KTX_FRONT_REGION;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_MAX_LABEL_LENGTH", 19)) {
    /*                             ^           */
#ifdef GL_MAX_LABEL_LENGTH
      *iv_return = GL_MAX_LABEL_LENGTH;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_MINUS_CLAMPED_NV", 19)) {
    /*                             ^           */
#ifdef GL_MINUS_CLAMPED_NV
      *iv_return = GL_MINUS_CLAMPED_NV;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_NEGATIVE_ONE_EXT", 19)) {
    /*                             ^           */
#ifdef GL_NEGATIVE_ONE_EXT
      *iv_return = GL_NEGATIVE_ONE_EXT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_POINT_SPRITE_ARB", 19)) {
    /*                             ^           */
#ifdef GL_POINT_SPRITE_ARB
      *iv_return = GL_POINT_SPRITE_ARB;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_PROGRAM_PIPELINE", 19)) {
    /*                             ^           */
#ifdef GL_PROGRAM_PIPELINE
      *iv_return = GL_PROGRAM_PIPELINE;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_PROVOKING_VERTEX", 19)) {
    /*                             ^           */
#ifdef GL_PROVOKING_VERTEX
      *iv_return = GL_PROVOKING_VERTEX;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_SAMPLER_CUBE_ARB", 19)) {
    /*                             ^           */
#ifdef GL_SAMPLER_CUBE_ARB
      *iv_return = GL_SAMPLER_CUBE_ARB;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_TEXTURE_CUBE_MAP", 19)) {
    /*                             ^           */
#ifdef GL_TEXTURE_CUBE_MAP
      *iv_return = GL_TEXTURE_CUBE_MAP;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_UNDEFINED_VERTEX", 19)) {
    /*                             ^           */
#ifdef GL_UNDEFINED_VERTEX
      *iv_return = GL_UNDEFINED_VERTEX;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case 'F':
    if (memEQ(name, "GL_INTENSITY16F_ARB", 19)) {
    /*                             ^           */
#ifdef GL_INTENSITY16F_ARB
      *iv_return = GL_INTENSITY16F_ARB;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_INTENSITY32F_ARB", 19)) {
    /*                             ^           */
#ifdef GL_INTENSITY32F_ARB
      *iv_return = GL_INTENSITY32F_ARB;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_LUMINANCE16F_ARB", 19)) {
    /*                             ^           */
#ifdef GL_LUMINANCE16F_ARB
      *iv_return = GL_LUMINANCE16F_ARB;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_LUMINANCE32F_ARB", 19)) {
    /*                             ^           */
#ifdef GL_LUMINANCE32F_ARB
      *iv_return = GL_LUMINANCE32F_ARB;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_MAX_DRAW_BUFFERS", 19)) {
    /*                             ^           */
#ifdef GL_MAX_DRAW_BUFFERS
      *iv_return = GL_MAX_DRAW_BUFFERS;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_R1UI_C3F_V3F_SUN", 19)) {
    /*                             ^           */
#ifdef GL_R1UI_C3F_V3F_SUN
      *iv_return = GL_R1UI_C3F_V3F_SUN;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_R1UI_N3F_V3F_SUN", 19)) {
    /*                             ^           */
#ifdef GL_R1UI_N3F_V3F_SUN
      *iv_return = GL_R1UI_N3F_V3F_SUN;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_R1UI_T2F_V3F_SUN", 19)) {
    /*                             ^           */
#ifdef GL_R1UI_T2F_V3F_SUN
      *iv_return = GL_R1UI_T2F_V3F_SUN;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_UNPACK_LSB_FIRST", 19)) {
    /*                             ^           */
#ifdef GL_UNPACK_LSB_FIRST
      *iv_return = GL_UNPACK_LSB_FIRST;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case 'H':
    if (memEQ(name, "GL_DEPTH_ATTACHMENT", 19)) {
    /*                             ^           */
#ifdef GL_DEPTH_ATTACHMENT
      *iv_return = GL_DEPTH_ATTACHMENT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_SOURCE3_ALPHA_NV", 19)) {
    /*                             ^           */
#ifdef GL_SOURCE3_ALPHA_NV
      *iv_return = GL_SOURCE3_ALPHA_NV;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case 'I':
    if (memEQ(name, "GL_DEPTH_STENCIL_NV", 19)) {
    /*                             ^           */
#ifdef GL_DEPTH_STENCIL_NV
      *iv_return = GL_DEPTH_STENCIL_NV;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_INTENSITY16I_EXT", 19)) {
    /*                             ^           */
#ifdef GL_INTENSITY16I_EXT
      *iv_return = GL_INTENSITY16I_EXT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_INTENSITY32I_EXT", 19)) {
    /*                             ^           */
#ifdef GL_INTENSITY32I_EXT
      *iv_return = GL_INTENSITY32I_EXT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_INTENSITY8UI_EXT", 19)) {
    /*                             ^           */
#ifdef GL_INTENSITY8UI_EXT
      *iv_return = GL_INTENSITY8UI_EXT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_LUMINANCE16I_EXT", 19)) {
    /*                             ^           */
#ifdef GL_LUMINANCE16I_EXT
      *iv_return = GL_LUMINANCE16I_EXT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_LUMINANCE32I_EXT", 19)) {
    /*                             ^           */
#ifdef GL_LUMINANCE32I_EXT
      *iv_return = GL_LUMINANCE32I_EXT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_LUMINANCE8UI_EXT", 19)) {
    /*                             ^           */
#ifdef GL_LUMINANCE8UI_EXT
      *iv_return = GL_LUMINANCE8UI_EXT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_PACK_SKIP_PIXELS", 19)) {
    /*                             ^           */
#ifdef GL_PACK_SKIP_PIXELS
      *iv_return = GL_PACK_SKIP_PIXELS;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_QUERY_NO_WAIT_NV", 19)) {
    /*                             ^           */
#ifdef GL_QUERY_NO_WAIT_NV
      *iv_return = GL_QUERY_NO_WAIT_NV;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_TEXTURE_RESIDENT", 19)) {
    /*                             ^           */
#ifdef GL_TEXTURE_RESIDENT
      *iv_return = GL_TEXTURE_RESIDENT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glEndPerfQueryINTEL", 19)) {
    /*                             ^           */
#ifdef glEndPerfQueryINTEL
      *iv_return = glEndPerfQueryINTEL;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glMapTexture2DINTEL", 19)) {
    /*                             ^           */
#ifdef glMapTexture2DINTEL
      *iv_return = glMapTexture2DINTEL;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glVertexAttribI1uiv", 19)) {
    /*                             ^           */
#ifdef glVertexAttribI1uiv
      *iv_return = glVertexAttribI1uiv;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glVertexAttribI2uiv", 19)) {
    /*                             ^           */
#ifdef glVertexAttribI2uiv
      *iv_return = glVertexAttribI2uiv;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glVertexAttribI3uiv", 19)) {
    /*                             ^           */
#ifdef glVertexAttribI3uiv
      *iv_return = glVertexAttribI3uiv;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glVertexAttribI4ubv", 19)) {
    /*                             ^           */
#ifdef glVertexAttribI4ubv
      *iv_return = glVertexAttribI4ubv;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glVertexAttribI4uiv", 19)) {
    /*                             ^           */
#ifdef glVertexAttribI4uiv
      *iv_return = glVertexAttribI4uiv;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glVertexAttribI4usv", 19)) {
    /*                             ^           */
#ifdef glVertexAttribI4usv
      *iv_return = glVertexAttribI4usv;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case 'K':
    if (memEQ(name, "GL_STENCIL_BACK_REF", 19)) {
    /*                             ^           */
#ifdef GL_STENCIL_BACK_REF
      *iv_return = GL_STENCIL_BACK_REF;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case 'L':
    if (memEQ(name, "glGetObjectPtrLabel", 19)) {
    /*                             ^           */
#ifdef glGetObjectPtrLabel
      *iv_return = glGetObjectPtrLabel;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case 'M':
    if (memEQ(name, "GL_PACK_SKIP_IMAGES", 19)) {
    /*                             ^           */
#ifdef GL_PACK_SKIP_IMAGES
      *iv_return = GL_PACK_SKIP_IMAGES;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case 'N':
    if (memEQ(name, "GL_ALREADY_SIGNALED", 19)) {
    /*                             ^           */
#ifdef GL_ALREADY_SIGNALED
      *iv_return = GL_ALREADY_SIGNALED;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_COLOR_COMPONENTS", 19)) {
    /*                             ^           */
#ifdef GL_COLOR_COMPONENTS
      *iv_return = GL_COLOR_COMPONENTS;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_CULL_FRAGMENT_NV", 19)) {
    /*                             ^           */
#ifdef GL_CULL_FRAGMENT_NV
      *iv_return = GL_CULL_FRAGMENT_NV;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_DEPTH24_STENCIL8", 19)) {
    /*                             ^           */
#ifdef GL_DEPTH24_STENCIL8
      *iv_return = GL_DEPTH24_STENCIL8;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_DEPTH_COMPONENTS", 19)) {
    /*                             ^           */
#ifdef GL_DEPTH_COMPONENTS
      *iv_return = GL_DEPTH_COMPONENTS;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_UNPACK_ALIGNMENT", 19)) {
    /*                             ^           */
#ifdef GL_UNPACK_ALIGNMENT
      *iv_return = GL_UNPACK_ALIGNMENT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case 'O':
    if (memEQ(name, "GL_DEBUG_TYPE_OTHER", 19)) {
    /*                             ^           */
#ifdef GL_DEBUG_TYPE_OTHER
      *iv_return = GL_DEBUG_TYPE_OTHER;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_HISTOGRAM_FORMAT", 19)) {
    /*                             ^           */
#ifdef GL_HISTOGRAM_FORMAT
      *iv_return = GL_HISTOGRAM_FORMAT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_MAP1_GRID_DOMAIN", 19)) {
    /*                             ^           */
#ifdef GL_MAP1_GRID_DOMAIN
      *iv_return = GL_MAP1_GRID_DOMAIN;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_MAP2_GRID_DOMAIN", 19)) {
    /*                             ^           */
#ifdef GL_MAP2_GRID_DOMAIN
      *iv_return = GL_MAP2_GRID_DOMAIN;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_PRIMARY_COLOR_NV", 19)) {
    /*                             ^           */
#ifdef GL_PRIMARY_COLOR_NV
      *iv_return = GL_PRIMARY_COLOR_NV;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_REPLICATE_BORDER", 19)) {
    /*                             ^           */
#ifdef GL_REPLICATE_BORDER
      *iv_return = GL_REPLICATE_BORDER;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_TEXTURE_PRIORITY", 19)) {
    /*                             ^           */
#ifdef GL_TEXTURE_PRIORITY
      *iv_return = GL_TEXTURE_PRIORITY;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case 'P':
    if (memEQ(name, "GL_MIRROR_CLAMP_ATI", 19)) {
    /*                             ^           */
#ifdef GL_MIRROR_CLAMP_ATI
      *iv_return = GL_MIRROR_CLAMP_ATI;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_MIRROR_CLAMP_EXT", 19)) {
    /*                             ^           */
#ifdef GL_MIRROR_CLAMP_EXT
      *iv_return = GL_MIRROR_CLAMP_EXT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_PATH_END_CAPS_NV", 19)) {
    /*                             ^           */
#ifdef GL_PATH_END_CAPS_NV
      *iv_return = GL_PATH_END_CAPS_NV;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glVertexAttribP1uiv", 19)) {
    /*                             ^           */
#ifdef glVertexAttribP1uiv
      *iv_return = glVertexAttribP1uiv;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glVertexAttribP2uiv", 19)) {
    /*                             ^           */
#ifdef glVertexAttribP2uiv
      *iv_return = glVertexAttribP2uiv;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glVertexAttribP3uiv", 19)) {
    /*                             ^           */
#ifdef glVertexAttribP3uiv
      *iv_return = glVertexAttribP3uiv;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glVertexAttribP4uiv", 19)) {
    /*                             ^           */
#ifdef glVertexAttribP4uiv
      *iv_return = glVertexAttribP4uiv;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case 'Q':
    if (memEQ(name, "GL_SWIZZLE_STRQ_ATI", 19)) {
    /*                             ^           */
#ifdef GL_SWIZZLE_STRQ_ATI
      *iv_return = GL_SWIZZLE_STRQ_ATI;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case 'R':
    if (memEQ(name, "GL_ACCUM_BUFFER_BIT", 19)) {
    /*                             ^           */
#ifdef GL_ACCUM_BUFFER_BIT
      *iv_return = GL_ACCUM_BUFFER_BIT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_ARRAY_BUFFER_ARB", 19)) {
    /*                             ^           */
#ifdef GL_ARRAY_BUFFER_ARB
      *iv_return = GL_ARRAY_BUFFER_ARB;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_BGRA_INTEGER_EXT", 19)) {
    /*                             ^           */
#ifdef GL_BGRA_INTEGER_EXT
      *iv_return = GL_BGRA_INTEGER_EXT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_BLUE_INTEGER_EXT", 19)) {
    /*                             ^           */
#ifdef GL_BLUE_INTEGER_EXT
      *iv_return = GL_BLUE_INTEGER_EXT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_COLOR_BUFFER_BIT", 19)) {
    /*                             ^           */
#ifdef GL_COLOR_BUFFER_BIT
      *iv_return = GL_COLOR_BUFFER_BIT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_COLOR_RENDERABLE", 19)) {
    /*                             ^           */
#ifdef GL_COLOR_RENDERABLE
      *iv_return = GL_COLOR_RENDERABLE;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_DEPTH_BUFFER_BIT", 19)) {
    /*                             ^           */
#ifdef GL_DEPTH_BUFFER_BIT
      *iv_return = GL_DEPTH_BUFFER_BIT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_DEPTH_RENDERABLE", 19)) {
    /*                             ^           */
#ifdef GL_DEPTH_RENDERABLE
      *iv_return = GL_DEPTH_RENDERABLE;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_IMAGE_BUFFER_EXT", 19)) {
    /*                             ^           */
#ifdef GL_IMAGE_BUFFER_EXT
      *iv_return = GL_IMAGE_BUFFER_EXT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_LINE_WIDTH_RANGE", 19)) {
    /*                             ^           */
#ifdef GL_LINE_WIDTH_RANGE
      *iv_return = GL_LINE_WIDTH_RANGE;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_LOG_DRIVER_REGAL", 19)) {
    /*                             ^           */
#ifdef GL_LOG_DRIVER_REGAL
      *iv_return = GL_LOG_DRIVER_REGAL;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_LOG_STATUS_REGAL", 19)) {
    /*                             ^           */
#ifdef GL_LOG_STATUS_REGAL
      *iv_return = GL_LOG_STATUS_REGAL;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_POINT_SIZE_RANGE", 19)) {
    /*                             ^           */
#ifdef GL_POINT_SIZE_RANGE
      *iv_return = GL_POINT_SIZE_RANGE;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_PROXY_TEXTURE_1D", 19)) {
    /*                             ^           */
#ifdef GL_PROXY_TEXTURE_1D
      *iv_return = GL_PROXY_TEXTURE_1D;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_PROXY_TEXTURE_2D", 19)) {
    /*                             ^           */
#ifdef GL_PROXY_TEXTURE_2D
      *iv_return = GL_PROXY_TEXTURE_2D;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_PROXY_TEXTURE_3D", 19)) {
    /*                             ^           */
#ifdef GL_PROXY_TEXTURE_3D
      *iv_return = GL_PROXY_TEXTURE_3D;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_QUERY_BUFFER_AMD", 19)) {
    /*                             ^           */
#ifdef GL_QUERY_BUFFER_AMD
      *iv_return = GL_QUERY_BUFFER_AMD;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_RENDERBUFFER_EXT", 19)) {
    /*                             ^           */
#ifdef GL_RENDERBUFFER_EXT
      *iv_return = GL_RENDERBUFFER_EXT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_RGBA_INTEGER_EXT", 19)) {
    /*                             ^           */
#ifdef GL_RGBA_INTEGER_EXT
      *iv_return = GL_RGBA_INTEGER_EXT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_SINGLE_COLOR_EXT", 19)) {
    /*                             ^           */
#ifdef GL_SINGLE_COLOR_EXT
      *iv_return = GL_SINGLE_COLOR_EXT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_STATISTICS_REGAL", 19)) {
    /*                             ^           */
#ifdef GL_STATISTICS_REGAL
      *iv_return = GL_STATISTICS_REGAL;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_TEXTURE_COORD_NV", 19)) {
    /*                             ^           */
#ifdef GL_TEXTURE_COORD_NV
      *iv_return = GL_TEXTURE_COORD_NV;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_WRITE_DISCARD_NV", 19)) {
    /*                             ^           */
#ifdef GL_WRITE_DISCARD_NV
      *iv_return = GL_WRITE_DISCARD_NV;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glGetExtensionREGAL", 19)) {
    /*                             ^           */
#ifdef glGetExtensionREGAL
      *iv_return = glGetExtensionREGAL;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case 'S':
    if (memEQ(name, "GL_DEPTH_BOUNDS_EXT", 19)) {
    /*                             ^           */
#ifdef GL_DEPTH_BOUNDS_EXT
      *iv_return = GL_DEPTH_BOUNDS_EXT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_FIRST_TO_REST_NV", 19)) {
    /*                             ^           */
#ifdef GL_FIRST_TO_REST_NV
      *iv_return = GL_FIRST_TO_REST_NV;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_INTENSITY8_SNORM", 19)) {
    /*                             ^           */
#ifdef GL_INTENSITY8_SNORM
      *iv_return = GL_INTENSITY8_SNORM;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_LUMINANCE8_SNORM", 19)) {
    /*                             ^           */
#ifdef GL_LUMINANCE8_SNORM
      *iv_return = GL_LUMINANCE8_SNORM;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_MAX_LIST_NESTING", 19)) {
    /*                             ^           */
#ifdef GL_MAX_LIST_NESTING
      *iv_return = GL_MAX_LIST_NESTING;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_MAX_SHININESS_NV", 19)) {
    /*                             ^           */
#ifdef GL_MAX_SHININESS_NV
      *iv_return = GL_MAX_SHININESS_NV;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_PN_TRIANGLES_ATI", 19)) {
    /*                             ^           */
#ifdef GL_PN_TRIANGLES_ATI
      *iv_return = GL_PN_TRIANGLES_ATI;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case 'T':
    if (memEQ(name, "GL_COPY_PIXEL_TOKEN", 19)) {
    /*                             ^           */
#ifdef GL_COPY_PIXEL_TOKEN
      *iv_return = GL_COPY_PIXEL_TOKEN;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_DRAW_PIXEL_TOKEN", 19)) {
    /*                             ^           */
#ifdef GL_DRAW_PIXEL_TOKEN
      *iv_return = GL_DRAW_PIXEL_TOKEN;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_EDGEFLAG_BIT_PGI", 19)) {
    /*                             ^           */
#ifdef GL_EDGEFLAG_BIT_PGI
      *iv_return = GL_EDGEFLAG_BIT_PGI;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_EXPAND_NEGATE_NV", 19)) {
    /*                             ^           */
#ifdef GL_EXPAND_NEGATE_NV
      *iv_return = GL_EXPAND_NEGATE_NV;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_LINE_RESET_TOKEN", 19)) {
    /*                             ^           */
#ifdef GL_LINE_RESET_TOKEN
      *iv_return = GL_LINE_RESET_TOKEN;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_MAP1_TANGENT_EXT", 19)) {
    /*                             ^           */
#ifdef GL_MAP1_TANGENT_EXT
      *iv_return = GL_MAP1_TANGENT_EXT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_MAP2_TANGENT_EXT", 19)) {
    /*                             ^           */
#ifdef GL_MAP2_TANGENT_EXT
      *iv_return = GL_MAP2_TANGENT_EXT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_MAP_COHERENT_BIT", 19)) {
    /*                             ^           */
#ifdef GL_MAP_COHERENT_BIT
      *iv_return = GL_MAP_COHERENT_BIT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_QUERY_OBJECT_AMD", 19)) {
    /*                             ^           */
#ifdef GL_QUERY_OBJECT_AMD
      *iv_return = GL_QUERY_OBJECT_AMD;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_QUERY_OBJECT_EXT", 19)) {
    /*                             ^           */
#ifdef GL_QUERY_OBJECT_EXT
      *iv_return = GL_QUERY_OBJECT_EXT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_QUERY_RESULT_ARB", 19)) {
    /*                             ^           */
#ifdef GL_QUERY_RESULT_ARB
      *iv_return = GL_QUERY_RESULT_ARB;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_ROUNDED_RECT2_NV", 19)) {
    /*                             ^           */
#ifdef GL_ROUNDED_RECT2_NV
      *iv_return = GL_ROUNDED_RECT2_NV;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_ROUNDED_RECT4_NV", 19)) {
    /*                             ^           */
#ifdef GL_ROUNDED_RECT4_NV
      *iv_return = GL_ROUNDED_RECT4_NV;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_ROUNDED_RECT8_NV", 19)) {
    /*                             ^           */
#ifdef GL_ROUNDED_RECT8_NV
      *iv_return = GL_ROUNDED_RECT8_NV;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_SATURATE_BIT_ATI", 19)) {
    /*                             ^           */
#ifdef GL_SATURATE_BIT_ATI
      *iv_return = GL_SATURATE_BIT_ATI;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_SEPARATE_ATTRIBS", 19)) {
    /*                             ^           */
#ifdef GL_SEPARATE_ATTRIBS
      *iv_return = GL_SEPARATE_ATTRIBS;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_SIGNED_NEGATE_NV", 19)) {
    /*                             ^           */
#ifdef GL_SIGNED_NEGATE_NV
      *iv_return = GL_SIGNED_NEGATE_NV;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_SURFACE_STATE_NV", 19)) {
    /*                             ^           */
#ifdef GL_SURFACE_STATE_NV
      *iv_return = GL_SURFACE_STATE_NV;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_UNSIGNED_INT8_NV", 19)) {
    /*                             ^           */
#ifdef GL_UNSIGNED_INT8_NV
      *iv_return = GL_UNSIGNED_INT8_NV;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_VERTEX23_BIT_PGI", 19)) {
    /*                             ^           */
#ifdef GL_VERTEX23_BIT_PGI
      *iv_return = GL_VERTEX23_BIT_PGI;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glCopyColorSubTable", 19)) {
    /*                             ^           */
#ifdef glCopyColorSubTable
      *iv_return = glCopyColorSubTable;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case 'U':
    if (memEQ(name, "GL_ACTIVE_RESOURCES", 19)) {
    /*                             ^           */
#ifdef GL_ACTIVE_RESOURCES
      *iv_return = GL_ACTIVE_RESOURCES;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_COPY_READ_BUFFER", 19)) {
    /*                             ^           */
#ifdef GL_COPY_READ_BUFFER
      *iv_return = GL_COPY_READ_BUFFER;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_DRAW_FRAMEBUFFER", 19)) {
    /*                             ^           */
#ifdef GL_DRAW_FRAMEBUFFER
      *iv_return = GL_DRAW_FRAMEBUFFER;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_INT_IMAGE_BUFFER", 19)) {
    /*                             ^           */
#ifdef GL_INT_IMAGE_BUFFER
      *iv_return = GL_INT_IMAGE_BUFFER;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_READ_FRAMEBUFFER", 19)) {
    /*                             ^           */
#ifdef GL_READ_FRAMEBUFFER
      *iv_return = GL_READ_FRAMEBUFFER;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_SCALE_BY_FOUR_NV", 19)) {
    /*                             ^           */
#ifdef GL_SCALE_BY_FOUR_NV
      *iv_return = GL_SCALE_BY_FOUR_NV;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case 'W':
    if (memEQ(name, "GL_DYNAMIC_DRAW_ARB", 19)) {
    /*                             ^           */
#ifdef GL_DYNAMIC_DRAW_ARB
      *iv_return = GL_DYNAMIC_DRAW_ARB;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case 'X':
    if (memEQ(name, "GL_3D_COLOR_TEXTURE", 19)) {
    /*                             ^           */
#ifdef GL_3D_COLOR_TEXTURE
      *iv_return = GL_3D_COLOR_TEXTURE;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_4D_COLOR_TEXTURE", 19)) {
    /*                             ^           */
#ifdef GL_4D_COLOR_TEXTURE
      *iv_return = GL_4D_COLOR_TEXTURE;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_COLOR_MATRIX_SGI", 19)) {
    /*                             ^           */
#ifdef GL_COLOR_MATRIX_SGI
      *iv_return = GL_COLOR_MATRIX_SGI;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_FRAGMENT_TEXTURE", 19)) {
    /*                             ^           */
#ifdef GL_FRAGMENT_TEXTURE
      *iv_return = GL_FRAGMENT_TEXTURE;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_GEOMETRY_TEXTURE", 19)) {
    /*                             ^           */
#ifdef GL_GEOMETRY_TEXTURE
      *iv_return = GL_GEOMETRY_TEXTURE;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case 'Y':
    if (memEQ(name, "GL_DYNAMIC_COPY_ARB", 19)) {
    /*                             ^           */
#ifdef GL_DYNAMIC_COPY_ARB
      *iv_return = GL_DYNAMIC_COPY_ARB;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_NORMAL_ARRAY_EXT", 19)) {
    /*                             ^           */
#ifdef GL_NORMAL_ARRAY_EXT
      *iv_return = GL_NORMAL_ARRAY_EXT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_VERTEX_ARRAY_EXT", 19)) {
    /*                             ^           */
#ifdef GL_VERTEX_ARRAY_EXT
      *iv_return = GL_VERTEX_ARRAY_EXT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_WEIGHT_ARRAY_ARB", 19)) {
    /*                             ^           */
#ifdef GL_WEIGHT_ARRAY_ARB
      *iv_return = GL_WEIGHT_ARRAY_ARB;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case '_':
    if (memEQ(name, "GLEW_ARB_multi_bind", 19)) {
    /*                             ^           */
#ifdef GLEW_ARB_multi_bind
      *iv_return = GLEW_ARB_multi_bind;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GLEW_EXT_index_func", 19)) {
    /*                             ^           */
#ifdef GLEW_EXT_index_func
      *iv_return = GLEW_EXT_index_func;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_ACCUM_ALPHA_BITS", 19)) {
    /*                             ^           */
#ifdef GL_ACCUM_ALPHA_BITS
      *iv_return = GL_ACCUM_ALPHA_BITS;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_ACCUM_GREEN_BITS", 19)) {
    /*                             ^           */
#ifdef GL_ACCUM_GREEN_BITS
      *iv_return = GL_ACCUM_GREEN_BITS;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_ALL_BARRIER_BITS", 19)) {
    /*                             ^           */
#ifdef GL_ALL_BARRIER_BITS
      *iv_return = GL_ALL_BARRIER_BITS;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_ARB_texture_view", 19)) {
    /*                             ^           */
#ifdef GL_ARB_texture_view
      *iv_return = GL_ARB_texture_view;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_BUFFER_DATA_SIZE", 19)) {
    /*                             ^           */
#ifdef GL_BUFFER_DATA_SIZE
      *iv_return = GL_BUFFER_DATA_SIZE;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_COLOR_ARRAY_SIZE", 19)) {
    /*                             ^           */
#ifdef GL_COLOR_ARRAY_SIZE
      *iv_return = GL_COLOR_ARRAY_SIZE;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_COLOR_ARRAY_TYPE", 19)) {
    /*                             ^           */
#ifdef GL_COLOR_ARRAY_TYPE
      *iv_return = GL_COLOR_ARRAY_TYPE;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_COLOR_TABLE_BIAS", 19)) {
    /*                             ^           */
#ifdef GL_COLOR_TABLE_BIAS
      *iv_return = GL_COLOR_TABLE_BIAS;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_EXT_stencil_wrap", 19)) {
    /*                             ^           */
#ifdef GL_EXT_stencil_wrap
      *iv_return = GL_EXT_stencil_wrap;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_EXT_texture_sRGB", 19)) {
    /*                             ^           */
#ifdef GL_EXT_texture_sRGB
      *iv_return = GL_EXT_texture_sRGB;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_FRAMEBUFFER_SRGB", 19)) {
    /*                             ^           */
#ifdef GL_FRAMEBUFFER_SRGB
      *iv_return = GL_FRAMEBUFFER_SRGB;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_IMAGE_PIXEL_TYPE", 19)) {
    /*                             ^           */
#ifdef GL_IMAGE_PIXEL_TYPE
      *iv_return = GL_IMAGE_PIXEL_TYPE;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_IMAGE_TEXEL_SIZE", 19)) {
    /*                             ^           */
#ifdef GL_IMAGE_TEXEL_SIZE
      *iv_return = GL_IMAGE_TEXEL_SIZE;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_INDEX_ARRAY_TYPE", 19)) {
    /*                             ^           */
#ifdef GL_INDEX_ARRAY_TYPE
      *iv_return = GL_INDEX_ARRAY_TYPE;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_INT_SAMPLER_CUBE", 19)) {
    /*                             ^           */
#ifdef GL_INT_SAMPLER_CUBE
      *iv_return = GL_INT_SAMPLER_CUBE;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_LINE_SMOOTH_HINT", 19)) {
    /*                             ^           */
#ifdef GL_LINE_SMOOTH_HINT
      *iv_return = GL_LINE_SMOOTH_HINT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_MAX_TEXTURE_SIZE", 19)) {
    /*                             ^           */
#ifdef GL_MAX_TEXTURE_SIZE
      *iv_return = GL_MAX_TEXTURE_SIZE;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_MULTISAMPLE_3DFX", 19)) {
    /*                             ^           */
#ifdef GL_MULTISAMPLE_3DFX
      *iv_return = GL_MULTISAMPLE_3DFX;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_MULTISAMPLE_SGIS", 19)) {
    /*                             ^           */
#ifdef GL_MULTISAMPLE_SGIS
      *iv_return = GL_MULTISAMPLE_SGIS;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_OBJECT_LINE_SGIS", 19)) {
    /*                             ^           */
#ifdef GL_OBJECT_LINE_SGIS
      *iv_return = GL_OBJECT_LINE_SGIS;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_PACK_INVERT_MESA", 19)) {
    /*                             ^           */
#ifdef GL_PACK_INVERT_MESA
      *iv_return = GL_PACK_INVERT_MESA;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_PIXEL_MAP_A_TO_A", 19)) {
    /*                             ^           */
#ifdef GL_PIXEL_MAP_A_TO_A
      *iv_return = GL_PIXEL_MAP_A_TO_A;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_PIXEL_MAP_B_TO_B", 19)) {
    /*                             ^           */
#ifdef GL_PIXEL_MAP_B_TO_B
      *iv_return = GL_PIXEL_MAP_B_TO_B;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_PIXEL_MAP_G_TO_G", 19)) {
    /*                             ^           */
#ifdef GL_PIXEL_MAP_G_TO_G
      *iv_return = GL_PIXEL_MAP_G_TO_G;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_PIXEL_MAP_I_TO_A", 19)) {
    /*                             ^           */
#ifdef GL_PIXEL_MAP_I_TO_A
      *iv_return = GL_PIXEL_MAP_I_TO_A;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_PIXEL_MAP_I_TO_B", 19)) {
    /*                             ^           */
#ifdef GL_PIXEL_MAP_I_TO_B
      *iv_return = GL_PIXEL_MAP_I_TO_B;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_PIXEL_MAP_I_TO_G", 19)) {
    /*                             ^           */
#ifdef GL_PIXEL_MAP_I_TO_G
      *iv_return = GL_PIXEL_MAP_I_TO_G;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_PIXEL_MAP_I_TO_I", 19)) {
    /*                             ^           */
#ifdef GL_PIXEL_MAP_I_TO_I
      *iv_return = GL_PIXEL_MAP_I_TO_I;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_PIXEL_MAP_I_TO_R", 19)) {
    /*                             ^           */
#ifdef GL_PIXEL_MAP_I_TO_R
      *iv_return = GL_PIXEL_MAP_I_TO_R;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_PIXEL_MAP_R_TO_R", 19)) {
    /*                             ^           */
#ifdef GL_PIXEL_MAP_R_TO_R
      *iv_return = GL_PIXEL_MAP_R_TO_R;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_PIXEL_MAP_S_TO_S", 19)) {
    /*                             ^           */
#ifdef GL_PIXEL_MAP_S_TO_S
      *iv_return = GL_PIXEL_MAP_S_TO_S;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_READ_PIXELS_TYPE", 19)) {
    /*                             ^           */
#ifdef GL_READ_PIXELS_TYPE
      *iv_return = GL_READ_PIXELS_TYPE;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_RGBA_SIGNED_SGIX", 19)) {
    /*                             ^           */
#ifdef GL_RGBA_SIGNED_SGIX
      *iv_return = GL_RGBA_SIGNED_SGIX;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_SAMPLE_MASK_SGIS", 19)) {
    /*                             ^           */
#ifdef GL_SAMPLE_MASK_SGIS
      *iv_return = GL_SAMPLE_MASK_SGIS;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_TEXTURE_ENV_MODE", 19)) {
    /*                             ^           */
#ifdef GL_TEXTURE_ENV_MODE
      *iv_return = GL_TEXTURE_ENV_MODE;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_TEXTURE_GEN_MODE", 19)) {
    /*                             ^           */
#ifdef GL_TEXTURE_GEN_MODE
      *iv_return = GL_TEXTURE_GEN_MODE;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_TEXTURE_LOD_BIAS", 19)) {
    /*                             ^           */
#ifdef GL_TEXTURE_LOD_BIAS
      *iv_return = GL_TEXTURE_LOD_BIAS;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_TEXTURE_RED_SIZE", 19)) {
    /*                             ^           */
#ifdef GL_TEXTURE_RED_SIZE
      *iv_return = GL_TEXTURE_RED_SIZE;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_TEXTURE_RED_TYPE", 19)) {
    /*                             ^           */
#ifdef GL_TEXTURE_RED_TYPE
      *iv_return = GL_TEXTURE_RED_TYPE;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_UNPACK_SKIP_ROWS", 19)) {
    /*                             ^           */
#ifdef GL_UNPACK_SKIP_ROWS
      *iv_return = GL_UNPACK_SKIP_ROWS;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case 'a':
    if (memEQ(name, "GLEW_NV_gpu_shader5", 19)) {
    /*                             ^           */
#ifdef GLEW_NV_gpu_shader5
      *iv_return = GLEW_NV_gpu_shader5;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GLEW_SUN_mesh_array", 19)) {
    /*                             ^           */
#ifdef GLEW_SUN_mesh_array
      *iv_return = GLEW_SUN_mesh_array;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_3DFX_multisample", 19)) {
    /*                             ^           */
#ifdef GL_3DFX_multisample
      *iv_return = GL_3DFX_multisample;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_EXT_debug_marker", 19)) {
    /*                             ^           */
#ifdef GL_EXT_debug_marker
      *iv_return = GL_EXT_debug_marker;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_EXT_scene_marker", 19)) {
    /*                             ^           */
#ifdef GL_EXT_scene_marker
      *iv_return = GL_EXT_scene_marker;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_EXT_vertex_array", 19)) {
    /*                             ^           */
#ifdef GL_EXT_vertex_array
      *iv_return = GL_EXT_vertex_array;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_SGIS_multisample", 19)) {
    /*                             ^           */
#ifdef GL_SGIS_multisample
      *iv_return = GL_SGIS_multisample;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_SGI_color_matrix", 19)) {
    /*                             ^           */
#ifdef GL_SGI_color_matrix
      *iv_return = GL_SGI_color_matrix;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_SUN_global_alpha", 19)) {
    /*                             ^           */
#ifdef GL_SUN_global_alpha
      *iv_return = GL_SUN_global_alpha;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glBlendFuncSeparate", 19)) {
    /*                             ^           */
#ifdef glBlendFuncSeparate
      *iv_return = glBlendFuncSeparate;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glCopyTexSubImage3D", 19)) {
    /*                             ^           */
#ifdef glCopyTexSubImage3D
      *iv_return = glCopyTexSubImage3D;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glCoverStrokePathNV", 19)) {
    /*                             ^           */
#ifdef glCoverStrokePathNV
      *iv_return = glCoverStrokePathNV;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glGenerateMipmapEXT", 19)) {
    /*                             ^           */
#ifdef glGenerateMipmapEXT
      *iv_return = glGenerateMipmapEXT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glGetAttribLocation", 19)) {
    /*                             ^           */
#ifdef glGetAttribLocation
      *iv_return = glGetAttribLocation;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glGetProgramStageiv", 19)) {
    /*                             ^           */
#ifdef glGetProgramStageiv
      *iv_return = glGetProgramStageiv;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glResetHistogramEXT", 19)) {
    /*                             ^           */
#ifdef glResetHistogramEXT
      *iv_return = glResetHistogramEXT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glStencilFillPathNV", 19)) {
    /*                             ^           */
#ifdef glStencilFillPathNV
      *iv_return = glStencilFillPathNV;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glStencilOpSeparate", 19)) {
    /*                             ^           */
#ifdef glStencilOpSeparate
      *iv_return = glStencilOpSeparate;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glTextureSubImage1D", 19)) {
    /*                             ^           */
#ifdef glTextureSubImage1D
      *iv_return = glTextureSubImage1D;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glTextureSubImage2D", 19)) {
    /*                             ^           */
#ifdef glTextureSubImage2D
      *iv_return = glTextureSubImage2D;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glTextureSubImage3D", 19)) {
    /*                             ^           */
#ifdef glTextureSubImage3D
      *iv_return = glTextureSubImage3D;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case 'b':
    if (memEQ(name, "GL_ARB_vertex_blend", 19)) {
    /*                             ^           */
#ifdef GL_ARB_vertex_blend
      *iv_return = GL_ARB_vertex_blend;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glCopyBufferSubData", 19)) {
    /*                             ^           */
#ifdef glCopyBufferSubData
      *iv_return = glCopyBufferSubData;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glMatrixIndexubvARB", 19)) {
    /*                             ^           */
#ifdef glMatrixIndexubvARB
      *iv_return = glMatrixIndexubvARB;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case 'c':
    if (memEQ(name, "GLEW_NV_depth_clamp", 19)) {
    /*                             ^           */
#ifdef GLEW_NV_depth_clamp
      *iv_return = GLEW_NV_depth_clamp;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_ARB_shader_clock", 19)) {
    /*                             ^           */
#ifdef GL_ARB_shader_clock
      *iv_return = GL_ARB_shader_clock;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_INGR_color_clamp", 19)) {
    /*                             ^           */
#ifdef GL_INGR_color_clamp
      *iv_return = GL_INGR_color_clamp;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glDetailTexFuncSGIS", 19)) {
    /*                             ^           */
#ifdef glDetailTexFuncSGIS
      *iv_return = glDetailTexFuncSGIS;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glGetQueryObjectuiv", 19)) {
    /*                             ^           */
#ifdef glGetQueryObjectuiv
      *iv_return = glGetQueryObjectuiv;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glTexFilterFuncSGIS", 19)) {
    /*                             ^           */
#ifdef glTexFilterFuncSGIS
      *iv_return = glTexFilterFuncSGIS;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case 'd':
    if (memEQ(name, "glBeginQueryIndexed", 19)) {
    /*                             ^           */
#ifdef glBeginQueryIndexed
      *iv_return = glBeginQueryIndexed;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glDepthRangeIndexed", 19)) {
    /*                             ^           */
#ifdef glDepthRangeIndexed
      *iv_return = glDepthRangeIndexed;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glGetUniformIndices", 19)) {
    /*                             ^           */
#ifdef glGetUniformIndices
      *iv_return = glGetUniformIndices;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glMultiTexCoord1hNV", 19)) {
    /*                             ^           */
#ifdef glMultiTexCoord1hNV
      *iv_return = glMultiTexCoord1hNV;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glMultiTexCoord2hNV", 19)) {
    /*                             ^           */
#ifdef glMultiTexCoord2hNV
      *iv_return = glMultiTexCoord2hNV;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glMultiTexCoord3hNV", 19)) {
    /*                             ^           */
#ifdef glMultiTexCoord3hNV
      *iv_return = glMultiTexCoord3hNV;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glMultiTexCoord4hNV", 19)) {
    /*                             ^           */
#ifdef glMultiTexCoord4hNV
      *iv_return = glMultiTexCoord4hNV;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glMultiTexCoordP1ui", 19)) {
    /*                             ^           */
#ifdef glMultiTexCoordP1ui
      *iv_return = glMultiTexCoordP1ui;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glMultiTexCoordP2ui", 19)) {
    /*                             ^           */
#ifdef glMultiTexCoordP2ui
      *iv_return = glMultiTexCoordP2ui;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glMultiTexCoordP3ui", 19)) {
    /*                             ^           */
#ifdef glMultiTexCoordP3ui
      *iv_return = glMultiTexCoordP3ui;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glMultiTexCoordP4ui", 19)) {
    /*                             ^           */
#ifdef glMultiTexCoordP4ui
      *iv_return = glMultiTexCoordP4ui;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case 'e':
    if (memEQ(name, "GLEW_SGIX_framezoom", 19)) {
    /*                             ^           */
#ifdef GLEW_SGIX_framezoom
      *iv_return = GLEW_SGIX_framezoom;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_SGIS_texture_lod", 19)) {
    /*                             ^           */
#ifdef GL_SGIS_texture_lod
      *iv_return = GL_SGIS_texture_lod;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glBlendParameteriNV", 19)) {
    /*                             ^           */
#ifdef glBlendParameteriNV
      *iv_return = glBlendParameteriNV;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glDeleteTexturesEXT", 19)) {
    /*                             ^           */
#ifdef glDeleteTexturesEXT
      *iv_return = glDeleteTexturesEXT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glDisableIndexedEXT", 19)) {
    /*                             ^           */
#ifdef glDisableIndexedEXT
      *iv_return = glDisableIndexedEXT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glElementPointerATI", 19)) {
    /*                             ^           */
#ifdef glElementPointerATI
      *iv_return = glElementPointerATI;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glFinishTextureSUNX", 19)) {
    /*                             ^           */
#ifdef glFinishTextureSUNX
      *iv_return = glFinishTextureSUNX;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glGetObjectLabelEXT", 19)) {
    /*                             ^           */
#ifdef glGetObjectLabelEXT
      *iv_return = glGetObjectLabelEXT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glIsObjectBufferATI", 19)) {
    /*                             ^           */
#ifdef glIsObjectBufferATI
      *iv_return = glIsObjectBufferATI;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glIsProgramPipeline", 19)) {
    /*                             ^           */
#ifdef glIsProgramPipeline
      *iv_return = glIsProgramPipeline;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glIsRenderbufferEXT", 19)) {
    /*                             ^           */
#ifdef glIsRenderbufferEXT
      *iv_return = glIsRenderbufferEXT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glMapNamedBufferEXT", 19)) {
    /*                             ^           */
#ifdef glMapNamedBufferEXT
      *iv_return = glMapNamedBufferEXT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glMultiTexBufferEXT", 19)) {
    /*                             ^           */
#ifdef glMultiTexBufferEXT
      *iv_return = glMultiTexBufferEXT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glPointParameteriNV", 19)) {
    /*                             ^           */
#ifdef glPointParameteriNV
      *iv_return = glPointParameteriNV;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glPopGroupMarkerEXT", 19)) {
    /*                             ^           */
#ifdef glPopGroupMarkerEXT
      *iv_return = glPopGroupMarkerEXT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glProgramParameteri", 19)) {
    /*                             ^           */
#ifdef glProgramParameteri
      *iv_return = glProgramParameteri;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glSamplerParameterf", 19)) {
    /*                             ^           */
#ifdef glSamplerParameterf
      *iv_return = glSamplerParameterf;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glSamplerParameteri", 19)) {
    /*                             ^           */
#ifdef glSamplerParameteri
      *iv_return = glSamplerParameteri;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glTangentPointerEXT", 19)) {
    /*                             ^           */
#ifdef glTangentPointerEXT
      *iv_return = glTangentPointerEXT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glTextureParameterf", 19)) {
    /*                             ^           */
#ifdef glTextureParameterf
      *iv_return = glTextureParameterf;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glTextureParameteri", 19)) {
    /*                             ^           */
#ifdef glTextureParameteri
      *iv_return = glTextureParameteri;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glVariantPointerEXT", 19)) {
    /*                             ^           */
#ifdef glVariantPointerEXT
      *iv_return = glVariantPointerEXT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case 'f':
    if (memEQ(name, "GL_ARB_draw_buffers", 19)) {
    /*                             ^           */
#ifdef GL_ARB_draw_buffers
      *iv_return = GL_ARB_draw_buffers;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_ATI_draw_buffers", 19)) {
    /*                             ^           */
#ifdef GL_ATI_draw_buffers
      *iv_return = GL_ATI_draw_buffers;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_EXT_packed_float", 19)) {
    /*                             ^           */
#ifdef GL_EXT_packed_float
      *iv_return = GL_EXT_packed_float;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_EXT_shadow_funcs", 19)) {
    /*                             ^           */
#ifdef GL_EXT_shadow_funcs
      *iv_return = GL_EXT_shadow_funcs;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glBindVertexBuffers", 19)) {
    /*                             ^           */
#ifdef glBindVertexBuffers
      *iv_return = glBindVertexBuffers;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glGetProgramInfoLog", 19)) {
    /*                             ^           */
#ifdef glGetProgramInfoLog
      *iv_return = glGetProgramInfoLog;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glGetnPixelMapfvARB", 19)) {
    /*                             ^           */
#ifdef glGetnPixelMapfvARB
      *iv_return = glGetnPixelMapfvARB;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glTexRenderbufferNV", 19)) {
    /*                             ^           */
#ifdef glTexRenderbufferNV
      *iv_return = glTexRenderbufferNV;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glVertexWeightfvEXT", 19)) {
    /*                             ^           */
#ifdef glVertexWeightfvEXT
      *iv_return = glVertexWeightfvEXT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case 'g':
    if (memEQ(name, "glSampleCoverageARB", 19)) {
    /*                             ^           */
#ifdef glSampleCoverageARB
      *iv_return = glSampleCoverageARB;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case 'h':
    if (memEQ(name, "GLEW_AMD_gcn_shader", 19)) {
    /*                             ^           */
#ifdef GLEW_AMD_gcn_shader
      *iv_return = GLEW_AMD_gcn_shader;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GLEW_PGI_misc_hints", 19)) {
    /*                             ^           */
#ifdef GLEW_PGI_misc_hints
      *iv_return = GLEW_PGI_misc_hints;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_PGI_vertex_hints", 19)) {
    /*                             ^           */
#ifdef GL_PGI_vertex_hints
      *iv_return = GL_PGI_vertex_hints;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case 'i':
    if (memEQ(name, "GLEW_ARB_copy_image", 19)) {
    /*                             ^           */
#ifdef GLEW_ARB_copy_image
      *iv_return = GLEW_ARB_copy_image;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GLEW_EXT_422_pixels", 19)) {
    /*                             ^           */
#ifdef GLEW_EXT_422_pixels
      *iv_return = GLEW_EXT_422_pixels;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_EXT_blend_minmax", 19)) {
    /*                             ^           */
#ifdef GL_EXT_blend_minmax
      *iv_return = GL_EXT_blend_minmax;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_NV_gpu_multicast", 19)) {
    /*                             ^           */
#ifdef GL_NV_gpu_multicast
      *iv_return = GL_NV_gpu_multicast;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glCallCommandListNV", 19)) {
    /*                             ^           */
#ifdef glCallCommandListNV
      *iv_return = glCallCommandListNV;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glGetnUniformuivARB", 19)) {
    /*                             ^           */
#ifdef glGetnUniformuivARB
      *iv_return = glGetnUniformuivARB;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glMatrixIndexuivARB", 19)) {
    /*                             ^           */
#ifdef glMatrixIndexuivARB
      *iv_return = glMatrixIndexuivARB;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case 'l':
    if (memEQ(name, "glCopyColorTableSGI", 19)) {
    /*                             ^           */
#ifdef glCopyColorTableSGI
      *iv_return = glCopyColorTableSGI;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glGetImageHandleARB", 19)) {
    /*                             ^           */
#ifdef glGetImageHandleARB
      *iv_return = glGetImageHandleARB;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glGetnColorTableARB", 19)) {
    /*                             ^           */
#ifdef glGetnColorTableARB
      *iv_return = glGetnColorTableARB;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case 'm':
    if (memEQ(name, "GL_NV_texgen_emboss", 19)) {
    /*                             ^           */
#ifdef GL_NV_texgen_emboss
      *iv_return = GL_NV_texgen_emboss;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glDeleteProgramsARB", 19)) {
    /*                             ^           */
#ifdef glDeleteProgramsARB
      *iv_return = glDeleteProgramsARB;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glDrawRangeElements", 19)) {
    /*                             ^           */
#ifdef glDrawRangeElements
      *iv_return = glDrawRangeElements;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glMultiDrawElements", 19)) {
    /*                             ^           */
#ifdef glMultiDrawElements
      *iv_return = glMultiDrawElements;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case 'n':
    if (memEQ(name, "GL_ARB_clip_control", 19)) {
    /*                             ^           */
#ifdef GL_ARB_clip_control
      *iv_return = GL_ARB_clip_control;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_ATI_pn_triangles", 19)) {
    /*                             ^           */
#ifdef GL_ATI_pn_triangles
      *iv_return = GL_ATI_pn_triangles;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_MESA_pack_invert", 19)) {
    /*                             ^           */
#ifdef GL_MESA_pack_invert
      *iv_return = GL_MESA_pack_invert;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glBindBufferRangeNV", 19)) {
    /*                             ^           */
#ifdef glBindBufferRangeNV
      *iv_return = glBindBufferRangeNV;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glBlendEquationiARB", 19)) {
    /*                             ^           */
#ifdef glBlendEquationiARB
      *iv_return = glBlendEquationiARB;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glGetBufferPointerv", 19)) {
    /*                             ^           */
#ifdef glGetBufferPointerv
      *iv_return = glGetBufferPointerv;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glGetNamedStringARB", 19)) {
    /*                             ^           */
#ifdef glGetNamedStringARB
      *iv_return = glGetNamedStringARB;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glGetPathCommandsNV", 19)) {
    /*                             ^           */
#ifdef glGetPathCommandsNV
      *iv_return = glGetPathCommandsNV;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glGetPathTexGenfvNV", 19)) {
    /*                             ^           */
#ifdef glGetPathTexGenfvNV
      *iv_return = glGetPathTexGenfvNV;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glGetPathTexGenivNV", 19)) {
    /*                             ^           */
#ifdef glGetPathTexGenivNV
      *iv_return = glGetPathTexGenivNV;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glPathSubCommandsNV", 19)) {
    /*                             ^           */
#ifdef glPathSubCommandsNV
      *iv_return = glPathSubCommandsNV;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glSamplePatternSGIS", 19)) {
    /*                             ^           */
#ifdef glSamplePatternSGIS
      *iv_return = glSamplePatternSGIS;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case 'o':
    if (memEQ(name, "glEndPerfMonitorAMD", 19)) {
    /*                             ^           */
#ifdef glEndPerfMonitorAMD
      *iv_return = glEndPerfMonitorAMD;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glSecondaryColor3bv", 19)) {
    /*                             ^           */
#ifdef glSecondaryColor3bv
      *iv_return = glSecondaryColor3bv;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glSecondaryColor3dv", 19)) {
    /*                             ^           */
#ifdef glSecondaryColor3dv
      *iv_return = glSecondaryColor3dv;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glSecondaryColor3fv", 19)) {
    /*                             ^           */
#ifdef glSecondaryColor3fv
      *iv_return = glSecondaryColor3fv;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glSecondaryColor3iv", 19)) {
    /*                             ^           */
#ifdef glSecondaryColor3iv
      *iv_return = glSecondaryColor3iv;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glSecondaryColor3sv", 19)) {
    /*                             ^           */
#ifdef glSecondaryColor3sv
      *iv_return = glSecondaryColor3sv;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glSecondaryColor3ub", 19)) {
    /*                             ^           */
#ifdef glSecondaryColor3ub
      *iv_return = glSecondaryColor3ub;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glSecondaryColor3ui", 19)) {
    /*                             ^           */
#ifdef glSecondaryColor3ui
      *iv_return = glSecondaryColor3ui;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glSecondaryColor3us", 19)) {
    /*                             ^           */
#ifdef glSecondaryColor3us
      *iv_return = glSecondaryColor3us;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glWaitVkSemaphoreNV", 19)) {
    /*                             ^           */
#ifdef glWaitVkSemaphoreNV
      *iv_return = glWaitVkSemaphoreNV;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case 'p':
    if (memEQ(name, "GL_ARB_point_sprite", 19)) {
    /*                             ^           */
#ifdef GL_ARB_point_sprite
      *iv_return = GL_ARB_point_sprite;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_NV_video_capture", 19)) {
    /*                             ^           */
#ifdef GL_NV_video_capture
      *iv_return = GL_NV_video_capture;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_SGIX_async_pixel", 19)) {
    /*                             ^           */
#ifdef GL_SGIX_async_pixel
      *iv_return = GL_SGIX_async_pixel;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case 'r':
    if (memEQ(name, "GLEW_ARB_texture_rg", 19)) {
    /*                             ^           */
#ifdef GLEW_ARB_texture_rg
      *iv_return = GLEW_ARB_texture_rg;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GLEW_SGIX_interlace", 19)) {
    /*                             ^           */
#ifdef GLEW_SGIX_interlace
      *iv_return = GLEW_SGIX_interlace;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_SGIS_color_range", 19)) {
    /*                             ^           */
#ifdef GL_SGIS_color_range
      *iv_return = GL_SGIS_color_range;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_WIN_specular_fog", 19)) {
    /*                             ^           */
#ifdef GL_WIN_specular_fog
      *iv_return = GL_WIN_specular_fog;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glGetVertexAttribdv", 19)) {
    /*                             ^           */
#ifdef glGetVertexAttribdv
      *iv_return = glGetVertexAttribdv;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glGetVertexAttribfv", 19)) {
    /*                             ^           */
#ifdef glGetVertexAttribfv
      *iv_return = glGetVertexAttribfv;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glGetVertexAttribiv", 19)) {
    /*                             ^           */
#ifdef glGetVertexAttribiv
      *iv_return = glGetVertexAttribiv;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glIsAsyncMarkerSGIX", 19)) {
    /*                             ^           */
#ifdef glIsAsyncMarkerSGIX
      *iv_return = glIsAsyncMarkerSGIX;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glPathParameterfvNV", 19)) {
    /*                             ^           */
#ifdef glPathParameterfvNV
      *iv_return = glPathParameterfvNV;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glPathParameterivNV", 19)) {
    /*                             ^           */
#ifdef glPathParameterivNV
      *iv_return = glPathParameterivNV;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glProgramUniform1dv", 19)) {
    /*                             ^           */
#ifdef glProgramUniform1dv
      *iv_return = glProgramUniform1dv;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glProgramUniform1fv", 19)) {
    /*                             ^           */
#ifdef glProgramUniform1fv
      *iv_return = glProgramUniform1fv;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glProgramUniform1iv", 19)) {
    /*                             ^           */
#ifdef glProgramUniform1iv
      *iv_return = glProgramUniform1iv;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glProgramUniform1ui", 19)) {
    /*                             ^           */
#ifdef glProgramUniform1ui
      *iv_return = glProgramUniform1ui;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glProgramUniform2dv", 19)) {
    /*                             ^           */
#ifdef glProgramUniform2dv
      *iv_return = glProgramUniform2dv;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glProgramUniform2fv", 19)) {
    /*                             ^           */
#ifdef glProgramUniform2fv
      *iv_return = glProgramUniform2fv;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glProgramUniform2iv", 19)) {
    /*                             ^           */
#ifdef glProgramUniform2iv
      *iv_return = glProgramUniform2iv;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glProgramUniform2ui", 19)) {
    /*                             ^           */
#ifdef glProgramUniform2ui
      *iv_return = glProgramUniform2ui;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glProgramUniform3dv", 19)) {
    /*                             ^           */
#ifdef glProgramUniform3dv
      *iv_return = glProgramUniform3dv;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glProgramUniform3fv", 19)) {
    /*                             ^           */
#ifdef glProgramUniform3fv
      *iv_return = glProgramUniform3fv;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glProgramUniform3iv", 19)) {
    /*                             ^           */
#ifdef glProgramUniform3iv
      *iv_return = glProgramUniform3iv;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glProgramUniform3ui", 19)) {
    /*                             ^           */
#ifdef glProgramUniform3ui
      *iv_return = glProgramUniform3ui;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glProgramUniform4dv", 19)) {
    /*                             ^           */
#ifdef glProgramUniform4dv
      *iv_return = glProgramUniform4dv;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glProgramUniform4fv", 19)) {
    /*                             ^           */
#ifdef glProgramUniform4fv
      *iv_return = glProgramUniform4fv;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glProgramUniform4iv", 19)) {
    /*                             ^           */
#ifdef glProgramUniform4iv
      *iv_return = glProgramUniform4iv;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glProgramUniform4ui", 19)) {
    /*                             ^           */
#ifdef glProgramUniform4ui
      *iv_return = glProgramUniform4ui;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case 's':
    if (memEQ(name, "glBindBufferBaseEXT", 19)) {
    /*                             ^           */
#ifdef glBindBufferBaseEXT
      *iv_return = glBindBufferBaseEXT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glMatrixIndexusvARB", 19)) {
    /*                             ^           */
#ifdef glMatrixIndexusvARB
      *iv_return = glMatrixIndexusvARB;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glResizeBuffersMESA", 19)) {
    /*                             ^           */
#ifdef glResizeBuffersMESA
      *iv_return = glResizeBuffersMESA;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case 't':
    if (memEQ(name, "GLEW_ARB_robustness", 19)) {
    /*                             ^           */
#ifdef GLEW_ARB_robustness
      *iv_return = GLEW_ARB_robustness;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GLEW_KHR_robustness", 19)) {
    /*                             ^           */
#ifdef GLEW_KHR_robustness
      *iv_return = GLEW_KHR_robustness;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_NV_vdpau_interop", 19)) {
    /*                             ^           */
#ifdef GL_NV_vdpau_interop
      *iv_return = GL_NV_vdpau_interop;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glBindImageTextures", 19)) {
    /*                             ^           */
#ifdef glBindImageTextures
      *iv_return = glBindImageTextures;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glFragmentLightfEXT", 19)) {
    /*                             ^           */
#ifdef glFragmentLightfEXT
      *iv_return = glFragmentLightfEXT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glFragmentLightiEXT", 19)) {
    /*                             ^           */
#ifdef glFragmentLightiEXT
      *iv_return = glFragmentLightiEXT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glGetTexParameterxv", 19)) {
    /*                             ^           */
#ifdef glGetTexParameterxv
      *iv_return = glGetTexParameterxv;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glSeparableFilter2D", 19)) {
    /*                             ^           */
#ifdef glSeparableFilter2D
      *iv_return = glSeparableFilter2D;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case 'u':
    if (memEQ(name, "GLEW_SGIS_texture4D", 19)) {
    /*                             ^           */
#ifdef GLEW_SGIS_texture4D
      *iv_return = GLEW_SGIS_texture4D;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_AMD_debug_output", 19)) {
    /*                             ^           */
#ifdef GL_AMD_debug_output
      *iv_return = GL_AMD_debug_output;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_ARB_debug_output", 19)) {
    /*                             ^           */
#ifdef GL_ARB_debug_output
      *iv_return = GL_ARB_debug_output;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glEndVideoCaptureNV", 19)) {
    /*                             ^           */
#ifdef glEndVideoCaptureNV
      *iv_return = glEndVideoCaptureNV;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glPathStencilFuncNV", 19)) {
    /*                             ^           */
#ifdef glPathStencilFuncNV
      *iv_return = glPathStencilFuncNV;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glStencilOpValueAMD", 19)) {
    /*                             ^           */
#ifdef glStencilOpValueAMD
      *iv_return = glStencilOpValueAMD;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case 'v':
    if (memEQ(name, "GLEW_OVR_multiview2", 19)) {
    /*                             ^           */
#ifdef GLEW_OVR_multiview2
      *iv_return = GLEW_OVR_multiview2;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_NV_present_video", 19)) {
    /*                             ^           */
#ifdef GL_NV_present_video
      *iv_return = GL_NV_present_video;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case 'w':
    if (memEQ(name, "GLEW_ARB_window_pos", 19)) {
    /*                             ^           */
#ifdef GLEW_ARB_window_pos
      *iv_return = GLEW_ARB_window_pos;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case 'x':
    if (memEQ(name, "GLEW_EXT_subtexture", 19)) {
    /*                             ^           */
#ifdef GLEW_EXT_subtexture
      *iv_return = GLEW_EXT_subtexture;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_ARB_multitexture", 19)) {
    /*                             ^           */
#ifdef GL_ARB_multitexture
      *iv_return = GL_ARB_multitexture;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_EXT_copy_texture", 19)) {
    /*                             ^           */
#ifdef GL_EXT_copy_texture
      *iv_return = GL_EXT_copy_texture;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_SGIX_fog_texture", 19)) {
    /*                             ^           */
#ifdef GL_SGIX_fog_texture
      *iv_return = GL_SGIX_fog_texture;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glGetQueryIndexediv", 19)) {
    /*                             ^           */
#ifdef glGetQueryIndexediv
      *iv_return = glGetQueryIndexediv;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glViewportIndexedfv", 19)) {
    /*                             ^           */
#ifdef glViewportIndexedfv
      *iv_return = glViewportIndexedfv;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case 'z':
    if (memEQ(name, "glViewportSwizzleNV", 19)) {
    /*                             ^           */
#ifdef glViewportSwizzleNV
      *iv_return = glViewportSwizzleNV;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  }
  return PERL_constant_NOTFOUND;
}

static int
constant_20 (pTHX_ const char *name, IV *iv_return) {
  /* When generated this function returned values for the list of names given
     here.  However, subsequent manual editing may have added or removed some.
     GLEW_APPLE_row_bytes GLEW_APPLE_ycbcr_422 GLEW_ARB_copy_buffer
     GLEW_ARB_depth_clamp GLEW_ARB_gpu_shader5 GLEW_ARB_multisample
     GLEW_ARB_timer_query GLEW_EXT_blend_color GLEW_EXT_convolution
     GLEW_EXT_cull_vertex GLEW_EXT_debug_label GLEW_EXT_gpu_shader4
     GLEW_EXT_multisample GLEW_EXT_texture_env GLEW_EXT_timer_query
     GLEW_IBM_cull_vertex GLEW_IBM_static_data GLEW_MESA_window_pos
     GLEW_NV_blend_square GLEW_NV_command_list GLEW_NV_draw_texture
     GLEW_NV_float_buffer GLEW_NV_fog_distance GLEW_NV_gpu_program4
     GLEW_NV_gpu_program5 GLEW_NV_point_sprite GLEW_OES_read_format
     GLEW_SGIX_fog_offset GLEW_SGI_color_table GLEW_SUN_slice_accum
     GL_ACCUM_CLEAR_VALUE GL_ACTIVE_ATTRIBUTES GL_ADJACENT_PAIRS_NV
     GL_ALPHA_FLOAT16_ATI GL_ALPHA_FLOAT32_ATI GL_ALPHA_INTEGER_EXT
     GL_ALPHA_SIGNED_SGIX GL_AMD_pinned_memory GL_ANGLE_timer_query
     GL_ARB_base_instance GL_ARB_clear_texture GL_ARB_compatibility
     GL_ARB_cull_distance GL_ARB_depth_texture GL_ARB_draw_indirect
     GL_ARB_shader_ballot GL_ARB_sparse_buffer GL_ARB_texture_float
     GL_ARB_vertex_shader GL_ASYNC_MARKER_SGIX GL_ATI_element_array
     GL_ATI_texture_float GL_BLEND_DST_RGB_EXT GL_BLEND_SRC_RGB_EXT
     GL_BUFFER_ACCESS_ARB GL_BUFFER_MAPPED_ARB GL_BUFFER_MAP_LENGTH
     GL_BUFFER_MAP_OFFSET GL_BUFFER_OBJECT_EXT GL_CLAMP_TO_EDGE_EXT
     GL_CLIP_FAR_HINT_PGI GL_COLOR_ATTACHMENT0 GL_COLOR_ATTACHMENT1
     GL_COLOR_ATTACHMENT2 GL_COLOR_ATTACHMENT3 GL_COLOR_ATTACHMENT4
     GL_COLOR_ATTACHMENT5 GL_COLOR_ATTACHMENT6 GL_COLOR_ATTACHMENT7
     GL_COLOR_ATTACHMENT8 GL_COLOR_ATTACHMENT9 GL_COLOR_CLEAR_VALUE
     GL_COLOR_FLOAT_APPLE GL_COLOR_INDEX12_EXT GL_COLOR_INDEX16_EXT
     GL_COLOR_TABLE_SCALE GL_COLOR_TABLE_WIDTH GL_COMBINER_INPUT_NV
     GL_COMBINER_SCALE_NV GL_COMBINE_ALPHA_ARB GL_COMBINE_ALPHA_EXT
     GL_CONIC_CURVE_TO_NV GL_CONVOLUTION_WIDTH GL_COORD_REPLACE_ARB
     GL_COPY_WRITE_BUFFER GL_COUNTER_RANGE_AMD GL_CUBIC_CURVE_TO_NV
     GL_CURRENT_ATTRIB_NV GL_CURRENT_FOG_COORD GL_CURRENT_MATRIX_NV
     GL_CURRENT_QUERY_ARB GL_DEBUG_TYPE_MARKER GL_DEPTH32F_STENCIL8
     GL_DEPTH_CLEAR_VALUE GL_DEPTH_COMPONENT16 GL_DEPTH_COMPONENT24
     GL_DEPTH_COMPONENT32 GL_DEPTH_STENCIL_EXT GL_DOUBLE_MAT2x3_EXT
     GL_DOUBLE_MAT2x4_EXT GL_DOUBLE_MAT3x2_EXT GL_DOUBLE_MAT3x4_EXT
     GL_DOUBLE_MAT4x2_EXT GL_DOUBLE_MAT4x3_EXT GL_DRAW_BUFFER10_ARB
     GL_DRAW_BUFFER10_ATI GL_DRAW_BUFFER11_ARB GL_DRAW_BUFFER11_ATI
     GL_DRAW_BUFFER12_ARB GL_DRAW_BUFFER12_ATI GL_DRAW_BUFFER13_ARB
     GL_DRAW_BUFFER13_ATI GL_DRAW_BUFFER14_ARB GL_DRAW_BUFFER14_ATI
     GL_DRAW_BUFFER15_ARB GL_DRAW_BUFFER15_ATI GL_DRAW_PIXELS_APPLE
     GL_ELEMENT_ARRAY_ATI GL_EXT_draw_buffers2 GL_EXT_index_texture
     GL_EXT_light_texture GL_EXT_packed_pixels GL_EXT_texture_array
     GL_EXT_texture_snorm GL_EXT_vertex_shader GL_FILL_RECTANGLE_NV
     GL_FRAGMENT_INPUT_NV GL_FRAMEBUFFER_BLEND GL_FUNC_SUBTRACT_EXT
     GL_GENERIC_ATTRIB_NV GL_GREEN_INTEGER_EXT GL_HP_occlusion_test
     GL_HSL_LUMINOSITY_NV GL_HSL_SATURATION_NV GL_IMAGE_2D_RECT_EXT
     GL_IMAGE_CLASS_1_X_8 GL_IMAGE_CLASS_2_X_8 GL_IMAGE_CLASS_4_X_8
     GL_INDEX_CLEAR_VALUE GL_INTEL_map_texture GL_INTENSITY16UI_EXT
     GL_INTENSITY16_SNORM GL_INTENSITY32UI_EXT GL_INT_IMAGE_2D_RECT
     GL_INVALID_OPERATION GL_KTX_buffer_region GL_LOG_WARNING_REGAL
     GL_LUMINANCE16UI_EXT GL_LUMINANCE16_SNORM GL_LUMINANCE32UI_EXT
     GL_LUMINANCE4_ALPHA4 GL_LUMINANCE6_ALPHA2 GL_LUMINANCE8_ALPHA8
     GL_MAGNITUDE_BIAS_NV GL_MAP1_BINORMAL_EXT GL_MAP2_BINORMAL_EXT
     GL_MAX_ELEMENT_INDEX GL_MAX_IMAGE_SAMPLES GL_MAX_LGPU_GPUS_NVX
     GL_MAX_SAMPLES_ANGLE GL_MAX_TEXTURE_UNITS GL_MAX_VIEWPORT_DIMS
     GL_MINMAX_FORMAT_EXT GL_MITER_TRUNCATE_NV GL_MODULATE_ADD_ATIX
     GL_MOVE_TO_RESETS_NV GL_MULTICAST_GPUS_NV GL_NORMAL_ARRAY_TYPE
     GL_NUM_SAMPLE_COUNTS GL_NV_deep_texture3D GL_NV_fill_rectangle
     GL_NV_path_rendering GL_NV_texture_shader GL_NV_vertex_program
     GL_OBJECT_POINT_SGIS GL_OPERAND3_ALPHA_NV GL_OP_EXP_BASE_2_EXT
     GL_OP_LOG_BASE_2_EXT GL_OP_RECIP_SQRT_EXT GL_OUTPUT_COLOR0_EXT
     GL_OUTPUT_COLOR1_EXT GL_OUTPUT_VERTEX_EXT GL_PACK_IMAGE_HEIGHT
     GL_PACK_RESAMPLE_OML GL_PALETTE4_RGB8_OES GL_PALETTE8_RGB8_OES
     GL_PATH_DASH_CAPS_NV GL_PATH_FILL_MASK_NV GL_PATH_FILL_MODE_NV
     GL_PATH_FORMAT_PS_NV GL_PATH_GEN_COEFF_NV GL_PIXEL_PACK_BUFFER
     GL_POINT_SMOOTH_HINT GL_PRIMARY_COLOR_ARB GL_PRIMARY_COLOR_EXT
     GL_PRIMITIVE_RESTART GL_PROGRAM_LENGTH_NV GL_PROGRAM_SEPARABLE
     GL_PROGRAM_STRING_NV GL_PROGRAM_TARGET_NV GL_PROJECTION_MATRIX
     GL_PROXY_COLOR_TABLE GL_R1UI_C4UB_V3F_SUN GL_REFLECTION_MAP_NV
     GL_REPLACE_VALUE_AMD GL_RGB16_SIGNED_SGIX GL_RGB_FLOAT16_APPLE
     GL_RGB_FLOAT32_APPLE GL_RGB_RAW_422_APPLE GL_SAMPLER_1D_SHADOW
     GL_SAMPLER_2D_SHADOW GL_SAMPLE_MASK_VALUE GL_SGIS_fog_function
     GL_SGIX_flush_raster GL_SHADER_IMAGE_LOAD GL_SHADER_OBJECT_ARB
     GL_SHADER_OBJECT_EXT GL_SIGNED_NORMALIZED GL_SOURCE0_ALPHA_ARB
     GL_SOURCE0_ALPHA_EXT GL_SOURCE1_ALPHA_ARB GL_SOURCE1_ALPHA_EXT
     GL_SOURCE2_ALPHA_ARB GL_SOURCE2_ALPHA_EXT GL_SPIR_V_BINARY_ARB
     GL_STENCIL_BACK_FAIL GL_STENCIL_BACK_FUNC GL_STENCIL_WRITEMASK
     GL_SUN_triangle_list GL_SURFACE_MAPPED_NV GL_SYNC_CL_EVENT_ARB
     GL_TANGENT_ARRAY_EXT GL_TEXCOORD1_BIT_PGI GL_TEXCOORD2_BIT_PGI
     GL_TEXCOORD3_BIT_PGI GL_TEXCOORD4_BIT_PGI GL_TEXTURE_BLUE_SIZE
     GL_TEXTURE_BLUE_TYPE GL_TEXTURE_DEPTH_EXT GL_TEXTURE_ENV_COLOR
     GL_TEXTURE_LIGHT_EXT GL_TEXTURE_MAX_LEVEL GL_TEXTURE_RECTANGLE
     GL_TEXTURE_SHADER_NV GL_TEXTURE_SWIZZLE_A GL_TEXTURE_SWIZZLE_B
     GL_TEXTURE_SWIZZLE_G GL_TEXTURE_SWIZZLE_R GL_TRIANGLE_LIST_SUN
     GL_TRIANGLE_MESH_SUN GL_UNPACK_ROW_LENGTH GL_UNPACK_SWAP_BYTES
     GL_UNSIGNED_INT16_NV GL_UNSIGNED_INT64_NV GL_UNSIGNED_INT_24_8
     GL_UNSIGNED_INT_VEC2 GL_UNSIGNED_INT_VEC3 GL_UNSIGNED_INT_VEC4
     GL_VARIANT_ARRAY_EXT GL_VARIANT_VALUE_EXT GL_VERTEX_ARRAY_SIZE
     GL_VERTEX_ARRAY_TYPE GL_VERTEX_PROGRAM_NV GL_VERTEX_SHADER_ARB
     GL_VERTEX_SHADER_BIT GL_VERTEX_SHADER_EXT GL_VERTEX_SOURCE_ATI
     GL_VERTEX_SUBROUTINE GL_VIBRANCE_SCALE_NV GL_VIEW_CLASS_8_BITS
     GL_WIN_phong_shading GL_YCBAYCR8A_4224_NV glAddSwapHintRectWIN
     glBindAttribLocation glBindBufferOffsetNV glBindBufferRangeEXT
     glBindFramebufferEXT glBinormalPointerEXT glBlendFuncSeparatei
     glBlitFramebufferEXT glClearBufferSubData glColor3fVertex3fSUN
     glColorPointervINTEL glCopyImageSubDataNV glCreateFramebuffers
     glCreateVertexArrays glCullParameterdvEXT glCullParameterfvEXT
     glDebugMessageInsert glDeleteBufferRegion glDeleteFramebuffers
     glDeleteQueriesANGLE glDeleteVertexArrays glDrawArraysIndirect
     glEdgeFlagPointerEXT glEndVertexShaderEXT glFogCoordPointerEXT
     glFragmentLightfSGIX glFragmentLightfvEXT glFragmentLightiSGIX
     glFragmentLightivEXT glFramebufferTexture glGenFramebuffersEXT
     glGenPerfMonitorsAMD glGetActiveAttribARB glGetActiveVaryingNV
     glGetAttachedShaders glGetCommandHeaderNV glGetDebugMessageLog
     glGetMultisamplefvNV glGetPathDashArrayNV glGetProgramStringNV
     glGetQueryObjecti64v glGetSeparableFilter glGetShaderSourceARB
     glGetSubroutineIndex glGetTexParameterIiv glGetTextureHandleNV
     glGetTextureImageEXT glGetTextureSubImage glGetTrackMatrixivNV
     glGetUniformLocation glGetUniformui64vARB glGetVertexAttribIiv
     glGetVertexAttribLdv glGetnPixelMapuivARB glGetnPixelMapusvARB
     glGetnUniformi64vARB glInsertComponentEXT glInterpolatePathsNV
     glInvalidateTexImage glIsBufferResidentNV glIsOcclusionQueryNV
     glIsVertexArrayAPPLE glMapControlPointsNV glMapObjectBufferATI
     glMultiDrawArraysEXT glMultiTexCoord1dARB glMultiTexCoord1fARB
     glMultiTexCoord1hvNV glMultiTexCoord1iARB glMultiTexCoord1sARB
     glMultiTexCoord2dARB glMultiTexCoord2fARB glMultiTexCoord2hvNV
     glMultiTexCoord2iARB glMultiTexCoord2sARB glMultiTexCoord3dARB
     glMultiTexCoord3fARB glMultiTexCoord3hvNV glMultiTexCoord3iARB
     glMultiTexCoord3sARB glMultiTexCoord4dARB glMultiTexCoord4fARB
     glMultiTexCoord4hvNV glMultiTexCoord4iARB glMultiTexCoord4sARB
     glMultiTexCoordP1uiv glMultiTexCoordP2uiv glMultiTexCoordP3uiv
     glMultiTexCoordP4uiv glMultiTexImage1DEXT glMultiTexImage2DEXT
     glMultiTexImage3DEXT glMulticastBarrierNV glNamedBufferDataEXT
     glNamedBufferStorage glNamedBufferSubData glNewObjectBufferATI
     glNormalStream3bvATI glNormalStream3dvATI glNormalStream3fvATI
     glNormalStream3ivATI glNormalStream3svATI glPointParameterfARB
     glPointParameterfEXT glPointParameterivNV glPrimitiveRestartNV
     glProgramUniform1uiv glProgramUniform2uiv glProgramUniform3uiv
     glProgramUniform4uiv glProvokingVertexEXT glPushGroupMarkerEXT
     glReadVideoPixelsSUN glReferencePlaneSGIX glSamplerParameterfv
     glSamplerParameteriv glSecondaryColor3hNV glSecondaryColor3ubv
     glSecondaryColor3uiv glSecondaryColor3usv glSecondaryColorP3ui
     glSharpenTexFuncSGIS glTexCoordPointerEXT glTexParameterIivEXT
     glTextureBufferRange glTextureMaterialEXT glTextureParameterfv
     glTextureParameteriv glUniformMatrix2x3dv glUniformMatrix2x3fv
     glUniformMatrix2x4dv glUniformMatrix2x4fv glUniformMatrix3x2dv
     glUniformMatrix3x2fv glUniformMatrix3x4dv glUniformMatrix3x4fv
     glUniformMatrix4x2dv glUniformMatrix4x2fv glUniformMatrix4x3dv
     glUniformMatrix4x3fv glVDPAUMapSurfacesNV glValidateProgramARB
     glVertexArrayRangeNV glVertexAttrib1dvARB glVertexAttrib1fvARB
     glVertexAttrib1svARB glVertexAttrib2dvARB glVertexAttrib2fvARB
     glVertexAttrib2svARB glVertexAttrib3dvARB glVertexAttrib3fvARB
     glVertexAttrib3svARB glVertexAttrib4bvARB glVertexAttrib4dvARB
     glVertexAttrib4fvARB glVertexAttrib4ivARB glVertexAttrib4svARB
     glVertexAttrib4ubvNV glVertexAttribFormat glVertexAttribI1iEXT
     glVertexAttribI2iEXT glVertexAttribI3iEXT glVertexAttribI4iEXT
     glVertexAttribL1dEXT glVertexAttribL2dEXT glVertexAttribL3dEXT
     glVertexAttribL4dEXT glVertexAttribs1dvNV glVertexAttribs1fvNV
     glVertexAttribs1hvNV glVertexAttribs1svNV glVertexAttribs2dvNV
     glVertexAttribs2fvNV glVertexAttribs2hvNV glVertexAttribs2svNV
     glVertexAttribs3dvNV glVertexAttribs3fvNV glVertexAttribs3hvNV
     glVertexAttribs3svNV glVertexAttribs4dvNV glVertexAttribs4fvNV
     glVertexAttribs4hvNV glVertexAttribs4svNV glVertexBlendEnvfATI
     glVertexBlendEnviATI glVertexStream1dvATI glVertexStream1fvATI
     glVertexStream1ivATI glVertexStream1svATI glVertexStream2dvATI
     glVertexStream2fvATI glVertexStream2ivATI glVertexStream2svATI
     glVertexStream3dvATI glVertexStream3fvATI glVertexStream3ivATI
     glVertexStream3svATI glVertexStream4dvATI glVertexStream4fvATI
     glVertexStream4ivATI glVertexStream4svATI */
  /* Offset 15 gives the best switch position.  */
  switch (name[15]) {
  case '0':
    if (memEQ(name, "GL_DRAW_BUFFER10_ARB", 20)) {
    /*                              ^           */
#ifdef GL_DRAW_BUFFER10_ARB
      *iv_return = GL_DRAW_BUFFER10_ARB;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_DRAW_BUFFER10_ATI", 20)) {
    /*                              ^           */
#ifdef GL_DRAW_BUFFER10_ATI
      *iv_return = GL_DRAW_BUFFER10_ATI;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_OUTPUT_COLOR0_EXT", 20)) {
    /*                              ^           */
#ifdef GL_OUTPUT_COLOR0_EXT
      *iv_return = GL_OUTPUT_COLOR0_EXT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case '1':
    if (memEQ(name, "GL_DRAW_BUFFER11_ARB", 20)) {
    /*                              ^           */
#ifdef GL_DRAW_BUFFER11_ARB
      *iv_return = GL_DRAW_BUFFER11_ARB;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_DRAW_BUFFER11_ATI", 20)) {
    /*                              ^           */
#ifdef GL_DRAW_BUFFER11_ATI
      *iv_return = GL_DRAW_BUFFER11_ATI;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_IMAGE_CLASS_1_X_8", 20)) {
    /*                              ^           */
#ifdef GL_IMAGE_CLASS_1_X_8
      *iv_return = GL_IMAGE_CLASS_1_X_8;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_OUTPUT_COLOR1_EXT", 20)) {
    /*                              ^           */
#ifdef GL_OUTPUT_COLOR1_EXT
      *iv_return = GL_OUTPUT_COLOR1_EXT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_UNSIGNED_INT16_NV", 20)) {
    /*                              ^           */
#ifdef GL_UNSIGNED_INT16_NV
      *iv_return = GL_UNSIGNED_INT16_NV;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glMultiTexCoord1dARB", 20)) {
    /*                              ^           */
#ifdef glMultiTexCoord1dARB
      *iv_return = glMultiTexCoord1dARB;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glMultiTexCoord1fARB", 20)) {
    /*                              ^           */
#ifdef glMultiTexCoord1fARB
      *iv_return = glMultiTexCoord1fARB;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glMultiTexCoord1hvNV", 20)) {
    /*                              ^           */
#ifdef glMultiTexCoord1hvNV
      *iv_return = glMultiTexCoord1hvNV;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glMultiTexCoord1iARB", 20)) {
    /*                              ^           */
#ifdef glMultiTexCoord1iARB
      *iv_return = glMultiTexCoord1iARB;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glMultiTexCoord1sARB", 20)) {
    /*                              ^           */
#ifdef glMultiTexCoord1sARB
      *iv_return = glMultiTexCoord1sARB;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glMultiTexImage1DEXT", 20)) {
    /*                              ^           */
#ifdef glMultiTexImage1DEXT
      *iv_return = glMultiTexImage1DEXT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glVertexAttribI1iEXT", 20)) {
    /*                              ^           */
#ifdef glVertexAttribI1iEXT
      *iv_return = glVertexAttribI1iEXT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glVertexAttribL1dEXT", 20)) {
    /*                              ^           */
#ifdef glVertexAttribL1dEXT
      *iv_return = glVertexAttribL1dEXT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glVertexAttribs1dvNV", 20)) {
    /*                              ^           */
#ifdef glVertexAttribs1dvNV
      *iv_return = glVertexAttribs1dvNV;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glVertexAttribs1fvNV", 20)) {
    /*                              ^           */
#ifdef glVertexAttribs1fvNV
      *iv_return = glVertexAttribs1fvNV;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glVertexAttribs1hvNV", 20)) {
    /*                              ^           */
#ifdef glVertexAttribs1hvNV
      *iv_return = glVertexAttribs1hvNV;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glVertexAttribs1svNV", 20)) {
    /*                              ^           */
#ifdef glVertexAttribs1svNV
      *iv_return = glVertexAttribs1svNV;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case '2':
    if (memEQ(name, "GL_ALPHA_FLOAT32_ATI", 20)) {
    /*                              ^           */
#ifdef GL_ALPHA_FLOAT32_ATI
      *iv_return = GL_ALPHA_FLOAT32_ATI;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_COLOR_INDEX12_EXT", 20)) {
    /*                              ^           */
#ifdef GL_COLOR_INDEX12_EXT
      *iv_return = GL_COLOR_INDEX12_EXT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_DOUBLE_MAT3x2_EXT", 20)) {
    /*                              ^           */
#ifdef GL_DOUBLE_MAT3x2_EXT
      *iv_return = GL_DOUBLE_MAT3x2_EXT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_DOUBLE_MAT4x2_EXT", 20)) {
    /*                              ^           */
#ifdef GL_DOUBLE_MAT4x2_EXT
      *iv_return = GL_DOUBLE_MAT4x2_EXT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_DRAW_BUFFER12_ARB", 20)) {
    /*                              ^           */
#ifdef GL_DRAW_BUFFER12_ARB
      *iv_return = GL_DRAW_BUFFER12_ARB;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_DRAW_BUFFER12_ATI", 20)) {
    /*                              ^           */
#ifdef GL_DRAW_BUFFER12_ATI
      *iv_return = GL_DRAW_BUFFER12_ATI;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_IMAGE_CLASS_2_X_8", 20)) {
    /*                              ^           */
#ifdef GL_IMAGE_CLASS_2_X_8
      *iv_return = GL_IMAGE_CLASS_2_X_8;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_OP_EXP_BASE_2_EXT", 20)) {
    /*                              ^           */
#ifdef GL_OP_EXP_BASE_2_EXT
      *iv_return = GL_OP_EXP_BASE_2_EXT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_OP_LOG_BASE_2_EXT", 20)) {
    /*                              ^           */
#ifdef GL_OP_LOG_BASE_2_EXT
      *iv_return = GL_OP_LOG_BASE_2_EXT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_YCBAYCR8A_4224_NV", 20)) {
    /*                              ^           */
#ifdef GL_YCBAYCR8A_4224_NV
      *iv_return = GL_YCBAYCR8A_4224_NV;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glMultiTexCoord2dARB", 20)) {
    /*                              ^           */
#ifdef glMultiTexCoord2dARB
      *iv_return = glMultiTexCoord2dARB;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glMultiTexCoord2fARB", 20)) {
    /*                              ^           */
#ifdef glMultiTexCoord2fARB
      *iv_return = glMultiTexCoord2fARB;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glMultiTexCoord2hvNV", 20)) {
    /*                              ^           */
#ifdef glMultiTexCoord2hvNV
      *iv_return = glMultiTexCoord2hvNV;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glMultiTexCoord2iARB", 20)) {
    /*                              ^           */
#ifdef glMultiTexCoord2iARB
      *iv_return = glMultiTexCoord2iARB;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glMultiTexCoord2sARB", 20)) {
    /*                              ^           */
#ifdef glMultiTexCoord2sARB
      *iv_return = glMultiTexCoord2sARB;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glMultiTexImage2DEXT", 20)) {
    /*                              ^           */
#ifdef glMultiTexImage2DEXT
      *iv_return = glMultiTexImage2DEXT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glUniformMatrix2x3dv", 20)) {
    /*                              ^           */
#ifdef glUniformMatrix2x3dv
      *iv_return = glUniformMatrix2x3dv;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glUniformMatrix2x3fv", 20)) {
    /*                              ^           */
#ifdef glUniformMatrix2x3fv
      *iv_return = glUniformMatrix2x3fv;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glUniformMatrix2x4dv", 20)) {
    /*                              ^           */
#ifdef glUniformMatrix2x4dv
      *iv_return = glUniformMatrix2x4dv;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glUniformMatrix2x4fv", 20)) {
    /*                              ^           */
#ifdef glUniformMatrix2x4fv
      *iv_return = glUniformMatrix2x4fv;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glVertexAttribI2iEXT", 20)) {
    /*                              ^           */
#ifdef glVertexAttribI2iEXT
      *iv_return = glVertexAttribI2iEXT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glVertexAttribL2dEXT", 20)) {
    /*                              ^           */
#ifdef glVertexAttribL2dEXT
      *iv_return = glVertexAttribL2dEXT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glVertexAttribs2dvNV", 20)) {
    /*                              ^           */
#ifdef glVertexAttribs2dvNV
      *iv_return = glVertexAttribs2dvNV;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glVertexAttribs2fvNV", 20)) {
    /*                              ^           */
#ifdef glVertexAttribs2fvNV
      *iv_return = glVertexAttribs2fvNV;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glVertexAttribs2hvNV", 20)) {
    /*                              ^           */
#ifdef glVertexAttribs2hvNV
      *iv_return = glVertexAttribs2hvNV;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glVertexAttribs2svNV", 20)) {
    /*                              ^           */
#ifdef glVertexAttribs2svNV
      *iv_return = glVertexAttribs2svNV;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case '3':
    if (memEQ(name, "GL_DOUBLE_MAT2x3_EXT", 20)) {
    /*                              ^           */
#ifdef GL_DOUBLE_MAT2x3_EXT
      *iv_return = GL_DOUBLE_MAT2x3_EXT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_DOUBLE_MAT4x3_EXT", 20)) {
    /*                              ^           */
#ifdef GL_DOUBLE_MAT4x3_EXT
      *iv_return = GL_DOUBLE_MAT4x3_EXT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_DRAW_BUFFER13_ARB", 20)) {
    /*                              ^           */
#ifdef GL_DRAW_BUFFER13_ARB
      *iv_return = GL_DRAW_BUFFER13_ARB;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_DRAW_BUFFER13_ATI", 20)) {
    /*                              ^           */
#ifdef GL_DRAW_BUFFER13_ATI
      *iv_return = GL_DRAW_BUFFER13_ATI;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glColor3fVertex3fSUN", 20)) {
    /*                              ^           */
#ifdef glColor3fVertex3fSUN
      *iv_return = glColor3fVertex3fSUN;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glMultiTexCoord3dARB", 20)) {
    /*                              ^           */
#ifdef glMultiTexCoord3dARB
      *iv_return = glMultiTexCoord3dARB;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glMultiTexCoord3fARB", 20)) {
    /*                              ^           */
#ifdef glMultiTexCoord3fARB
      *iv_return = glMultiTexCoord3fARB;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glMultiTexCoord3hvNV", 20)) {
    /*                              ^           */
#ifdef glMultiTexCoord3hvNV
      *iv_return = glMultiTexCoord3hvNV;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glMultiTexCoord3iARB", 20)) {
    /*                              ^           */
#ifdef glMultiTexCoord3iARB
      *iv_return = glMultiTexCoord3iARB;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glMultiTexCoord3sARB", 20)) {
    /*                              ^           */
#ifdef glMultiTexCoord3sARB
      *iv_return = glMultiTexCoord3sARB;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glMultiTexImage3DEXT", 20)) {
    /*                              ^           */
#ifdef glMultiTexImage3DEXT
      *iv_return = glMultiTexImage3DEXT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glUniformMatrix3x2dv", 20)) {
    /*                              ^           */
#ifdef glUniformMatrix3x2dv
      *iv_return = glUniformMatrix3x2dv;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glUniformMatrix3x2fv", 20)) {
    /*                              ^           */
#ifdef glUniformMatrix3x2fv
      *iv_return = glUniformMatrix3x2fv;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glUniformMatrix3x4dv", 20)) {
    /*                              ^           */
#ifdef glUniformMatrix3x4dv
      *iv_return = glUniformMatrix3x4dv;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glUniformMatrix3x4fv", 20)) {
    /*                              ^           */
#ifdef glUniformMatrix3x4fv
      *iv_return = glUniformMatrix3x4fv;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glVertexAttribI3iEXT", 20)) {
    /*                              ^           */
#ifdef glVertexAttribI3iEXT
      *iv_return = glVertexAttribI3iEXT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glVertexAttribL3dEXT", 20)) {
    /*                              ^           */
#ifdef glVertexAttribL3dEXT
      *iv_return = glVertexAttribL3dEXT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glVertexAttribs3dvNV", 20)) {
    /*                              ^           */
#ifdef glVertexAttribs3dvNV
      *iv_return = glVertexAttribs3dvNV;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glVertexAttribs3fvNV", 20)) {
    /*                              ^           */
#ifdef glVertexAttribs3fvNV
      *iv_return = glVertexAttribs3fvNV;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glVertexAttribs3hvNV", 20)) {
    /*                              ^           */
#ifdef glVertexAttribs3hvNV
      *iv_return = glVertexAttribs3hvNV;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glVertexAttribs3svNV", 20)) {
    /*                              ^           */
#ifdef glVertexAttribs3svNV
      *iv_return = glVertexAttribs3svNV;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case '4':
    if (memEQ(name, "GL_DOUBLE_MAT2x4_EXT", 20)) {
    /*                              ^           */
#ifdef GL_DOUBLE_MAT2x4_EXT
      *iv_return = GL_DOUBLE_MAT2x4_EXT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_DOUBLE_MAT3x4_EXT", 20)) {
    /*                              ^           */
#ifdef GL_DOUBLE_MAT3x4_EXT
      *iv_return = GL_DOUBLE_MAT3x4_EXT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_DRAW_BUFFER14_ARB", 20)) {
    /*                              ^           */
#ifdef GL_DRAW_BUFFER14_ARB
      *iv_return = GL_DRAW_BUFFER14_ARB;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_DRAW_BUFFER14_ATI", 20)) {
    /*                              ^           */
#ifdef GL_DRAW_BUFFER14_ATI
      *iv_return = GL_DRAW_BUFFER14_ATI;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_IMAGE_CLASS_4_X_8", 20)) {
    /*                              ^           */
#ifdef GL_IMAGE_CLASS_4_X_8
      *iv_return = GL_IMAGE_CLASS_4_X_8;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glGetUniformui64vARB", 20)) {
    /*                              ^           */
#ifdef glGetUniformui64vARB
      *iv_return = glGetUniformui64vARB;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glGetnUniformi64vARB", 20)) {
    /*                              ^           */
#ifdef glGetnUniformi64vARB
      *iv_return = glGetnUniformi64vARB;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glMultiTexCoord4dARB", 20)) {
    /*                              ^           */
#ifdef glMultiTexCoord4dARB
      *iv_return = glMultiTexCoord4dARB;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glMultiTexCoord4fARB", 20)) {
    /*                              ^           */
#ifdef glMultiTexCoord4fARB
      *iv_return = glMultiTexCoord4fARB;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glMultiTexCoord4hvNV", 20)) {
    /*                              ^           */
#ifdef glMultiTexCoord4hvNV
      *iv_return = glMultiTexCoord4hvNV;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glMultiTexCoord4iARB", 20)) {
    /*                              ^           */
#ifdef glMultiTexCoord4iARB
      *iv_return = glMultiTexCoord4iARB;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glMultiTexCoord4sARB", 20)) {
    /*                              ^           */
#ifdef glMultiTexCoord4sARB
      *iv_return = glMultiTexCoord4sARB;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glUniformMatrix4x2dv", 20)) {
    /*                              ^           */
#ifdef glUniformMatrix4x2dv
      *iv_return = glUniformMatrix4x2dv;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glUniformMatrix4x2fv", 20)) {
    /*                              ^           */
#ifdef glUniformMatrix4x2fv
      *iv_return = glUniformMatrix4x2fv;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glUniformMatrix4x3dv", 20)) {
    /*                              ^           */
#ifdef glUniformMatrix4x3dv
      *iv_return = glUniformMatrix4x3dv;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glUniformMatrix4x3fv", 20)) {
    /*                              ^           */
#ifdef glUniformMatrix4x3fv
      *iv_return = glUniformMatrix4x3fv;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glVertexAttribI4iEXT", 20)) {
    /*                              ^           */
#ifdef glVertexAttribI4iEXT
      *iv_return = glVertexAttribI4iEXT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glVertexAttribL4dEXT", 20)) {
    /*                              ^           */
#ifdef glVertexAttribL4dEXT
      *iv_return = glVertexAttribL4dEXT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glVertexAttribs4dvNV", 20)) {
    /*                              ^           */
#ifdef glVertexAttribs4dvNV
      *iv_return = glVertexAttribs4dvNV;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glVertexAttribs4fvNV", 20)) {
    /*                              ^           */
#ifdef glVertexAttribs4fvNV
      *iv_return = glVertexAttribs4fvNV;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glVertexAttribs4hvNV", 20)) {
    /*                              ^           */
#ifdef glVertexAttribs4hvNV
      *iv_return = glVertexAttribs4hvNV;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glVertexAttribs4svNV", 20)) {
    /*                              ^           */
#ifdef glVertexAttribs4svNV
      *iv_return = glVertexAttribs4svNV;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case '5':
    if (memEQ(name, "GL_DRAW_BUFFER15_ARB", 20)) {
    /*                              ^           */
#ifdef GL_DRAW_BUFFER15_ARB
      *iv_return = GL_DRAW_BUFFER15_ARB;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_DRAW_BUFFER15_ATI", 20)) {
    /*                              ^           */
#ifdef GL_DRAW_BUFFER15_ATI
      *iv_return = GL_DRAW_BUFFER15_ATI;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case '6':
    if (memEQ(name, "GL_ALPHA_FLOAT16_ATI", 20)) {
    /*                              ^           */
#ifdef GL_ALPHA_FLOAT16_ATI
      *iv_return = GL_ALPHA_FLOAT16_ATI;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_COLOR_INDEX16_EXT", 20)) {
    /*                              ^           */
#ifdef GL_COLOR_INDEX16_EXT
      *iv_return = GL_COLOR_INDEX16_EXT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_UNSIGNED_INT64_NV", 20)) {
    /*                              ^           */
#ifdef GL_UNSIGNED_INT64_NV
      *iv_return = GL_UNSIGNED_INT64_NV;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case '8':
    if (memEQ(name, "GL_PALETTE4_RGB8_OES", 20)) {
    /*                              ^           */
#ifdef GL_PALETTE4_RGB8_OES
      *iv_return = GL_PALETTE4_RGB8_OES;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_PALETTE8_RGB8_OES", 20)) {
    /*                              ^           */
#ifdef GL_PALETTE8_RGB8_OES
      *iv_return = GL_PALETTE8_RGB8_OES;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case 'A':
    if (memEQ(name, "GL_COLOR_FLOAT_APPLE", 20)) {
    /*                              ^           */
#ifdef GL_COLOR_FLOAT_APPLE
      *iv_return = GL_COLOR_FLOAT_APPLE;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_COMBINE_ALPHA_ARB", 20)) {
    /*                              ^           */
#ifdef GL_COMBINE_ALPHA_ARB
      *iv_return = GL_COMBINE_ALPHA_ARB;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_COMBINE_ALPHA_EXT", 20)) {
    /*                              ^           */
#ifdef GL_COMBINE_ALPHA_EXT
      *iv_return = GL_COMBINE_ALPHA_EXT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_DEBUG_TYPE_MARKER", 20)) {
    /*                              ^           */
#ifdef GL_DEBUG_TYPE_MARKER
      *iv_return = GL_DEBUG_TYPE_MARKER;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_DRAW_PIXELS_APPLE", 20)) {
    /*                              ^           */
#ifdef GL_DRAW_PIXELS_APPLE
      *iv_return = GL_DRAW_PIXELS_APPLE;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_INVALID_OPERATION", 20)) {
    /*                              ^           */
#ifdef GL_INVALID_OPERATION
      *iv_return = GL_INVALID_OPERATION;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_MAGNITUDE_BIAS_NV", 20)) {
    /*                              ^           */
#ifdef GL_MAGNITUDE_BIAS_NV
      *iv_return = GL_MAGNITUDE_BIAS_NV;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_MAX_SAMPLES_ANGLE", 20)) {
    /*                              ^           */
#ifdef GL_MAX_SAMPLES_ANGLE
      *iv_return = GL_MAX_SAMPLES_ANGLE;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_PROJECTION_MATRIX", 20)) {
    /*                              ^           */
#ifdef GL_PROJECTION_MATRIX
      *iv_return = GL_PROJECTION_MATRIX;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_REFLECTION_MAP_NV", 20)) {
    /*                              ^           */
#ifdef GL_REFLECTION_MAP_NV
      *iv_return = GL_REFLECTION_MAP_NV;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_RGB_FLOAT16_APPLE", 20)) {
    /*                              ^           */
#ifdef GL_RGB_FLOAT16_APPLE
      *iv_return = GL_RGB_FLOAT16_APPLE;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_RGB_FLOAT32_APPLE", 20)) {
    /*                              ^           */
#ifdef GL_RGB_FLOAT32_APPLE
      *iv_return = GL_RGB_FLOAT32_APPLE;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_RGB_RAW_422_APPLE", 20)) {
    /*                              ^           */
#ifdef GL_RGB_RAW_422_APPLE
      *iv_return = GL_RGB_RAW_422_APPLE;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_SOURCE0_ALPHA_ARB", 20)) {
    /*                              ^           */
#ifdef GL_SOURCE0_ALPHA_ARB
      *iv_return = GL_SOURCE0_ALPHA_ARB;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_SOURCE0_ALPHA_EXT", 20)) {
    /*                              ^           */
#ifdef GL_SOURCE0_ALPHA_EXT
      *iv_return = GL_SOURCE0_ALPHA_EXT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_SOURCE1_ALPHA_ARB", 20)) {
    /*                              ^           */
#ifdef GL_SOURCE1_ALPHA_ARB
      *iv_return = GL_SOURCE1_ALPHA_ARB;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_SOURCE1_ALPHA_EXT", 20)) {
    /*                              ^           */
#ifdef GL_SOURCE1_ALPHA_EXT
      *iv_return = GL_SOURCE1_ALPHA_EXT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_SOURCE2_ALPHA_ARB", 20)) {
    /*                              ^           */
#ifdef GL_SOURCE2_ALPHA_ARB
      *iv_return = GL_SOURCE2_ALPHA_ARB;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_SOURCE2_ALPHA_EXT", 20)) {
    /*                              ^           */
#ifdef GL_SOURCE2_ALPHA_EXT
      *iv_return = GL_SOURCE2_ALPHA_EXT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_TEXTURE_RECTANGLE", 20)) {
    /*                              ^           */
#ifdef GL_TEXTURE_RECTANGLE
      *iv_return = GL_TEXTURE_RECTANGLE;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_VERTEX_PROGRAM_NV", 20)) {
    /*                              ^           */
#ifdef GL_VERTEX_PROGRAM_NV
      *iv_return = GL_VERTEX_PROGRAM_NV;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glDeleteQueriesANGLE", 20)) {
    /*                              ^           */
#ifdef glDeleteQueriesANGLE
      *iv_return = glDeleteQueriesANGLE;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glIsVertexArrayAPPLE", 20)) {
    /*                              ^           */
#ifdef glIsVertexArrayAPPLE
      *iv_return = glIsVertexArrayAPPLE;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case 'B':
    if (memEQ(name, "GL_ACTIVE_ATTRIBUTES", 20)) {
    /*                              ^           */
#ifdef GL_ACTIVE_ATTRIBUTES
      *iv_return = GL_ACTIVE_ATTRIBUTES;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_BLEND_DST_RGB_EXT", 20)) {
    /*                              ^           */
#ifdef GL_BLEND_DST_RGB_EXT
      *iv_return = GL_BLEND_DST_RGB_EXT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_BLEND_SRC_RGB_EXT", 20)) {
    /*                              ^           */
#ifdef GL_BLEND_SRC_RGB_EXT
      *iv_return = GL_BLEND_SRC_RGB_EXT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_FRAMEBUFFER_BLEND", 20)) {
    /*                              ^           */
#ifdef GL_FRAMEBUFFER_BLEND
      *iv_return = GL_FRAMEBUFFER_BLEND;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_UNPACK_SWAP_BYTES", 20)) {
    /*                              ^           */
#ifdef GL_UNPACK_SWAP_BYTES
      *iv_return = GL_UNPACK_SWAP_BYTES;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case 'C':
    if (memEQ(name, "GL_CURRENT_FOG_COORD", 20)) {
    /*                              ^           */
#ifdef GL_CURRENT_FOG_COORD
      *iv_return = GL_CURRENT_FOG_COORD;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_TEXTURE_ENV_COLOR", 20)) {
    /*                              ^           */
#ifdef GL_TEXTURE_ENV_COLOR
      *iv_return = GL_TEXTURE_ENV_COLOR;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case 'D':
    if (memEQ(name, "GL_BUFFER_MAPPED_ARB", 20)) {
    /*                              ^           */
#ifdef GL_BUFFER_MAPPED_ARB
      *iv_return = GL_BUFFER_MAPPED_ARB;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_PATH_FILL_MODE_NV", 20)) {
    /*                              ^           */
#ifdef GL_PATH_FILL_MODE_NV
      *iv_return = GL_PATH_FILL_MODE_NV;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case 'E':
    if (memEQ(name, "GL_BUFFER_MAP_LENGTH", 20)) {
    /*                              ^           */
#ifdef GL_BUFFER_MAP_LENGTH
      *iv_return = GL_BUFFER_MAP_LENGTH;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_CLAMP_TO_EDGE_EXT", 20)) {
    /*                              ^           */
#ifdef GL_CLAMP_TO_EDGE_EXT
      *iv_return = GL_CLAMP_TO_EDGE_EXT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_COORD_REPLACE_ARB", 20)) {
    /*                              ^           */
#ifdef GL_COORD_REPLACE_ARB
      *iv_return = GL_COORD_REPLACE_ARB;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_COUNTER_RANGE_AMD", 20)) {
    /*                              ^           */
#ifdef GL_COUNTER_RANGE_AMD
      *iv_return = GL_COUNTER_RANGE_AMD;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_DEPTH_COMPONENT16", 20)) {
    /*                              ^           */
#ifdef GL_DEPTH_COMPONENT16
      *iv_return = GL_DEPTH_COMPONENT16;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_DEPTH_COMPONENT24", 20)) {
    /*                              ^           */
#ifdef GL_DEPTH_COMPONENT24
      *iv_return = GL_DEPTH_COMPONENT24;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_DEPTH_COMPONENT32", 20)) {
    /*                              ^           */
#ifdef GL_DEPTH_COMPONENT32
      *iv_return = GL_DEPTH_COMPONENT32;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_PACK_IMAGE_HEIGHT", 20)) {
    /*                              ^           */
#ifdef GL_PACK_IMAGE_HEIGHT
      *iv_return = GL_PACK_IMAGE_HEIGHT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_PACK_RESAMPLE_OML", 20)) {
    /*                              ^           */
#ifdef GL_PACK_RESAMPLE_OML
      *iv_return = GL_PACK_RESAMPLE_OML;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_PROGRAM_TARGET_NV", 20)) {
    /*                              ^           */
#ifdef GL_PROGRAM_TARGET_NV
      *iv_return = GL_PROGRAM_TARGET_NV;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_REPLACE_VALUE_AMD", 20)) {
    /*                              ^           */
#ifdef GL_REPLACE_VALUE_AMD
      *iv_return = GL_REPLACE_VALUE_AMD;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_STENCIL_WRITEMASK", 20)) {
    /*                              ^           */
#ifdef GL_STENCIL_WRITEMASK
      *iv_return = GL_STENCIL_WRITEMASK;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_SURFACE_MAPPED_NV", 20)) {
    /*                              ^           */
#ifdef GL_SURFACE_MAPPED_NV
      *iv_return = GL_SURFACE_MAPPED_NV;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_TEXTURE_SHADER_NV", 20)) {
    /*                              ^           */
#ifdef GL_TEXTURE_SHADER_NV
      *iv_return = GL_TEXTURE_SHADER_NV;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_UNPACK_ROW_LENGTH", 20)) {
    /*                              ^           */
#ifdef GL_UNPACK_ROW_LENGTH
      *iv_return = GL_UNPACK_ROW_LENGTH;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_VARIANT_VALUE_EXT", 20)) {
    /*                              ^           */
#ifdef GL_VARIANT_VALUE_EXT
      *iv_return = GL_VARIANT_VALUE_EXT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_VERTEX_SOURCE_ATI", 20)) {
    /*                              ^           */
#ifdef GL_VERTEX_SOURCE_ATI
      *iv_return = GL_VERTEX_SOURCE_ATI;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case 'F':
    if (memEQ(name, "GL_BUFFER_MAP_OFFSET", 20)) {
    /*                              ^           */
#ifdef GL_BUFFER_MAP_OFFSET
      *iv_return = GL_BUFFER_MAP_OFFSET;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_PATH_GEN_COEFF_NV", 20)) {
    /*                              ^           */
#ifdef GL_PATH_GEN_COEFF_NV
      *iv_return = GL_PATH_GEN_COEFF_NV;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_R1UI_C4UB_V3F_SUN", 20)) {
    /*                              ^           */
#ifdef GL_R1UI_C4UB_V3F_SUN
      *iv_return = GL_R1UI_C4UB_V3F_SUN;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case 'H':
    if (memEQ(name, "GL_OPERAND3_ALPHA_NV", 20)) {
    /*                              ^           */
#ifdef GL_OPERAND3_ALPHA_NV
      *iv_return = GL_OPERAND3_ALPHA_NV;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_SAMPLER_1D_SHADOW", 20)) {
    /*                              ^           */
#ifdef GL_SAMPLER_1D_SHADOW
      *iv_return = GL_SAMPLER_1D_SHADOW;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_SAMPLER_2D_SHADOW", 20)) {
    /*                              ^           */
#ifdef GL_SAMPLER_2D_SHADOW
      *iv_return = GL_SAMPLER_2D_SHADOW;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_TEXTURE_DEPTH_EXT", 20)) {
    /*                              ^           */
#ifdef GL_TEXTURE_DEPTH_EXT
      *iv_return = GL_TEXTURE_DEPTH_EXT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_TRIANGLE_MESH_SUN", 20)) {
    /*                              ^           */
#ifdef GL_TRIANGLE_MESH_SUN
      *iv_return = GL_TRIANGLE_MESH_SUN;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case 'I':
    if (memEQ(name, "GL_CURRENT_ATTRIB_NV", 20)) {
    /*                              ^           */
#ifdef GL_CURRENT_ATTRIB_NV
      *iv_return = GL_CURRENT_ATTRIB_NV;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_CURRENT_MATRIX_NV", 20)) {
    /*                              ^           */
#ifdef GL_CURRENT_MATRIX_NV
      *iv_return = GL_CURRENT_MATRIX_NV;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_GENERIC_ATTRIB_NV", 20)) {
    /*                              ^           */
#ifdef GL_GENERIC_ATTRIB_NV
      *iv_return = GL_GENERIC_ATTRIB_NV;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_INTENSITY16UI_EXT", 20)) {
    /*                              ^           */
#ifdef GL_INTENSITY16UI_EXT
      *iv_return = GL_INTENSITY16UI_EXT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_INTENSITY32UI_EXT", 20)) {
    /*                              ^           */
#ifdef GL_INTENSITY32UI_EXT
      *iv_return = GL_INTENSITY32UI_EXT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_LUMINANCE16UI_EXT", 20)) {
    /*                              ^           */
#ifdef GL_LUMINANCE16UI_EXT
      *iv_return = GL_LUMINANCE16UI_EXT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_LUMINANCE32UI_EXT", 20)) {
    /*                              ^           */
#ifdef GL_LUMINANCE32UI_EXT
      *iv_return = GL_LUMINANCE32UI_EXT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_MAX_ELEMENT_INDEX", 20)) {
    /*                              ^           */
#ifdef GL_MAX_ELEMENT_INDEX
      *iv_return = GL_MAX_ELEMENT_INDEX;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glColorPointervINTEL", 20)) {
    /*                              ^           */
#ifdef glColorPointervINTEL
      *iv_return = glColorPointervINTEL;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glGetSubroutineIndex", 20)) {
    /*                              ^           */
#ifdef glGetSubroutineIndex
      *iv_return = glGetSubroutineIndex;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glGetTextureSubImage", 20)) {
    /*                              ^           */
#ifdef glGetTextureSubImage
      *iv_return = glGetTextureSubImage;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glInvalidateTexImage", 20)) {
    /*                              ^           */
#ifdef glInvalidateTexImage
      *iv_return = glInvalidateTexImage;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case 'L':
    if (memEQ(name, "GL_COMBINER_SCALE_NV", 20)) {
    /*                              ^           */
#ifdef GL_COMBINER_SCALE_NV
      *iv_return = GL_COMBINER_SCALE_NV;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_DEPTH_STENCIL_EXT", 20)) {
    /*                              ^           */
#ifdef GL_DEPTH_STENCIL_EXT
      *iv_return = GL_DEPTH_STENCIL_EXT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_FILL_RECTANGLE_NV", 20)) {
    /*                              ^           */
#ifdef GL_FILL_RECTANGLE_NV
      *iv_return = GL_FILL_RECTANGLE_NV;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_LUMINANCE4_ALPHA4", 20)) {
    /*                              ^           */
#ifdef GL_LUMINANCE4_ALPHA4
      *iv_return = GL_LUMINANCE4_ALPHA4;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_LUMINANCE6_ALPHA2", 20)) {
    /*                              ^           */
#ifdef GL_LUMINANCE6_ALPHA2
      *iv_return = GL_LUMINANCE6_ALPHA2;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_LUMINANCE8_ALPHA8", 20)) {
    /*                              ^           */
#ifdef GL_LUMINANCE8_ALPHA8
      *iv_return = GL_LUMINANCE8_ALPHA8;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_MAP1_BINORMAL_EXT", 20)) {
    /*                              ^           */
#ifdef GL_MAP1_BINORMAL_EXT
      *iv_return = GL_MAP1_BINORMAL_EXT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_MAP2_BINORMAL_EXT", 20)) {
    /*                              ^           */
#ifdef GL_MAP2_BINORMAL_EXT
      *iv_return = GL_MAP2_BINORMAL_EXT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_SIGNED_NORMALIZED", 20)) {
    /*                              ^           */
#ifdef GL_SIGNED_NORMALIZED
      *iv_return = GL_SIGNED_NORMALIZED;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_TEXTURE_MAX_LEVEL", 20)) {
    /*                              ^           */
#ifdef GL_TEXTURE_MAX_LEVEL
      *iv_return = GL_TEXTURE_MAX_LEVEL;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_VIBRANCE_SCALE_NV", 20)) {
    /*                              ^           */
#ifdef GL_VIBRANCE_SCALE_NV
      *iv_return = GL_VIBRANCE_SCALE_NV;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case 'M':
    if (memEQ(name, "GL_COLOR_ATTACHMENT0", 20)) {
    /*                              ^           */
#ifdef GL_COLOR_ATTACHMENT0
      *iv_return = GL_COLOR_ATTACHMENT0;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_COLOR_ATTACHMENT1", 20)) {
    /*                              ^           */
#ifdef GL_COLOR_ATTACHMENT1
      *iv_return = GL_COLOR_ATTACHMENT1;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_COLOR_ATTACHMENT2", 20)) {
    /*                              ^           */
#ifdef GL_COLOR_ATTACHMENT2
      *iv_return = GL_COLOR_ATTACHMENT2;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_COLOR_ATTACHMENT3", 20)) {
    /*                              ^           */
#ifdef GL_COLOR_ATTACHMENT3
      *iv_return = GL_COLOR_ATTACHMENT3;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_COLOR_ATTACHMENT4", 20)) {
    /*                              ^           */
#ifdef GL_COLOR_ATTACHMENT4
      *iv_return = GL_COLOR_ATTACHMENT4;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_COLOR_ATTACHMENT5", 20)) {
    /*                              ^           */
#ifdef GL_COLOR_ATTACHMENT5
      *iv_return = GL_COLOR_ATTACHMENT5;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_COLOR_ATTACHMENT6", 20)) {
    /*                              ^           */
#ifdef GL_COLOR_ATTACHMENT6
      *iv_return = GL_COLOR_ATTACHMENT6;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_COLOR_ATTACHMENT7", 20)) {
    /*                              ^           */
#ifdef GL_COLOR_ATTACHMENT7
      *iv_return = GL_COLOR_ATTACHMENT7;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_COLOR_ATTACHMENT8", 20)) {
    /*                              ^           */
#ifdef GL_COLOR_ATTACHMENT8
      *iv_return = GL_COLOR_ATTACHMENT8;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_COLOR_ATTACHMENT9", 20)) {
    /*                              ^           */
#ifdef GL_COLOR_ATTACHMENT9
      *iv_return = GL_COLOR_ATTACHMENT9;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_MAX_IMAGE_SAMPLES", 20)) {
    /*                              ^           */
#ifdef GL_MAX_IMAGE_SAMPLES
      *iv_return = GL_MAX_IMAGE_SAMPLES;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case 'N':
    if (memEQ(name, "GL_DEPTH32F_STENCIL8", 20)) {
    /*                              ^           */
#ifdef GL_DEPTH32F_STENCIL8
      *iv_return = GL_DEPTH32F_STENCIL8;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_PROGRAM_STRING_NV", 20)) {
    /*                              ^           */
#ifdef GL_PROGRAM_STRING_NV
      *iv_return = GL_PROGRAM_STRING_NV;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case 'O':
    if (memEQ(name, "GL_HSL_SATURATION_NV", 20)) {
    /*                              ^           */
#ifdef GL_HSL_SATURATION_NV
      *iv_return = GL_HSL_SATURATION_NV;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_NUM_SAMPLE_COUNTS", 20)) {
    /*                              ^           */
#ifdef GL_NUM_SAMPLE_COUNTS
      *iv_return = GL_NUM_SAMPLE_COUNTS;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case 'P':
    if (memEQ(name, "GL_PATH_DASH_CAPS_NV", 20)) {
    /*                              ^           */
#ifdef GL_PATH_DASH_CAPS_NV
      *iv_return = GL_PATH_DASH_CAPS_NV;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_PATH_FORMAT_PS_NV", 20)) {
    /*                              ^           */
#ifdef GL_PATH_FORMAT_PS_NV
      *iv_return = GL_PATH_FORMAT_PS_NV;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glMultiTexCoordP1uiv", 20)) {
    /*                              ^           */
#ifdef glMultiTexCoordP1uiv
      *iv_return = glMultiTexCoordP1uiv;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glMultiTexCoordP2uiv", 20)) {
    /*                              ^           */
#ifdef glMultiTexCoordP2uiv
      *iv_return = glMultiTexCoordP2uiv;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glMultiTexCoordP3uiv", 20)) {
    /*                              ^           */
#ifdef glMultiTexCoordP3uiv
      *iv_return = glMultiTexCoordP3uiv;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glMultiTexCoordP4uiv", 20)) {
    /*                              ^           */
#ifdef glMultiTexCoordP4uiv
      *iv_return = glMultiTexCoordP4uiv;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case 'R':
    if (memEQ(name, "GL_ADJACENT_PAIRS_NV", 20)) {
    /*                              ^           */
#ifdef GL_ADJACENT_PAIRS_NV
      *iv_return = GL_ADJACENT_PAIRS_NV;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_ALPHA_INTEGER_EXT", 20)) {
    /*                              ^           */
#ifdef GL_ALPHA_INTEGER_EXT
      *iv_return = GL_ALPHA_INTEGER_EXT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_GREEN_INTEGER_EXT", 20)) {
    /*                              ^           */
#ifdef GL_GREEN_INTEGER_EXT
      *iv_return = GL_GREEN_INTEGER_EXT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_LOG_WARNING_REGAL", 20)) {
    /*                              ^           */
#ifdef GL_LOG_WARNING_REGAL
      *iv_return = GL_LOG_WARNING_REGAL;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_PRIMARY_COLOR_ARB", 20)) {
    /*                              ^           */
#ifdef GL_PRIMARY_COLOR_ARB
      *iv_return = GL_PRIMARY_COLOR_ARB;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_PRIMARY_COLOR_EXT", 20)) {
    /*                              ^           */
#ifdef GL_PRIMARY_COLOR_EXT
      *iv_return = GL_PRIMARY_COLOR_EXT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_PROGRAM_SEPARABLE", 20)) {
    /*                              ^           */
#ifdef GL_PROGRAM_SEPARABLE
      *iv_return = GL_PROGRAM_SEPARABLE;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_VERTEX_SHADER_ARB", 20)) {
    /*                              ^           */
#ifdef GL_VERTEX_SHADER_ARB
      *iv_return = GL_VERTEX_SHADER_ARB;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_VERTEX_SHADER_BIT", 20)) {
    /*                              ^           */
#ifdef GL_VERTEX_SHADER_BIT
      *iv_return = GL_VERTEX_SHADER_BIT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_VERTEX_SHADER_EXT", 20)) {
    /*                              ^           */
#ifdef GL_VERTEX_SHADER_EXT
      *iv_return = GL_VERTEX_SHADER_EXT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glTextureBufferRange", 20)) {
    /*                              ^           */
#ifdef glTextureBufferRange
      *iv_return = glTextureBufferRange;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case 'S':
    if (memEQ(name, "GL_BUFFER_ACCESS_ARB", 20)) {
    /*                              ^           */
#ifdef GL_BUFFER_ACCESS_ARB
      *iv_return = GL_BUFFER_ACCESS_ARB;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_COLOR_TABLE_SCALE", 20)) {
    /*                              ^           */
#ifdef GL_COLOR_TABLE_SCALE
      *iv_return = GL_COLOR_TABLE_SCALE;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_INTENSITY16_SNORM", 20)) {
    /*                              ^           */
#ifdef GL_INTENSITY16_SNORM
      *iv_return = GL_INTENSITY16_SNORM;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_LUMINANCE16_SNORM", 20)) {
    /*                              ^           */
#ifdef GL_LUMINANCE16_SNORM
      *iv_return = GL_LUMINANCE16_SNORM;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_MAX_LGPU_GPUS_NVX", 20)) {
    /*                              ^           */
#ifdef GL_MAX_LGPU_GPUS_NVX
      *iv_return = GL_MAX_LGPU_GPUS_NVX;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_PATH_FILL_MASK_NV", 20)) {
    /*                              ^           */
#ifdef GL_PATH_FILL_MASK_NV
      *iv_return = GL_PATH_FILL_MASK_NV;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_PRIMITIVE_RESTART", 20)) {
    /*                              ^           */
#ifdef GL_PRIMITIVE_RESTART
      *iv_return = GL_PRIMITIVE_RESTART;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case 'T':
    if (memEQ(name, "GL_BUFFER_OBJECT_EXT", 20)) {
    /*                              ^           */
#ifdef GL_BUFFER_OBJECT_EXT
      *iv_return = GL_BUFFER_OBJECT_EXT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_CLIP_FAR_HINT_PGI", 20)) {
    /*                              ^           */
#ifdef GL_CLIP_FAR_HINT_PGI
      *iv_return = GL_CLIP_FAR_HINT_PGI;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_CONIC_CURVE_TO_NV", 20)) {
    /*                              ^           */
#ifdef GL_CONIC_CURVE_TO_NV
      *iv_return = GL_CONIC_CURVE_TO_NV;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_CUBIC_CURVE_TO_NV", 20)) {
    /*                              ^           */
#ifdef GL_CUBIC_CURVE_TO_NV
      *iv_return = GL_CUBIC_CURVE_TO_NV;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_FUNC_SUBTRACT_EXT", 20)) {
    /*                              ^           */
#ifdef GL_FUNC_SUBTRACT_EXT
      *iv_return = GL_FUNC_SUBTRACT_EXT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_HSL_LUMINOSITY_NV", 20)) {
    /*                              ^           */
#ifdef GL_HSL_LUMINOSITY_NV
      *iv_return = GL_HSL_LUMINOSITY_NV;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_IMAGE_2D_RECT_EXT", 20)) {
    /*                              ^           */
#ifdef GL_IMAGE_2D_RECT_EXT
      *iv_return = GL_IMAGE_2D_RECT_EXT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_MINMAX_FORMAT_EXT", 20)) {
    /*                              ^           */
#ifdef GL_MINMAX_FORMAT_EXT
      *iv_return = GL_MINMAX_FORMAT_EXT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_MITER_TRUNCATE_NV", 20)) {
    /*                              ^           */
#ifdef GL_MITER_TRUNCATE_NV
      *iv_return = GL_MITER_TRUNCATE_NV;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_MOVE_TO_RESETS_NV", 20)) {
    /*                              ^           */
#ifdef GL_MOVE_TO_RESETS_NV
      *iv_return = GL_MOVE_TO_RESETS_NV;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_OP_RECIP_SQRT_EXT", 20)) {
    /*                              ^           */
#ifdef GL_OP_RECIP_SQRT_EXT
      *iv_return = GL_OP_RECIP_SQRT_EXT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_PROGRAM_LENGTH_NV", 20)) {
    /*                              ^           */
#ifdef GL_PROGRAM_LENGTH_NV
      *iv_return = GL_PROGRAM_LENGTH_NV;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_PROXY_COLOR_TABLE", 20)) {
    /*                              ^           */
#ifdef GL_PROXY_COLOR_TABLE
      *iv_return = GL_PROXY_COLOR_TABLE;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_SHADER_OBJECT_ARB", 20)) {
    /*                              ^           */
#ifdef GL_SHADER_OBJECT_ARB
      *iv_return = GL_SHADER_OBJECT_ARB;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_SHADER_OBJECT_EXT", 20)) {
    /*                              ^           */
#ifdef GL_SHADER_OBJECT_EXT
      *iv_return = GL_SHADER_OBJECT_EXT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_SYNC_CL_EVENT_ARB", 20)) {
    /*                              ^           */
#ifdef GL_SYNC_CL_EVENT_ARB
      *iv_return = GL_SYNC_CL_EVENT_ARB;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_TEXCOORD1_BIT_PGI", 20)) {
    /*                              ^           */
#ifdef GL_TEXCOORD1_BIT_PGI
      *iv_return = GL_TEXCOORD1_BIT_PGI;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_TEXCOORD2_BIT_PGI", 20)) {
    /*                              ^           */
#ifdef GL_TEXCOORD2_BIT_PGI
      *iv_return = GL_TEXCOORD2_BIT_PGI;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_TEXCOORD3_BIT_PGI", 20)) {
    /*                              ^           */
#ifdef GL_TEXCOORD3_BIT_PGI
      *iv_return = GL_TEXCOORD3_BIT_PGI;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_TEXCOORD4_BIT_PGI", 20)) {
    /*                              ^           */
#ifdef GL_TEXCOORD4_BIT_PGI
      *iv_return = GL_TEXCOORD4_BIT_PGI;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_TEXTURE_LIGHT_EXT", 20)) {
    /*                              ^           */
#ifdef GL_TEXTURE_LIGHT_EXT
      *iv_return = GL_TEXTURE_LIGHT_EXT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_TRIANGLE_LIST_SUN", 20)) {
    /*                              ^           */
#ifdef GL_TRIANGLE_LIST_SUN
      *iv_return = GL_TRIANGLE_LIST_SUN;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case 'U':
    if (memEQ(name, "GL_COMBINER_INPUT_NV", 20)) {
    /*                              ^           */
#ifdef GL_COMBINER_INPUT_NV
      *iv_return = GL_COMBINER_INPUT_NV;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_COPY_WRITE_BUFFER", 20)) {
    /*                              ^           */
#ifdef GL_COPY_WRITE_BUFFER
      *iv_return = GL_COPY_WRITE_BUFFER;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_FRAGMENT_INPUT_NV", 20)) {
    /*                              ^           */
#ifdef GL_FRAGMENT_INPUT_NV
      *iv_return = GL_FRAGMENT_INPUT_NV;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_MAX_TEXTURE_UNITS", 20)) {
    /*                              ^           */
#ifdef GL_MAX_TEXTURE_UNITS
      *iv_return = GL_MAX_TEXTURE_UNITS;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_MULTICAST_GPUS_NV", 20)) {
    /*                              ^           */
#ifdef GL_MULTICAST_GPUS_NV
      *iv_return = GL_MULTICAST_GPUS_NV;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_PIXEL_PACK_BUFFER", 20)) {
    /*                              ^           */
#ifdef GL_PIXEL_PACK_BUFFER
      *iv_return = GL_PIXEL_PACK_BUFFER;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_VERTEX_SUBROUTINE", 20)) {
    /*                              ^           */
#ifdef GL_VERTEX_SUBROUTINE
      *iv_return = GL_VERTEX_SUBROUTINE;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case 'V':
    if (memEQ(name, "GL_ACCUM_CLEAR_VALUE", 20)) {
    /*                              ^           */
#ifdef GL_ACCUM_CLEAR_VALUE
      *iv_return = GL_ACCUM_CLEAR_VALUE;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_COLOR_CLEAR_VALUE", 20)) {
    /*                              ^           */
#ifdef GL_COLOR_CLEAR_VALUE
      *iv_return = GL_COLOR_CLEAR_VALUE;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_DEPTH_CLEAR_VALUE", 20)) {
    /*                              ^           */
#ifdef GL_DEPTH_CLEAR_VALUE
      *iv_return = GL_DEPTH_CLEAR_VALUE;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_INDEX_CLEAR_VALUE", 20)) {
    /*                              ^           */
#ifdef GL_INDEX_CLEAR_VALUE
      *iv_return = GL_INDEX_CLEAR_VALUE;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_SAMPLE_MASK_VALUE", 20)) {
    /*                              ^           */
#ifdef GL_SAMPLE_MASK_VALUE
      *iv_return = GL_SAMPLE_MASK_VALUE;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case 'W':
    if (memEQ(name, "GL_COLOR_TABLE_WIDTH", 20)) {
    /*                              ^           */
#ifdef GL_COLOR_TABLE_WIDTH
      *iv_return = GL_COLOR_TABLE_WIDTH;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_CONVOLUTION_WIDTH", 20)) {
    /*                              ^           */
#ifdef GL_CONVOLUTION_WIDTH
      *iv_return = GL_CONVOLUTION_WIDTH;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case 'X':
    if (memEQ(name, "GL_OUTPUT_VERTEX_EXT", 20)) {
    /*                              ^           */
#ifdef GL_OUTPUT_VERTEX_EXT
      *iv_return = GL_OUTPUT_VERTEX_EXT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case 'Y':
    if (memEQ(name, "GL_CURRENT_QUERY_ARB", 20)) {
    /*                              ^           */
#ifdef GL_CURRENT_QUERY_ARB
      *iv_return = GL_CURRENT_QUERY_ARB;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_ELEMENT_ARRAY_ATI", 20)) {
    /*                              ^           */
#ifdef GL_ELEMENT_ARRAY_ATI
      *iv_return = GL_ELEMENT_ARRAY_ATI;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_SPIR_V_BINARY_ARB", 20)) {
    /*                              ^           */
#ifdef GL_SPIR_V_BINARY_ARB
      *iv_return = GL_SPIR_V_BINARY_ARB;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_TANGENT_ARRAY_EXT", 20)) {
    /*                              ^           */
#ifdef GL_TANGENT_ARRAY_EXT
      *iv_return = GL_TANGENT_ARRAY_EXT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_VARIANT_ARRAY_EXT", 20)) {
    /*                              ^           */
#ifdef GL_VARIANT_ARRAY_EXT
      *iv_return = GL_VARIANT_ARRAY_EXT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case 'Z':
    if (memEQ(name, "GL_TEXTURE_SWIZZLE_A", 20)) {
    /*                              ^           */
#ifdef GL_TEXTURE_SWIZZLE_A
      *iv_return = GL_TEXTURE_SWIZZLE_A;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_TEXTURE_SWIZZLE_B", 20)) {
    /*                              ^           */
#ifdef GL_TEXTURE_SWIZZLE_B
      *iv_return = GL_TEXTURE_SWIZZLE_B;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_TEXTURE_SWIZZLE_G", 20)) {
    /*                              ^           */
#ifdef GL_TEXTURE_SWIZZLE_G
      *iv_return = GL_TEXTURE_SWIZZLE_G;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_TEXTURE_SWIZZLE_R", 20)) {
    /*                              ^           */
#ifdef GL_TEXTURE_SWIZZLE_R
      *iv_return = GL_TEXTURE_SWIZZLE_R;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case '_':
    if (memEQ(name, "GLEW_IBM_static_data", 20)) {
    /*                              ^           */
#ifdef GLEW_IBM_static_data
      *iv_return = GLEW_IBM_static_data;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GLEW_NV_command_list", 20)) {
    /*                              ^           */
#ifdef GLEW_NV_command_list
      *iv_return = GLEW_NV_command_list;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_ALPHA_SIGNED_SGIX", 20)) {
    /*                              ^           */
#ifdef GL_ALPHA_SIGNED_SGIX
      *iv_return = GL_ALPHA_SIGNED_SGIX;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_ASYNC_MARKER_SGIX", 20)) {
    /*                              ^           */
#ifdef GL_ASYNC_MARKER_SGIX
      *iv_return = GL_ASYNC_MARKER_SGIX;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_HP_occlusion_test", 20)) {
    /*                              ^           */
#ifdef GL_HP_occlusion_test
      *iv_return = GL_HP_occlusion_test;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_INT_IMAGE_2D_RECT", 20)) {
    /*                              ^           */
#ifdef GL_INT_IMAGE_2D_RECT
      *iv_return = GL_INT_IMAGE_2D_RECT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_MAX_VIEWPORT_DIMS", 20)) {
    /*                              ^           */
#ifdef GL_MAX_VIEWPORT_DIMS
      *iv_return = GL_MAX_VIEWPORT_DIMS;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_MODULATE_ADD_ATIX", 20)) {
    /*                              ^           */
#ifdef GL_MODULATE_ADD_ATIX
      *iv_return = GL_MODULATE_ADD_ATIX;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_NORMAL_ARRAY_TYPE", 20)) {
    /*                              ^           */
#ifdef GL_NORMAL_ARRAY_TYPE
      *iv_return = GL_NORMAL_ARRAY_TYPE;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_OBJECT_POINT_SGIS", 20)) {
    /*                              ^           */
#ifdef GL_OBJECT_POINT_SGIS
      *iv_return = GL_OBJECT_POINT_SGIS;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_POINT_SMOOTH_HINT", 20)) {
    /*                              ^           */
#ifdef GL_POINT_SMOOTH_HINT
      *iv_return = GL_POINT_SMOOTH_HINT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_RGB16_SIGNED_SGIX", 20)) {
    /*                              ^           */
#ifdef GL_RGB16_SIGNED_SGIX
      *iv_return = GL_RGB16_SIGNED_SGIX;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_SHADER_IMAGE_LOAD", 20)) {
    /*                              ^           */
#ifdef GL_SHADER_IMAGE_LOAD
      *iv_return = GL_SHADER_IMAGE_LOAD;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_STENCIL_BACK_FAIL", 20)) {
    /*                              ^           */
#ifdef GL_STENCIL_BACK_FAIL
      *iv_return = GL_STENCIL_BACK_FAIL;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_STENCIL_BACK_FUNC", 20)) {
    /*                              ^           */
#ifdef GL_STENCIL_BACK_FUNC
      *iv_return = GL_STENCIL_BACK_FUNC;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_SUN_triangle_list", 20)) {
    /*                              ^           */
#ifdef GL_SUN_triangle_list
      *iv_return = GL_SUN_triangle_list;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_TEXTURE_BLUE_SIZE", 20)) {
    /*                              ^           */
#ifdef GL_TEXTURE_BLUE_SIZE
      *iv_return = GL_TEXTURE_BLUE_SIZE;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_TEXTURE_BLUE_TYPE", 20)) {
    /*                              ^           */
#ifdef GL_TEXTURE_BLUE_TYPE
      *iv_return = GL_TEXTURE_BLUE_TYPE;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_UNSIGNED_INT_24_8", 20)) {
    /*                              ^           */
#ifdef GL_UNSIGNED_INT_24_8
      *iv_return = GL_UNSIGNED_INT_24_8;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_UNSIGNED_INT_VEC2", 20)) {
    /*                              ^           */
#ifdef GL_UNSIGNED_INT_VEC2
      *iv_return = GL_UNSIGNED_INT_VEC2;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_UNSIGNED_INT_VEC3", 20)) {
    /*                              ^           */
#ifdef GL_UNSIGNED_INT_VEC3
      *iv_return = GL_UNSIGNED_INT_VEC3;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_UNSIGNED_INT_VEC4", 20)) {
    /*                              ^           */
#ifdef GL_UNSIGNED_INT_VEC4
      *iv_return = GL_UNSIGNED_INT_VEC4;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_VERTEX_ARRAY_SIZE", 20)) {
    /*                              ^           */
#ifdef GL_VERTEX_ARRAY_SIZE
      *iv_return = GL_VERTEX_ARRAY_SIZE;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_VERTEX_ARRAY_TYPE", 20)) {
    /*                              ^           */
#ifdef GL_VERTEX_ARRAY_TYPE
      *iv_return = GL_VERTEX_ARRAY_TYPE;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_VIEW_CLASS_8_BITS", 20)) {
    /*                              ^           */
#ifdef GL_VIEW_CLASS_8_BITS
      *iv_return = GL_VIEW_CLASS_8_BITS;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case 'a':
    if (memEQ(name, "GLEW_ARB_gpu_shader5", 20)) {
    /*                              ^           */
#ifdef GLEW_ARB_gpu_shader5
      *iv_return = GLEW_ARB_gpu_shader5;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GLEW_ARB_multisample", 20)) {
    /*                              ^           */
#ifdef GLEW_ARB_multisample
      *iv_return = GLEW_ARB_multisample;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GLEW_EXT_gpu_shader4", 20)) {
    /*                              ^           */
#ifdef GLEW_EXT_gpu_shader4
      *iv_return = GLEW_EXT_gpu_shader4;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GLEW_EXT_multisample", 20)) {
    /*                              ^           */
#ifdef GLEW_EXT_multisample
      *iv_return = GLEW_EXT_multisample;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GLEW_SUN_slice_accum", 20)) {
    /*                              ^           */
#ifdef GLEW_SUN_slice_accum
      *iv_return = GLEW_SUN_slice_accum;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_ARB_shader_ballot", 20)) {
    /*                              ^           */
#ifdef GL_ARB_shader_ballot
      *iv_return = GL_ARB_shader_ballot;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_ATI_element_array", 20)) {
    /*                              ^           */
#ifdef GL_ATI_element_array
      *iv_return = GL_ATI_element_array;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_EXT_texture_array", 20)) {
    /*                              ^           */
#ifdef GL_EXT_texture_array
      *iv_return = GL_EXT_texture_array;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_NV_fill_rectangle", 20)) {
    /*                              ^           */
#ifdef GL_NV_fill_rectangle
      *iv_return = GL_NV_fill_rectangle;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_SGIX_flush_raster", 20)) {
    /*                              ^           */
#ifdef GL_SGIX_flush_raster
      *iv_return = GL_SGIX_flush_raster;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_WIN_phong_shading", 20)) {
    /*                              ^           */
#ifdef GL_WIN_phong_shading
      *iv_return = GL_WIN_phong_shading;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glBindAttribLocation", 20)) {
    /*                              ^           */
#ifdef glBindAttribLocation
      *iv_return = glBindAttribLocation;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glCopyImageSubDataNV", 20)) {
    /*                              ^           */
#ifdef glCopyImageSubDataNV
      *iv_return = glCopyImageSubDataNV;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glGetAttachedShaders", 20)) {
    /*                              ^           */
#ifdef glGetAttachedShaders
      *iv_return = glGetAttachedShaders;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glGetUniformLocation", 20)) {
    /*                              ^           */
#ifdef glGetUniformLocation
      *iv_return = glGetUniformLocation;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glPrimitiveRestartNV", 20)) {
    /*                              ^           */
#ifdef glPrimitiveRestartNV
      *iv_return = glPrimitiveRestartNV;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glTextureMaterialEXT", 20)) {
    /*                              ^           */
#ifdef glTextureMaterialEXT
      *iv_return = glTextureMaterialEXT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glValidateProgramARB", 20)) {
    /*                              ^           */
#ifdef glValidateProgramARB
      *iv_return = glValidateProgramARB;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case 'b':
    if (memEQ(name, "GLEW_APPLE_row_bytes", 20)) {
    /*                              ^           */
#ifdef GLEW_APPLE_row_bytes
      *iv_return = GLEW_APPLE_row_bytes;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glClearBufferSubData", 20)) {
    /*                              ^           */
#ifdef glClearBufferSubData
      *iv_return = glClearBufferSubData;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glNamedBufferSubData", 20)) {
    /*                              ^           */
#ifdef glNamedBufferSubData
      *iv_return = glNamedBufferSubData;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glNormalStream3bvATI", 20)) {
    /*                              ^           */
#ifdef glNormalStream3bvATI
      *iv_return = glNormalStream3bvATI;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glVertexAttrib4bvARB", 20)) {
    /*                              ^           */
#ifdef glVertexAttrib4bvARB
      *iv_return = glVertexAttrib4bvARB;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case 'c':
    if (memEQ(name, "GLEW_ARB_depth_clamp", 20)) {
    /*                              ^           */
#ifdef GLEW_ARB_depth_clamp
      *iv_return = GLEW_ARB_depth_clamp;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GLEW_EXT_blend_color", 20)) {
    /*                              ^           */
#ifdef GLEW_EXT_blend_color
      *iv_return = GLEW_EXT_blend_color;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_SGIS_fog_function", 20)) {
    /*                              ^           */
#ifdef GL_SGIS_fog_function
      *iv_return = GL_SGIS_fog_function;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glAddSwapHintRectWIN", 20)) {
    /*                              ^           */
#ifdef glAddSwapHintRectWIN
      *iv_return = glAddSwapHintRectWIN;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glGetShaderSourceARB", 20)) {
    /*                              ^           */
#ifdef glGetShaderSourceARB
      *iv_return = glGetShaderSourceARB;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glSharpenTexFuncSGIS", 20)) {
    /*                              ^           */
#ifdef glSharpenTexFuncSGIS
      *iv_return = glSharpenTexFuncSGIS;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glVDPAUMapSurfacesNV", 20)) {
    /*                              ^           */
#ifdef glVDPAUMapSurfacesNV
      *iv_return = glVDPAUMapSurfacesNV;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case 'd':
    if (memEQ(name, "glCullParameterdvEXT", 20)) {
    /*                              ^           */
#ifdef glCullParameterdvEXT
      *iv_return = glCullParameterdvEXT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glGetCommandHeaderNV", 20)) {
    /*                              ^           */
#ifdef glGetCommandHeaderNV
      *iv_return = glGetCommandHeaderNV;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glGetTextureHandleNV", 20)) {
    /*                              ^           */
#ifdef glGetTextureHandleNV
      *iv_return = glGetTextureHandleNV;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glNormalStream3dvATI", 20)) {
    /*                              ^           */
#ifdef glNormalStream3dvATI
      *iv_return = glNormalStream3dvATI;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glVertexAttrib1dvARB", 20)) {
    /*                              ^           */
#ifdef glVertexAttrib1dvARB
      *iv_return = glVertexAttrib1dvARB;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glVertexAttrib2dvARB", 20)) {
    /*                              ^           */
#ifdef glVertexAttrib2dvARB
      *iv_return = glVertexAttrib2dvARB;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glVertexAttrib3dvARB", 20)) {
    /*                              ^           */
#ifdef glVertexAttrib3dvARB
      *iv_return = glVertexAttrib3dvARB;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glVertexAttrib4dvARB", 20)) {
    /*                              ^           */
#ifdef glVertexAttrib4dvARB
      *iv_return = glVertexAttrib4dvARB;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glVertexStream1dvATI", 20)) {
    /*                              ^           */
#ifdef glVertexStream1dvATI
      *iv_return = glVertexStream1dvATI;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glVertexStream2dvATI", 20)) {
    /*                              ^           */
#ifdef glVertexStream2dvATI
      *iv_return = glVertexStream2dvATI;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glVertexStream3dvATI", 20)) {
    /*                              ^           */
#ifdef glVertexStream3dvATI
      *iv_return = glVertexStream3dvATI;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glVertexStream4dvATI", 20)) {
    /*                              ^           */
#ifdef glVertexStream4dvATI
      *iv_return = glVertexStream4dvATI;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case 'e':
    if (memEQ(name, "GLEW_EXT_cull_vertex", 20)) {
    /*                              ^           */
#ifdef GLEW_EXT_cull_vertex
      *iv_return = GLEW_EXT_cull_vertex;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GLEW_EXT_texture_env", 20)) {
    /*                              ^           */
#ifdef GLEW_EXT_texture_env
      *iv_return = GLEW_EXT_texture_env;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GLEW_IBM_cull_vertex", 20)) {
    /*                              ^           */
#ifdef GLEW_IBM_cull_vertex
      *iv_return = GLEW_IBM_cull_vertex;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_AMD_pinned_memory", 20)) {
    /*                              ^           */
#ifdef GL_AMD_pinned_memory
      *iv_return = GL_AMD_pinned_memory;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_KTX_buffer_region", 20)) {
    /*                              ^           */
#ifdef GL_KTX_buffer_region
      *iv_return = GL_KTX_buffer_region;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_NV_path_rendering", 20)) {
    /*                              ^           */
#ifdef GL_NV_path_rendering
      *iv_return = GL_NV_path_rendering;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glBindFramebufferEXT", 20)) {
    /*                              ^           */
#ifdef glBindFramebufferEXT
      *iv_return = glBindFramebufferEXT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glBinormalPointerEXT", 20)) {
    /*                              ^           */
#ifdef glBinormalPointerEXT
      *iv_return = glBinormalPointerEXT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glBlitFramebufferEXT", 20)) {
    /*                              ^           */
#ifdef glBlitFramebufferEXT
      *iv_return = glBlitFramebufferEXT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glDeleteBufferRegion", 20)) {
    /*                              ^           */
#ifdef glDeleteBufferRegion
      *iv_return = glDeleteBufferRegion;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glEdgeFlagPointerEXT", 20)) {
    /*                              ^           */
#ifdef glEdgeFlagPointerEXT
      *iv_return = glEdgeFlagPointerEXT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glEndVertexShaderEXT", 20)) {
    /*                              ^           */
#ifdef glEndVertexShaderEXT
      *iv_return = glEndVertexShaderEXT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glFogCoordPointerEXT", 20)) {
    /*                              ^           */
#ifdef glFogCoordPointerEXT
      *iv_return = glFogCoordPointerEXT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glGetMultisamplefvNV", 20)) {
    /*                              ^           */
#ifdef glGetMultisamplefvNV
      *iv_return = glGetMultisamplefvNV;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glGetTexParameterIiv", 20)) {
    /*                              ^           */
#ifdef glGetTexParameterIiv
      *iv_return = glGetTexParameterIiv;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glIsBufferResidentNV", 20)) {
    /*                              ^           */
#ifdef glIsBufferResidentNV
      *iv_return = glIsBufferResidentNV;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glIsOcclusionQueryNV", 20)) {
    /*                              ^           */
#ifdef glIsOcclusionQueryNV
      *iv_return = glIsOcclusionQueryNV;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glMapObjectBufferATI", 20)) {
    /*                              ^           */
#ifdef glMapObjectBufferATI
      *iv_return = glMapObjectBufferATI;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glNewObjectBufferATI", 20)) {
    /*                              ^           */
#ifdef glNewObjectBufferATI
      *iv_return = glNewObjectBufferATI;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glProvokingVertexEXT", 20)) {
    /*                              ^           */
#ifdef glProvokingVertexEXT
      *iv_return = glProvokingVertexEXT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glPushGroupMarkerEXT", 20)) {
    /*                              ^           */
#ifdef glPushGroupMarkerEXT
      *iv_return = glPushGroupMarkerEXT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glReferencePlaneSGIX", 20)) {
    /*                              ^           */
#ifdef glReferencePlaneSGIX
      *iv_return = glReferencePlaneSGIX;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glTexCoordPointerEXT", 20)) {
    /*                              ^           */
#ifdef glTexCoordPointerEXT
      *iv_return = glTexCoordPointerEXT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case 'f':
    if (memEQ(name, "GLEW_SGIX_fog_offset", 20)) {
    /*                              ^           */
#ifdef GLEW_SGIX_fog_offset
      *iv_return = GLEW_SGIX_fog_offset;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_ARB_texture_float", 20)) {
    /*                              ^           */
#ifdef GL_ARB_texture_float
      *iv_return = GL_ARB_texture_float;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_ATI_texture_float", 20)) {
    /*                              ^           */
#ifdef GL_ATI_texture_float
      *iv_return = GL_ATI_texture_float;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_EXT_draw_buffers2", 20)) {
    /*                              ^           */
#ifdef GL_EXT_draw_buffers2
      *iv_return = GL_EXT_draw_buffers2;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glCreateFramebuffers", 20)) {
    /*                              ^           */
#ifdef glCreateFramebuffers
      *iv_return = glCreateFramebuffers;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glCullParameterfvEXT", 20)) {
    /*                              ^           */
#ifdef glCullParameterfvEXT
      *iv_return = glCullParameterfvEXT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glDeleteFramebuffers", 20)) {
    /*                              ^           */
#ifdef glDeleteFramebuffers
      *iv_return = glDeleteFramebuffers;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glFragmentLightfSGIX", 20)) {
    /*                              ^           */
#ifdef glFragmentLightfSGIX
      *iv_return = glFragmentLightfSGIX;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glFragmentLightfvEXT", 20)) {
    /*                              ^           */
#ifdef glFragmentLightfvEXT
      *iv_return = glFragmentLightfvEXT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glNormalStream3fvATI", 20)) {
    /*                              ^           */
#ifdef glNormalStream3fvATI
      *iv_return = glNormalStream3fvATI;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glVertexAttrib1fvARB", 20)) {
    /*                              ^           */
#ifdef glVertexAttrib1fvARB
      *iv_return = glVertexAttrib1fvARB;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glVertexAttrib2fvARB", 20)) {
    /*                              ^           */
#ifdef glVertexAttrib2fvARB
      *iv_return = glVertexAttrib2fvARB;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glVertexAttrib3fvARB", 20)) {
    /*                              ^           */
#ifdef glVertexAttrib3fvARB
      *iv_return = glVertexAttrib3fvARB;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glVertexAttrib4fvARB", 20)) {
    /*                              ^           */
#ifdef glVertexAttrib4fvARB
      *iv_return = glVertexAttrib4fvARB;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glVertexStream1fvATI", 20)) {
    /*                              ^           */
#ifdef glVertexStream1fvATI
      *iv_return = glVertexStream1fvATI;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glVertexStream2fvATI", 20)) {
    /*                              ^           */
#ifdef glVertexStream2fvATI
      *iv_return = glVertexStream2fvATI;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glVertexStream3fvATI", 20)) {
    /*                              ^           */
#ifdef glVertexStream3fvATI
      *iv_return = glVertexStream3fvATI;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glVertexStream4fvATI", 20)) {
    /*                              ^           */
#ifdef glVertexStream4fvATI
      *iv_return = glVertexStream4fvATI;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case 'g':
    if (memEQ(name, "GLEW_NV_gpu_program4", 20)) {
    /*                              ^           */
#ifdef GLEW_NV_gpu_program4
      *iv_return = GLEW_NV_gpu_program4;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GLEW_NV_gpu_program5", 20)) {
    /*                              ^           */
#ifdef GLEW_NV_gpu_program5
      *iv_return = GLEW_NV_gpu_program5;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glBindBufferRangeEXT", 20)) {
    /*                              ^           */
#ifdef glBindBufferRangeEXT
      *iv_return = glBindBufferRangeEXT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glGetDebugMessageLog", 20)) {
    /*                              ^           */
#ifdef glGetDebugMessageLog
      *iv_return = glGetDebugMessageLog;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glGetTextureImageEXT", 20)) {
    /*                              ^           */
#ifdef glGetTextureImageEXT
      *iv_return = glGetTextureImageEXT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case 'h':
    if (memEQ(name, "GL_ARB_vertex_shader", 20)) {
    /*                              ^           */
#ifdef GL_ARB_vertex_shader
      *iv_return = GL_ARB_vertex_shader;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_EXT_vertex_shader", 20)) {
    /*                              ^           */
#ifdef GL_EXT_vertex_shader
      *iv_return = GL_EXT_vertex_shader;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_NV_texture_shader", 20)) {
    /*                              ^           */
#ifdef GL_NV_texture_shader
      *iv_return = GL_NV_texture_shader;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case 'i':
    if (memEQ(name, "GL_ARB_compatibility", 20)) {
    /*                              ^           */
#ifdef GL_ARB_compatibility
      *iv_return = GL_ARB_compatibility;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_ARB_draw_indirect", 20)) {
    /*                              ^           */
#ifdef GL_ARB_draw_indirect
      *iv_return = GL_ARB_draw_indirect;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_EXT_packed_pixels", 20)) {
    /*                              ^           */
#ifdef GL_EXT_packed_pixels
      *iv_return = GL_EXT_packed_pixels;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glDrawArraysIndirect", 20)) {
    /*                              ^           */
#ifdef glDrawArraysIndirect
      *iv_return = glDrawArraysIndirect;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glFragmentLightiSGIX", 20)) {
    /*                              ^           */
#ifdef glFragmentLightiSGIX
      *iv_return = glFragmentLightiSGIX;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glFragmentLightivEXT", 20)) {
    /*                              ^           */
#ifdef glFragmentLightivEXT
      *iv_return = glFragmentLightivEXT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glGetActiveAttribARB", 20)) {
    /*                              ^           */
#ifdef glGetActiveAttribARB
      *iv_return = glGetActiveAttribARB;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glGetActiveVaryingNV", 20)) {
    /*                              ^           */
#ifdef glGetActiveVaryingNV
      *iv_return = glGetActiveVaryingNV;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glGetProgramStringNV", 20)) {
    /*                              ^           */
#ifdef glGetProgramStringNV
      *iv_return = glGetProgramStringNV;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glGetSeparableFilter", 20)) {
    /*                              ^           */
#ifdef glGetSeparableFilter
      *iv_return = glGetSeparableFilter;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glGetVertexAttribIiv", 20)) {
    /*                              ^           */
#ifdef glGetVertexAttribIiv
      *iv_return = glGetVertexAttribIiv;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glGetVertexAttribLdv", 20)) {
    /*                              ^           */
#ifdef glGetVertexAttribLdv
      *iv_return = glGetVertexAttribLdv;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glGetnPixelMapuivARB", 20)) {
    /*                              ^           */
#ifdef glGetnPixelMapuivARB
      *iv_return = glGetnPixelMapuivARB;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glMulticastBarrierNV", 20)) {
    /*                              ^           */
#ifdef glMulticastBarrierNV
      *iv_return = glMulticastBarrierNV;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glNormalStream3ivATI", 20)) {
    /*                              ^           */
#ifdef glNormalStream3ivATI
      *iv_return = glNormalStream3ivATI;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glTexParameterIivEXT", 20)) {
    /*                              ^           */
#ifdef glTexParameterIivEXT
      *iv_return = glTexParameterIivEXT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glVertexAttrib4ivARB", 20)) {
    /*                              ^           */
#ifdef glVertexAttrib4ivARB
      *iv_return = glVertexAttrib4ivARB;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glVertexStream1ivATI", 20)) {
    /*                              ^           */
#ifdef glVertexStream1ivATI
      *iv_return = glVertexStream1ivATI;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glVertexStream2ivATI", 20)) {
    /*                              ^           */
#ifdef glVertexStream2ivATI
      *iv_return = glVertexStream2ivATI;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glVertexStream3ivATI", 20)) {
    /*                              ^           */
#ifdef glVertexStream3ivATI
      *iv_return = glVertexStream3ivATI;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glVertexStream4ivATI", 20)) {
    /*                              ^           */
#ifdef glVertexStream4ivATI
      *iv_return = glVertexStream4ivATI;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case 'l':
    if (memEQ(name, "GLEW_EXT_debug_label", 20)) {
    /*                              ^           */
#ifdef GLEW_EXT_debug_label
      *iv_return = GLEW_EXT_debug_label;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glReadVideoPixelsSUN", 20)) {
    /*                              ^           */
#ifdef glReadVideoPixelsSUN
      *iv_return = glReadVideoPixelsSUN;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case 'm':
    if (memEQ(name, "glProgramUniform1uiv", 20)) {
    /*                              ^           */
#ifdef glProgramUniform1uiv
      *iv_return = glProgramUniform1uiv;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glProgramUniform2uiv", 20)) {
    /*                              ^           */
#ifdef glProgramUniform2uiv
      *iv_return = glProgramUniform2uiv;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glProgramUniform3uiv", 20)) {
    /*                              ^           */
#ifdef glProgramUniform3uiv
      *iv_return = glProgramUniform3uiv;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glProgramUniform4uiv", 20)) {
    /*                              ^           */
#ifdef glProgramUniform4uiv
      *iv_return = glProgramUniform4uiv;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case 'n':
    if (memEQ(name, "glDebugMessageInsert", 20)) {
    /*                              ^           */
#ifdef glDebugMessageInsert
      *iv_return = glDebugMessageInsert;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glInsertComponentEXT", 20)) {
    /*                              ^           */
#ifdef glInsertComponentEXT
      *iv_return = glInsertComponentEXT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glMapControlPointsNV", 20)) {
    /*                              ^           */
#ifdef glMapControlPointsNV
      *iv_return = glMapControlPointsNV;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glVertexArrayRangeNV", 20)) {
    /*                              ^           */
#ifdef glVertexArrayRangeNV
      *iv_return = glVertexArrayRangeNV;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case 'o':
    if (memEQ(name, "GLEW_OES_read_format", 20)) {
    /*                              ^           */
#ifdef GLEW_OES_read_format
      *iv_return = GLEW_OES_read_format;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_NV_vertex_program", 20)) {
    /*                              ^           */
#ifdef GL_NV_vertex_program
      *iv_return = GL_NV_vertex_program;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glNamedBufferStorage", 20)) {
    /*                              ^           */
#ifdef glNamedBufferStorage
      *iv_return = glNamedBufferStorage;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glVertexAttribFormat", 20)) {
    /*                              ^           */
#ifdef glVertexAttribFormat
      *iv_return = glVertexAttribFormat;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case 'p':
    if (memEQ(name, "GLEW_NV_point_sprite", 20)) {
    /*                              ^           */
#ifdef GLEW_NV_point_sprite
      *iv_return = GLEW_NV_point_sprite;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case 'q':
    if (memEQ(name, "GLEW_ARB_timer_query", 20)) {
    /*                              ^           */
#ifdef GLEW_ARB_timer_query
      *iv_return = GLEW_ARB_timer_query;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GLEW_EXT_timer_query", 20)) {
    /*                              ^           */
#ifdef GLEW_EXT_timer_query
      *iv_return = GLEW_EXT_timer_query;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GLEW_NV_blend_square", 20)) {
    /*                              ^           */
#ifdef GLEW_NV_blend_square
      *iv_return = GLEW_NV_blend_square;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_ANGLE_timer_query", 20)) {
    /*                              ^           */
#ifdef GL_ANGLE_timer_query
      *iv_return = GL_ANGLE_timer_query;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case 'r':
    if (memEQ(name, "GLEW_APPLE_ycbcr_422", 20)) {
    /*                              ^           */
#ifdef GLEW_APPLE_ycbcr_422
      *iv_return = GLEW_APPLE_ycbcr_422;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glBlendFuncSeparatei", 20)) {
    /*                              ^           */
#ifdef glBlendFuncSeparatei
      *iv_return = glBlendFuncSeparatei;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glCreateVertexArrays", 20)) {
    /*                              ^           */
#ifdef glCreateVertexArrays
      *iv_return = glCreateVertexArrays;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glDeleteVertexArrays", 20)) {
    /*                              ^           */
#ifdef glDeleteVertexArrays
      *iv_return = glDeleteVertexArrays;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glGenFramebuffersEXT", 20)) {
    /*                              ^           */
#ifdef glGenFramebuffersEXT
      *iv_return = glGenFramebuffersEXT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glGenPerfMonitorsAMD", 20)) {
    /*                              ^           */
#ifdef glGenPerfMonitorsAMD
      *iv_return = glGenPerfMonitorsAMD;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glGetPathDashArrayNV", 20)) {
    /*                              ^           */
#ifdef glGetPathDashArrayNV
      *iv_return = glGetPathDashArrayNV;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glPointParameterfARB", 20)) {
    /*                              ^           */
#ifdef glPointParameterfARB
      *iv_return = glPointParameterfARB;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glPointParameterfEXT", 20)) {
    /*                              ^           */
#ifdef glPointParameterfEXT
      *iv_return = glPointParameterfEXT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glPointParameterivNV", 20)) {
    /*                              ^           */
#ifdef glPointParameterivNV
      *iv_return = glPointParameterivNV;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glSecondaryColor3hNV", 20)) {
    /*                              ^           */
#ifdef glSecondaryColor3hNV
      *iv_return = glSecondaryColor3hNV;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glSecondaryColor3ubv", 20)) {
    /*                              ^           */
#ifdef glSecondaryColor3ubv
      *iv_return = glSecondaryColor3ubv;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glSecondaryColor3uiv", 20)) {
    /*                              ^           */
#ifdef glSecondaryColor3uiv
      *iv_return = glSecondaryColor3uiv;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glSecondaryColor3usv", 20)) {
    /*                              ^           */
#ifdef glSecondaryColor3usv
      *iv_return = glSecondaryColor3usv;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glSecondaryColorP3ui", 20)) {
    /*                              ^           */
#ifdef glSecondaryColorP3ui
      *iv_return = glSecondaryColorP3ui;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case 's':
    if (memEQ(name, "GL_EXT_texture_snorm", 20)) {
    /*                              ^           */
#ifdef GL_EXT_texture_snorm
      *iv_return = GL_EXT_texture_snorm;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glBindBufferOffsetNV", 20)) {
    /*                              ^           */
#ifdef glBindBufferOffsetNV
      *iv_return = glBindBufferOffsetNV;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glGetnPixelMapusvARB", 20)) {
    /*                              ^           */
#ifdef glGetnPixelMapusvARB
      *iv_return = glGetnPixelMapusvARB;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glNormalStream3svATI", 20)) {
    /*                              ^           */
#ifdef glNormalStream3svATI
      *iv_return = glNormalStream3svATI;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glVertexAttrib1svARB", 20)) {
    /*                              ^           */
#ifdef glVertexAttrib1svARB
      *iv_return = glVertexAttrib1svARB;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glVertexAttrib2svARB", 20)) {
    /*                              ^           */
#ifdef glVertexAttrib2svARB
      *iv_return = glVertexAttrib2svARB;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glVertexAttrib3svARB", 20)) {
    /*                              ^           */
#ifdef glVertexAttrib3svARB
      *iv_return = glVertexAttrib3svARB;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glVertexAttrib4svARB", 20)) {
    /*                              ^           */
#ifdef glVertexAttrib4svARB
      *iv_return = glVertexAttrib4svARB;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glVertexStream1svATI", 20)) {
    /*                              ^           */
#ifdef glVertexStream1svATI
      *iv_return = glVertexStream1svATI;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glVertexStream2svATI", 20)) {
    /*                              ^           */
#ifdef glVertexStream2svATI
      *iv_return = glVertexStream2svATI;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glVertexStream3svATI", 20)) {
    /*                              ^           */
#ifdef glVertexStream3svATI
      *iv_return = glVertexStream3svATI;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glVertexStream4svATI", 20)) {
    /*                              ^           */
#ifdef glVertexStream4svATI
      *iv_return = glVertexStream4svATI;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case 't':
    if (memEQ(name, "GLEW_NV_fog_distance", 20)) {
    /*                              ^           */
#ifdef GLEW_NV_fog_distance
      *iv_return = GLEW_NV_fog_distance;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GLEW_SGI_color_table", 20)) {
    /*                              ^           */
#ifdef GLEW_SGI_color_table
      *iv_return = GLEW_SGI_color_table;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_ARB_base_instance", 20)) {
    /*                              ^           */
#ifdef GL_ARB_base_instance
      *iv_return = GL_ARB_base_instance;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_ARB_cull_distance", 20)) {
    /*                              ^           */
#ifdef GL_ARB_cull_distance
      *iv_return = GL_ARB_cull_distance;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glGetQueryObjecti64v", 20)) {
    /*                              ^           */
#ifdef glGetQueryObjecti64v
      *iv_return = glGetQueryObjecti64v;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glInterpolatePathsNV", 20)) {
    /*                              ^           */
#ifdef glInterpolatePathsNV
      *iv_return = glInterpolatePathsNV;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glNamedBufferDataEXT", 20)) {
    /*                              ^           */
#ifdef glNamedBufferDataEXT
      *iv_return = glNamedBufferDataEXT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glSamplerParameterfv", 20)) {
    /*                              ^           */
#ifdef glSamplerParameterfv
      *iv_return = glSamplerParameterfv;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glSamplerParameteriv", 20)) {
    /*                              ^           */
#ifdef glSamplerParameteriv
      *iv_return = glSamplerParameteriv;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glTextureParameterfv", 20)) {
    /*                              ^           */
#ifdef glTextureParameterfv
      *iv_return = glTextureParameterfv;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glTextureParameteriv", 20)) {
    /*                              ^           */
#ifdef glTextureParameteriv
      *iv_return = glTextureParameteriv;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case 'u':
    if (memEQ(name, "GLEW_ARB_copy_buffer", 20)) {
    /*                              ^           */
#ifdef GLEW_ARB_copy_buffer
      *iv_return = GLEW_ARB_copy_buffer;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GLEW_EXT_convolution", 20)) {
    /*                              ^           */
#ifdef GLEW_EXT_convolution
      *iv_return = GLEW_EXT_convolution;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GLEW_NV_float_buffer", 20)) {
    /*                              ^           */
#ifdef GLEW_NV_float_buffer
      *iv_return = GLEW_NV_float_buffer;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_ARB_sparse_buffer", 20)) {
    /*                              ^           */
#ifdef GL_ARB_sparse_buffer
      *iv_return = GL_ARB_sparse_buffer;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_NV_deep_texture3D", 20)) {
    /*                              ^           */
#ifdef GL_NV_deep_texture3D
      *iv_return = GL_NV_deep_texture3D;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glVertexAttrib4ubvNV", 20)) {
    /*                              ^           */
#ifdef glVertexAttrib4ubvNV
      *iv_return = glVertexAttrib4ubvNV;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case 'v':
    if (memEQ(name, "glVertexBlendEnvfATI", 20)) {
    /*                              ^           */
#ifdef glVertexBlendEnvfATI
      *iv_return = glVertexBlendEnvfATI;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glVertexBlendEnviATI", 20)) {
    /*                              ^           */
#ifdef glVertexBlendEnviATI
      *iv_return = glVertexBlendEnviATI;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case 'w':
    if (memEQ(name, "GLEW_MESA_window_pos", 20)) {
    /*                              ^           */
#ifdef GLEW_MESA_window_pos
      *iv_return = GLEW_MESA_window_pos;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case 'x':
    if (memEQ(name, "GLEW_NV_draw_texture", 20)) {
    /*                              ^           */
#ifdef GLEW_NV_draw_texture
      *iv_return = GLEW_NV_draw_texture;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_ARB_clear_texture", 20)) {
    /*                              ^           */
#ifdef GL_ARB_clear_texture
      *iv_return = GL_ARB_clear_texture;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_ARB_depth_texture", 20)) {
    /*                              ^           */
#ifdef GL_ARB_depth_texture
      *iv_return = GL_ARB_depth_texture;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_EXT_index_texture", 20)) {
    /*                              ^           */
#ifdef GL_EXT_index_texture
      *iv_return = GL_EXT_index_texture;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_EXT_light_texture", 20)) {
    /*                              ^           */
#ifdef GL_EXT_light_texture
      *iv_return = GL_EXT_light_texture;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_INTEL_map_texture", 20)) {
    /*                              ^           */
#ifdef GL_INTEL_map_texture
      *iv_return = GL_INTEL_map_texture;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glFramebufferTexture", 20)) {
    /*                              ^           */
#ifdef glFramebufferTexture
      *iv_return = glFramebufferTexture;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glGetTrackMatrixivNV", 20)) {
    /*                              ^           */
#ifdef glGetTrackMatrixivNV
      *iv_return = glGetTrackMatrixivNV;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case 'y':
    if (memEQ(name, "glMultiDrawArraysEXT", 20)) {
    /*                              ^           */
#ifdef glMultiDrawArraysEXT
      *iv_return = glMultiDrawArraysEXT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  }
  return PERL_constant_NOTFOUND;
}

static int
constant_21 (pTHX_ const char *name, IV *iv_return) {
  /* When generated this function returned values for the list of names given
     here.  However, subsequent manual editing may have added or removed some.
     GLEW_3DFX_multisample GLEW_AMD_debug_output GLEW_ARB_clip_control
     GLEW_ARB_debug_output GLEW_ARB_draw_buffers GLEW_ARB_multitexture
     GLEW_ARB_point_sprite GLEW_ARB_shader_clock GLEW_ARB_texture_view
     GLEW_ARB_vertex_blend GLEW_ATI_draw_buffers GLEW_ATI_pn_triangles
     GLEW_EXT_blend_minmax GLEW_EXT_copy_texture GLEW_EXT_debug_marker
     GLEW_EXT_packed_float GLEW_EXT_scene_marker GLEW_EXT_shadow_funcs
     GLEW_EXT_stencil_wrap GLEW_EXT_texture_sRGB GLEW_EXT_vertex_array
     GLEW_INGR_color_clamp GLEW_MESA_pack_invert GLEW_NV_gpu_multicast
     GLEW_NV_present_video GLEW_NV_texgen_emboss GLEW_NV_vdpau_interop
     GLEW_NV_video_capture GLEW_PGI_vertex_hints GLEW_SGIS_color_range
     GLEW_SGIS_multisample GLEW_SGIS_texture_lod GLEW_SGIX_async_pixel
     GLEW_SGIX_fog_texture GLEW_SGI_color_matrix GLEW_SUN_global_alpha
     GLEW_WIN_specular_fog GL_ACTIVE_PROGRAM_EXT GL_ACTIVE_SUBROUTINES
     GL_ACTIVE_TEXTURE_ARB GL_ACTIVE_VARYINGS_NV GL_AMD_sparse_texture
     GL_ANY_SAMPLES_PASSED GL_APPLE_float_pixels GL_APPLE_pixel_buffer
     GL_ARB_buffer_storage GL_ARB_compute_shader GL_ARB_draw_instanced
     GL_ARB_matrix_palette GL_ARB_sample_shading GL_ARB_shader_objects
     GL_ARB_shadow_ambient GL_ARB_sparse_texture GL_ARB_texture_gather
     GL_ARB_vertex_program GL_ARB_viewport_array GL_ATIX_point_sprites
     GL_ATI_envmap_bumpmap GL_ATI_vertex_streams GL_ATTRIB_STACK_DEPTH
     GL_BINORMAL_ARRAY_EXT GL_BLEND_EQUATION_EXT GL_BLEND_EQUATION_RGB
     GL_BUFFER_MAP_POINTER GL_BUMP_TEX_UNITS_ATI GL_CLAMP_TO_EDGE_SGIS
     GL_CLAMP_VERTEX_COLOR GL_CLIENT_STORAGE_BIT GL_CLIP_NEAR_HINT_PGI
     GL_COLOR_ARRAY_STRIDE GL_COLOR_ATTACHMENT10 GL_COLOR_ATTACHMENT11
     GL_COLOR_ATTACHMENT12 GL_COLOR_ATTACHMENT13 GL_COLOR_ATTACHMENT14
     GL_COLOR_ATTACHMENT15 GL_COLOR_SUM_CLAMP_NV GL_COLOR_TABLE_FORMAT
     GL_COMPRESSED_R11_EAC GL_COMPRESSED_RGB_ARB GL_COMPUTE_PROGRAM_NV
     GL_COMPUTE_SHADER_BIT GL_COMPUTE_SUBROUTINE GL_CONSTANT_ALPHA_EXT
     GL_CONSTANT_COLOR0_NV GL_CONSTANT_COLOR1_NV GL_CONSTANT_COLOR_EXT
     GL_CONVOLUTION_1D_EXT GL_CONVOLUTION_2D_EXT GL_CONVOLUTION_FORMAT
     GL_CONVOLUTION_HEIGHT GL_CURRENT_MATRIX_ARB GL_CURRENT_VERTEX_EXT
     GL_CURRENT_WEIGHT_ARB GL_DEBUG_SEVERITY_LOW GL_DEBUG_SOURCE_OTHER
     GL_DEPTH_COMPONENT32F GL_DEPTH_TEXTURE_MODE GL_EMBOSS_CONSTANT_NV
     GL_EXT_blend_logic_op GL_EXT_blend_subtract GL_EXT_color_subtable
     GL_EXT_draw_instanced GL_EXT_index_material GL_EXT_misc_attribute
     GL_EXT_polygon_offset GL_EXT_rescale_normal GL_EXT_texture_object
     GL_FENCE_CONDITION_NV GL_FLOAT_RGBA_MODE_NV GL_FOG_COORDINATE_EXT
     GL_FONT_HEIGHT_BIT_NV GL_FRAGMENT_COLOR_EXT GL_FRAGMENT_DEPTH_EXT
     GL_GLYPH_WIDTH_BIT_NV GL_HISTOGRAM_RED_SIZE GL_HISTOGRAM_SINK_EXT
     GL_HP_image_transform GL_HSL_LUMINOSITY_KHR GL_HSL_SATURATION_KHR
     GL_IBM_rasterpos_clip GL_IMAGE_1D_ARRAY_EXT GL_IMAGE_2D_ARRAY_EXT
     GL_IMAGE_BINDING_NAME GL_IMAGE_CLASS_1_X_16 GL_IMAGE_CLASS_1_X_32
     GL_IMAGE_CLASS_2_X_16 GL_IMAGE_CLASS_2_X_32 GL_IMAGE_CLASS_4_X_16
     GL_IMAGE_CLASS_4_X_32 GL_IMAGE_PIXEL_FORMAT GL_INDEX_ARRAY_STRIDE
     GL_INTERLACE_READ_OML GL_INT_2_10_10_10_REV GL_INT_IMAGE_1D_ARRAY
     GL_INT_IMAGE_2D_ARRAY GL_INT_IMAGE_CUBE_EXT GL_INT_SAMPLER_1D_EXT
     GL_INT_SAMPLER_2D_EXT GL_INT_SAMPLER_3D_EXT GL_INT_SAMPLER_BUFFER
     GL_KTX_STENCIL_REGION GL_LARGE_CW_ARC_TO_NV GL_LIGHT_ENV_MODE_EXT
     GL_LINEAR_ATTENUATION GL_LOCAL_CONSTANT_EXT GL_LOCATION_COMPONENT
     GL_LOG_INTERNAL_REGAL GL_LUMINANCE12_ALPHA4 GL_MAGNITUDE_SCALE_NV
     GL_MAP1_GRID_SEGMENTS GL_MAP2_GRID_SEGMENTS GL_MAP_PERSISTENT_BIT
     GL_MATRIX_PALETTE_ARB GL_MAX_CLIP_DISTANCES GL_MAX_CULL_DISTANCES
     GL_MAX_INTENSITY_SGIS GL_MAX_LUMINANCE_SGIS GL_MAX_PATCH_VERTICES
     GL_MAX_TESS_GEN_LEVEL GL_MAX_TEXTURE_COORDS GL_MAX_VARYING_FLOATS
     GL_MAX_VERTEX_ATTRIBS GL_MAX_VERTEX_STREAMS GL_MESA_ycbcr_texture
     GL_MIN_INTENSITY_SGIS GL_MIN_LUMINANCE_SGIS GL_NV_occlusion_query
     GL_NV_texture_barrier GL_NV_texture_shader2 GL_NV_texture_shader3
     GL_NV_vertex_program2 GL_NV_vertex_program3 GL_NV_vertex_program4
     GL_NV_viewport_array2 GL_OBJECT_SUBTYPE_ARB GL_OPERAND0_ALPHA_ARB
     GL_OPERAND0_ALPHA_EXT GL_OPERAND1_ALPHA_ARB GL_OPERAND1_ALPHA_EXT
     GL_OPERAND2_ALPHA_ARB GL_OPERAND2_ALPHA_EXT GL_PACK_CMYK_HINT_EXT
     GL_PACK_RESAMPLE_SGIX GL_PALETTE4_RGBA4_OES GL_PALETTE4_RGBA8_OES
     GL_PALETTE8_RGBA4_OES GL_PALETTE8_RGBA8_OES GL_PARTIAL_SUCCESS_NV
     GL_PASS_THROUGH_TOKEN GL_PATH_FORMAT_SVG_NV GL_PATH_JOIN_STYLE_NV
     GL_PERFMON_RESULT_AMD GL_PER_GPU_STORAGE_NV GL_POINT_SIZE_MAX_ARB
     GL_POINT_SIZE_MAX_EXT GL_POINT_SIZE_MIN_ARB GL_POINT_SIZE_MIN_EXT
     GL_POLYGON_OFFSET_EXT GL_PROGRAM_FORMAT_ARB GL_PROGRAM_LENGTH_ARB
     GL_PROGRAM_MATRIX_EXT GL_PROGRAM_OBJECT_ARB GL_PROGRAM_OBJECT_EXT
     GL_PROGRAM_POINT_SIZE GL_PROGRAM_STRING_ARB GL_QUERY_COUNTER_BITS
     GL_QUERY_RESULT_ANGLE GL_R11F_G11F_B10F_EXT GL_RASTERIZER_DISCARD
     GL_RASTER_SAMPLES_EXT GL_READ_PIXELS_FORMAT GL_RED_MAX_CLAMP_INGR
     GL_RED_MIN_CLAMP_INGR GL_REFLECTION_MAP_ARB GL_REFLECTION_MAP_EXT
     GL_REGAL_error_string GL_REGAL_proc_address GL_RELATIVE_ARC_TO_NV
     GL_RENDERBUFFER_WIDTH GL_RENDER_GPU_MASK_NV GL_REPLACE_MIDDLE_SUN
     GL_REPLACE_OLDEST_SUN GL_RESCALE_NORMAL_EXT GL_RGBA16_SIGNED_SGIX
     GL_RGBA_FLOAT16_APPLE GL_RGBA_FLOAT32_APPLE GL_SAMPLER_BUFFER_AMD
     GL_SAMPLER_BUFFER_EXT GL_SAMPLER_OBJECT_AMD GL_SAMPLES_PASSED_ARB
     GL_SAMPLE_BUFFERS_ARB GL_SAMPLE_BUFFERS_EXT GL_SAMPLE_LOCATION_NV
     GL_SAMPLE_PATTERN_EXT GL_SAMPLE_POSITION_NV GL_SAMPLE_SHADING_ARB
     GL_SCISSOR_COMMAND_NV GL_SECONDARY_COLOR_NV GL_SGIS_pixel_texture
     GL_SGIX_depth_texture GL_SGIX_list_priority GL_SGIX_pixel_texture
     GL_SGIX_texture_range GL_SHADER_IMAGE_STORE GL_SHADER_INCLUDE_ARB
     GL_SIGNED_IDENTITY_NV GL_SLUMINANCE8_ALPHA8 GL_SMALL_CW_ARC_TO_NV
     GL_SRC_ALPHA_SATURATE GL_STENCIL_ATTACHMENT GL_STENCIL_BUFFER_BIT
     GL_STENCIL_COMPONENTS GL_STENCIL_INDEX1_EXT GL_STENCIL_INDEX4_EXT
     GL_STENCIL_INDEX8_EXT GL_STENCIL_RENDERABLE GL_STENCIL_SAMPLES_NV
     GL_STENCIL_VALUE_MASK GL_SUNX_constant_data GL_SWIZZLE_STQ_DQ_ATI
     GL_SWIZZLE_STR_DR_ATI GL_SYNC_X11_FENCE_EXT GL_TEXTURE_ALPHA_SIZE
     GL_TEXTURE_ALPHA_TYPE GL_TEXTURE_BASE_LEVEL GL_TEXTURE_BINDING_1D
     GL_TEXTURE_BINDING_2D GL_TEXTURE_BINDING_3D GL_TEXTURE_BUFFER_ARB
     GL_TEXTURE_BUFFER_EXT GL_TEXTURE_COMPONENTS GL_TEXTURE_COMPRESSED
     GL_TEXTURE_DEPTH_SIZE GL_TEXTURE_DEPTH_TYPE GL_TEXTURE_DS_SIZE_NV
     GL_TEXTURE_DT_SIZE_NV GL_TEXTURE_GREEN_SIZE GL_TEXTURE_GREEN_TYPE
     GL_TEXTURE_HI_SIZE_NV GL_TEXTURE_IMAGE_TYPE GL_TEXTURE_LO_SIZE_NV
     GL_TEXTURE_MAG_FILTER GL_TEXTURE_MIN_FILTER GL_TEXTURE_NORMAL_EXT
     GL_TEXTURE_SPARSE_ARB GL_TEXTURE_WRAP_R_EXT GL_TIME_ELAPSED_ANGLE
     GL_TRANSFORM_FEEDBACK GL_UNIFORM_BUFFER_EXT GL_UNPACK_SKIP_IMAGES
     GL_UNPACK_SKIP_PIXELS GL_UNSIGNED_INT64_AMD GL_UNSIGNED_INT64_ARB
     GL_UNSIGNED_INVERT_NV GL_VERTEX_PROGRAM_ARB GL_VERTEX_STREAM0_ATI
     GL_VERTEX_STREAM1_ATI GL_VERTEX_STREAM2_ATI GL_VERTEX_STREAM3_ATI
     GL_VERTEX_STREAM4_ATI GL_VERTEX_STREAM5_ATI GL_VERTEX_STREAM6_ATI
     GL_VERTEX_STREAM7_ATI GL_VIEW_CLASS_16_BITS GL_VIEW_CLASS_24_BITS
     GL_VIEW_CLASS_32_BITS GL_VIEW_CLASS_48_BITS GL_VIEW_CLASS_64_BITS
     GL_VIEW_CLASS_96_BITS GL_WIDE_LINE_HINT_PGI glActiveShaderProgram
     glAlphaFragmentOp1ATI glAlphaFragmentOp2ATI glAlphaFragmentOp3ATI
     glBeginPerfMonitorAMD glBeginPerfQueryINTEL glBeginVideoCaptureNV
     glBindBufferOffsetEXT glBindImageTextureEXT glBindMultiTextureEXT
     glBindProgramPipeline glBindRenderbufferEXT glBindVertexShaderEXT
     glBlendFuncIndexedAMD glBufferRegionEnabled glClientActiveTexture
     glColor3fVertex3fvSUN glColor4ubVertex2fSUN glColor4ubVertex3fSUN
     glColorFragmentOp1ATI glColorFragmentOp2ATI glColorFragmentOp3ATI
     glColorMaskIndexedEXT glColorPointerListIBM glConvolutionFilter1D
     glConvolutionFilter2D glCreateRenderbuffers glDebugMessageControl
     glDeleteRenderbuffers glDrawArraysInstanced glDrawElementArrayATI
     glElementPointerAPPLE glEndOcclusionQueryNV glExtractComponentEXT
     glFragmentLightfvSGIX glFragmentLightivSGIX glFreeObjectBufferATI
     glGenAsyncMarkersSGIX glGenProgramPipelines glGenRenderbuffersEXT
     glGenVertexShadersEXT glGetActiveUniformARB glGetActiveUniformsiv
     glGetArrayObjectfvATI glGetArrayObjectivATI glGetBufferSubDataARB
     glGetFloatIndexedvEXT glGetFragDataLocation glGetIntegerui64i_vNV
     glGetInternalformativ glGetMapParameterfvNV glGetMapParameterivNV
     glGetMultiTexEnvfvEXT glGetMultiTexEnvivEXT glGetMultiTexGendvEXT
     glGetMultiTexGenfvEXT glGetMultiTexGenivEXT glGetMultiTexImageEXT
     glGetNamedStringivARB glGetPathColorGenfvNV glGetPathColorGenivNV
     glGetProcAddressREGAL glGetProgramStringARB glGetQueryObjectivARB
     glGetQueryObjectui64v glGetTexParameterIuiv glGetTextureHandleARB
     glGetUniformOffsetEXT glGetVariantFloatvEXT glGetVertexAttribIuiv
     glGetVertexAttribdvNV glGetVertexAttribfvNV glGetVertexAttribivNV
     glGetVideoCaptureivNV glGetnUniformui64vARB glIndexPointerListIBM
     glIsEnabledIndexedEXT glIsPointInFillPathNV glIsTransformFeedback
     glIsVariantEnabledEXT glMapNamedBufferRange glMatrixTranslatedEXT
     glMatrixTranslatefEXT glMinSampleShadingARB glMultiTexCoord1dvARB
     glMultiTexCoord1fvARB glMultiTexCoord1ivARB glMultiTexCoord1svARB
     glMultiTexCoord2dvARB glMultiTexCoord2fvARB glMultiTexCoord2ivARB
     glMultiTexCoord2svARB glMultiTexCoord3dvARB glMultiTexCoord3fvARB
     glMultiTexCoord3ivARB glMultiTexCoord3svARB glMultiTexCoord4dvARB
     glMultiTexCoord4fvARB glMultiTexCoord4ivARB glMultiTexCoord4svARB
     glMulticastWaitSyncNV glNormal3fVertex3fSUN glNormalPointervINTEL
     glPointParameterfvARB glPointParameterfvEXT glPointSizePointerOES
     glPresentFrameKeyedNV glProgramUniform1fEXT glProgramUniform1iEXT
     glProgramUniform2fEXT glProgramUniform2iEXT glProgramUniform3fEXT
     glProgramUniform3iEXT glProgramUniform4fEXT glProgramUniform4iEXT
     glRenderbufferStorage glSampleMaskIndexedNV glSamplerParameterIiv
     glSecondaryColor3bEXT glSecondaryColor3dEXT glSecondaryColor3fEXT
     glSecondaryColor3hvNV glSecondaryColor3iEXT glSecondaryColor3sEXT
     glSecondaryColorP3uiv glSetLocalConstantEXT glSetMultisamplefvAMD
     glSignalVkSemaphoreNV glSpecializeShaderARB glStencilFuncSeparate
     glStencilMaskSeparate glStencilStrokePathNV glStringMarkerGREMEDY
     glTagSampleBufferSGIX glTessellationModeAMD glTexParameterIuivEXT
     glTexScissorFuncINTEL glTexStorageSparseAMD glTextureParameterIiv
     glTextureStorage1DEXT glTextureStorage2DEXT glTextureStorage3DEXT
     glUniformBlockBinding glUniformHandleui64NV glUniformMatrix2fvARB
     glUniformMatrix3fvARB glUniformMatrix4fvARB glUnmapNamedBufferEXT
     glUnmapTexture2DINTEL glUseProgramObjectARB glUseShaderProgramEXT
     glVDPAUGetSurfaceivNV glVertexAttrib4NbvARB glVertexAttrib4NivARB
     glVertexAttrib4NsvARB glVertexAttrib4NubARB glVertexAttrib4ubvARB
     glVertexAttrib4uivARB glVertexAttrib4usvARB glVertexAttribBinding
     glVertexAttribDivisor glVertexAttribI1ivEXT glVertexAttribI1uiEXT
     glVertexAttribI2ivEXT glVertexAttribI2uiEXT glVertexAttribI3ivEXT
     glVertexAttribI3uiEXT glVertexAttribI4bvEXT glVertexAttribI4ivEXT
     glVertexAttribI4svEXT glVertexAttribI4uiEXT glVertexAttribIFormat
     glVertexAttribL1dvEXT glVertexAttribL1i64NV glVertexAttribL2dvEXT
     glVertexAttribL2i64NV glVertexAttribL3dvEXT glVertexAttribL3i64NV
     glVertexAttribL4dvEXT glVertexAttribL4i64NV glVertexAttribLFormat
     glVertexAttribPointer glVertexAttribs4ubvNV glVertexPointervINTEL
     glWindowRectanglesEXT */
  /* Offset 16 gives the best switch position.  */
  switch (name[16]) {
  case '0':
    if (memEQ(name, "GL_INT_2_10_10_10_REV", 21)) {
    /*                               ^           */
#ifdef GL_INT_2_10_10_10_REV
      *iv_return = GL_INT_2_10_10_10_REV;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_VERTEX_STREAM0_ATI", 21)) {
    /*                               ^           */
#ifdef GL_VERTEX_STREAM0_ATI
      *iv_return = GL_VERTEX_STREAM0_ATI;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case '1':
    if (memEQ(name, "GL_COMPRESSED_R11_EAC", 21)) {
    /*                               ^           */
#ifdef GL_COMPRESSED_R11_EAC
      *iv_return = GL_COMPRESSED_R11_EAC;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_STENCIL_INDEX1_EXT", 21)) {
    /*                               ^           */
#ifdef GL_STENCIL_INDEX1_EXT
      *iv_return = GL_STENCIL_INDEX1_EXT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_VERTEX_STREAM1_ATI", 21)) {
    /*                               ^           */
#ifdef GL_VERTEX_STREAM1_ATI
      *iv_return = GL_VERTEX_STREAM1_ATI;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glProgramUniform1fEXT", 21)) {
    /*                               ^           */
#ifdef glProgramUniform1fEXT
      *iv_return = glProgramUniform1fEXT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glProgramUniform1iEXT", 21)) {
    /*                               ^           */
#ifdef glProgramUniform1iEXT
      *iv_return = glProgramUniform1iEXT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glTextureStorage1DEXT", 21)) {
    /*                               ^           */
#ifdef glTextureStorage1DEXT
      *iv_return = glTextureStorage1DEXT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case '2':
    if (memEQ(name, "GL_VERTEX_STREAM2_ATI", 21)) {
    /*                               ^           */
#ifdef GL_VERTEX_STREAM2_ATI
      *iv_return = GL_VERTEX_STREAM2_ATI;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glColor4ubVertex2fSUN", 21)) {
    /*                               ^           */
#ifdef glColor4ubVertex2fSUN
      *iv_return = glColor4ubVertex2fSUN;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glProgramUniform2fEXT", 21)) {
    /*                               ^           */
#ifdef glProgramUniform2fEXT
      *iv_return = glProgramUniform2fEXT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glProgramUniform2iEXT", 21)) {
    /*                               ^           */
#ifdef glProgramUniform2iEXT
      *iv_return = glProgramUniform2iEXT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glTextureStorage2DEXT", 21)) {
    /*                               ^           */
#ifdef glTextureStorage2DEXT
      *iv_return = glTextureStorage2DEXT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case '3':
    if (memEQ(name, "GL_VERTEX_STREAM3_ATI", 21)) {
    /*                               ^           */
#ifdef GL_VERTEX_STREAM3_ATI
      *iv_return = GL_VERTEX_STREAM3_ATI;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glColor4ubVertex3fSUN", 21)) {
    /*                               ^           */
#ifdef glColor4ubVertex3fSUN
      *iv_return = glColor4ubVertex3fSUN;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glNormal3fVertex3fSUN", 21)) {
    /*                               ^           */
#ifdef glNormal3fVertex3fSUN
      *iv_return = glNormal3fVertex3fSUN;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glProgramUniform3fEXT", 21)) {
    /*                               ^           */
#ifdef glProgramUniform3fEXT
      *iv_return = glProgramUniform3fEXT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glProgramUniform3iEXT", 21)) {
    /*                               ^           */
#ifdef glProgramUniform3iEXT
      *iv_return = glProgramUniform3iEXT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glSecondaryColor3bEXT", 21)) {
    /*                               ^           */
#ifdef glSecondaryColor3bEXT
      *iv_return = glSecondaryColor3bEXT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glSecondaryColor3dEXT", 21)) {
    /*                               ^           */
#ifdef glSecondaryColor3dEXT
      *iv_return = glSecondaryColor3dEXT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glSecondaryColor3fEXT", 21)) {
    /*                               ^           */
#ifdef glSecondaryColor3fEXT
      *iv_return = glSecondaryColor3fEXT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glSecondaryColor3hvNV", 21)) {
    /*                               ^           */
#ifdef glSecondaryColor3hvNV
      *iv_return = glSecondaryColor3hvNV;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glSecondaryColor3iEXT", 21)) {
    /*                               ^           */
#ifdef glSecondaryColor3iEXT
      *iv_return = glSecondaryColor3iEXT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glSecondaryColor3sEXT", 21)) {
    /*                               ^           */
#ifdef glSecondaryColor3sEXT
      *iv_return = glSecondaryColor3sEXT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glTextureStorage3DEXT", 21)) {
    /*                               ^           */
#ifdef glTextureStorage3DEXT
      *iv_return = glTextureStorage3DEXT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case '4':
    if (memEQ(name, "GL_PALETTE4_RGBA4_OES", 21)) {
    /*                               ^           */
#ifdef GL_PALETTE4_RGBA4_OES
      *iv_return = GL_PALETTE4_RGBA4_OES;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_PALETTE8_RGBA4_OES", 21)) {
    /*                               ^           */
#ifdef GL_PALETTE8_RGBA4_OES
      *iv_return = GL_PALETTE8_RGBA4_OES;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_STENCIL_INDEX4_EXT", 21)) {
    /*                               ^           */
#ifdef GL_STENCIL_INDEX4_EXT
      *iv_return = GL_STENCIL_INDEX4_EXT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_UNSIGNED_INT64_AMD", 21)) {
    /*                               ^           */
#ifdef GL_UNSIGNED_INT64_AMD
      *iv_return = GL_UNSIGNED_INT64_AMD;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_UNSIGNED_INT64_ARB", 21)) {
    /*                               ^           */
#ifdef GL_UNSIGNED_INT64_ARB
      *iv_return = GL_UNSIGNED_INT64_ARB;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_VERTEX_STREAM4_ATI", 21)) {
    /*                               ^           */
#ifdef GL_VERTEX_STREAM4_ATI
      *iv_return = GL_VERTEX_STREAM4_ATI;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glGetnUniformui64vARB", 21)) {
    /*                               ^           */
#ifdef glGetnUniformui64vARB
      *iv_return = glGetnUniformui64vARB;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glProgramUniform4fEXT", 21)) {
    /*                               ^           */
#ifdef glProgramUniform4fEXT
      *iv_return = glProgramUniform4fEXT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glProgramUniform4iEXT", 21)) {
    /*                               ^           */
#ifdef glProgramUniform4iEXT
      *iv_return = glProgramUniform4iEXT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case '5':
    if (memEQ(name, "GL_VERTEX_STREAM5_ATI", 21)) {
    /*                               ^           */
#ifdef GL_VERTEX_STREAM5_ATI
      *iv_return = GL_VERTEX_STREAM5_ATI;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case '6':
    if (memEQ(name, "GL_VERTEX_STREAM6_ATI", 21)) {
    /*                               ^           */
#ifdef GL_VERTEX_STREAM6_ATI
      *iv_return = GL_VERTEX_STREAM6_ATI;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case '7':
    if (memEQ(name, "GL_VERTEX_STREAM7_ATI", 21)) {
    /*                               ^           */
#ifdef GL_VERTEX_STREAM7_ATI
      *iv_return = GL_VERTEX_STREAM7_ATI;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case '8':
    if (memEQ(name, "GL_PALETTE4_RGBA8_OES", 21)) {
    /*                               ^           */
#ifdef GL_PALETTE4_RGBA8_OES
      *iv_return = GL_PALETTE4_RGBA8_OES;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_PALETTE8_RGBA8_OES", 21)) {
    /*                               ^           */
#ifdef GL_PALETTE8_RGBA8_OES
      *iv_return = GL_PALETTE8_RGBA8_OES;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_STENCIL_INDEX8_EXT", 21)) {
    /*                               ^           */
#ifdef GL_STENCIL_INDEX8_EXT
      *iv_return = GL_STENCIL_INDEX8_EXT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case 'A':
    if (memEQ(name, "GL_ANY_SAMPLES_PASSED", 21)) {
    /*                               ^           */
#ifdef GL_ANY_SAMPLES_PASSED
      *iv_return = GL_ANY_SAMPLES_PASSED;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_COMPUTE_PROGRAM_NV", 21)) {
    /*                               ^           */
#ifdef GL_COMPUTE_PROGRAM_NV
      *iv_return = GL_COMPUTE_PROGRAM_NV;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_CONSTANT_ALPHA_EXT", 21)) {
    /*                               ^           */
#ifdef GL_CONSTANT_ALPHA_EXT
      *iv_return = GL_CONSTANT_ALPHA_EXT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_INT_IMAGE_1D_ARRAY", 21)) {
    /*                               ^           */
#ifdef GL_INT_IMAGE_1D_ARRAY
      *iv_return = GL_INT_IMAGE_1D_ARRAY;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_INT_IMAGE_2D_ARRAY", 21)) {
    /*                               ^           */
#ifdef GL_INT_IMAGE_2D_ARRAY
      *iv_return = GL_INT_IMAGE_2D_ARRAY;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_LINEAR_ATTENUATION", 21)) {
    /*                               ^           */
#ifdef GL_LINEAR_ATTENUATION
      *iv_return = GL_LINEAR_ATTENUATION;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_MAX_CLIP_DISTANCES", 21)) {
    /*                               ^           */
#ifdef GL_MAX_CLIP_DISTANCES
      *iv_return = GL_MAX_CLIP_DISTANCES;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_MAX_CULL_DISTANCES", 21)) {
    /*                               ^           */
#ifdef GL_MAX_CULL_DISTANCES
      *iv_return = GL_MAX_CULL_DISTANCES;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_OPERAND0_ALPHA_ARB", 21)) {
    /*                               ^           */
#ifdef GL_OPERAND0_ALPHA_ARB
      *iv_return = GL_OPERAND0_ALPHA_ARB;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_OPERAND0_ALPHA_EXT", 21)) {
    /*                               ^           */
#ifdef GL_OPERAND0_ALPHA_EXT
      *iv_return = GL_OPERAND0_ALPHA_EXT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_OPERAND1_ALPHA_ARB", 21)) {
    /*                               ^           */
#ifdef GL_OPERAND1_ALPHA_ARB
      *iv_return = GL_OPERAND1_ALPHA_ARB;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_OPERAND1_ALPHA_EXT", 21)) {
    /*                               ^           */
#ifdef GL_OPERAND1_ALPHA_EXT
      *iv_return = GL_OPERAND1_ALPHA_EXT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_OPERAND2_ALPHA_ARB", 21)) {
    /*                               ^           */
#ifdef GL_OPERAND2_ALPHA_ARB
      *iv_return = GL_OPERAND2_ALPHA_ARB;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_OPERAND2_ALPHA_EXT", 21)) {
    /*                               ^           */
#ifdef GL_OPERAND2_ALPHA_EXT
      *iv_return = GL_OPERAND2_ALPHA_EXT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_QUERY_RESULT_ANGLE", 21)) {
    /*                               ^           */
#ifdef GL_QUERY_RESULT_ANGLE
      *iv_return = GL_QUERY_RESULT_ANGLE;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_RGBA_FLOAT16_APPLE", 21)) {
    /*                               ^           */
#ifdef GL_RGBA_FLOAT16_APPLE
      *iv_return = GL_RGBA_FLOAT16_APPLE;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_RGBA_FLOAT32_APPLE", 21)) {
    /*                               ^           */
#ifdef GL_RGBA_FLOAT32_APPLE
      *iv_return = GL_RGBA_FLOAT32_APPLE;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_TIME_ELAPSED_ANGLE", 21)) {
    /*                               ^           */
#ifdef GL_TIME_ELAPSED_ANGLE
      *iv_return = GL_TIME_ELAPSED_ANGLE;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glElementPointerAPPLE", 21)) {
    /*                               ^           */
#ifdef glElementPointerAPPLE
      *iv_return = glElementPointerAPPLE;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case 'B':
    if (memEQ(name, "GL_COMPRESSED_RGB_ARB", 21)) {
    /*                               ^           */
#ifdef GL_COMPRESSED_RGB_ARB
      *iv_return = GL_COMPRESSED_RGB_ARB;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case 'C':
    if (memEQ(name, "GL_CLAMP_VERTEX_COLOR", 21)) {
    /*                               ^           */
#ifdef GL_CLAMP_VERTEX_COLOR
      *iv_return = GL_CLAMP_VERTEX_COLOR;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case 'D':
    if (memEQ(name, "GL_ATTRIB_STACK_DEPTH", 21)) {
    /*                               ^           */
#ifdef GL_ATTRIB_STACK_DEPTH
      *iv_return = GL_ATTRIB_STACK_DEPTH;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_CONVOLUTION_1D_EXT", 21)) {
    /*                               ^           */
#ifdef GL_CONVOLUTION_1D_EXT
      *iv_return = GL_CONVOLUTION_1D_EXT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_CONVOLUTION_2D_EXT", 21)) {
    /*                               ^           */
#ifdef GL_CONVOLUTION_2D_EXT
      *iv_return = GL_CONVOLUTION_2D_EXT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_FLOAT_RGBA_MODE_NV", 21)) {
    /*                               ^           */
#ifdef GL_FLOAT_RGBA_MODE_NV
      *iv_return = GL_FLOAT_RGBA_MODE_NV;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_INTERLACE_READ_OML", 21)) {
    /*                               ^           */
#ifdef GL_INTERLACE_READ_OML
      *iv_return = GL_INTERLACE_READ_OML;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_INT_SAMPLER_1D_EXT", 21)) {
    /*                               ^           */
#ifdef GL_INT_SAMPLER_1D_EXT
      *iv_return = GL_INT_SAMPLER_1D_EXT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_INT_SAMPLER_2D_EXT", 21)) {
    /*                               ^           */
#ifdef GL_INT_SAMPLER_2D_EXT
      *iv_return = GL_INT_SAMPLER_2D_EXT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_INT_SAMPLER_3D_EXT", 21)) {
    /*                               ^           */
#ifdef GL_INT_SAMPLER_3D_EXT
      *iv_return = GL_INT_SAMPLER_3D_EXT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_SAMPLES_PASSED_ARB", 21)) {
    /*                               ^           */
#ifdef GL_SAMPLES_PASSED_ARB
      *iv_return = GL_SAMPLES_PASSED_ARB;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_TRANSFORM_FEEDBACK", 21)) {
    /*                               ^           */
#ifdef GL_TRANSFORM_FEEDBACK
      *iv_return = GL_TRANSFORM_FEEDBACK;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case 'E':
    if (memEQ(name, "GL_ACTIVE_TEXTURE_ARB", 21)) {
    /*                               ^           */
#ifdef GL_ACTIVE_TEXTURE_ARB
      *iv_return = GL_ACTIVE_TEXTURE_ARB;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_CLIENT_STORAGE_BIT", 21)) {
    /*                               ^           */
#ifdef GL_CLIENT_STORAGE_BIT
      *iv_return = GL_CLIENT_STORAGE_BIT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_COLOR_ATTACHMENT10", 21)) {
    /*                               ^           */
#ifdef GL_COLOR_ATTACHMENT10
      *iv_return = GL_COLOR_ATTACHMENT10;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_COLOR_ATTACHMENT11", 21)) {
    /*                               ^           */
#ifdef GL_COLOR_ATTACHMENT11
      *iv_return = GL_COLOR_ATTACHMENT11;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_COLOR_ATTACHMENT12", 21)) {
    /*                               ^           */
#ifdef GL_COLOR_ATTACHMENT12
      *iv_return = GL_COLOR_ATTACHMENT12;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_COLOR_ATTACHMENT13", 21)) {
    /*                               ^           */
#ifdef GL_COLOR_ATTACHMENT13
      *iv_return = GL_COLOR_ATTACHMENT13;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_COLOR_ATTACHMENT14", 21)) {
    /*                               ^           */
#ifdef GL_COLOR_ATTACHMENT14
      *iv_return = GL_COLOR_ATTACHMENT14;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_COLOR_ATTACHMENT15", 21)) {
    /*                               ^           */
#ifdef GL_COLOR_ATTACHMENT15
      *iv_return = GL_COLOR_ATTACHMENT15;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_CONVOLUTION_HEIGHT", 21)) {
    /*                               ^           */
#ifdef GL_CONVOLUTION_HEIGHT
      *iv_return = GL_CONVOLUTION_HEIGHT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_FOG_COORDINATE_EXT", 21)) {
    /*                               ^           */
#ifdef GL_FOG_COORDINATE_EXT
      *iv_return = GL_FOG_COORDINATE_EXT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_INT_IMAGE_CUBE_EXT", 21)) {
    /*                               ^           */
#ifdef GL_INT_IMAGE_CUBE_EXT
      *iv_return = GL_INT_IMAGE_CUBE_EXT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_KTX_STENCIL_REGION", 21)) {
    /*                               ^           */
#ifdef GL_KTX_STENCIL_REGION
      *iv_return = GL_KTX_STENCIL_REGION;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_LIGHT_ENV_MODE_EXT", 21)) {
    /*                               ^           */
#ifdef GL_LIGHT_ENV_MODE_EXT
      *iv_return = GL_LIGHT_ENV_MODE_EXT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_MATRIX_PALETTE_ARB", 21)) {
    /*                               ^           */
#ifdef GL_MATRIX_PALETTE_ARB
      *iv_return = GL_MATRIX_PALETTE_ARB;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_OBJECT_SUBTYPE_ARB", 21)) {
    /*                               ^           */
#ifdef GL_OBJECT_SUBTYPE_ARB
      *iv_return = GL_OBJECT_SUBTYPE_ARB;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_REPLACE_MIDDLE_SUN", 21)) {
    /*                               ^           */
#ifdef GL_REPLACE_MIDDLE_SUN
      *iv_return = GL_REPLACE_MIDDLE_SUN;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_SHADER_INCLUDE_ARB", 21)) {
    /*                               ^           */
#ifdef GL_SHADER_INCLUDE_ARB
      *iv_return = GL_SHADER_INCLUDE_ARB;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_STENCIL_SAMPLES_NV", 21)) {
    /*                               ^           */
#ifdef GL_STENCIL_SAMPLES_NV
      *iv_return = GL_STENCIL_SAMPLES_NV;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_SYNC_X11_FENCE_EXT", 21)) {
    /*                               ^           */
#ifdef GL_SYNC_X11_FENCE_EXT
      *iv_return = GL_SYNC_X11_FENCE_EXT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_TEXTURE_COMPRESSED", 21)) {
    /*                               ^           */
#ifdef GL_TEXTURE_COMPRESSED
      *iv_return = GL_TEXTURE_COMPRESSED;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_TEXTURE_SPARSE_ARB", 21)) {
    /*                               ^           */
#ifdef GL_TEXTURE_SPARSE_ARB
      *iv_return = GL_TEXTURE_SPARSE_ARB;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glStringMarkerGREMEDY", 21)) {
    /*                               ^           */
#ifdef glStringMarkerGREMEDY
      *iv_return = glStringMarkerGREMEDY;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case 'F':
    if (memEQ(name, "GL_R11F_G11F_B10F_EXT", 21)) {
    /*                               ^           */
#ifdef GL_R11F_G11F_B10F_EXT
      *iv_return = GL_R11F_G11F_B10F_EXT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case 'G':
    if (memEQ(name, "GL_ACTIVE_VARYINGS_NV", 21)) {
    /*                               ^           */
#ifdef GL_ACTIVE_VARYINGS_NV
      *iv_return = GL_ACTIVE_VARYINGS_NV;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_PER_GPU_STORAGE_NV", 21)) {
    /*                               ^           */
#ifdef GL_PER_GPU_STORAGE_NV
      *iv_return = GL_PER_GPU_STORAGE_NV;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_PROGRAM_STRING_ARB", 21)) {
    /*                               ^           */
#ifdef GL_PROGRAM_STRING_ARB
      *iv_return = GL_PROGRAM_STRING_ARB;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_SAMPLE_SHADING_ARB", 21)) {
    /*                               ^           */
#ifdef GL_SAMPLE_SHADING_ARB
      *iv_return = GL_SAMPLE_SHADING_ARB;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case 'H':
    if (memEQ(name, "GL_FRAGMENT_DEPTH_EXT", 21)) {
    /*                               ^           */
#ifdef GL_FRAGMENT_DEPTH_EXT
      *iv_return = GL_FRAGMENT_DEPTH_EXT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_PROGRAM_LENGTH_ARB", 21)) {
    /*                               ^           */
#ifdef GL_PROGRAM_LENGTH_ARB
      *iv_return = GL_PROGRAM_LENGTH_ARB;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_STENCIL_ATTACHMENT", 21)) {
    /*                               ^           */
#ifdef GL_STENCIL_ATTACHMENT
      *iv_return = GL_STENCIL_ATTACHMENT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case 'I':
    if (memEQ(name, "GL_BUFFER_MAP_POINTER", 21)) {
    /*                               ^           */
#ifdef GL_BUFFER_MAP_POINTER
      *iv_return = GL_BUFFER_MAP_POINTER;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_FONT_HEIGHT_BIT_NV", 21)) {
    /*                               ^           */
#ifdef GL_FONT_HEIGHT_BIT_NV
      *iv_return = GL_FONT_HEIGHT_BIT_NV;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_GLYPH_WIDTH_BIT_NV", 21)) {
    /*                               ^           */
#ifdef GL_GLYPH_WIDTH_BIT_NV
      *iv_return = GL_GLYPH_WIDTH_BIT_NV;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_TEXTURE_MAG_FILTER", 21)) {
    /*                               ^           */
#ifdef GL_TEXTURE_MAG_FILTER
      *iv_return = GL_TEXTURE_MAG_FILTER;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_TEXTURE_MIN_FILTER", 21)) {
    /*                               ^           */
#ifdef GL_TEXTURE_MIN_FILTER
      *iv_return = GL_TEXTURE_MIN_FILTER;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_UNPACK_SKIP_PIXELS", 21)) {
    /*                               ^           */
#ifdef GL_UNPACK_SKIP_PIXELS
      *iv_return = GL_UNPACK_SKIP_PIXELS;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glBeginPerfQueryINTEL", 21)) {
    /*                               ^           */
#ifdef glBeginPerfQueryINTEL
      *iv_return = glBeginPerfQueryINTEL;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glNormalPointervINTEL", 21)) {
    /*                               ^           */
#ifdef glNormalPointervINTEL
      *iv_return = glNormalPointervINTEL;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glTexScissorFuncINTEL", 21)) {
    /*                               ^           */
#ifdef glTexScissorFuncINTEL
      *iv_return = glTexScissorFuncINTEL;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glUnmapTexture2DINTEL", 21)) {
    /*                               ^           */
#ifdef glUnmapTexture2DINTEL
      *iv_return = glUnmapTexture2DINTEL;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glVertexPointervINTEL", 21)) {
    /*                               ^           */
#ifdef glVertexPointervINTEL
      *iv_return = glVertexPointervINTEL;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case 'K':
    if (memEQ(name, "GL_HISTOGRAM_SINK_EXT", 21)) {
    /*                               ^           */
#ifdef GL_HISTOGRAM_SINK_EXT
      *iv_return = GL_HISTOGRAM_SINK_EXT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case 'L':
    if (memEQ(name, "GL_LUMINANCE12_ALPHA4", 21)) {
    /*                               ^           */
#ifdef GL_LUMINANCE12_ALPHA4
      *iv_return = GL_LUMINANCE12_ALPHA4;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_MAGNITUDE_SCALE_NV", 21)) {
    /*                               ^           */
#ifdef GL_MAGNITUDE_SCALE_NV
      *iv_return = GL_MAGNITUDE_SCALE_NV;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_MAX_TESS_GEN_LEVEL", 21)) {
    /*                               ^           */
#ifdef GL_MAX_TESS_GEN_LEVEL
      *iv_return = GL_MAX_TESS_GEN_LEVEL;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_MAX_VARYING_FLOATS", 21)) {
    /*                               ^           */
#ifdef GL_MAX_VARYING_FLOATS
      *iv_return = GL_MAX_VARYING_FLOATS;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_PATH_JOIN_STYLE_NV", 21)) {
    /*                               ^           */
#ifdef GL_PATH_JOIN_STYLE_NV
      *iv_return = GL_PATH_JOIN_STYLE_NV;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_RESCALE_NORMAL_EXT", 21)) {
    /*                               ^           */
#ifdef GL_RESCALE_NORMAL_EXT
      *iv_return = GL_RESCALE_NORMAL_EXT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_SLUMINANCE8_ALPHA8", 21)) {
    /*                               ^           */
#ifdef GL_SLUMINANCE8_ALPHA8
      *iv_return = GL_SLUMINANCE8_ALPHA8;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_TEXTURE_BASE_LEVEL", 21)) {
    /*                               ^           */
#ifdef GL_TEXTURE_BASE_LEVEL
      *iv_return = GL_TEXTURE_BASE_LEVEL;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_TEXTURE_NORMAL_EXT", 21)) {
    /*                               ^           */
#ifdef GL_TEXTURE_NORMAL_EXT
      *iv_return = GL_TEXTURE_NORMAL_EXT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case 'M':
    if (memEQ(name, "GL_ACTIVE_PROGRAM_EXT", 21)) {
    /*                               ^           */
#ifdef GL_ACTIVE_PROGRAM_EXT
      *iv_return = GL_ACTIVE_PROGRAM_EXT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_COLOR_SUM_CLAMP_NV", 21)) {
    /*                               ^           */
#ifdef GL_COLOR_SUM_CLAMP_NV
      *iv_return = GL_COLOR_SUM_CLAMP_NV;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_MAP1_GRID_SEGMENTS", 21)) {
    /*                               ^           */
#ifdef GL_MAP1_GRID_SEGMENTS
      *iv_return = GL_MAP1_GRID_SEGMENTS;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_MAP2_GRID_SEGMENTS", 21)) {
    /*                               ^           */
#ifdef GL_MAP2_GRID_SEGMENTS
      *iv_return = GL_MAP2_GRID_SEGMENTS;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_UNPACK_SKIP_IMAGES", 21)) {
    /*                               ^           */
#ifdef GL_UNPACK_SKIP_IMAGES
      *iv_return = GL_UNPACK_SKIP_IMAGES;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_VERTEX_PROGRAM_ARB", 21)) {
    /*                               ^           */
#ifdef GL_VERTEX_PROGRAM_ARB
      *iv_return = GL_VERTEX_PROGRAM_ARB;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case 'N':
    if (memEQ(name, "GL_BLEND_EQUATION_EXT", 21)) {
    /*                               ^           */
#ifdef GL_BLEND_EQUATION_EXT
      *iv_return = GL_BLEND_EQUATION_EXT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_BLEND_EQUATION_RGB", 21)) {
    /*                               ^           */
#ifdef GL_BLEND_EQUATION_RGB
      *iv_return = GL_BLEND_EQUATION_RGB;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_DEPTH_COMPONENT32F", 21)) {
    /*                               ^           */
#ifdef GL_DEPTH_COMPONENT32F
      *iv_return = GL_DEPTH_COMPONENT32F;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_EMBOSS_CONSTANT_NV", 21)) {
    /*                               ^           */
#ifdef GL_EMBOSS_CONSTANT_NV
      *iv_return = GL_EMBOSS_CONSTANT_NV;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_HSL_SATURATION_KHR", 21)) {
    /*                               ^           */
#ifdef GL_HSL_SATURATION_KHR
      *iv_return = GL_HSL_SATURATION_KHR;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_POINT_SIZE_MIN_ARB", 21)) {
    /*                               ^           */
#ifdef GL_POINT_SIZE_MIN_ARB
      *iv_return = GL_POINT_SIZE_MIN_ARB;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_POINT_SIZE_MIN_EXT", 21)) {
    /*                               ^           */
#ifdef GL_POINT_SIZE_MIN_EXT
      *iv_return = GL_POINT_SIZE_MIN_EXT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_SAMPLE_PATTERN_EXT", 21)) {
    /*                               ^           */
#ifdef GL_SAMPLE_PATTERN_EXT
      *iv_return = GL_SAMPLE_PATTERN_EXT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_SCISSOR_COMMAND_NV", 21)) {
    /*                               ^           */
#ifdef GL_SCISSOR_COMMAND_NV
      *iv_return = GL_SCISSOR_COMMAND_NV;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_STENCIL_COMPONENTS", 21)) {
    /*                               ^           */
#ifdef GL_STENCIL_COMPONENTS
      *iv_return = GL_STENCIL_COMPONENTS;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_TEXTURE_BINDING_1D", 21)) {
    /*                               ^           */
#ifdef GL_TEXTURE_BINDING_1D
      *iv_return = GL_TEXTURE_BINDING_1D;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_TEXTURE_BINDING_2D", 21)) {
    /*                               ^           */
#ifdef GL_TEXTURE_BINDING_2D
      *iv_return = GL_TEXTURE_BINDING_2D;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_TEXTURE_BINDING_3D", 21)) {
    /*                               ^           */
#ifdef GL_TEXTURE_BINDING_3D
      *iv_return = GL_TEXTURE_BINDING_3D;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_TEXTURE_COMPONENTS", 21)) {
    /*                               ^           */
#ifdef GL_TEXTURE_COMPONENTS
      *iv_return = GL_TEXTURE_COMPONENTS;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case 'O':
    if (memEQ(name, "GL_COLOR_TABLE_FORMAT", 21)) {
    /*                               ^           */
#ifdef GL_COLOR_TABLE_FORMAT
      *iv_return = GL_COLOR_TABLE_FORMAT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_CONVOLUTION_FORMAT", 21)) {
    /*                               ^           */
#ifdef GL_CONVOLUTION_FORMAT
      *iv_return = GL_CONVOLUTION_FORMAT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_DEBUG_SOURCE_OTHER", 21)) {
    /*                               ^           */
#ifdef GL_DEBUG_SOURCE_OTHER
      *iv_return = GL_DEBUG_SOURCE_OTHER;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_FENCE_CONDITION_NV", 21)) {
    /*                               ^           */
#ifdef GL_FENCE_CONDITION_NV
      *iv_return = GL_FENCE_CONDITION_NV;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_IMAGE_PIXEL_FORMAT", 21)) {
    /*                               ^           */
#ifdef GL_IMAGE_PIXEL_FORMAT
      *iv_return = GL_IMAGE_PIXEL_FORMAT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_LOCATION_COMPONENT", 21)) {
    /*                               ^           */
#ifdef GL_LOCATION_COMPONENT
      *iv_return = GL_LOCATION_COMPONENT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_MAX_TEXTURE_COORDS", 21)) {
    /*                               ^           */
#ifdef GL_MAX_TEXTURE_COORDS
      *iv_return = GL_MAX_TEXTURE_COORDS;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_READ_PIXELS_FORMAT", 21)) {
    /*                               ^           */
#ifdef GL_READ_PIXELS_FORMAT
      *iv_return = GL_READ_PIXELS_FORMAT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_SAMPLE_LOCATION_NV", 21)) {
    /*                               ^           */
#ifdef GL_SAMPLE_LOCATION_NV
      *iv_return = GL_SAMPLE_LOCATION_NV;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_SAMPLE_POSITION_NV", 21)) {
    /*                               ^           */
#ifdef GL_SAMPLE_POSITION_NV
      *iv_return = GL_SAMPLE_POSITION_NV;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_SECONDARY_COLOR_NV", 21)) {
    /*                               ^           */
#ifdef GL_SECONDARY_COLOR_NV
      *iv_return = GL_SECONDARY_COLOR_NV;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case 'P':
    if (memEQ(name, "GL_REFLECTION_MAP_ARB", 21)) {
    /*                               ^           */
#ifdef GL_REFLECTION_MAP_ARB
      *iv_return = GL_REFLECTION_MAP_ARB;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_REFLECTION_MAP_EXT", 21)) {
    /*                               ^           */
#ifdef GL_REFLECTION_MAP_EXT
      *iv_return = GL_REFLECTION_MAP_EXT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glSecondaryColorP3uiv", 21)) {
    /*                               ^           */
#ifdef glSecondaryColorP3uiv
      *iv_return = glSecondaryColorP3uiv;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case 'Q':
    if (memEQ(name, "GL_SWIZZLE_STQ_DQ_ATI", 21)) {
    /*                               ^           */
#ifdef GL_SWIZZLE_STQ_DQ_ATI
      *iv_return = GL_SWIZZLE_STQ_DQ_ATI;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case 'R':
    if (memEQ(name, "GL_COMPUTE_SHADER_BIT", 21)) {
    /*                               ^           */
#ifdef GL_COMPUTE_SHADER_BIT
      *iv_return = GL_COMPUTE_SHADER_BIT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_CONSTANT_COLOR0_NV", 21)) {
    /*                               ^           */
#ifdef GL_CONSTANT_COLOR0_NV
      *iv_return = GL_CONSTANT_COLOR0_NV;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_CONSTANT_COLOR1_NV", 21)) {
    /*                               ^           */
#ifdef GL_CONSTANT_COLOR1_NV
      *iv_return = GL_CONSTANT_COLOR1_NV;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_CONSTANT_COLOR_EXT", 21)) {
    /*                               ^           */
#ifdef GL_CONSTANT_COLOR_EXT
      *iv_return = GL_CONSTANT_COLOR_EXT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_FRAGMENT_COLOR_EXT", 21)) {
    /*                               ^           */
#ifdef GL_FRAGMENT_COLOR_EXT
      *iv_return = GL_FRAGMENT_COLOR_EXT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_LOG_INTERNAL_REGAL", 21)) {
    /*                               ^           */
#ifdef GL_LOG_INTERNAL_REGAL
      *iv_return = GL_LOG_INTERNAL_REGAL;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_MAX_VERTEX_STREAMS", 21)) {
    /*                               ^           */
#ifdef GL_MAX_VERTEX_STREAMS
      *iv_return = GL_MAX_VERTEX_STREAMS;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_SAMPLER_BUFFER_AMD", 21)) {
    /*                               ^           */
#ifdef GL_SAMPLER_BUFFER_AMD
      *iv_return = GL_SAMPLER_BUFFER_AMD;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_SAMPLER_BUFFER_EXT", 21)) {
    /*                               ^           */
#ifdef GL_SAMPLER_BUFFER_EXT
      *iv_return = GL_SAMPLER_BUFFER_EXT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_STENCIL_BUFFER_BIT", 21)) {
    /*                               ^           */
#ifdef GL_STENCIL_BUFFER_BIT
      *iv_return = GL_STENCIL_BUFFER_BIT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_STENCIL_RENDERABLE", 21)) {
    /*                               ^           */
#ifdef GL_STENCIL_RENDERABLE
      *iv_return = GL_STENCIL_RENDERABLE;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_SWIZZLE_STR_DR_ATI", 21)) {
    /*                               ^           */
#ifdef GL_SWIZZLE_STR_DR_ATI
      *iv_return = GL_SWIZZLE_STR_DR_ATI;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_TEXTURE_BUFFER_ARB", 21)) {
    /*                               ^           */
#ifdef GL_TEXTURE_BUFFER_ARB
      *iv_return = GL_TEXTURE_BUFFER_ARB;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_TEXTURE_BUFFER_EXT", 21)) {
    /*                               ^           */
#ifdef GL_TEXTURE_BUFFER_EXT
      *iv_return = GL_TEXTURE_BUFFER_EXT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_TEXTURE_WRAP_R_EXT", 21)) {
    /*                               ^           */
#ifdef GL_TEXTURE_WRAP_R_EXT
      *iv_return = GL_TEXTURE_WRAP_R_EXT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_UNIFORM_BUFFER_EXT", 21)) {
    /*                               ^           */
#ifdef GL_UNIFORM_BUFFER_EXT
      *iv_return = GL_UNIFORM_BUFFER_EXT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_UNSIGNED_INVERT_NV", 21)) {
    /*                               ^           */
#ifdef GL_UNSIGNED_INVERT_NV
      *iv_return = GL_UNSIGNED_INVERT_NV;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glGetProcAddressREGAL", 21)) {
    /*                               ^           */
#ifdef glGetProcAddressREGAL
      *iv_return = glGetProcAddressREGAL;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glMapNamedBufferRange", 21)) {
    /*                               ^           */
#ifdef glMapNamedBufferRange
      *iv_return = glMapNamedBufferRange;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case 'S':
    if (memEQ(name, "GL_BUMP_TEX_UNITS_ATI", 21)) {
    /*                               ^           */
#ifdef GL_BUMP_TEX_UNITS_ATI
      *iv_return = GL_BUMP_TEX_UNITS_ATI;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_PARTIAL_SUCCESS_NV", 21)) {
    /*                               ^           */
#ifdef GL_PARTIAL_SUCCESS_NV
      *iv_return = GL_PARTIAL_SUCCESS_NV;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_RASTERIZER_DISCARD", 21)) {
    /*                               ^           */
#ifdef GL_RASTERIZER_DISCARD
      *iv_return = GL_RASTERIZER_DISCARD;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_RASTER_SAMPLES_EXT", 21)) {
    /*                               ^           */
#ifdef GL_RASTER_SAMPLES_EXT
      *iv_return = GL_RASTER_SAMPLES_EXT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_RENDER_GPU_MASK_NV", 21)) {
    /*                               ^           */
#ifdef GL_RENDER_GPU_MASK_NV
      *iv_return = GL_RENDER_GPU_MASK_NV;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_SAMPLE_BUFFERS_ARB", 21)) {
    /*                               ^           */
#ifdef GL_SAMPLE_BUFFERS_ARB
      *iv_return = GL_SAMPLE_BUFFERS_ARB;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_SAMPLE_BUFFERS_EXT", 21)) {
    /*                               ^           */
#ifdef GL_SAMPLE_BUFFERS_EXT
      *iv_return = GL_SAMPLE_BUFFERS_EXT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_SHADER_IMAGE_STORE", 21)) {
    /*                               ^           */
#ifdef GL_SHADER_IMAGE_STORE
      *iv_return = GL_SHADER_IMAGE_STORE;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case 'T':
    if (memEQ(name, "GL_ACTIVE_SUBROUTINES", 21)) {
    /*                               ^           */
#ifdef GL_ACTIVE_SUBROUTINES
      *iv_return = GL_ACTIVE_SUBROUTINES;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_CLIP_NEAR_HINT_PGI", 21)) {
    /*                               ^           */
#ifdef GL_CLIP_NEAR_HINT_PGI
      *iv_return = GL_CLIP_NEAR_HINT_PGI;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_COLOR_ARRAY_STRIDE", 21)) {
    /*                               ^           */
#ifdef GL_COLOR_ARRAY_STRIDE
      *iv_return = GL_COLOR_ARRAY_STRIDE;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_CURRENT_WEIGHT_ARB", 21)) {
    /*                               ^           */
#ifdef GL_CURRENT_WEIGHT_ARB
      *iv_return = GL_CURRENT_WEIGHT_ARB;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_INDEX_ARRAY_STRIDE", 21)) {
    /*                               ^           */
#ifdef GL_INDEX_ARRAY_STRIDE
      *iv_return = GL_INDEX_ARRAY_STRIDE;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_LARGE_CW_ARC_TO_NV", 21)) {
    /*                               ^           */
#ifdef GL_LARGE_CW_ARC_TO_NV
      *iv_return = GL_LARGE_CW_ARC_TO_NV;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_LOCAL_CONSTANT_EXT", 21)) {
    /*                               ^           */
#ifdef GL_LOCAL_CONSTANT_EXT
      *iv_return = GL_LOCAL_CONSTANT_EXT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_MAP_PERSISTENT_BIT", 21)) {
    /*                               ^           */
#ifdef GL_MAP_PERSISTENT_BIT
      *iv_return = GL_MAP_PERSISTENT_BIT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_MAX_PATCH_VERTICES", 21)) {
    /*                               ^           */
#ifdef GL_MAX_PATCH_VERTICES
      *iv_return = GL_MAX_PATCH_VERTICES;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_MAX_VERTEX_ATTRIBS", 21)) {
    /*                               ^           */
#ifdef GL_MAX_VERTEX_ATTRIBS
      *iv_return = GL_MAX_VERTEX_ATTRIBS;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_PACK_CMYK_HINT_EXT", 21)) {
    /*                               ^           */
#ifdef GL_PACK_CMYK_HINT_EXT
      *iv_return = GL_PACK_CMYK_HINT_EXT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_PASS_THROUGH_TOKEN", 21)) {
    /*                               ^           */
#ifdef GL_PASS_THROUGH_TOKEN
      *iv_return = GL_PASS_THROUGH_TOKEN;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_PERFMON_RESULT_AMD", 21)) {
    /*                               ^           */
#ifdef GL_PERFMON_RESULT_AMD
      *iv_return = GL_PERFMON_RESULT_AMD;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_POLYGON_OFFSET_EXT", 21)) {
    /*                               ^           */
#ifdef GL_POLYGON_OFFSET_EXT
      *iv_return = GL_POLYGON_OFFSET_EXT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_PROGRAM_FORMAT_ARB", 21)) {
    /*                               ^           */
#ifdef GL_PROGRAM_FORMAT_ARB
      *iv_return = GL_PROGRAM_FORMAT_ARB;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_PROGRAM_OBJECT_ARB", 21)) {
    /*                               ^           */
#ifdef GL_PROGRAM_OBJECT_ARB
      *iv_return = GL_PROGRAM_OBJECT_ARB;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_PROGRAM_OBJECT_EXT", 21)) {
    /*                               ^           */
#ifdef GL_PROGRAM_OBJECT_EXT
      *iv_return = GL_PROGRAM_OBJECT_EXT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_RELATIVE_ARC_TO_NV", 21)) {
    /*                               ^           */
#ifdef GL_RELATIVE_ARC_TO_NV
      *iv_return = GL_RELATIVE_ARC_TO_NV;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_REPLACE_OLDEST_SUN", 21)) {
    /*                               ^           */
#ifdef GL_REPLACE_OLDEST_SUN
      *iv_return = GL_REPLACE_OLDEST_SUN;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_SAMPLER_OBJECT_AMD", 21)) {
    /*                               ^           */
#ifdef GL_SAMPLER_OBJECT_AMD
      *iv_return = GL_SAMPLER_OBJECT_AMD;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_SIGNED_IDENTITY_NV", 21)) {
    /*                               ^           */
#ifdef GL_SIGNED_IDENTITY_NV
      *iv_return = GL_SIGNED_IDENTITY_NV;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_SMALL_CW_ARC_TO_NV", 21)) {
    /*                               ^           */
#ifdef GL_SMALL_CW_ARC_TO_NV
      *iv_return = GL_SMALL_CW_ARC_TO_NV;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_WIDE_LINE_HINT_PGI", 21)) {
    /*                               ^           */
#ifdef GL_WIDE_LINE_HINT_PGI
      *iv_return = GL_WIDE_LINE_HINT_PGI;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case 'U':
    if (memEQ(name, "GL_COMPUTE_SUBROUTINE", 21)) {
    /*                               ^           */
#ifdef GL_COMPUTE_SUBROUTINE
      *iv_return = GL_COMPUTE_SUBROUTINE;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_INT_SAMPLER_BUFFER", 21)) {
    /*                               ^           */
#ifdef GL_INT_SAMPLER_BUFFER
      *iv_return = GL_INT_SAMPLER_BUFFER;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_SRC_ALPHA_SATURATE", 21)) {
    /*                               ^           */
#ifdef GL_SRC_ALPHA_SATURATE
      *iv_return = GL_SRC_ALPHA_SATURATE;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case 'V':
    if (memEQ(name, "GL_PATH_FORMAT_SVG_NV", 21)) {
    /*                               ^           */
#ifdef GL_PATH_FORMAT_SVG_NV
      *iv_return = GL_PATH_FORMAT_SVG_NV;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case 'W':
    if (memEQ(name, "GL_RENDERBUFFER_WIDTH", 21)) {
    /*                               ^           */
#ifdef GL_RENDERBUFFER_WIDTH
      *iv_return = GL_RENDERBUFFER_WIDTH;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case 'X':
    if (memEQ(name, "GL_CURRENT_MATRIX_ARB", 21)) {
    /*                               ^           */
#ifdef GL_CURRENT_MATRIX_ARB
      *iv_return = GL_CURRENT_MATRIX_ARB;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_CURRENT_VERTEX_EXT", 21)) {
    /*                               ^           */
#ifdef GL_CURRENT_VERTEX_EXT
      *iv_return = GL_CURRENT_VERTEX_EXT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_POINT_SIZE_MAX_ARB", 21)) {
    /*                               ^           */
#ifdef GL_POINT_SIZE_MAX_ARB
      *iv_return = GL_POINT_SIZE_MAX_ARB;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_POINT_SIZE_MAX_EXT", 21)) {
    /*                               ^           */
#ifdef GL_POINT_SIZE_MAX_EXT
      *iv_return = GL_POINT_SIZE_MAX_EXT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_PROGRAM_MATRIX_EXT", 21)) {
    /*                               ^           */
#ifdef GL_PROGRAM_MATRIX_EXT
      *iv_return = GL_PROGRAM_MATRIX_EXT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case 'Y':
    if (memEQ(name, "GL_BINORMAL_ARRAY_EXT", 21)) {
    /*                               ^           */
#ifdef GL_BINORMAL_ARRAY_EXT
      *iv_return = GL_BINORMAL_ARRAY_EXT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_DEBUG_SEVERITY_LOW", 21)) {
    /*                               ^           */
#ifdef GL_DEBUG_SEVERITY_LOW
      *iv_return = GL_DEBUG_SEVERITY_LOW;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_HSL_LUMINOSITY_KHR", 21)) {
    /*                               ^           */
#ifdef GL_HSL_LUMINOSITY_KHR
      *iv_return = GL_HSL_LUMINOSITY_KHR;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_IMAGE_1D_ARRAY_EXT", 21)) {
    /*                               ^           */
#ifdef GL_IMAGE_1D_ARRAY_EXT
      *iv_return = GL_IMAGE_1D_ARRAY_EXT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_IMAGE_2D_ARRAY_EXT", 21)) {
    /*                               ^           */
#ifdef GL_IMAGE_2D_ARRAY_EXT
      *iv_return = GL_IMAGE_2D_ARRAY_EXT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case 'Z':
    if (memEQ(name, "GL_TEXTURE_DS_SIZE_NV", 21)) {
    /*                               ^           */
#ifdef GL_TEXTURE_DS_SIZE_NV
      *iv_return = GL_TEXTURE_DS_SIZE_NV;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_TEXTURE_DT_SIZE_NV", 21)) {
    /*                               ^           */
#ifdef GL_TEXTURE_DT_SIZE_NV
      *iv_return = GL_TEXTURE_DT_SIZE_NV;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_TEXTURE_HI_SIZE_NV", 21)) {
    /*                               ^           */
#ifdef GL_TEXTURE_HI_SIZE_NV
      *iv_return = GL_TEXTURE_HI_SIZE_NV;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_TEXTURE_LO_SIZE_NV", 21)) {
    /*                               ^           */
#ifdef GL_TEXTURE_LO_SIZE_NV
      *iv_return = GL_TEXTURE_LO_SIZE_NV;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case '_':
    if (memEQ(name, "GLEW_ARB_texture_view", 21)) {
    /*                               ^           */
#ifdef GLEW_ARB_texture_view
      *iv_return = GLEW_ARB_texture_view;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GLEW_EXT_stencil_wrap", 21)) {
    /*                               ^           */
#ifdef GLEW_EXT_stencil_wrap
      *iv_return = GLEW_EXT_stencil_wrap;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GLEW_EXT_texture_sRGB", 21)) {
    /*                               ^           */
#ifdef GLEW_EXT_texture_sRGB
      *iv_return = GLEW_EXT_texture_sRGB;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_CLAMP_TO_EDGE_SGIS", 21)) {
    /*                               ^           */
#ifdef GL_CLAMP_TO_EDGE_SGIS
      *iv_return = GL_CLAMP_TO_EDGE_SGIS;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_DEPTH_TEXTURE_MODE", 21)) {
    /*                               ^           */
#ifdef GL_DEPTH_TEXTURE_MODE
      *iv_return = GL_DEPTH_TEXTURE_MODE;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_HISTOGRAM_RED_SIZE", 21)) {
    /*                               ^           */
#ifdef GL_HISTOGRAM_RED_SIZE
      *iv_return = GL_HISTOGRAM_RED_SIZE;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_IBM_rasterpos_clip", 21)) {
    /*                               ^           */
#ifdef GL_IBM_rasterpos_clip
      *iv_return = GL_IBM_rasterpos_clip;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_IMAGE_BINDING_NAME", 21)) {
    /*                               ^           */
#ifdef GL_IMAGE_BINDING_NAME
      *iv_return = GL_IMAGE_BINDING_NAME;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_IMAGE_CLASS_1_X_16", 21)) {
    /*                               ^           */
#ifdef GL_IMAGE_CLASS_1_X_16
      *iv_return = GL_IMAGE_CLASS_1_X_16;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_IMAGE_CLASS_1_X_32", 21)) {
    /*                               ^           */
#ifdef GL_IMAGE_CLASS_1_X_32
      *iv_return = GL_IMAGE_CLASS_1_X_32;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_IMAGE_CLASS_2_X_16", 21)) {
    /*                               ^           */
#ifdef GL_IMAGE_CLASS_2_X_16
      *iv_return = GL_IMAGE_CLASS_2_X_16;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_IMAGE_CLASS_2_X_32", 21)) {
    /*                               ^           */
#ifdef GL_IMAGE_CLASS_2_X_32
      *iv_return = GL_IMAGE_CLASS_2_X_32;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_IMAGE_CLASS_4_X_16", 21)) {
    /*                               ^           */
#ifdef GL_IMAGE_CLASS_4_X_16
      *iv_return = GL_IMAGE_CLASS_4_X_16;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_IMAGE_CLASS_4_X_32", 21)) {
    /*                               ^           */
#ifdef GL_IMAGE_CLASS_4_X_32
      *iv_return = GL_IMAGE_CLASS_4_X_32;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_MAX_INTENSITY_SGIS", 21)) {
    /*                               ^           */
#ifdef GL_MAX_INTENSITY_SGIS
      *iv_return = GL_MAX_INTENSITY_SGIS;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_MAX_LUMINANCE_SGIS", 21)) {
    /*                               ^           */
#ifdef GL_MAX_LUMINANCE_SGIS
      *iv_return = GL_MAX_LUMINANCE_SGIS;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_MIN_INTENSITY_SGIS", 21)) {
    /*                               ^           */
#ifdef GL_MIN_INTENSITY_SGIS
      *iv_return = GL_MIN_INTENSITY_SGIS;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_MIN_LUMINANCE_SGIS", 21)) {
    /*                               ^           */
#ifdef GL_MIN_LUMINANCE_SGIS
      *iv_return = GL_MIN_LUMINANCE_SGIS;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_PACK_RESAMPLE_SGIX", 21)) {
    /*                               ^           */
#ifdef GL_PACK_RESAMPLE_SGIX
      *iv_return = GL_PACK_RESAMPLE_SGIX;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_PROGRAM_POINT_SIZE", 21)) {
    /*                               ^           */
#ifdef GL_PROGRAM_POINT_SIZE
      *iv_return = GL_PROGRAM_POINT_SIZE;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_QUERY_COUNTER_BITS", 21)) {
    /*                               ^           */
#ifdef GL_QUERY_COUNTER_BITS
      *iv_return = GL_QUERY_COUNTER_BITS;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_RED_MAX_CLAMP_INGR", 21)) {
    /*                               ^           */
#ifdef GL_RED_MAX_CLAMP_INGR
      *iv_return = GL_RED_MAX_CLAMP_INGR;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_RED_MIN_CLAMP_INGR", 21)) {
    /*                               ^           */
#ifdef GL_RED_MIN_CLAMP_INGR
      *iv_return = GL_RED_MIN_CLAMP_INGR;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_RGBA16_SIGNED_SGIX", 21)) {
    /*                               ^           */
#ifdef GL_RGBA16_SIGNED_SGIX
      *iv_return = GL_RGBA16_SIGNED_SGIX;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_STENCIL_VALUE_MASK", 21)) {
    /*                               ^           */
#ifdef GL_STENCIL_VALUE_MASK
      *iv_return = GL_STENCIL_VALUE_MASK;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_SUNX_constant_data", 21)) {
    /*                               ^           */
#ifdef GL_SUNX_constant_data
      *iv_return = GL_SUNX_constant_data;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_TEXTURE_ALPHA_SIZE", 21)) {
    /*                               ^           */
#ifdef GL_TEXTURE_ALPHA_SIZE
      *iv_return = GL_TEXTURE_ALPHA_SIZE;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_TEXTURE_ALPHA_TYPE", 21)) {
    /*                               ^           */
#ifdef GL_TEXTURE_ALPHA_TYPE
      *iv_return = GL_TEXTURE_ALPHA_TYPE;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_TEXTURE_DEPTH_SIZE", 21)) {
    /*                               ^           */
#ifdef GL_TEXTURE_DEPTH_SIZE
      *iv_return = GL_TEXTURE_DEPTH_SIZE;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_TEXTURE_DEPTH_TYPE", 21)) {
    /*                               ^           */
#ifdef GL_TEXTURE_DEPTH_TYPE
      *iv_return = GL_TEXTURE_DEPTH_TYPE;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_TEXTURE_GREEN_SIZE", 21)) {
    /*                               ^           */
#ifdef GL_TEXTURE_GREEN_SIZE
      *iv_return = GL_TEXTURE_GREEN_SIZE;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_TEXTURE_GREEN_TYPE", 21)) {
    /*                               ^           */
#ifdef GL_TEXTURE_GREEN_TYPE
      *iv_return = GL_TEXTURE_GREEN_TYPE;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_TEXTURE_IMAGE_TYPE", 21)) {
    /*                               ^           */
#ifdef GL_TEXTURE_IMAGE_TYPE
      *iv_return = GL_TEXTURE_IMAGE_TYPE;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_VIEW_CLASS_16_BITS", 21)) {
    /*                               ^           */
#ifdef GL_VIEW_CLASS_16_BITS
      *iv_return = GL_VIEW_CLASS_16_BITS;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_VIEW_CLASS_24_BITS", 21)) {
    /*                               ^           */
#ifdef GL_VIEW_CLASS_24_BITS
      *iv_return = GL_VIEW_CLASS_24_BITS;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_VIEW_CLASS_32_BITS", 21)) {
    /*                               ^           */
#ifdef GL_VIEW_CLASS_32_BITS
      *iv_return = GL_VIEW_CLASS_32_BITS;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_VIEW_CLASS_48_BITS", 21)) {
    /*                               ^           */
#ifdef GL_VIEW_CLASS_48_BITS
      *iv_return = GL_VIEW_CLASS_48_BITS;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_VIEW_CLASS_64_BITS", 21)) {
    /*                               ^           */
#ifdef GL_VIEW_CLASS_64_BITS
      *iv_return = GL_VIEW_CLASS_64_BITS;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_VIEW_CLASS_96_BITS", 21)) {
    /*                               ^           */
#ifdef GL_VIEW_CLASS_96_BITS
      *iv_return = GL_VIEW_CLASS_96_BITS;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case 'a':
    if (memEQ(name, "GLEW_3DFX_multisample", 21)) {
    /*                               ^           */
#ifdef GLEW_3DFX_multisample
      *iv_return = GLEW_3DFX_multisample;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GLEW_EXT_debug_marker", 21)) {
    /*                               ^           */
#ifdef GLEW_EXT_debug_marker
      *iv_return = GLEW_EXT_debug_marker;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GLEW_EXT_scene_marker", 21)) {
    /*                               ^           */
#ifdef GLEW_EXT_scene_marker
      *iv_return = GLEW_EXT_scene_marker;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GLEW_EXT_vertex_array", 21)) {
    /*                               ^           */
#ifdef GLEW_EXT_vertex_array
      *iv_return = GLEW_EXT_vertex_array;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GLEW_SGIS_multisample", 21)) {
    /*                               ^           */
#ifdef GLEW_SGIS_multisample
      *iv_return = GLEW_SGIS_multisample;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GLEW_SGI_color_matrix", 21)) {
    /*                               ^           */
#ifdef GLEW_SGI_color_matrix
      *iv_return = GLEW_SGI_color_matrix;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GLEW_SUN_global_alpha", 21)) {
    /*                               ^           */
#ifdef GLEW_SUN_global_alpha
      *iv_return = GLEW_SUN_global_alpha;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_ARB_draw_instanced", 21)) {
    /*                               ^           */
#ifdef GL_ARB_draw_instanced
      *iv_return = GL_ARB_draw_instanced;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_ARB_sample_shading", 21)) {
    /*                               ^           */
#ifdef GL_ARB_sample_shading
      *iv_return = GL_ARB_sample_shading;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_ARB_texture_gather", 21)) {
    /*                               ^           */
#ifdef GL_ARB_texture_gather
      *iv_return = GL_ARB_texture_gather;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_ARB_viewport_array", 21)) {
    /*                               ^           */
#ifdef GL_ARB_viewport_array
      *iv_return = GL_ARB_viewport_array;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_EXT_draw_instanced", 21)) {
    /*                               ^           */
#ifdef GL_EXT_draw_instanced
      *iv_return = GL_EXT_draw_instanced;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_NV_texture_shader2", 21)) {
    /*                               ^           */
#ifdef GL_NV_texture_shader2
      *iv_return = GL_NV_texture_shader2;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_NV_texture_shader3", 21)) {
    /*                               ^           */
#ifdef GL_NV_texture_shader3
      *iv_return = GL_NV_texture_shader3;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glBufferRegionEnabled", 21)) {
    /*                               ^           */
#ifdef glBufferRegionEnabled
      *iv_return = glBufferRegionEnabled;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glDrawArraysInstanced", 21)) {
    /*                               ^           */
#ifdef glDrawArraysInstanced
      *iv_return = glDrawArraysInstanced;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glDrawElementArrayATI", 21)) {
    /*                               ^           */
#ifdef glDrawElementArrayATI
      *iv_return = glDrawElementArrayATI;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glGetFragDataLocation", 21)) {
    /*                               ^           */
#ifdef glGetFragDataLocation
      *iv_return = glGetFragDataLocation;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glIsPointInFillPathNV", 21)) {
    /*                               ^           */
#ifdef glIsPointInFillPathNV
      *iv_return = glIsPointInFillPathNV;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glStencilFuncSeparate", 21)) {
    /*                               ^           */
#ifdef glStencilFuncSeparate
      *iv_return = glStencilFuncSeparate;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glStencilMaskSeparate", 21)) {
    /*                               ^           */
#ifdef glStencilMaskSeparate
      *iv_return = glStencilMaskSeparate;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glStencilStrokePathNV", 21)) {
    /*                               ^           */
#ifdef glStencilStrokePathNV
      *iv_return = glStencilStrokePathNV;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glUseShaderProgramEXT", 21)) {
    /*                               ^           */
#ifdef glUseShaderProgramEXT
      *iv_return = glUseShaderProgramEXT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case 'b':
    if (memEQ(name, "GLEW_ARB_vertex_blend", 21)) {
    /*                               ^           */
#ifdef GLEW_ARB_vertex_blend
      *iv_return = GLEW_ARB_vertex_blend;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_ARB_shadow_ambient", 21)) {
    /*                               ^           */
#ifdef GL_ARB_shadow_ambient
      *iv_return = GL_ARB_shadow_ambient;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_EXT_texture_object", 21)) {
    /*                               ^           */
#ifdef GL_EXT_texture_object
      *iv_return = GL_EXT_texture_object;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glGetVertexAttribIuiv", 21)) {
    /*                               ^           */
#ifdef glGetVertexAttribIuiv
      *iv_return = glGetVertexAttribIuiv;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glGetVertexAttribdvNV", 21)) {
    /*                               ^           */
#ifdef glGetVertexAttribdvNV
      *iv_return = glGetVertexAttribdvNV;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glGetVertexAttribfvNV", 21)) {
    /*                               ^           */
#ifdef glGetVertexAttribfvNV
      *iv_return = glGetVertexAttribfvNV;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glGetVertexAttribivNV", 21)) {
    /*                               ^           */
#ifdef glGetVertexAttribivNV
      *iv_return = glGetVertexAttribivNV;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glVertexAttrib4NbvARB", 21)) {
    /*                               ^           */
#ifdef glVertexAttrib4NbvARB
      *iv_return = glVertexAttrib4NbvARB;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glVertexAttrib4ubvARB", 21)) {
    /*                               ^           */
#ifdef glVertexAttrib4ubvARB
      *iv_return = glVertexAttrib4ubvARB;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glVertexAttribI4bvEXT", 21)) {
    /*                               ^           */
#ifdef glVertexAttribI4bvEXT
      *iv_return = glVertexAttribI4bvEXT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case 'c':
    if (memEQ(name, "GLEW_ARB_shader_clock", 21)) {
    /*                               ^           */
#ifdef GLEW_ARB_shader_clock
      *iv_return = GLEW_ARB_shader_clock;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GLEW_INGR_color_clamp", 21)) {
    /*                               ^           */
#ifdef GLEW_INGR_color_clamp
      *iv_return = GLEW_INGR_color_clamp;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glUseProgramObjectARB", 21)) {
    /*                               ^           */
#ifdef glUseProgramObjectARB
      *iv_return = glUseProgramObjectARB;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case 'd':
    if (memEQ(name, "GL_REGAL_proc_address", 21)) {
    /*                               ^           */
#ifdef GL_REGAL_proc_address
      *iv_return = GL_REGAL_proc_address;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glGetFloatIndexedvEXT", 21)) {
    /*                               ^           */
#ifdef glGetFloatIndexedvEXT
      *iv_return = glGetFloatIndexedvEXT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glGetMultiTexGendvEXT", 21)) {
    /*                               ^           */
#ifdef glGetMultiTexGendvEXT
      *iv_return = glGetMultiTexGendvEXT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glIsTransformFeedback", 21)) {
    /*                               ^           */
#ifdef glIsTransformFeedback
      *iv_return = glIsTransformFeedback;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glMultiTexCoord1dvARB", 21)) {
    /*                               ^           */
#ifdef glMultiTexCoord1dvARB
      *iv_return = glMultiTexCoord1dvARB;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glMultiTexCoord2dvARB", 21)) {
    /*                               ^           */
#ifdef glMultiTexCoord2dvARB
      *iv_return = glMultiTexCoord2dvARB;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glMultiTexCoord3dvARB", 21)) {
    /*                               ^           */
#ifdef glMultiTexCoord3dvARB
      *iv_return = glMultiTexCoord3dvARB;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glMultiTexCoord4dvARB", 21)) {
    /*                               ^           */
#ifdef glMultiTexCoord4dvARB
      *iv_return = glMultiTexCoord4dvARB;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glTessellationModeAMD", 21)) {
    /*                               ^           */
#ifdef glTessellationModeAMD
      *iv_return = glTessellationModeAMD;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glVertexAttribL1dvEXT", 21)) {
    /*                               ^           */
#ifdef glVertexAttribL1dvEXT
      *iv_return = glVertexAttribL1dvEXT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glVertexAttribL2dvEXT", 21)) {
    /*                               ^           */
#ifdef glVertexAttribL2dvEXT
      *iv_return = glVertexAttribL2dvEXT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glVertexAttribL3dvEXT", 21)) {
    /*                               ^           */
#ifdef glVertexAttribL3dvEXT
      *iv_return = glVertexAttribL3dvEXT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glVertexAttribL4dvEXT", 21)) {
    /*                               ^           */
#ifdef glVertexAttribL4dvEXT
      *iv_return = glVertexAttribL4dvEXT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case 'e':
    if (memEQ(name, "GLEW_SGIS_texture_lod", 21)) {
    /*                               ^           */
#ifdef GLEW_SGIS_texture_lod
      *iv_return = GLEW_SGIS_texture_lod;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_EXT_index_material", 21)) {
    /*                               ^           */
#ifdef GL_EXT_index_material
      *iv_return = GL_EXT_index_material;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glBindBufferOffsetEXT", 21)) {
    /*                               ^           */
#ifdef glBindBufferOffsetEXT
      *iv_return = glBindBufferOffsetEXT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glBindProgramPipeline", 21)) {
    /*                               ^           */
#ifdef glBindProgramPipeline
      *iv_return = glBindProgramPipeline;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glBindRenderbufferEXT", 21)) {
    /*                               ^           */
#ifdef glBindRenderbufferEXT
      *iv_return = glBindRenderbufferEXT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glBindVertexShaderEXT", 21)) {
    /*                               ^           */
#ifdef glBindVertexShaderEXT
      *iv_return = glBindVertexShaderEXT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glBlendFuncIndexedAMD", 21)) {
    /*                               ^           */
#ifdef glBlendFuncIndexedAMD
      *iv_return = glBlendFuncIndexedAMD;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glColorMaskIndexedEXT", 21)) {
    /*                               ^           */
#ifdef glColorMaskIndexedEXT
      *iv_return = glColorMaskIndexedEXT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glEndOcclusionQueryNV", 21)) {
    /*                               ^           */
#ifdef glEndOcclusionQueryNV
      *iv_return = glEndOcclusionQueryNV;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glFreeObjectBufferATI", 21)) {
    /*                               ^           */
#ifdef glFreeObjectBufferATI
      *iv_return = glFreeObjectBufferATI;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glGetUniformOffsetEXT", 21)) {
    /*                               ^           */
#ifdef glGetUniformOffsetEXT
      *iv_return = glGetUniformOffsetEXT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glGetVideoCaptureivNV", 21)) {
    /*                               ^           */
#ifdef glGetVideoCaptureivNV
      *iv_return = glGetVideoCaptureivNV;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glIsEnabledIndexedEXT", 21)) {
    /*                               ^           */
#ifdef glIsEnabledIndexedEXT
      *iv_return = glIsEnabledIndexedEXT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glIsVariantEnabledEXT", 21)) {
    /*                               ^           */
#ifdef glIsVariantEnabledEXT
      *iv_return = glIsVariantEnabledEXT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glMatrixTranslatedEXT", 21)) {
    /*                               ^           */
#ifdef glMatrixTranslatedEXT
      *iv_return = glMatrixTranslatedEXT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glMatrixTranslatefEXT", 21)) {
    /*                               ^           */
#ifdef glMatrixTranslatefEXT
      *iv_return = glMatrixTranslatefEXT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glPointSizePointerOES", 21)) {
    /*                               ^           */
#ifdef glPointSizePointerOES
      *iv_return = glPointSizePointerOES;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glSamplerParameterIiv", 21)) {
    /*                               ^           */
#ifdef glSamplerParameterIiv
      *iv_return = glSamplerParameterIiv;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glSpecializeShaderARB", 21)) {
    /*                               ^           */
#ifdef glSpecializeShaderARB
      *iv_return = glSpecializeShaderARB;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glTextureParameterIiv", 21)) {
    /*                               ^           */
#ifdef glTextureParameterIiv
      *iv_return = glTextureParameterIiv;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glUnmapNamedBufferEXT", 21)) {
    /*                               ^           */
#ifdef glUnmapNamedBufferEXT
      *iv_return = glUnmapNamedBufferEXT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glVDPAUGetSurfaceivNV", 21)) {
    /*                               ^           */
#ifdef glVDPAUGetSurfaceivNV
      *iv_return = glVDPAUGetSurfaceivNV;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glWindowRectanglesEXT", 21)) {
    /*                               ^           */
#ifdef glWindowRectanglesEXT
      *iv_return = glWindowRectanglesEXT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case 'f':
    if (memEQ(name, "GLEW_ARB_draw_buffers", 21)) {
    /*                               ^           */
#ifdef GLEW_ARB_draw_buffers
      *iv_return = GLEW_ARB_draw_buffers;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GLEW_ATI_draw_buffers", 21)) {
    /*                               ^           */
#ifdef GLEW_ATI_draw_buffers
      *iv_return = GLEW_ATI_draw_buffers;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GLEW_EXT_packed_float", 21)) {
    /*                               ^           */
#ifdef GLEW_EXT_packed_float
      *iv_return = GLEW_EXT_packed_float;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GLEW_EXT_shadow_funcs", 21)) {
    /*                               ^           */
#ifdef GLEW_EXT_shadow_funcs
      *iv_return = GLEW_EXT_shadow_funcs;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_EXT_polygon_offset", 21)) {
    /*                               ^           */
#ifdef GL_EXT_polygon_offset
      *iv_return = GL_EXT_polygon_offset;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glColor3fVertex3fvSUN", 21)) {
    /*                               ^           */
#ifdef glColor3fVertex3fvSUN
      *iv_return = glColor3fVertex3fvSUN;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glCreateRenderbuffers", 21)) {
    /*                               ^           */
#ifdef glCreateRenderbuffers
      *iv_return = glCreateRenderbuffers;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glDeleteRenderbuffers", 21)) {
    /*                               ^           */
#ifdef glDeleteRenderbuffers
      *iv_return = glDeleteRenderbuffers;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glGetArrayObjectfvATI", 21)) {
    /*                               ^           */
#ifdef glGetArrayObjectfvATI
      *iv_return = glGetArrayObjectfvATI;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glGetMultiTexEnvfvEXT", 21)) {
    /*                               ^           */
#ifdef glGetMultiTexEnvfvEXT
      *iv_return = glGetMultiTexEnvfvEXT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glGetMultiTexGenfvEXT", 21)) {
    /*                               ^           */
#ifdef glGetMultiTexGenfvEXT
      *iv_return = glGetMultiTexGenfvEXT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glMultiTexCoord1fvARB", 21)) {
    /*                               ^           */
#ifdef glMultiTexCoord1fvARB
      *iv_return = glMultiTexCoord1fvARB;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glMultiTexCoord2fvARB", 21)) {
    /*                               ^           */
#ifdef glMultiTexCoord2fvARB
      *iv_return = glMultiTexCoord2fvARB;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glMultiTexCoord3fvARB", 21)) {
    /*                               ^           */
#ifdef glMultiTexCoord3fvARB
      *iv_return = glMultiTexCoord3fvARB;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glMultiTexCoord4fvARB", 21)) {
    /*                               ^           */
#ifdef glMultiTexCoord4fvARB
      *iv_return = glMultiTexCoord4fvARB;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glPointParameterfvARB", 21)) {
    /*                               ^           */
#ifdef glPointParameterfvARB
      *iv_return = glPointParameterfvARB;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glPointParameterfvEXT", 21)) {
    /*                               ^           */
#ifdef glPointParameterfvEXT
      *iv_return = glPointParameterfvEXT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glSetMultisamplefvAMD", 21)) {
    /*                               ^           */
#ifdef glSetMultisamplefvAMD
      *iv_return = glSetMultisamplefvAMD;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glUniformMatrix2fvARB", 21)) {
    /*                               ^           */
#ifdef glUniformMatrix2fvARB
      *iv_return = glUniformMatrix2fvARB;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glUniformMatrix3fvARB", 21)) {
    /*                               ^           */
#ifdef glUniformMatrix3fvARB
      *iv_return = glUniformMatrix3fvARB;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glUniformMatrix4fvARB", 21)) {
    /*                               ^           */
#ifdef glUniformMatrix4fvARB
      *iv_return = glUniformMatrix4fvARB;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case 'g':
    if (memEQ(name, "GL_NV_vertex_program2", 21)) {
    /*                               ^           */
#ifdef GL_NV_vertex_program2
      *iv_return = GL_NV_vertex_program2;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_NV_vertex_program3", 21)) {
    /*                               ^           */
#ifdef GL_NV_vertex_program3
      *iv_return = GL_NV_vertex_program3;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_NV_vertex_program4", 21)) {
    /*                               ^           */
#ifdef GL_NV_vertex_program4
      *iv_return = GL_NV_vertex_program4;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glGetMultiTexImageEXT", 21)) {
    /*                               ^           */
#ifdef glGetMultiTexImageEXT
      *iv_return = glGetMultiTexImageEXT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case 'h':
    if (memEQ(name, "GLEW_PGI_vertex_hints", 21)) {
    /*                               ^           */
#ifdef GLEW_PGI_vertex_hints
      *iv_return = GLEW_PGI_vertex_hints;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_ARB_compute_shader", 21)) {
    /*                               ^           */
#ifdef GL_ARB_compute_shader
      *iv_return = GL_ARB_compute_shader;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case 'i':
    if (memEQ(name, "GLEW_EXT_blend_minmax", 21)) {
    /*                               ^           */
#ifdef GLEW_EXT_blend_minmax
      *iv_return = GLEW_EXT_blend_minmax;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GLEW_NV_gpu_multicast", 21)) {
    /*                               ^           */
#ifdef GLEW_NV_gpu_multicast
      *iv_return = GLEW_NV_gpu_multicast;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_APPLE_float_pixels", 21)) {
    /*                               ^           */
#ifdef GL_APPLE_float_pixels
      *iv_return = GL_APPLE_float_pixels;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_EXT_blend_logic_op", 21)) {
    /*                               ^           */
#ifdef GL_EXT_blend_logic_op
      *iv_return = GL_EXT_blend_logic_op;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_EXT_misc_attribute", 21)) {
    /*                               ^           */
#ifdef GL_EXT_misc_attribute
      *iv_return = GL_EXT_misc_attribute;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glGetArrayObjectivATI", 21)) {
    /*                               ^           */
#ifdef glGetArrayObjectivATI
      *iv_return = glGetArrayObjectivATI;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glGetIntegerui64i_vNV", 21)) {
    /*                               ^           */
#ifdef glGetIntegerui64i_vNV
      *iv_return = glGetIntegerui64i_vNV;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glGetMultiTexEnvivEXT", 21)) {
    /*                               ^           */
#ifdef glGetMultiTexEnvivEXT
      *iv_return = glGetMultiTexEnvivEXT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glGetMultiTexGenivEXT", 21)) {
    /*                               ^           */
#ifdef glGetMultiTexGenivEXT
      *iv_return = glGetMultiTexGenivEXT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glGetNamedStringivARB", 21)) {
    /*                               ^           */
#ifdef glGetNamedStringivARB
      *iv_return = glGetNamedStringivARB;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glGetQueryObjectivARB", 21)) {
    /*                               ^           */
#ifdef glGetQueryObjectivARB
      *iv_return = glGetQueryObjectivARB;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glMultiTexCoord1ivARB", 21)) {
    /*                               ^           */
#ifdef glMultiTexCoord1ivARB
      *iv_return = glMultiTexCoord1ivARB;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glMultiTexCoord2ivARB", 21)) {
    /*                               ^           */
#ifdef glMultiTexCoord2ivARB
      *iv_return = glMultiTexCoord2ivARB;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glMultiTexCoord3ivARB", 21)) {
    /*                               ^           */
#ifdef glMultiTexCoord3ivARB
      *iv_return = glMultiTexCoord3ivARB;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glMultiTexCoord4ivARB", 21)) {
    /*                               ^           */
#ifdef glMultiTexCoord4ivARB
      *iv_return = glMultiTexCoord4ivARB;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glTexParameterIuivEXT", 21)) {
    /*                               ^           */
#ifdef glTexParameterIuivEXT
      *iv_return = glTexParameterIuivEXT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glUniformHandleui64NV", 21)) {
    /*                               ^           */
#ifdef glUniformHandleui64NV
      *iv_return = glUniformHandleui64NV;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glVertexAttrib4NivARB", 21)) {
    /*                               ^           */
#ifdef glVertexAttrib4NivARB
      *iv_return = glVertexAttrib4NivARB;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glVertexAttrib4uivARB", 21)) {
    /*                               ^           */
#ifdef glVertexAttrib4uivARB
      *iv_return = glVertexAttrib4uivARB;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glVertexAttribI1ivEXT", 21)) {
    /*                               ^           */
#ifdef glVertexAttribI1ivEXT
      *iv_return = glVertexAttribI1ivEXT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glVertexAttribI2ivEXT", 21)) {
    /*                               ^           */
#ifdef glVertexAttribI2ivEXT
      *iv_return = glVertexAttribI2ivEXT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glVertexAttribI3ivEXT", 21)) {
    /*                               ^           */
#ifdef glVertexAttribI3ivEXT
      *iv_return = glVertexAttribI3ivEXT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glVertexAttribI4ivEXT", 21)) {
    /*                               ^           */
#ifdef glVertexAttribI4ivEXT
      *iv_return = glVertexAttribI4ivEXT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glVertexAttribL1i64NV", 21)) {
    /*                               ^           */
#ifdef glVertexAttribL1i64NV
      *iv_return = glVertexAttribL1i64NV;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glVertexAttribL2i64NV", 21)) {
    /*                               ^           */
#ifdef glVertexAttribL2i64NV
      *iv_return = glVertexAttribL2i64NV;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glVertexAttribL3i64NV", 21)) {
    /*                               ^           */
#ifdef glVertexAttribL3i64NV
      *iv_return = glVertexAttribL3i64NV;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glVertexAttribL4i64NV", 21)) {
    /*                               ^           */
#ifdef glVertexAttribL4i64NV
      *iv_return = glVertexAttribL4i64NV;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glVertexAttribPointer", 21)) {
    /*                               ^           */
#ifdef glVertexAttribPointer
      *iv_return = glVertexAttribPointer;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case 'j':
    if (memEQ(name, "GL_ARB_shader_objects", 21)) {
    /*                               ^           */
#ifdef GL_ARB_shader_objects
      *iv_return = GL_ARB_shader_objects;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case 'l':
    if (memEQ(name, "GL_ARB_matrix_palette", 21)) {
    /*                               ^           */
#ifdef GL_ARB_matrix_palette
      *iv_return = GL_ARB_matrix_palette;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glGenProgramPipelines", 21)) {
    /*                               ^           */
#ifdef glGenProgramPipelines
      *iv_return = glGenProgramPipelines;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glGetTextureHandleARB", 21)) {
    /*                               ^           */
#ifdef glGetTextureHandleARB
      *iv_return = glGetTextureHandleARB;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case 'm':
    if (memEQ(name, "GLEW_NV_texgen_emboss", 21)) {
    /*                               ^           */
#ifdef GLEW_NV_texgen_emboss
      *iv_return = GLEW_NV_texgen_emboss;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_ATI_envmap_bumpmap", 21)) {
    /*                               ^           */
#ifdef GL_ATI_envmap_bumpmap
      *iv_return = GL_ATI_envmap_bumpmap;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glGetInternalformativ", 21)) {
    /*                               ^           */
#ifdef glGetInternalformativ
      *iv_return = glGetInternalformativ;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case 'n':
    if (memEQ(name, "GLEW_ARB_clip_control", 21)) {
    /*                               ^           */
#ifdef GLEW_ARB_clip_control
      *iv_return = GLEW_ARB_clip_control;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GLEW_ATI_pn_triangles", 21)) {
    /*                               ^           */
#ifdef GLEW_ATI_pn_triangles
      *iv_return = GLEW_ATI_pn_triangles;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GLEW_MESA_pack_invert", 21)) {
    /*                               ^           */
#ifdef GLEW_MESA_pack_invert
      *iv_return = GLEW_MESA_pack_invert;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glDebugMessageControl", 21)) {
    /*                               ^           */
#ifdef glDebugMessageControl
      *iv_return = glDebugMessageControl;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glExtractComponentEXT", 21)) {
    /*                               ^           */
#ifdef glExtractComponentEXT
      *iv_return = glExtractComponentEXT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glGetPathColorGenfvNV", 21)) {
    /*                               ^           */
#ifdef glGetPathColorGenfvNV
      *iv_return = glGetPathColorGenfvNV;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glGetPathColorGenivNV", 21)) {
    /*                               ^           */
#ifdef glGetPathColorGenivNV
      *iv_return = glGetPathColorGenivNV;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glGetProgramStringARB", 21)) {
    /*                               ^           */
#ifdef glGetProgramStringARB
      *iv_return = glGetProgramStringARB;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glMinSampleShadingARB", 21)) {
    /*                               ^           */
#ifdef glMinSampleShadingARB
      *iv_return = glMinSampleShadingARB;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glSetLocalConstantEXT", 21)) {
    /*                               ^           */
#ifdef glSetLocalConstantEXT
      *iv_return = glSetLocalConstantEXT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glUniformBlockBinding", 21)) {
    /*                               ^           */
#ifdef glUniformBlockBinding
      *iv_return = glUniformBlockBinding;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glVertexAttribBinding", 21)) {
    /*                               ^           */
#ifdef glVertexAttribBinding
      *iv_return = glVertexAttribBinding;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case 'o':
    if (memEQ(name, "GL_ARB_buffer_storage", 21)) {
    /*                               ^           */
#ifdef GL_ARB_buffer_storage
      *iv_return = GL_ARB_buffer_storage;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_ARB_vertex_program", 21)) {
    /*                               ^           */
#ifdef GL_ARB_vertex_program
      *iv_return = GL_ARB_vertex_program;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_EXT_rescale_normal", 21)) {
    /*                               ^           */
#ifdef GL_EXT_rescale_normal
      *iv_return = GL_EXT_rescale_normal;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_SGIX_list_priority", 21)) {
    /*                               ^           */
#ifdef GL_SGIX_list_priority
      *iv_return = GL_SGIX_list_priority;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glActiveShaderProgram", 21)) {
    /*                               ^           */
#ifdef glActiveShaderProgram
      *iv_return = glActiveShaderProgram;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glBeginPerfMonitorAMD", 21)) {
    /*                               ^           */
#ifdef glBeginPerfMonitorAMD
      *iv_return = glBeginPerfMonitorAMD;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glRenderbufferStorage", 21)) {
    /*                               ^           */
#ifdef glRenderbufferStorage
      *iv_return = glRenderbufferStorage;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glSignalVkSemaphoreNV", 21)) {
    /*                               ^           */
#ifdef glSignalVkSemaphoreNV
      *iv_return = glSignalVkSemaphoreNV;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glVertexAttribIFormat", 21)) {
    /*                               ^           */
#ifdef glVertexAttribIFormat
      *iv_return = glVertexAttribIFormat;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glVertexAttribLFormat", 21)) {
    /*                               ^           */
#ifdef glVertexAttribLFormat
      *iv_return = glVertexAttribLFormat;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case 'p':
    if (memEQ(name, "GLEW_ARB_point_sprite", 21)) {
    /*                               ^           */
#ifdef GLEW_ARB_point_sprite
      *iv_return = GLEW_ARB_point_sprite;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GLEW_NV_video_capture", 21)) {
    /*                               ^           */
#ifdef GLEW_NV_video_capture
      *iv_return = GLEW_NV_video_capture;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GLEW_SGIX_async_pixel", 21)) {
    /*                               ^           */
#ifdef GLEW_SGIX_async_pixel
      *iv_return = GLEW_SGIX_async_pixel;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glAlphaFragmentOp1ATI", 21)) {
    /*                               ^           */
#ifdef glAlphaFragmentOp1ATI
      *iv_return = glAlphaFragmentOp1ATI;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glAlphaFragmentOp2ATI", 21)) {
    /*                               ^           */
#ifdef glAlphaFragmentOp2ATI
      *iv_return = glAlphaFragmentOp2ATI;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glAlphaFragmentOp3ATI", 21)) {
    /*                               ^           */
#ifdef glAlphaFragmentOp3ATI
      *iv_return = glAlphaFragmentOp3ATI;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glColorFragmentOp1ATI", 21)) {
    /*                               ^           */
#ifdef glColorFragmentOp1ATI
      *iv_return = glColorFragmentOp1ATI;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glColorFragmentOp2ATI", 21)) {
    /*                               ^           */
#ifdef glColorFragmentOp2ATI
      *iv_return = glColorFragmentOp2ATI;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glColorFragmentOp3ATI", 21)) {
    /*                               ^           */
#ifdef glColorFragmentOp3ATI
      *iv_return = glColorFragmentOp3ATI;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case 'q':
    if (memEQ(name, "GL_NV_occlusion_query", 21)) {
    /*                               ^           */
#ifdef GL_NV_occlusion_query
      *iv_return = GL_NV_occlusion_query;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case 'r':
    if (memEQ(name, "GLEW_SGIS_color_range", 21)) {
    /*                               ^           */
#ifdef GLEW_SGIS_color_range
      *iv_return = GLEW_SGIS_color_range;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GLEW_WIN_specular_fog", 21)) {
    /*                               ^           */
#ifdef GLEW_WIN_specular_fog
      *iv_return = GLEW_WIN_specular_fog;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_ATIX_point_sprites", 21)) {
    /*                               ^           */
#ifdef GL_ATIX_point_sprites
      *iv_return = GL_ATIX_point_sprites;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_ATI_vertex_streams", 21)) {
    /*                               ^           */
#ifdef GL_ATI_vertex_streams
      *iv_return = GL_ATI_vertex_streams;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_NV_texture_barrier", 21)) {
    /*                               ^           */
#ifdef GL_NV_texture_barrier
      *iv_return = GL_NV_texture_barrier;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_NV_viewport_array2", 21)) {
    /*                               ^           */
#ifdef GL_NV_viewport_array2
      *iv_return = GL_NV_viewport_array2;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_SGIX_texture_range", 21)) {
    /*                               ^           */
#ifdef GL_SGIX_texture_range
      *iv_return = GL_SGIX_texture_range;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glBindImageTextureEXT", 21)) {
    /*                               ^           */
#ifdef glBindImageTextureEXT
      *iv_return = glBindImageTextureEXT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glBindMultiTextureEXT", 21)) {
    /*                               ^           */
#ifdef glBindMultiTextureEXT
      *iv_return = glBindMultiTextureEXT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glGenRenderbuffersEXT", 21)) {
    /*                               ^           */
#ifdef glGenRenderbuffersEXT
      *iv_return = glGenRenderbuffersEXT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glGenVertexShadersEXT", 21)) {
    /*                               ^           */
#ifdef glGenVertexShadersEXT
      *iv_return = glGenVertexShadersEXT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glGetActiveUniformARB", 21)) {
    /*                               ^           */
#ifdef glGetActiveUniformARB
      *iv_return = glGetActiveUniformARB;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glGetActiveUniformsiv", 21)) {
    /*                               ^           */
#ifdef glGetActiveUniformsiv
      *iv_return = glGetActiveUniformsiv;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glGetMapParameterfvNV", 21)) {
    /*                               ^           */
#ifdef glGetMapParameterfvNV
      *iv_return = glGetMapParameterfvNV;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glGetMapParameterivNV", 21)) {
    /*                               ^           */
#ifdef glGetMapParameterivNV
      *iv_return = glGetMapParameterivNV;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glGetTexParameterIuiv", 21)) {
    /*                               ^           */
#ifdef glGetTexParameterIuiv
      *iv_return = glGetTexParameterIuiv;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glTagSampleBufferSGIX", 21)) {
    /*                               ^           */
#ifdef glTagSampleBufferSGIX
      *iv_return = glTagSampleBufferSGIX;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case 's':
    if (memEQ(name, "GL_HP_image_transform", 21)) {
    /*                               ^           */
#ifdef GL_HP_image_transform
      *iv_return = GL_HP_image_transform;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glColorPointerListIBM", 21)) {
    /*                               ^           */
#ifdef glColorPointerListIBM
      *iv_return = glColorPointerListIBM;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glGenAsyncMarkersSGIX", 21)) {
    /*                               ^           */
#ifdef glGenAsyncMarkersSGIX
      *iv_return = glGenAsyncMarkersSGIX;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glIndexPointerListIBM", 21)) {
    /*                               ^           */
#ifdef glIndexPointerListIBM
      *iv_return = glIndexPointerListIBM;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glMultiTexCoord1svARB", 21)) {
    /*                               ^           */
#ifdef glMultiTexCoord1svARB
      *iv_return = glMultiTexCoord1svARB;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glMultiTexCoord2svARB", 21)) {
    /*                               ^           */
#ifdef glMultiTexCoord2svARB
      *iv_return = glMultiTexCoord2svARB;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glMultiTexCoord3svARB", 21)) {
    /*                               ^           */
#ifdef glMultiTexCoord3svARB
      *iv_return = glMultiTexCoord3svARB;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glMultiTexCoord4svARB", 21)) {
    /*                               ^           */
#ifdef glMultiTexCoord4svARB
      *iv_return = glMultiTexCoord4svARB;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glTexStorageSparseAMD", 21)) {
    /*                               ^           */
#ifdef glTexStorageSparseAMD
      *iv_return = glTexStorageSparseAMD;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glVertexAttrib4NsvARB", 21)) {
    /*                               ^           */
#ifdef glVertexAttrib4NsvARB
      *iv_return = glVertexAttrib4NsvARB;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glVertexAttrib4usvARB", 21)) {
    /*                               ^           */
#ifdef glVertexAttrib4usvARB
      *iv_return = glVertexAttrib4usvARB;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glVertexAttribI4svEXT", 21)) {
    /*                               ^           */
#ifdef glVertexAttribI4svEXT
      *iv_return = glVertexAttribI4svEXT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case 't':
    if (memEQ(name, "GLEW_NV_vdpau_interop", 21)) {
    /*                               ^           */
#ifdef GLEW_NV_vdpau_interop
      *iv_return = GLEW_NV_vdpau_interop;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_EXT_blend_subtract", 21)) {
    /*                               ^           */
#ifdef GL_EXT_blend_subtract
      *iv_return = GL_EXT_blend_subtract;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_EXT_color_subtable", 21)) {
    /*                               ^           */
#ifdef GL_EXT_color_subtable
      *iv_return = GL_EXT_color_subtable;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_REGAL_error_string", 21)) {
    /*                               ^           */
#ifdef GL_REGAL_error_string
      *iv_return = GL_REGAL_error_string;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glConvolutionFilter1D", 21)) {
    /*                               ^           */
#ifdef glConvolutionFilter1D
      *iv_return = glConvolutionFilter1D;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glConvolutionFilter2D", 21)) {
    /*                               ^           */
#ifdef glConvolutionFilter2D
      *iv_return = glConvolutionFilter2D;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glGetBufferSubDataARB", 21)) {
    /*                               ^           */
#ifdef glGetBufferSubDataARB
      *iv_return = glGetBufferSubDataARB;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glGetVariantFloatvEXT", 21)) {
    /*                               ^           */
#ifdef glGetVariantFloatvEXT
      *iv_return = glGetVariantFloatvEXT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case 'u':
    if (memEQ(name, "GLEW_AMD_debug_output", 21)) {
    /*                               ^           */
#ifdef GLEW_AMD_debug_output
      *iv_return = GLEW_AMD_debug_output;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GLEW_ARB_debug_output", 21)) {
    /*                               ^           */
#ifdef GLEW_ARB_debug_output
      *iv_return = GLEW_ARB_debug_output;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_APPLE_pixel_buffer", 21)) {
    /*                               ^           */
#ifdef GL_APPLE_pixel_buffer
      *iv_return = GL_APPLE_pixel_buffer;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glBeginVideoCaptureNV", 21)) {
    /*                               ^           */
#ifdef glBeginVideoCaptureNV
      *iv_return = glBeginVideoCaptureNV;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glGetQueryObjectui64v", 21)) {
    /*                               ^           */
#ifdef glGetQueryObjectui64v
      *iv_return = glGetQueryObjectui64v;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glVertexAttrib4NubARB", 21)) {
    /*                               ^           */
#ifdef glVertexAttrib4NubARB
      *iv_return = glVertexAttrib4NubARB;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glVertexAttribI1uiEXT", 21)) {
    /*                               ^           */
#ifdef glVertexAttribI1uiEXT
      *iv_return = glVertexAttribI1uiEXT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glVertexAttribI2uiEXT", 21)) {
    /*                               ^           */
#ifdef glVertexAttribI2uiEXT
      *iv_return = glVertexAttribI2uiEXT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glVertexAttribI3uiEXT", 21)) {
    /*                               ^           */
#ifdef glVertexAttribI3uiEXT
      *iv_return = glVertexAttribI3uiEXT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glVertexAttribI4uiEXT", 21)) {
    /*                               ^           */
#ifdef glVertexAttribI4uiEXT
      *iv_return = glVertexAttribI4uiEXT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glVertexAttribs4ubvNV", 21)) {
    /*                               ^           */
#ifdef glVertexAttribs4ubvNV
      *iv_return = glVertexAttribs4ubvNV;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case 'v':
    if (memEQ(name, "GLEW_NV_present_video", 21)) {
    /*                               ^           */
#ifdef GLEW_NV_present_video
      *iv_return = GLEW_NV_present_video;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glFragmentLightfvSGIX", 21)) {
    /*                               ^           */
#ifdef glFragmentLightfvSGIX
      *iv_return = glFragmentLightfvSGIX;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glFragmentLightivSGIX", 21)) {
    /*                               ^           */
#ifdef glFragmentLightivSGIX
      *iv_return = glFragmentLightivSGIX;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glVertexAttribDivisor", 21)) {
    /*                               ^           */
#ifdef glVertexAttribDivisor
      *iv_return = glVertexAttribDivisor;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case 'x':
    if (memEQ(name, "GLEW_ARB_multitexture", 21)) {
    /*                               ^           */
#ifdef GLEW_ARB_multitexture
      *iv_return = GLEW_ARB_multitexture;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GLEW_EXT_copy_texture", 21)) {
    /*                               ^           */
#ifdef GLEW_EXT_copy_texture
      *iv_return = GLEW_EXT_copy_texture;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GLEW_SGIX_fog_texture", 21)) {
    /*                               ^           */
#ifdef GLEW_SGIX_fog_texture
      *iv_return = GLEW_SGIX_fog_texture;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_AMD_sparse_texture", 21)) {
    /*                               ^           */
#ifdef GL_AMD_sparse_texture
      *iv_return = GL_AMD_sparse_texture;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_ARB_sparse_texture", 21)) {
    /*                               ^           */
#ifdef GL_ARB_sparse_texture
      *iv_return = GL_ARB_sparse_texture;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_MESA_ycbcr_texture", 21)) {
    /*                               ^           */
#ifdef GL_MESA_ycbcr_texture
      *iv_return = GL_MESA_ycbcr_texture;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_SGIS_pixel_texture", 21)) {
    /*                               ^           */
#ifdef GL_SGIS_pixel_texture
      *iv_return = GL_SGIS_pixel_texture;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_SGIX_depth_texture", 21)) {
    /*                               ^           */
#ifdef GL_SGIX_depth_texture
      *iv_return = GL_SGIX_depth_texture;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_SGIX_pixel_texture", 21)) {
    /*                               ^           */
#ifdef GL_SGIX_pixel_texture
      *iv_return = GL_SGIX_pixel_texture;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glClientActiveTexture", 21)) {
    /*                               ^           */
#ifdef glClientActiveTexture
      *iv_return = glClientActiveTexture;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glSampleMaskIndexedNV", 21)) {
    /*                               ^           */
#ifdef glSampleMaskIndexedNV
      *iv_return = glSampleMaskIndexedNV;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case 'y':
    if (memEQ(name, "glMulticastWaitSyncNV", 21)) {
    /*                               ^           */
#ifdef glMulticastWaitSyncNV
      *iv_return = glMulticastWaitSyncNV;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glPresentFrameKeyedNV", 21)) {
    /*                               ^           */
#ifdef glPresentFrameKeyedNV
      *iv_return = glPresentFrameKeyedNV;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  }
  return PERL_constant_NOTFOUND;
}

static int
constant_22 (pTHX_ const char *name, IV *iv_return) {
  /* When generated this function returned values for the list of names given
     here.  However, subsequent manual editing may have added or removed some.
     GLEW_AMD_pinned_memory GLEW_ANGLE_timer_query GLEW_ARB_base_instance
     GLEW_ARB_clear_texture GLEW_ARB_compatibility GLEW_ARB_cull_distance
     GLEW_ARB_depth_texture GLEW_ARB_draw_indirect GLEW_ARB_shader_ballot
     GLEW_ARB_sparse_buffer GLEW_ARB_texture_float GLEW_ARB_vertex_shader
     GLEW_ATI_element_array GLEW_ATI_texture_float GLEW_EXT_draw_buffers2
     GLEW_EXT_index_texture GLEW_EXT_light_texture GLEW_EXT_packed_pixels
     GLEW_EXT_texture_array GLEW_EXT_texture_snorm GLEW_EXT_vertex_shader
     GLEW_HP_occlusion_test GLEW_INTEL_map_texture GLEW_KTX_buffer_region
     GLEW_NV_deep_texture3D GLEW_NV_fill_rectangle GLEW_NV_path_rendering
     GLEW_NV_texture_shader GLEW_NV_vertex_program GLEW_SGIS_fog_function
     GLEW_SGIX_flush_raster GLEW_SUN_triangle_list GLEW_WIN_phong_shading
     GL_422_REV_AVERAGE_EXT GL_ALL_STATIC_DATA_IBM GL_ALPHA16_SIGNED_SGIX
     GL_ALPHA_FLOAT16_APPLE GL_ALPHA_FLOAT32_APPLE GL_AMBIENT_AND_DIFFUSE
     GL_AMD_name_gen_delete GL_ANGLE_depth_texture GL_ANGLE_texture_usage
     GL_APPLE_element_array GL_APPLE_texture_range GL_ARB_fragment_shader
     GL_ARB_gpu_shader_fp64 GL_ARB_occlusion_query GL_ARB_sampler_objects
     GL_ARB_sparse_texture2 GL_ARB_texture_barrier GL_ARB_texture_env_add
     GL_ARB_texture_storage GL_ARB_texture_swizzle GL_ATI_fragment_shader
     GL_BLEND_DST_ALPHA_EXT GL_BLEND_SRC_ALPHA_EXT GL_BLUE_MAX_CLAMP_INGR
     GL_BLUE_MIN_CLAMP_INGR GL_BUFFER_ACCESS_FLAGS GL_BUFFER_OBJECT_APPLE
     GL_BUMP_ROT_MATRIX_ATI GL_CLAMP_TO_BORDER_ARB GL_COLOR_ARRAY_POINTER
     GL_COLOR_MATERIAL_FACE GL_COMBINER_MAPPING_NV GL_COMBINER_MUX_SUM_NV
     GL_COMMAND_BARRIER_BIT GL_COMPILE_AND_EXECUTE GL_COMPRESSED_RG11_EAC
     GL_COMPRESSED_RGBA_ARB GL_COMPRESSED_RG_RGTC2 GL_COMPRESSED_SRGB_EXT
     GL_CONDITION_SATISFIED GL_CURRENT_QUERY_ANGLE GL_CURRENT_TANGENT_EXT
     GL_DEBUG_SEVERITY_HIGH GL_DEPTH_CLAMP_FAR_AMD GL_DYNAMIC_STORAGE_BIT
     GL_EDGE_FLAG_ARRAY_EXT GL_ELEMENT_ARRAY_APPLE GL_EXTENDED_RANGE_SGIS
     GL_EXT_pixel_transform GL_EXT_secondary_color GL_EXT_sparse_texture2
     GL_EXT_texture_env_add GL_EXT_texture_integer GL_EXT_texture_swizzle
     GL_EXT_x11_sync_object GL_FONT_UNAVAILABLE_NV GL_FRAGMENT_LIGHT0_EXT
     GL_FRAGMENT_LIGHT7_EXT GL_FRAGMENT_NORMAL_EXT GL_FRAGMENT_PROGRAM_NV
     GL_FRAGMENT_SHADER_ARB GL_FRAGMENT_SHADER_ATI GL_FRAGMENT_SHADER_BIT
     GL_FRAGMENT_SUBROUTINE GL_FRAMEBUFFER_BINDING GL_FRAMEBUFFER_DEFAULT
     GL_GEOMETRY_INPUT_TYPE GL_GEOMETRY_PROGRAM_NV GL_GEOMETRY_SHADER_ARB
     GL_GEOMETRY_SHADER_BIT GL_GEOMETRY_SHADER_EXT GL_GEOMETRY_SUBROUTINE
     GL_GLYPH_HEIGHT_BIT_NV GL_HALF_BIAS_NEGATE_NV GL_HALF_BIAS_NORMAL_NV
     GL_HISTOGRAM_BLUE_SIZE GL_HISTOGRAM_WIDTH_EXT GL_HP_texture_lighting
     GL_IMAGE_BINDING_LAYER GL_IMAGE_BINDING_LEVEL GL_INDEX_ARRAY_POINTER
     GL_INGR_interlace_read GL_INTERLACE_READ_INGR GL_INTERLEAVED_ATTRIBS
     GL_INT_SAMPLER_2D_RECT GL_INVARIANT_VALUE_EXT GL_LARGE_CCW_ARC_TO_NV
     GL_LAYOUT_LINEAR_INTEL GL_LIGHT_MODEL_AMBIENT GL_LINES_ADJACENCY_ARB
     GL_LINES_ADJACENCY_EXT GL_LINE_STIPPLE_REPEAT GL_LUMINANCE12_ALPHA12
     GL_LUMINANCE16_ALPHA16 GL_MAP_TESSELLATION_NV GL_MAT_AMBIENT_BIT_PGI
     GL_MAT_DIFFUSE_BIT_PGI GL_MAX_3D_TEXTURE_SIZE GL_MAX_IMAGE_UNITS_EXT
     GL_MAX_INTEGER_SAMPLES GL_MAX_PIXEL_MAP_TABLE GL_MAX_VARYING_VECTORS
     GL_MAX_VERTEX_HINT_PGI GL_MESAX_texture_stack GL_MESA_resize_buffers
     GL_MIN_LOD_WARNING_AMD GL_MIRRORED_REPEAT_ARB GL_MIRRORED_REPEAT_IBM
     GL_MULTISAMPLE_BIT_ARB GL_MULTISAMPLE_BIT_EXT GL_NEGATIVE_ONE_TO_ONE
     GL_NORMAL_ARRAY_STRIDE GL_NUM_FILL_STREAMS_NV GL_NVX_gpu_memory_info
     GL_NV_bindless_texture GL_NV_compute_program5 GL_NV_fragment_program
     GL_NV_geometry_shader4 GL_NV_gpu_program_fp64 GL_NV_pixel_data_range
     GL_NV_sample_locations GL_NV_viewport_swizzle GL_ONE_MINUS_DST_ALPHA
     GL_ONE_MINUS_DST_COLOR GL_ONE_MINUS_SRC_ALPHA GL_ONE_MINUS_SRC_COLOR
     GL_PATH_COORD_COUNT_NV GL_PATH_DASH_OFFSET_NV GL_PATH_MITER_LIMIT_NV
     GL_PATH_STENCIL_REF_NV GL_PATH_STROKE_MASK_NV GL_PIXEL_UNPACK_BUFFER
     GL_POLYGON_OFFSET_FILL GL_POLYGON_OFFSET_LINE GL_POLYGON_SMOOTH_HINT
     GL_POLYGON_STIPPLE_BIT GL_PRESENT_DURATION_NV GL_PROGRAM_ATTRIBS_ARB
     GL_PROGRAM_BINDING_ARB GL_PROGRAM_RESIDENT_NV GL_PROXY_HISTOGRAM_EXT
     GL_QUERY_WAIT_INVERTED GL_RELATIVE_LINE_TO_NV GL_RELATIVE_MOVE_TO_NV
     GL_RENDERBUFFER_HEIGHT GL_RGBA_FLOAT_MODE_ARB GL_SAMPLER_2D_RECT_ARB
     GL_SAMPLER_CUBE_SHADOW GL_SAMPLE_ALPHA_TO_ONE GL_SAMPLE_BUFFERS_3DFX
     GL_SAMPLE_BUFFERS_SGIS GL_SAMPLE_COVERAGE_ARB GL_SAMPLE_LOCATION_ARB
     GL_SAMPLE_PATTERN_SGIS GL_SEPARATE_ATTRIBS_NV GL_SGIS_detail_texture
     GL_SGIS_texture_select GL_SGIX_ir_instrument1 GL_SGIX_shadow_ambient
     GL_SGIX_vertex_preclip GL_SHADER_IMAGE_ATOMIC GL_SHADER_OPERATION_NV
     GL_SHADOW_AMBIENT_SGIX GL_SIGNED_INTENSITY_NV GL_SIGNED_LUMINANCE_NV
     GL_SMALL_CCW_ARC_TO_NV GL_STENCIL_CLEAR_VALUE GL_STENCIL_INDEX16_EXT
     GL_SWIZZLE_STRQ_DQ_ATI GL_SYSTEM_FONT_NAME_NV GL_TESS_CONTROL_SHADER
     GL_TESS_GEN_POINT_MODE GL_TEXTURE_BUFFER_SIZE GL_TEXTURE_COORD_ARRAY
     GL_TEXTURE_MAG_SIZE_NV GL_TEXTURE_SHARED_SIZE GL_TEXTURE_STACK_DEPTH
     GL_TEXTURE_USAGE_ANGLE GL_TRIANGLES_ADJACENCY GL_UNIFORM_BARRIER_BIT
     GL_UNIFORM_BLOCK_INDEX GL_UNIFORM_BUFFER_SIZE GL_UNIFORM_NAME_LENGTH
     GL_UNPACK_IMAGE_HEIGHT GL_UNPACK_RESAMPLE_OML GL_UNSIGNED_BYTE_3_3_2
     GL_UNSIGNED_NORMALIZED GL_VBO_FREE_MEMORY_ATI GL_VERTEX_ARRAY_STRIDE
     GL_VERTEX_PRECLIP_SGIX GL_VERTICAL_LINE_TO_NV GL_VIEWPORT_COMMAND_NV
     GL_VIEW_CLASS_128_BITS GL_VIEW_CLASS_RGTC2_RG glActiveStencilFaceEXT
     glBeginVertexShaderEXT glBindFragDataLocation glBindVertexArrayAPPLE
     glBlendFuncSeparateEXT glBlitFramebufferANGLE glBlitNamedFramebuffer
     glBufferAddressRangeNV glClearNamedBufferData glColor4ubVertex2fvSUN
     glColor4ubVertex3fvSUN glCombinerParameterfNV glCombinerParameteriNV
     glCompileCommandListNV glCompressedTexImage1D glCompressedTexImage2D
     glCompressedTexImage3D glCopyColorSubTableEXT glCopyTexSubImage1DEXT
     glCopyTexSubImage2DEXT glCopyTexSubImage3DEXT glCoverageModulationNV
     glCreateCommandListsNV glCreatePerfQueryINTEL glCreateShaderProgramv
     glDebugMessageCallback glDeleteCommandListsNV glDeleteNamedStringARB
     glDeletePerfQueryINTEL glDrawCommandsStatesNV glDrawElementsIndirect
     glDrawRangeElementsEXT glEnableVertexArrayEXT glEndConditionalRender
     glEndFragmentShaderATI glEndTransformFeedback glFinalCombinerInputNV
     glFragmentMaterialfEXT glFragmentMaterialiEXT glFramebufferTexture1D
     glFramebufferTexture2D glFramebufferTexture3D glGenVertexArraysAPPLE
     glGetActiveUniformName glGetAttribLocationARB glGetBufferParameteriv
     glGetBufferPointervARB glGetConvolutionFilter glGetDetailTexFuncSGIS
     glGetDoubleIndexedvEXT glGetMinmaxParameterfv glGetMinmaxParameteriv
     glGetNamedProgramivEXT glGetObjectBufferfvATI glGetObjectBufferivATI
     glGetPathMetricRangeNV glGetPathParameterfvNV glGetPathParameterivNV
     glGetProgramPipelineiv glGetProgramResourceiv glGetQueryObjectuivARB
     glGetTexFilterFuncSGIS glGetUniformBlockIndex glGetVaryingLocationNV
     glGetVertexAttribdvARB glGetVertexAttribfvARB glGetVertexAttribivARB
     glInsertEventMarkerEXT glInvalidateBufferData glLoadTransposeMatrixd
     glLoadTransposeMatrixf glMakeBufferResidentNV glMultTransposeMatrixd
     glMultTransposeMatrixf glMultiDrawElementsEXT glNormal3fVertex3fvSUN
     glNormalPointerListIBM glObjectPurgeableAPPLE glPathCoverDepthFuncNV
     glProgramParameter4dNV glProgramParameter4fNV glProgramParameteriARB
     glProgramParameteriEXT glProgramUniform1fvEXT glProgramUniform1i64NV
     glProgramUniform1ivEXT glProgramUniform1uiEXT glProgramUniform2fvEXT
     glProgramUniform2i64NV glProgramUniform2ivEXT glProgramUniform2uiEXT
     glProgramUniform3fvEXT glProgramUniform3i64NV glProgramUniform3ivEXT
     glProgramUniform3uiEXT glProgramUniform4fvEXT glProgramUniform4i64NV
     glProgramUniform4ivEXT glProgramUniform4uiEXT glProgramUniformui64NV
     glProgramVertexLimitNV glReplacementCodeubSUN glReplacementCodeuiSUN
     glReplacementCodeusSUN glSamplerParameterIuiv glSecondaryColor3bvEXT
     glSecondaryColor3dvEXT glSecondaryColor3fvEXT glSecondaryColor3ivEXT
     glSecondaryColor3svEXT glSecondaryColor3ubEXT glSecondaryColor3uiEXT
     glSecondaryColor3usEXT glSeparableFilter2DEXT glSpriteParameterfSGIX
     glSpriteParameteriSGIX glStencilOpSeparateATI glTexPageCommitmentARB
     glTextureParameterIuiv glTextureParameterfEXT glTextureParameteriEXT
     glTextureSubImage1DEXT glTextureSubImage2DEXT glTextureSubImage3DEXT
     glUniformHandleui64ARB glUniformHandleui64vNV glUnmapObjectBufferATI
     glVDPAUSurfaceAccessNV glVDPAUUnmapSurfacesNV glVertexAttrib4NubvARB
     glVertexAttrib4NuivARB glVertexAttrib4NusvARB glVertexAttribFormatNV
     glVertexAttribI1uivEXT glVertexAttribI2uivEXT glVertexAttribI3uivEXT
     glVertexAttribI4ubvEXT glVertexAttribI4uivEXT glVertexAttribI4usvEXT
     glVertexAttribIPointer glVertexAttribL1i64vNV glVertexAttribL1ui64NV
     glVertexAttribL2i64vNV glVertexAttribL2ui64NV glVertexAttribL3i64vNV
     glVertexAttribL3ui64NV glVertexAttribL4i64vNV glVertexAttribL4ui64NV
     glVertexAttribLPointer glVertexBindingDivisor glVertexPointerListIBM */
  /* Offset 15 gives the best switch position.  */
  switch (name[15]) {
  case '1':
    if (memEQ(name, "glVertexAttribI1uivEXT", 22)) {
    /*                              ^             */
#ifdef glVertexAttribI1uivEXT
      *iv_return = glVertexAttribI1uivEXT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glVertexAttribL1i64vNV", 22)) {
    /*                              ^             */
#ifdef glVertexAttribL1i64vNV
      *iv_return = glVertexAttribL1i64vNV;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glVertexAttribL1ui64NV", 22)) {
    /*                              ^             */
#ifdef glVertexAttribL1ui64NV
      *iv_return = glVertexAttribL1ui64NV;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case '2':
    if (memEQ(name, "GL_ALPHA_FLOAT32_APPLE", 22)) {
    /*                              ^             */
#ifdef GL_ALPHA_FLOAT32_APPLE
      *iv_return = GL_ALPHA_FLOAT32_APPLE;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_INT_SAMPLER_2D_RECT", 22)) {
    /*                              ^             */
#ifdef GL_INT_SAMPLER_2D_RECT
      *iv_return = GL_INT_SAMPLER_2D_RECT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_VIEW_CLASS_128_BITS", 22)) {
    /*                              ^             */
#ifdef GL_VIEW_CLASS_128_BITS
      *iv_return = GL_VIEW_CLASS_128_BITS;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glVertexAttribI2uivEXT", 22)) {
    /*                              ^             */
#ifdef glVertexAttribI2uivEXT
      *iv_return = glVertexAttribI2uivEXT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glVertexAttribL2i64vNV", 22)) {
    /*                              ^             */
#ifdef glVertexAttribL2i64vNV
      *iv_return = glVertexAttribL2i64vNV;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glVertexAttribL2ui64NV", 22)) {
    /*                              ^             */
#ifdef glVertexAttribL2ui64NV
      *iv_return = glVertexAttribL2ui64NV;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case '3':
    if (memEQ(name, "glVertexAttribI3uivEXT", 22)) {
    /*                              ^             */
#ifdef glVertexAttribI3uivEXT
      *iv_return = glVertexAttribI3uivEXT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glVertexAttribL3i64vNV", 22)) {
    /*                              ^             */
#ifdef glVertexAttribL3i64vNV
      *iv_return = glVertexAttribL3i64vNV;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glVertexAttribL3ui64NV", 22)) {
    /*                              ^             */
#ifdef glVertexAttribL3ui64NV
      *iv_return = glVertexAttribL3ui64NV;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case '4':
    if (memEQ(name, "glVertexAttribI4ubvEXT", 22)) {
    /*                              ^             */
#ifdef glVertexAttribI4ubvEXT
      *iv_return = glVertexAttribI4ubvEXT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glVertexAttribI4uivEXT", 22)) {
    /*                              ^             */
#ifdef glVertexAttribI4uivEXT
      *iv_return = glVertexAttribI4uivEXT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glVertexAttribI4usvEXT", 22)) {
    /*                              ^             */
#ifdef glVertexAttribI4usvEXT
      *iv_return = glVertexAttribI4usvEXT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glVertexAttribL4i64vNV", 22)) {
    /*                              ^             */
#ifdef glVertexAttribL4i64vNV
      *iv_return = glVertexAttribL4i64vNV;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glVertexAttribL4ui64NV", 22)) {
    /*                              ^             */
#ifdef glVertexAttribL4ui64NV
      *iv_return = glVertexAttribL4ui64NV;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case '6':
    if (memEQ(name, "GL_ALPHA_FLOAT16_APPLE", 22)) {
    /*                              ^             */
#ifdef GL_ALPHA_FLOAT16_APPLE
      *iv_return = GL_ALPHA_FLOAT16_APPLE;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case 'A':
    if (memEQ(name, "GL_422_REV_AVERAGE_EXT", 22)) {
    /*                              ^             */
#ifdef GL_422_REV_AVERAGE_EXT
      *iv_return = GL_422_REV_AVERAGE_EXT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_ALL_STATIC_DATA_IBM", 22)) {
    /*                              ^             */
#ifdef GL_ALL_STATIC_DATA_IBM
      *iv_return = GL_ALL_STATIC_DATA_IBM;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_COLOR_MATERIAL_FACE", 22)) {
    /*                              ^             */
#ifdef GL_COLOR_MATERIAL_FACE
      *iv_return = GL_COLOR_MATERIAL_FACE;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_DYNAMIC_STORAGE_BIT", 22)) {
    /*                              ^             */
#ifdef GL_DYNAMIC_STORAGE_BIT
      *iv_return = GL_DYNAMIC_STORAGE_BIT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_FONT_UNAVAILABLE_NV", 22)) {
    /*                              ^             */
#ifdef GL_FONT_UNAVAILABLE_NV
      *iv_return = GL_FONT_UNAVAILABLE_NV;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_INTERLACE_READ_INGR", 22)) {
    /*                              ^             */
#ifdef GL_INTERLACE_READ_INGR
      *iv_return = GL_INTERLACE_READ_INGR;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_INTERLEAVED_ATTRIBS", 22)) {
    /*                              ^             */
#ifdef GL_INTERLEAVED_ATTRIBS
      *iv_return = GL_INTERLEAVED_ATTRIBS;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_LIGHT_MODEL_AMBIENT", 22)) {
    /*                              ^             */
#ifdef GL_LIGHT_MODEL_AMBIENT
      *iv_return = GL_LIGHT_MODEL_AMBIENT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_LUMINANCE12_ALPHA12", 22)) {
    /*                              ^             */
#ifdef GL_LUMINANCE12_ALPHA12
      *iv_return = GL_LUMINANCE12_ALPHA12;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_LUMINANCE16_ALPHA16", 22)) {
    /*                              ^             */
#ifdef GL_LUMINANCE16_ALPHA16
      *iv_return = GL_LUMINANCE16_ALPHA16;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_SAMPLE_COVERAGE_ARB", 22)) {
    /*                              ^             */
#ifdef GL_SAMPLE_COVERAGE_ARB
      *iv_return = GL_SAMPLE_COVERAGE_ARB;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_SIGNED_LUMINANCE_NV", 22)) {
    /*                              ^             */
#ifdef GL_SIGNED_LUMINANCE_NV
      *iv_return = GL_SIGNED_LUMINANCE_NV;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case 'B':
    if (memEQ(name, "GL_FRAMEBUFFER_BINDING", 22)) {
    /*                              ^             */
#ifdef GL_FRAMEBUFFER_BINDING
      *iv_return = GL_FRAMEBUFFER_BINDING;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_MAT_AMBIENT_BIT_PGI", 22)) {
    /*                              ^             */
#ifdef GL_MAT_AMBIENT_BIT_PGI
      *iv_return = GL_MAT_AMBIENT_BIT_PGI;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_MAT_DIFFUSE_BIT_PGI", 22)) {
    /*                              ^             */
#ifdef GL_MAT_DIFFUSE_BIT_PGI
      *iv_return = GL_MAT_DIFFUSE_BIT_PGI;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_MULTISAMPLE_BIT_ARB", 22)) {
    /*                              ^             */
#ifdef GL_MULTISAMPLE_BIT_ARB
      *iv_return = GL_MULTISAMPLE_BIT_ARB;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_MULTISAMPLE_BIT_EXT", 22)) {
    /*                              ^             */
#ifdef GL_MULTISAMPLE_BIT_EXT
      *iv_return = GL_MULTISAMPLE_BIT_EXT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case 'C':
    if (memEQ(name, "GL_LARGE_CCW_ARC_TO_NV", 22)) {
    /*                              ^             */
#ifdef GL_LARGE_CCW_ARC_TO_NV
      *iv_return = GL_LARGE_CCW_ARC_TO_NV;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_ONE_MINUS_SRC_ALPHA", 22)) {
    /*                              ^             */
#ifdef GL_ONE_MINUS_SRC_ALPHA
      *iv_return = GL_ONE_MINUS_SRC_ALPHA;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_ONE_MINUS_SRC_COLOR", 22)) {
    /*                              ^             */
#ifdef GL_ONE_MINUS_SRC_COLOR
      *iv_return = GL_ONE_MINUS_SRC_COLOR;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_SMALL_CCW_ARC_TO_NV", 22)) {
    /*                              ^             */
#ifdef GL_SMALL_CCW_ARC_TO_NV
      *iv_return = GL_SMALL_CCW_ARC_TO_NV;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case 'D':
    if (memEQ(name, "GL_AMBIENT_AND_DIFFUSE", 22)) {
    /*                              ^             */
#ifdef GL_AMBIENT_AND_DIFFUSE
      *iv_return = GL_AMBIENT_AND_DIFFUSE;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_CLAMP_TO_BORDER_ARB", 22)) {
    /*                              ^             */
#ifdef GL_CLAMP_TO_BORDER_ARB
      *iv_return = GL_CLAMP_TO_BORDER_ARB;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_FRAGMENT_SHADER_ARB", 22)) {
    /*                              ^             */
#ifdef GL_FRAGMENT_SHADER_ARB
      *iv_return = GL_FRAGMENT_SHADER_ARB;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_FRAGMENT_SHADER_ATI", 22)) {
    /*                              ^             */
#ifdef GL_FRAGMENT_SHADER_ATI
      *iv_return = GL_FRAGMENT_SHADER_ATI;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_FRAGMENT_SHADER_BIT", 22)) {
    /*                              ^             */
#ifdef GL_FRAGMENT_SHADER_BIT
      *iv_return = GL_FRAGMENT_SHADER_BIT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_FRAMEBUFFER_DEFAULT", 22)) {
    /*                              ^             */
#ifdef GL_FRAMEBUFFER_DEFAULT
      *iv_return = GL_FRAMEBUFFER_DEFAULT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_GEOMETRY_SHADER_ARB", 22)) {
    /*                              ^             */
#ifdef GL_GEOMETRY_SHADER_ARB
      *iv_return = GL_GEOMETRY_SHADER_ARB;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_GEOMETRY_SHADER_BIT", 22)) {
    /*                              ^             */
#ifdef GL_GEOMETRY_SHADER_BIT
      *iv_return = GL_GEOMETRY_SHADER_BIT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_GEOMETRY_SHADER_EXT", 22)) {
    /*                              ^             */
#ifdef GL_GEOMETRY_SHADER_EXT
      *iv_return = GL_GEOMETRY_SHADER_EXT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_HISTOGRAM_WIDTH_EXT", 22)) {
    /*                              ^             */
#ifdef GL_HISTOGRAM_WIDTH_EXT
      *iv_return = GL_HISTOGRAM_WIDTH_EXT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_PROGRAM_RESIDENT_NV", 22)) {
    /*                              ^             */
#ifdef GL_PROGRAM_RESIDENT_NV
      *iv_return = GL_PROGRAM_RESIDENT_NV;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_TEXTURE_COORD_ARRAY", 22)) {
    /*                              ^             */
#ifdef GL_TEXTURE_COORD_ARRAY
      *iv_return = GL_TEXTURE_COORD_ARRAY;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glVertexBindingDivisor", 22)) {
    /*                              ^             */
#ifdef glVertexBindingDivisor
      *iv_return = glVertexBindingDivisor;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case 'E':
    if (memEQ(name, "GL_ALPHA16_SIGNED_SGIX", 22)) {
    /*                              ^             */
#ifdef GL_ALPHA16_SIGNED_SGIX
      *iv_return = GL_ALPHA16_SIGNED_SGIX;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_COMPILE_AND_EXECUTE", 22)) {
    /*                              ^             */
#ifdef GL_COMPILE_AND_EXECUTE
      *iv_return = GL_COMPILE_AND_EXECUTE;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_CURRENT_TANGENT_EXT", 22)) {
    /*                              ^             */
#ifdef GL_CURRENT_TANGENT_EXT
      *iv_return = GL_CURRENT_TANGENT_EXT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_MIRRORED_REPEAT_ARB", 22)) {
    /*                              ^             */
#ifdef GL_MIRRORED_REPEAT_ARB
      *iv_return = GL_MIRRORED_REPEAT_ARB;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_MIRRORED_REPEAT_IBM", 22)) {
    /*                              ^             */
#ifdef GL_MIRRORED_REPEAT_IBM
      *iv_return = GL_MIRRORED_REPEAT_IBM;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_NUM_FILL_STREAMS_NV", 22)) {
    /*                              ^             */
#ifdef GL_NUM_FILL_STREAMS_NV
      *iv_return = GL_NUM_FILL_STREAMS_NV;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_POLYGON_OFFSET_FILL", 22)) {
    /*                              ^             */
#ifdef GL_POLYGON_OFFSET_FILL
      *iv_return = GL_POLYGON_OFFSET_FILL;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_POLYGON_OFFSET_LINE", 22)) {
    /*                              ^             */
#ifdef GL_POLYGON_OFFSET_LINE
      *iv_return = GL_POLYGON_OFFSET_LINE;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_RELATIVE_LINE_TO_NV", 22)) {
    /*                              ^             */
#ifdef GL_RELATIVE_LINE_TO_NV
      *iv_return = GL_RELATIVE_LINE_TO_NV;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_RELATIVE_MOVE_TO_NV", 22)) {
    /*                              ^             */
#ifdef GL_RELATIVE_MOVE_TO_NV
      *iv_return = GL_RELATIVE_MOVE_TO_NV;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_SAMPLER_2D_RECT_ARB", 22)) {
    /*                              ^             */
#ifdef GL_SAMPLER_2D_RECT_ARB
      *iv_return = GL_SAMPLER_2D_RECT_ARB;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_TEXTURE_BUFFER_SIZE", 22)) {
    /*                              ^             */
#ifdef GL_TEXTURE_BUFFER_SIZE
      *iv_return = GL_TEXTURE_BUFFER_SIZE;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_TEXTURE_SHARED_SIZE", 22)) {
    /*                              ^             */
#ifdef GL_TEXTURE_SHARED_SIZE
      *iv_return = GL_TEXTURE_SHARED_SIZE;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_TEXTURE_USAGE_ANGLE", 22)) {
    /*                              ^             */
#ifdef GL_TEXTURE_USAGE_ANGLE
      *iv_return = GL_TEXTURE_USAGE_ANGLE;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_UNIFORM_BUFFER_SIZE", 22)) {
    /*                              ^             */
#ifdef GL_UNIFORM_BUFFER_SIZE
      *iv_return = GL_UNIFORM_BUFFER_SIZE;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_UNSIGNED_BYTE_3_3_2", 22)) {
    /*                              ^             */
#ifdef GL_UNSIGNED_BYTE_3_3_2
      *iv_return = GL_UNSIGNED_BYTE_3_3_2;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_VERTICAL_LINE_TO_NV", 22)) {
    /*                              ^             */
#ifdef GL_VERTICAL_LINE_TO_NV
      *iv_return = GL_VERTICAL_LINE_TO_NV;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case 'F':
    if (memEQ(name, "GL_DEPTH_CLAMP_FAR_AMD", 22)) {
    /*                              ^             */
#ifdef GL_DEPTH_CLAMP_FAR_AMD
      *iv_return = GL_DEPTH_CLAMP_FAR_AMD;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_PATH_DASH_OFFSET_NV", 22)) {
    /*                              ^             */
#ifdef GL_PATH_DASH_OFFSET_NV
      *iv_return = GL_PATH_DASH_OFFSET_NV;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glActiveStencilFaceEXT", 22)) {
    /*                              ^             */
#ifdef glActiveStencilFaceEXT
      *iv_return = glActiveStencilFaceEXT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case 'G':
    if (memEQ(name, "GL_COMPRESSED_RG11_EAC", 22)) {
    /*                              ^             */
#ifdef GL_COMPRESSED_RG11_EAC
      *iv_return = GL_COMPRESSED_RG11_EAC;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_COMPRESSED_RGBA_ARB", 22)) {
    /*                              ^             */
#ifdef GL_COMPRESSED_RGBA_ARB
      *iv_return = GL_COMPRESSED_RGBA_ARB;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_COMPRESSED_RG_RGTC2", 22)) {
    /*                              ^             */
#ifdef GL_COMPRESSED_RG_RGTC2
      *iv_return = GL_COMPRESSED_RG_RGTC2;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_EXTENDED_RANGE_SGIS", 22)) {
    /*                              ^             */
#ifdef GL_EXTENDED_RANGE_SGIS
      *iv_return = GL_EXTENDED_RANGE_SGIS;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_FRAGMENT_PROGRAM_NV", 22)) {
    /*                              ^             */
#ifdef GL_FRAGMENT_PROGRAM_NV
      *iv_return = GL_FRAGMENT_PROGRAM_NV;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_GEOMETRY_PROGRAM_NV", 22)) {
    /*                              ^             */
#ifdef GL_GEOMETRY_PROGRAM_NV
      *iv_return = GL_GEOMETRY_PROGRAM_NV;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_HALF_BIAS_NEGATE_NV", 22)) {
    /*                              ^             */
#ifdef GL_HALF_BIAS_NEGATE_NV
      *iv_return = GL_HALF_BIAS_NEGATE_NV;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_IMAGE_BINDING_LAYER", 22)) {
    /*                              ^             */
#ifdef GL_IMAGE_BINDING_LAYER
      *iv_return = GL_IMAGE_BINDING_LAYER;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_IMAGE_BINDING_LEVEL", 22)) {
    /*                              ^             */
#ifdef GL_IMAGE_BINDING_LEVEL
      *iv_return = GL_IMAGE_BINDING_LEVEL;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_VIEW_CLASS_RGTC2_RG", 22)) {
    /*                              ^             */
#ifdef GL_VIEW_CLASS_RGTC2_RG
      *iv_return = GL_VIEW_CLASS_RGTC2_RG;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case 'H':
    if (memEQ(name, "GL_FRAGMENT_LIGHT0_EXT", 22)) {
    /*                              ^             */
#ifdef GL_FRAGMENT_LIGHT0_EXT
      *iv_return = GL_FRAGMENT_LIGHT0_EXT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_FRAGMENT_LIGHT7_EXT", 22)) {
    /*                              ^             */
#ifdef GL_FRAGMENT_LIGHT7_EXT
      *iv_return = GL_FRAGMENT_LIGHT7_EXT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case 'I':
    if (memEQ(name, "GL_COMMAND_BARRIER_BIT", 22)) {
    /*                              ^             */
#ifdef GL_COMMAND_BARRIER_BIT
      *iv_return = GL_COMMAND_BARRIER_BIT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_MAX_IMAGE_UNITS_EXT", 22)) {
    /*                              ^             */
#ifdef GL_MAX_IMAGE_UNITS_EXT
      *iv_return = GL_MAX_IMAGE_UNITS_EXT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_MAX_VERTEX_HINT_PGI", 22)) {
    /*                              ^             */
#ifdef GL_MAX_VERTEX_HINT_PGI
      *iv_return = GL_MAX_VERTEX_HINT_PGI;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_MIN_LOD_WARNING_AMD", 22)) {
    /*                              ^             */
#ifdef GL_MIN_LOD_WARNING_AMD
      *iv_return = GL_MIN_LOD_WARNING_AMD;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_PATH_MITER_LIMIT_NV", 22)) {
    /*                              ^             */
#ifdef GL_PATH_MITER_LIMIT_NV
      *iv_return = GL_PATH_MITER_LIMIT_NV;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_PROGRAM_ATTRIBS_ARB", 22)) {
    /*                              ^             */
#ifdef GL_PROGRAM_ATTRIBS_ARB
      *iv_return = GL_PROGRAM_ATTRIBS_ARB;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_PROGRAM_BINDING_ARB", 22)) {
    /*                              ^             */
#ifdef GL_PROGRAM_BINDING_ARB
      *iv_return = GL_PROGRAM_BINDING_ARB;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_SAMPLE_LOCATION_ARB", 22)) {
    /*                              ^             */
#ifdef GL_SAMPLE_LOCATION_ARB
      *iv_return = GL_SAMPLE_LOCATION_ARB;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_UNIFORM_BARRIER_BIT", 22)) {
    /*                              ^             */
#ifdef GL_UNIFORM_BARRIER_BIT
      *iv_return = GL_UNIFORM_BARRIER_BIT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_VERTEX_PRECLIP_SGIX", 22)) {
    /*                              ^             */
#ifdef GL_VERTEX_PRECLIP_SGIX
      *iv_return = GL_VERTEX_PRECLIP_SGIX;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glCompressedTexImage1D", 22)) {
    /*                              ^             */
#ifdef glCompressedTexImage1D
      *iv_return = glCompressedTexImage1D;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glCompressedTexImage2D", 22)) {
    /*                              ^             */
#ifdef glCompressedTexImage2D
      *iv_return = glCompressedTexImage2D;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glCompressedTexImage3D", 22)) {
    /*                              ^             */
#ifdef glCompressedTexImage3D
      *iv_return = glCompressedTexImage3D;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glFinalCombinerInputNV", 22)) {
    /*                              ^             */
#ifdef glFinalCombinerInputNV
      *iv_return = glFinalCombinerInputNV;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case 'J':
    if (memEQ(name, "GL_TRIANGLES_ADJACENCY", 22)) {
    /*                              ^             */
#ifdef GL_TRIANGLES_ADJACENCY
      *iv_return = GL_TRIANGLES_ADJACENCY;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case 'K':
    if (memEQ(name, "GL_TEXTURE_STACK_DEPTH", 22)) {
    /*                              ^             */
#ifdef GL_TEXTURE_STACK_DEPTH
      *iv_return = GL_TEXTURE_STACK_DEPTH;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_UNIFORM_BLOCK_INDEX", 22)) {
    /*                              ^             */
#ifdef GL_UNIFORM_BLOCK_INDEX
      *iv_return = GL_UNIFORM_BLOCK_INDEX;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case 'L':
    if (memEQ(name, "GL_INVARIANT_VALUE_EXT", 22)) {
    /*                              ^             */
#ifdef GL_INVARIANT_VALUE_EXT
      *iv_return = GL_INVARIANT_VALUE_EXT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glCreateCommandListsNV", 22)) {
    /*                              ^             */
#ifdef glCreateCommandListsNV
      *iv_return = glCreateCommandListsNV;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glDeleteCommandListsNV", 22)) {
    /*                              ^             */
#ifdef glDeleteCommandListsNV
      *iv_return = glDeleteCommandListsNV;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glNormalPointerListIBM", 22)) {
    /*                              ^             */
#ifdef glNormalPointerListIBM
      *iv_return = glNormalPointerListIBM;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glProgramVertexLimitNV", 22)) {
    /*                              ^             */
#ifdef glProgramVertexLimitNV
      *iv_return = glProgramVertexLimitNV;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glVertexPointerListIBM", 22)) {
    /*                              ^             */
#ifdef glVertexPointerListIBM
      *iv_return = glVertexPointerListIBM;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case 'M':
    if (memEQ(name, "GL_BLUE_MAX_CLAMP_INGR", 22)) {
    /*                              ^             */
#ifdef GL_BLUE_MAX_CLAMP_INGR
      *iv_return = GL_BLUE_MAX_CLAMP_INGR;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_BLUE_MIN_CLAMP_INGR", 22)) {
    /*                              ^             */
#ifdef GL_BLUE_MIN_CLAMP_INGR
      *iv_return = GL_BLUE_MIN_CLAMP_INGR;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_FRAGMENT_NORMAL_EXT", 22)) {
    /*                              ^             */
#ifdef GL_FRAGMENT_NORMAL_EXT
      *iv_return = GL_FRAGMENT_NORMAL_EXT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_PATH_STROKE_MASK_NV", 22)) {
    /*                              ^             */
#ifdef GL_PATH_STROKE_MASK_NV
      *iv_return = GL_PATH_STROKE_MASK_NV;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_UNSIGNED_NORMALIZED", 22)) {
    /*                              ^             */
#ifdef GL_UNSIGNED_NORMALIZED
      *iv_return = GL_UNSIGNED_NORMALIZED;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_VIEWPORT_COMMAND_NV", 22)) {
    /*                              ^             */
#ifdef GL_VIEWPORT_COMMAND_NV
      *iv_return = GL_VIEWPORT_COMMAND_NV;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glLoadTransposeMatrixd", 22)) {
    /*                              ^             */
#ifdef glLoadTransposeMatrixd
      *iv_return = glLoadTransposeMatrixd;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glLoadTransposeMatrixf", 22)) {
    /*                              ^             */
#ifdef glLoadTransposeMatrixf
      *iv_return = glLoadTransposeMatrixf;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glMultTransposeMatrixd", 22)) {
    /*                              ^             */
#ifdef glMultTransposeMatrixd
      *iv_return = glMultTransposeMatrixd;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glMultTransposeMatrixf", 22)) {
    /*                              ^             */
#ifdef glMultTransposeMatrixf
      *iv_return = glMultTransposeMatrixf;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case 'N':
    if (memEQ(name, "GL_LINES_ADJACENCY_ARB", 22)) {
    /*                              ^             */
#ifdef GL_LINES_ADJACENCY_ARB
      *iv_return = GL_LINES_ADJACENCY_ARB;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_LINES_ADJACENCY_EXT", 22)) {
    /*                              ^             */
#ifdef GL_LINES_ADJACENCY_EXT
      *iv_return = GL_LINES_ADJACENCY_EXT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_QUERY_WAIT_INVERTED", 22)) {
    /*                              ^             */
#ifdef GL_QUERY_WAIT_INVERTED
      *iv_return = GL_QUERY_WAIT_INVERTED;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_SHADOW_AMBIENT_SGIX", 22)) {
    /*                              ^             */
#ifdef GL_SHADOW_AMBIENT_SGIX
      *iv_return = GL_SHADOW_AMBIENT_SGIX;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_SYSTEM_FONT_NAME_NV", 22)) {
    /*                              ^             */
#ifdef GL_SYSTEM_FONT_NAME_NV
      *iv_return = GL_SYSTEM_FONT_NAME_NV;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_TESS_GEN_POINT_MODE", 22)) {
    /*                              ^             */
#ifdef GL_TESS_GEN_POINT_MODE
      *iv_return = GL_TESS_GEN_POINT_MODE;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glVertexAttrib4NubvARB", 22)) {
    /*                              ^             */
#ifdef glVertexAttrib4NubvARB
      *iv_return = glVertexAttrib4NubvARB;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glVertexAttrib4NuivARB", 22)) {
    /*                              ^             */
#ifdef glVertexAttrib4NuivARB
      *iv_return = glVertexAttrib4NuivARB;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glVertexAttrib4NusvARB", 22)) {
    /*                              ^             */
#ifdef glVertexAttrib4NusvARB
      *iv_return = glVertexAttrib4NusvARB;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case 'O':
    if (memEQ(name, "GL_PATH_COORD_COUNT_NV", 22)) {
    /*                              ^             */
#ifdef GL_PATH_COORD_COUNT_NV
      *iv_return = GL_PATH_COORD_COUNT_NV;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_RGBA_FLOAT_MODE_ARB", 22)) {
    /*                              ^             */
#ifdef GL_RGBA_FLOAT_MODE_ARB
      *iv_return = GL_RGBA_FLOAT_MODE_ARB;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_VBO_FREE_MEMORY_ATI", 22)) {
    /*                              ^             */
#ifdef GL_VBO_FREE_MEMORY_ATI
      *iv_return = GL_VBO_FREE_MEMORY_ATI;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case 'P':
    if (memEQ(name, "GL_BLEND_DST_ALPHA_EXT", 22)) {
    /*                              ^             */
#ifdef GL_BLEND_DST_ALPHA_EXT
      *iv_return = GL_BLEND_DST_ALPHA_EXT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_BLEND_SRC_ALPHA_EXT", 22)) {
    /*                              ^             */
#ifdef GL_BLEND_SRC_ALPHA_EXT
      *iv_return = GL_BLEND_SRC_ALPHA_EXT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_COLOR_ARRAY_POINTER", 22)) {
    /*                              ^             */
#ifdef GL_COLOR_ARRAY_POINTER
      *iv_return = GL_COLOR_ARRAY_POINTER;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_COMBINER_MAPPING_NV", 22)) {
    /*                              ^             */
#ifdef GL_COMBINER_MAPPING_NV
      *iv_return = GL_COMBINER_MAPPING_NV;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_INDEX_ARRAY_POINTER", 22)) {
    /*                              ^             */
#ifdef GL_INDEX_ARRAY_POINTER
      *iv_return = GL_INDEX_ARRAY_POINTER;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_MAX_PIXEL_MAP_TABLE", 22)) {
    /*                              ^             */
#ifdef GL_MAX_PIXEL_MAP_TABLE
      *iv_return = GL_MAX_PIXEL_MAP_TABLE;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_POLYGON_STIPPLE_BIT", 22)) {
    /*                              ^             */
#ifdef GL_POLYGON_STIPPLE_BIT
      *iv_return = GL_POLYGON_STIPPLE_BIT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_UNPACK_RESAMPLE_OML", 22)) {
    /*                              ^             */
#ifdef GL_UNPACK_RESAMPLE_OML
      *iv_return = GL_UNPACK_RESAMPLE_OML;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glVertexAttribIPointer", 22)) {
    /*                              ^             */
#ifdef glVertexAttribIPointer
      *iv_return = glVertexAttribIPointer;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glVertexAttribLPointer", 22)) {
    /*                              ^             */
#ifdef glVertexAttribLPointer
      *iv_return = glVertexAttribLPointer;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case 'R':
    if (memEQ(name, "GL_BUMP_ROT_MATRIX_ATI", 22)) {
    /*                              ^             */
#ifdef GL_BUMP_ROT_MATRIX_ATI
      *iv_return = GL_BUMP_ROT_MATRIX_ATI;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_COMPRESSED_SRGB_EXT", 22)) {
    /*                              ^             */
#ifdef GL_COMPRESSED_SRGB_EXT
      *iv_return = GL_COMPRESSED_SRGB_EXT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_EDGE_FLAG_ARRAY_EXT", 22)) {
    /*                              ^             */
#ifdef GL_EDGE_FLAG_ARRAY_EXT
      *iv_return = GL_EDGE_FLAG_ARRAY_EXT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_FRAGMENT_SUBROUTINE", 22)) {
    /*                              ^             */
#ifdef GL_FRAGMENT_SUBROUTINE
      *iv_return = GL_FRAGMENT_SUBROUTINE;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_GEOMETRY_SUBROUTINE", 22)) {
    /*                              ^             */
#ifdef GL_GEOMETRY_SUBROUTINE
      *iv_return = GL_GEOMETRY_SUBROUTINE;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_HALF_BIAS_NORMAL_NV", 22)) {
    /*                              ^             */
#ifdef GL_HALF_BIAS_NORMAL_NV
      *iv_return = GL_HALF_BIAS_NORMAL_NV;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_LAYOUT_LINEAR_INTEL", 22)) {
    /*                              ^             */
#ifdef GL_LAYOUT_LINEAR_INTEL
      *iv_return = GL_LAYOUT_LINEAR_INTEL;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_MAX_3D_TEXTURE_SIZE", 22)) {
    /*                              ^             */
#ifdef GL_MAX_3D_TEXTURE_SIZE
      *iv_return = GL_MAX_3D_TEXTURE_SIZE;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_PROXY_HISTOGRAM_EXT", 22)) {
    /*                              ^             */
#ifdef GL_PROXY_HISTOGRAM_EXT
      *iv_return = GL_PROXY_HISTOGRAM_EXT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_SAMPLE_BUFFERS_3DFX", 22)) {
    /*                              ^             */
#ifdef GL_SAMPLE_BUFFERS_3DFX
      *iv_return = GL_SAMPLE_BUFFERS_3DFX;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_SAMPLE_BUFFERS_SGIS", 22)) {
    /*                              ^             */
#ifdef GL_SAMPLE_BUFFERS_SGIS
      *iv_return = GL_SAMPLE_BUFFERS_SGIS;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_SAMPLE_PATTERN_SGIS", 22)) {
    /*                              ^             */
#ifdef GL_SAMPLE_PATTERN_SGIS
      *iv_return = GL_SAMPLE_PATTERN_SGIS;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_SEPARATE_ATTRIBS_NV", 22)) {
    /*                              ^             */
#ifdef GL_SEPARATE_ATTRIBS_NV
      *iv_return = GL_SEPARATE_ATTRIBS_NV;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_STENCIL_CLEAR_VALUE", 22)) {
    /*                              ^             */
#ifdef GL_STENCIL_CLEAR_VALUE
      *iv_return = GL_STENCIL_CLEAR_VALUE;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glBufferAddressRangeNV", 22)) {
    /*                              ^             */
#ifdef glBufferAddressRangeNV
      *iv_return = glBufferAddressRangeNV;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glGetPathMetricRangeNV", 22)) {
    /*                              ^             */
#ifdef glGetPathMetricRangeNV
      *iv_return = glGetPathMetricRangeNV;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case 'S':
    if (memEQ(name, "GL_BUFFER_ACCESS_FLAGS", 22)) {
    /*                              ^             */
#ifdef GL_BUFFER_ACCESS_FLAGS
      *iv_return = GL_BUFFER_ACCESS_FLAGS;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_MAX_INTEGER_SAMPLES", 22)) {
    /*                              ^             */
#ifdef GL_MAX_INTEGER_SAMPLES
      *iv_return = GL_MAX_INTEGER_SAMPLES;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_SIGNED_INTENSITY_NV", 22)) {
    /*                              ^             */
#ifdef GL_SIGNED_INTENSITY_NV
      *iv_return = GL_SIGNED_INTENSITY_NV;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_TEXTURE_MAG_SIZE_NV", 22)) {
    /*                              ^             */
#ifdef GL_TEXTURE_MAG_SIZE_NV
      *iv_return = GL_TEXTURE_MAG_SIZE_NV;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case 'T':
    if (memEQ(name, "GL_BUFFER_OBJECT_APPLE", 22)) {
    /*                              ^             */
#ifdef GL_BUFFER_OBJECT_APPLE
      *iv_return = GL_BUFFER_OBJECT_APPLE;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_CONDITION_SATISFIED", 22)) {
    /*                              ^             */
#ifdef GL_CONDITION_SATISFIED
      *iv_return = GL_CONDITION_SATISFIED;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_DEBUG_SEVERITY_HIGH", 22)) {
    /*                              ^             */
#ifdef GL_DEBUG_SEVERITY_HIGH
      *iv_return = GL_DEBUG_SEVERITY_HIGH;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_MAP_TESSELLATION_NV", 22)) {
    /*                              ^             */
#ifdef GL_MAP_TESSELLATION_NV
      *iv_return = GL_MAP_TESSELLATION_NV;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_ONE_MINUS_DST_ALPHA", 22)) {
    /*                              ^             */
#ifdef GL_ONE_MINUS_DST_ALPHA
      *iv_return = GL_ONE_MINUS_DST_ALPHA;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_ONE_MINUS_DST_COLOR", 22)) {
    /*                              ^             */
#ifdef GL_ONE_MINUS_DST_COLOR
      *iv_return = GL_ONE_MINUS_DST_COLOR;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_POLYGON_SMOOTH_HINT", 22)) {
    /*                              ^             */
#ifdef GL_POLYGON_SMOOTH_HINT
      *iv_return = GL_POLYGON_SMOOTH_HINT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_PRESENT_DURATION_NV", 22)) {
    /*                              ^             */
#ifdef GL_PRESENT_DURATION_NV
      *iv_return = GL_PRESENT_DURATION_NV;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_SHADER_OPERATION_NV", 22)) {
    /*                              ^             */
#ifdef GL_SHADER_OPERATION_NV
      *iv_return = GL_SHADER_OPERATION_NV;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case 'U':
    if (memEQ(name, "GL_GEOMETRY_INPUT_TYPE", 22)) {
    /*                              ^             */
#ifdef GL_GEOMETRY_INPUT_TYPE
      *iv_return = GL_GEOMETRY_INPUT_TYPE;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_HISTOGRAM_BLUE_SIZE", 22)) {
    /*                              ^             */
#ifdef GL_HISTOGRAM_BLUE_SIZE
      *iv_return = GL_HISTOGRAM_BLUE_SIZE;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case 'V':
    if (memEQ(name, "GL_MAX_VARYING_VECTORS", 22)) {
    /*                              ^             */
#ifdef GL_MAX_VARYING_VECTORS
      *iv_return = GL_MAX_VARYING_VECTORS;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case 'X':
    if (memEQ(name, "GL_STENCIL_INDEX16_EXT", 22)) {
    /*                              ^             */
#ifdef GL_STENCIL_INDEX16_EXT
      *iv_return = GL_STENCIL_INDEX16_EXT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case 'Y':
    if (memEQ(name, "GL_CURRENT_QUERY_ANGLE", 22)) {
    /*                              ^             */
#ifdef GL_CURRENT_QUERY_ANGLE
      *iv_return = GL_CURRENT_QUERY_ANGLE;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_ELEMENT_ARRAY_APPLE", 22)) {
    /*                              ^             */
#ifdef GL_ELEMENT_ARRAY_APPLE
      *iv_return = GL_ELEMENT_ARRAY_APPLE;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case '_':
    if (memEQ(name, "GLEW_AMD_pinned_memory", 22)) {
    /*                              ^             */
#ifdef GLEW_AMD_pinned_memory
      *iv_return = GLEW_AMD_pinned_memory;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GLEW_ARB_shader_ballot", 22)) {
    /*                              ^             */
#ifdef GLEW_ARB_shader_ballot
      *iv_return = GLEW_ARB_shader_ballot;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GLEW_ARB_sparse_buffer", 22)) {
    /*                              ^             */
#ifdef GLEW_ARB_sparse_buffer
      *iv_return = GLEW_ARB_sparse_buffer;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GLEW_ARB_vertex_shader", 22)) {
    /*                              ^             */
#ifdef GLEW_ARB_vertex_shader
      *iv_return = GLEW_ARB_vertex_shader;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GLEW_EXT_packed_pixels", 22)) {
    /*                              ^             */
#ifdef GLEW_EXT_packed_pixels
      *iv_return = GLEW_EXT_packed_pixels;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GLEW_EXT_vertex_shader", 22)) {
    /*                              ^             */
#ifdef GLEW_EXT_vertex_shader
      *iv_return = GLEW_EXT_vertex_shader;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GLEW_KTX_buffer_region", 22)) {
    /*                              ^             */
#ifdef GLEW_KTX_buffer_region
      *iv_return = GLEW_KTX_buffer_region;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GLEW_NV_texture_shader", 22)) {
    /*                              ^             */
#ifdef GLEW_NV_texture_shader
      *iv_return = GLEW_NV_texture_shader;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GLEW_SGIX_flush_raster", 22)) {
    /*                              ^             */
#ifdef GLEW_SGIX_flush_raster
      *iv_return = GLEW_SGIX_flush_raster;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_AMD_name_gen_delete", 22)) {
    /*                              ^             */
#ifdef GL_AMD_name_gen_delete
      *iv_return = GL_AMD_name_gen_delete;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_ARB_fragment_shader", 22)) {
    /*                              ^             */
#ifdef GL_ARB_fragment_shader
      *iv_return = GL_ARB_fragment_shader;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_ATI_fragment_shader", 22)) {
    /*                              ^             */
#ifdef GL_ATI_fragment_shader
      *iv_return = GL_ATI_fragment_shader;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_COMBINER_MUX_SUM_NV", 22)) {
    /*                              ^             */
#ifdef GL_COMBINER_MUX_SUM_NV
      *iv_return = GL_COMBINER_MUX_SUM_NV;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_EXT_x11_sync_object", 22)) {
    /*                              ^             */
#ifdef GL_EXT_x11_sync_object
      *iv_return = GL_EXT_x11_sync_object;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_GLYPH_HEIGHT_BIT_NV", 22)) {
    /*                              ^             */
#ifdef GL_GLYPH_HEIGHT_BIT_NV
      *iv_return = GL_GLYPH_HEIGHT_BIT_NV;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_LINE_STIPPLE_REPEAT", 22)) {
    /*                              ^             */
#ifdef GL_LINE_STIPPLE_REPEAT
      *iv_return = GL_LINE_STIPPLE_REPEAT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_NEGATIVE_ONE_TO_ONE", 22)) {
    /*                              ^             */
#ifdef GL_NEGATIVE_ONE_TO_ONE
      *iv_return = GL_NEGATIVE_ONE_TO_ONE;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_NORMAL_ARRAY_STRIDE", 22)) {
    /*                              ^             */
#ifdef GL_NORMAL_ARRAY_STRIDE
      *iv_return = GL_NORMAL_ARRAY_STRIDE;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_PATH_STENCIL_REF_NV", 22)) {
    /*                              ^             */
#ifdef GL_PATH_STENCIL_REF_NV
      *iv_return = GL_PATH_STENCIL_REF_NV;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_PIXEL_UNPACK_BUFFER", 22)) {
    /*                              ^             */
#ifdef GL_PIXEL_UNPACK_BUFFER
      *iv_return = GL_PIXEL_UNPACK_BUFFER;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_RENDERBUFFER_HEIGHT", 22)) {
    /*                              ^             */
#ifdef GL_RENDERBUFFER_HEIGHT
      *iv_return = GL_RENDERBUFFER_HEIGHT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_SAMPLER_CUBE_SHADOW", 22)) {
    /*                              ^             */
#ifdef GL_SAMPLER_CUBE_SHADOW
      *iv_return = GL_SAMPLER_CUBE_SHADOW;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_SAMPLE_ALPHA_TO_ONE", 22)) {
    /*                              ^             */
#ifdef GL_SAMPLE_ALPHA_TO_ONE
      *iv_return = GL_SAMPLE_ALPHA_TO_ONE;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_SGIS_texture_select", 22)) {
    /*                              ^             */
#ifdef GL_SGIS_texture_select
      *iv_return = GL_SGIS_texture_select;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_SHADER_IMAGE_ATOMIC", 22)) {
    /*                              ^             */
#ifdef GL_SHADER_IMAGE_ATOMIC
      *iv_return = GL_SHADER_IMAGE_ATOMIC;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_SWIZZLE_STRQ_DQ_ATI", 22)) {
    /*                              ^             */
#ifdef GL_SWIZZLE_STRQ_DQ_ATI
      *iv_return = GL_SWIZZLE_STRQ_DQ_ATI;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_TESS_CONTROL_SHADER", 22)) {
    /*                              ^             */
#ifdef GL_TESS_CONTROL_SHADER
      *iv_return = GL_TESS_CONTROL_SHADER;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_UNIFORM_NAME_LENGTH", 22)) {
    /*                              ^             */
#ifdef GL_UNIFORM_NAME_LENGTH
      *iv_return = GL_UNIFORM_NAME_LENGTH;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_UNPACK_IMAGE_HEIGHT", 22)) {
    /*                              ^             */
#ifdef GL_UNPACK_IMAGE_HEIGHT
      *iv_return = GL_UNPACK_IMAGE_HEIGHT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_VERTEX_ARRAY_STRIDE", 22)) {
    /*                              ^             */
#ifdef GL_VERTEX_ARRAY_STRIDE
      *iv_return = GL_VERTEX_ARRAY_STRIDE;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case 'a':
    if (memEQ(name, "GL_EXT_pixel_transform", 22)) {
    /*                              ^             */
#ifdef GL_EXT_pixel_transform
      *iv_return = GL_EXT_pixel_transform;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_NV_gpu_program_fp64", 22)) {
    /*                              ^             */
#ifdef GL_NV_gpu_program_fp64
      *iv_return = GL_NV_gpu_program_fp64;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_NV_pixel_data_range", 22)) {
    /*                              ^             */
#ifdef GL_NV_pixel_data_range
      *iv_return = GL_NV_pixel_data_range;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_SGIX_shadow_ambient", 22)) {
    /*                              ^             */
#ifdef GL_SGIX_shadow_ambient
      *iv_return = GL_SGIX_shadow_ambient;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glBeginVertexShaderEXT", 22)) {
    /*                              ^             */
#ifdef glBeginVertexShaderEXT
      *iv_return = glBeginVertexShaderEXT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glBindVertexArrayAPPLE", 22)) {
    /*                              ^             */
#ifdef glBindVertexArrayAPPLE
      *iv_return = glBindVertexArrayAPPLE;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glCopyColorSubTableEXT", 22)) {
    /*                              ^             */
#ifdef glCopyColorSubTableEXT
      *iv_return = glCopyColorSubTableEXT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glCoverageModulationNV", 22)) {
    /*                              ^             */
#ifdef glCoverageModulationNV
      *iv_return = glCoverageModulationNV;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glDebugMessageCallback", 22)) {
    /*                              ^             */
#ifdef glDebugMessageCallback
      *iv_return = glDebugMessageCallback;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glEndFragmentShaderATI", 22)) {
    /*                              ^             */
#ifdef glEndFragmentShaderATI
      *iv_return = glEndFragmentShaderATI;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glGetNamedProgramivEXT", 22)) {
    /*                              ^             */
#ifdef glGetNamedProgramivEXT
      *iv_return = glGetNamedProgramivEXT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glGetVaryingLocationNV", 22)) {
    /*                              ^             */
#ifdef glGetVaryingLocationNV
      *iv_return = glGetVaryingLocationNV;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case 'b':
    if (memEQ(name, "GL_ARB_texture_barrier", 22)) {
    /*                              ^             */
#ifdef GL_ARB_texture_barrier
      *iv_return = GL_ARB_texture_barrier;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_MESA_resize_buffers", 22)) {
    /*                              ^             */
#ifdef GL_MESA_resize_buffers
      *iv_return = GL_MESA_resize_buffers;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case 'c':
    if (memEQ(name, "GLEW_NV_fill_rectangle", 22)) {
    /*                              ^             */
#ifdef GLEW_NV_fill_rectangle
      *iv_return = GLEW_NV_fill_rectangle;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_INGR_interlace_read", 22)) {
    /*                              ^             */
#ifdef GL_INGR_interlace_read
      *iv_return = GL_INGR_interlace_read;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_NV_sample_locations", 22)) {
    /*                              ^             */
#ifdef GL_NV_sample_locations
      *iv_return = GL_NV_sample_locations;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glGetUniformBlockIndex", 22)) {
    /*                              ^             */
#ifdef glGetUniformBlockIndex
      *iv_return = glGetUniformBlockIndex;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glVDPAUSurfaceAccessNV", 22)) {
    /*                              ^             */
#ifdef glVDPAUSurfaceAccessNV
      *iv_return = glVDPAUSurfaceAccessNV;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case 'd':
    if (memEQ(name, "glCompileCommandListNV", 22)) {
    /*                              ^             */
#ifdef glCompileCommandListNV
      *iv_return = glCompileCommandListNV;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glReplacementCodeubSUN", 22)) {
    /*                              ^             */
#ifdef glReplacementCodeubSUN
      *iv_return = glReplacementCodeubSUN;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glReplacementCodeuiSUN", 22)) {
    /*                              ^             */
#ifdef glReplacementCodeuiSUN
      *iv_return = glReplacementCodeuiSUN;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glReplacementCodeusSUN", 22)) {
    /*                              ^             */
#ifdef glReplacementCodeusSUN
      *iv_return = glReplacementCodeusSUN;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case 'e':
    if (memEQ(name, "GLEW_ARB_texture_float", 22)) {
    /*                              ^             */
#ifdef GLEW_ARB_texture_float
      *iv_return = GLEW_ARB_texture_float;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GLEW_ATI_texture_float", 22)) {
    /*                              ^             */
#ifdef GLEW_ATI_texture_float
      *iv_return = GLEW_ATI_texture_float;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GLEW_EXT_texture_array", 22)) {
    /*                              ^             */
#ifdef GLEW_EXT_texture_array
      *iv_return = GLEW_EXT_texture_array;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GLEW_EXT_texture_snorm", 22)) {
    /*                              ^             */
#ifdef GLEW_EXT_texture_snorm
      *iv_return = GLEW_EXT_texture_snorm;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_ANGLE_texture_usage", 22)) {
    /*                              ^             */
#ifdef GL_ANGLE_texture_usage
      *iv_return = GL_ANGLE_texture_usage;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_APPLE_texture_range", 22)) {
    /*                              ^             */
#ifdef GL_APPLE_texture_range
      *iv_return = GL_APPLE_texture_range;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_ARB_gpu_shader_fp64", 22)) {
    /*                              ^             */
#ifdef GL_ARB_gpu_shader_fp64
      *iv_return = GL_ARB_gpu_shader_fp64;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_ARB_sparse_texture2", 22)) {
    /*                              ^             */
#ifdef GL_ARB_sparse_texture2
      *iv_return = GL_ARB_sparse_texture2;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_ARB_texture_env_add", 22)) {
    /*                              ^             */
#ifdef GL_ARB_texture_env_add
      *iv_return = GL_ARB_texture_env_add;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_EXT_sparse_texture2", 22)) {
    /*                              ^             */
#ifdef GL_EXT_sparse_texture2
      *iv_return = GL_EXT_sparse_texture2;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_EXT_texture_env_add", 22)) {
    /*                              ^             */
#ifdef GL_EXT_texture_env_add
      *iv_return = GL_EXT_texture_env_add;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_MESAX_texture_stack", 22)) {
    /*                              ^             */
#ifdef GL_MESAX_texture_stack
      *iv_return = GL_MESAX_texture_stack;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glBlitFramebufferANGLE", 22)) {
    /*                              ^             */
#ifdef glBlitFramebufferANGLE
      *iv_return = glBlitFramebufferANGLE;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glBlitNamedFramebuffer", 22)) {
    /*                              ^             */
#ifdef glBlitNamedFramebuffer
      *iv_return = glBlitNamedFramebuffer;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glCombinerParameterfNV", 22)) {
    /*                              ^             */
#ifdef glCombinerParameterfNV
      *iv_return = glCombinerParameterfNV;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glCombinerParameteriNV", 22)) {
    /*                              ^             */
#ifdef glCombinerParameteriNV
      *iv_return = glCombinerParameteriNV;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glDrawRangeElementsEXT", 22)) {
    /*                              ^             */
#ifdef glDrawRangeElementsEXT
      *iv_return = glDrawRangeElementsEXT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glEndTransformFeedback", 22)) {
    /*                              ^             */
#ifdef glEndTransformFeedback
      *iv_return = glEndTransformFeedback;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glGetObjectBufferfvATI", 22)) {
    /*                              ^             */
#ifdef glGetObjectBufferfvATI
      *iv_return = glGetObjectBufferfvATI;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glGetObjectBufferivATI", 22)) {
    /*                              ^             */
#ifdef glGetObjectBufferivATI
      *iv_return = glGetObjectBufferivATI;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glGetProgramPipelineiv", 22)) {
    /*                              ^             */
#ifdef glGetProgramPipelineiv
      *iv_return = glGetProgramPipelineiv;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glMultiDrawElementsEXT", 22)) {
    /*                              ^             */
#ifdef glMultiDrawElementsEXT
      *iv_return = glMultiDrawElementsEXT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glSeparableFilter2DEXT", 22)) {
    /*                              ^             */
#ifdef glSeparableFilter2DEXT
      *iv_return = glSeparableFilter2DEXT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glSpriteParameterfSGIX", 22)) {
    /*                              ^             */
#ifdef glSpriteParameterfSGIX
      *iv_return = glSpriteParameterfSGIX;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glSpriteParameteriSGIX", 22)) {
    /*                              ^             */
#ifdef glSpriteParameteriSGIX
      *iv_return = glSpriteParameteriSGIX;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case 'f':
    if (memEQ(name, "glClearNamedBufferData", 22)) {
    /*                              ^             */
#ifdef glClearNamedBufferData
      *iv_return = glClearNamedBufferData;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glInvalidateBufferData", 22)) {
    /*                              ^             */
#ifdef glInvalidateBufferData
      *iv_return = glInvalidateBufferData;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glUnmapObjectBufferATI", 22)) {
    /*                              ^             */
#ifdef glUnmapObjectBufferATI
      *iv_return = glUnmapObjectBufferATI;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glVDPAUUnmapSurfacesNV", 22)) {
    /*                              ^             */
#ifdef glVDPAUUnmapSurfacesNV
      *iv_return = glVDPAUUnmapSurfacesNV;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case 'g':
    if (memEQ(name, "glCopyTexSubImage1DEXT", 22)) {
    /*                              ^             */
#ifdef glCopyTexSubImage1DEXT
      *iv_return = glCopyTexSubImage1DEXT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glCopyTexSubImage2DEXT", 22)) {
    /*                              ^             */
#ifdef glCopyTexSubImage2DEXT
      *iv_return = glCopyTexSubImage2DEXT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glCopyTexSubImage3DEXT", 22)) {
    /*                              ^             */
#ifdef glCopyTexSubImage3DEXT
      *iv_return = glCopyTexSubImage3DEXT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glTextureSubImage1DEXT", 22)) {
    /*                              ^             */
#ifdef glTextureSubImage1DEXT
      *iv_return = glTextureSubImage1DEXT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glTextureSubImage2DEXT", 22)) {
    /*                              ^             */
#ifdef glTextureSubImage2DEXT
      *iv_return = glTextureSubImage2DEXT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glTextureSubImage3DEXT", 22)) {
    /*                              ^             */
#ifdef glTextureSubImage3DEXT
      *iv_return = glTextureSubImage3DEXT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case 'h':
    if (memEQ(name, "glPathCoverDepthFuncNV", 22)) {
    /*                              ^             */
#ifdef glPathCoverDepthFuncNV
      *iv_return = glPathCoverDepthFuncNV;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case 'i':
    if (memEQ(name, "GLEW_ARB_compatibility", 22)) {
    /*                              ^             */
#ifdef GLEW_ARB_compatibility
      *iv_return = GLEW_ARB_compatibility;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GLEW_ARB_cull_distance", 22)) {
    /*                              ^             */
#ifdef GLEW_ARB_cull_distance
      *iv_return = GLEW_ARB_cull_distance;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_EXT_texture_integer", 22)) {
    /*                              ^             */
#ifdef GL_EXT_texture_integer
      *iv_return = GL_EXT_texture_integer;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_HP_texture_lighting", 22)) {
    /*                              ^             */
#ifdef GL_HP_texture_lighting
      *iv_return = GL_HP_texture_lighting;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glFragmentMaterialfEXT", 22)) {
    /*                              ^             */
#ifdef glFragmentMaterialfEXT
      *iv_return = glFragmentMaterialfEXT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glFragmentMaterialiEXT", 22)) {
    /*                              ^             */
#ifdef glFragmentMaterialiEXT
      *iv_return = glFragmentMaterialiEXT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glGetVertexAttribdvARB", 22)) {
    /*                              ^             */
#ifdef glGetVertexAttribdvARB
      *iv_return = glGetVertexAttribdvARB;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glGetVertexAttribfvARB", 22)) {
    /*                              ^             */
#ifdef glGetVertexAttribfvARB
      *iv_return = glGetVertexAttribfvARB;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glGetVertexAttribivARB", 22)) {
    /*                              ^             */
#ifdef glGetVertexAttribivARB
      *iv_return = glGetVertexAttribivARB;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glMakeBufferResidentNV", 22)) {
    /*                              ^             */
#ifdef glMakeBufferResidentNV
      *iv_return = glMakeBufferResidentNV;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case 'l':
    if (memEQ(name, "GLEW_SUN_triangle_list", 22)) {
    /*                              ^             */
#ifdef GLEW_SUN_triangle_list
      *iv_return = GLEW_SUN_triangle_list;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glEndConditionalRender", 22)) {
    /*                              ^             */
#ifdef glEndConditionalRender
      *iv_return = glEndConditionalRender;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glObjectPurgeableAPPLE", 22)) {
    /*                              ^             */
#ifdef glObjectPurgeableAPPLE
      *iv_return = glObjectPurgeableAPPLE;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case 'm':
    if (memEQ(name, "glGetBufferParameteriv", 22)) {
    /*                              ^             */
#ifdef glGetBufferParameteriv
      *iv_return = glGetBufferParameteriv;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glGetMinmaxParameterfv", 22)) {
    /*                              ^             */
#ifdef glGetMinmaxParameterfv
      *iv_return = glGetMinmaxParameterfv;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glGetMinmaxParameteriv", 22)) {
    /*                              ^             */
#ifdef glGetMinmaxParameteriv
      *iv_return = glGetMinmaxParameteriv;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glProgramUniform1fvEXT", 22)) {
    /*                              ^             */
#ifdef glProgramUniform1fvEXT
      *iv_return = glProgramUniform1fvEXT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glProgramUniform1i64NV", 22)) {
    /*                              ^             */
#ifdef glProgramUniform1i64NV
      *iv_return = glProgramUniform1i64NV;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glProgramUniform1ivEXT", 22)) {
    /*                              ^             */
#ifdef glProgramUniform1ivEXT
      *iv_return = glProgramUniform1ivEXT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glProgramUniform1uiEXT", 22)) {
    /*                              ^             */
#ifdef glProgramUniform1uiEXT
      *iv_return = glProgramUniform1uiEXT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glProgramUniform2fvEXT", 22)) {
    /*                              ^             */
#ifdef glProgramUniform2fvEXT
      *iv_return = glProgramUniform2fvEXT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glProgramUniform2i64NV", 22)) {
    /*                              ^             */
#ifdef glProgramUniform2i64NV
      *iv_return = glProgramUniform2i64NV;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glProgramUniform2ivEXT", 22)) {
    /*                              ^             */
#ifdef glProgramUniform2ivEXT
      *iv_return = glProgramUniform2ivEXT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glProgramUniform2uiEXT", 22)) {
    /*                              ^             */
#ifdef glProgramUniform2uiEXT
      *iv_return = glProgramUniform2uiEXT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glProgramUniform3fvEXT", 22)) {
    /*                              ^             */
#ifdef glProgramUniform3fvEXT
      *iv_return = glProgramUniform3fvEXT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glProgramUniform3i64NV", 22)) {
    /*                              ^             */
#ifdef glProgramUniform3i64NV
      *iv_return = glProgramUniform3i64NV;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glProgramUniform3ivEXT", 22)) {
    /*                              ^             */
#ifdef glProgramUniform3ivEXT
      *iv_return = glProgramUniform3ivEXT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glProgramUniform3uiEXT", 22)) {
    /*                              ^             */
#ifdef glProgramUniform3uiEXT
      *iv_return = glProgramUniform3uiEXT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glProgramUniform4fvEXT", 22)) {
    /*                              ^             */
#ifdef glProgramUniform4fvEXT
      *iv_return = glProgramUniform4fvEXT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glProgramUniform4i64NV", 22)) {
    /*                              ^             */
#ifdef glProgramUniform4i64NV
      *iv_return = glProgramUniform4i64NV;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glProgramUniform4ivEXT", 22)) {
    /*                              ^             */
#ifdef glProgramUniform4ivEXT
      *iv_return = glProgramUniform4ivEXT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glProgramUniform4uiEXT", 22)) {
    /*                              ^             */
#ifdef glProgramUniform4uiEXT
      *iv_return = glProgramUniform4uiEXT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glProgramUniformui64NV", 22)) {
    /*                              ^             */
#ifdef glProgramUniformui64NV
      *iv_return = glProgramUniformui64NV;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glTexPageCommitmentARB", 22)) {
    /*                              ^             */
#ifdef glTexPageCommitmentARB
      *iv_return = glTexPageCommitmentARB;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case 'n':
    if (memEQ(name, "GLEW_ARB_base_instance", 22)) {
    /*                              ^             */
#ifdef GLEW_ARB_base_instance
      *iv_return = GLEW_ARB_base_instance;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GLEW_ARB_draw_indirect", 22)) {
    /*                              ^             */
#ifdef GLEW_ARB_draw_indirect
      *iv_return = GLEW_ARB_draw_indirect;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GLEW_NV_path_rendering", 22)) {
    /*                              ^             */
#ifdef GLEW_NV_path_rendering
      *iv_return = GLEW_NV_path_rendering;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_ARB_occlusion_query", 22)) {
    /*                              ^             */
#ifdef GL_ARB_occlusion_query
      *iv_return = GL_ARB_occlusion_query;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glDrawElementsIndirect", 22)) {
    /*                              ^             */
#ifdef glDrawElementsIndirect
      *iv_return = glDrawElementsIndirect;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glGetConvolutionFilter", 22)) {
    /*                              ^             */
#ifdef glGetConvolutionFilter
      *iv_return = glGetConvolutionFilter;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case 'o':
    if (memEQ(name, "GLEW_HP_occlusion_test", 22)) {
    /*                              ^             */
#ifdef GLEW_HP_occlusion_test
      *iv_return = GLEW_HP_occlusion_test;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_ARB_sampler_objects", 22)) {
    /*                              ^             */
#ifdef GL_ARB_sampler_objects
      *iv_return = GL_ARB_sampler_objects;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glBindFragDataLocation", 22)) {
    /*                              ^             */
#ifdef glBindFragDataLocation
      *iv_return = glBindFragDataLocation;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glGetActiveUniformName", 22)) {
    /*                              ^             */
#ifdef glGetActiveUniformName
      *iv_return = glGetActiveUniformName;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glGetProgramResourceiv", 22)) {
    /*                              ^             */
#ifdef glGetProgramResourceiv
      *iv_return = glGetProgramResourceiv;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glVertexAttribFormatNV", 22)) {
    /*                              ^             */
#ifdef glVertexAttribFormatNV
      *iv_return = glVertexAttribFormatNV;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case 'p':
    if (memEQ(name, "GLEW_NV_vertex_program", 22)) {
    /*                              ^             */
#ifdef GLEW_NV_vertex_program
      *iv_return = GLEW_NV_vertex_program;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_NV_fragment_program", 22)) {
    /*                              ^             */
#ifdef GL_NV_fragment_program
      *iv_return = GL_NV_fragment_program;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_SGIX_vertex_preclip", 22)) {
    /*                              ^             */
#ifdef GL_SGIX_vertex_preclip
      *iv_return = GL_SGIX_vertex_preclip;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case 'r':
    if (memEQ(name, "GLEW_ANGLE_timer_query", 22)) {
    /*                              ^             */
#ifdef GLEW_ANGLE_timer_query
      *iv_return = GLEW_ANGLE_timer_query;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_NVX_gpu_memory_info", 22)) {
    /*                              ^             */
#ifdef GL_NVX_gpu_memory_info
      *iv_return = GL_NVX_gpu_memory_info;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_NV_compute_program5", 22)) {
    /*                              ^             */
#ifdef GL_NV_compute_program5
      *iv_return = GL_NV_compute_program5;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_SGIX_ir_instrument1", 22)) {
    /*                              ^             */
#ifdef GL_SGIX_ir_instrument1
      *iv_return = GL_SGIX_ir_instrument1;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glBlendFuncSeparateEXT", 22)) {
    /*                              ^             */
#ifdef glBlendFuncSeparateEXT
      *iv_return = glBlendFuncSeparateEXT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glCreatePerfQueryINTEL", 22)) {
    /*                              ^             */
#ifdef glCreatePerfQueryINTEL
      *iv_return = glCreatePerfQueryINTEL;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glCreateShaderProgramv", 22)) {
    /*                              ^             */
#ifdef glCreateShaderProgramv
      *iv_return = glCreateShaderProgramv;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glDeleteNamedStringARB", 22)) {
    /*                              ^             */
#ifdef glDeleteNamedStringARB
      *iv_return = glDeleteNamedStringARB;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glDeletePerfQueryINTEL", 22)) {
    /*                              ^             */
#ifdef glDeletePerfQueryINTEL
      *iv_return = glDeletePerfQueryINTEL;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glEnableVertexArrayEXT", 22)) {
    /*                              ^             */
#ifdef glEnableVertexArrayEXT
      *iv_return = glEnableVertexArrayEXT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glInsertEventMarkerEXT", 22)) {
    /*                              ^             */
#ifdef glInsertEventMarkerEXT
      *iv_return = glInsertEventMarkerEXT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glSecondaryColor3bvEXT", 22)) {
    /*                              ^             */
#ifdef glSecondaryColor3bvEXT
      *iv_return = glSecondaryColor3bvEXT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glSecondaryColor3dvEXT", 22)) {
    /*                              ^             */
#ifdef glSecondaryColor3dvEXT
      *iv_return = glSecondaryColor3dvEXT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glSecondaryColor3fvEXT", 22)) {
    /*                              ^             */
#ifdef glSecondaryColor3fvEXT
      *iv_return = glSecondaryColor3fvEXT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glSecondaryColor3ivEXT", 22)) {
    /*                              ^             */
#ifdef glSecondaryColor3ivEXT
      *iv_return = glSecondaryColor3ivEXT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glSecondaryColor3svEXT", 22)) {
    /*                              ^             */
#ifdef glSecondaryColor3svEXT
      *iv_return = glSecondaryColor3svEXT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glSecondaryColor3ubEXT", 22)) {
    /*                              ^             */
#ifdef glSecondaryColor3ubEXT
      *iv_return = glSecondaryColor3ubEXT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glSecondaryColor3uiEXT", 22)) {
    /*                              ^             */
#ifdef glSecondaryColor3uiEXT
      *iv_return = glSecondaryColor3uiEXT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glSecondaryColor3usEXT", 22)) {
    /*                              ^             */
#ifdef glSecondaryColor3usEXT
      *iv_return = glSecondaryColor3usEXT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glStencilOpSeparateATI", 22)) {
    /*                              ^             */
#ifdef glStencilOpSeparateATI
      *iv_return = glStencilOpSeparateATI;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case 's':
    if (memEQ(name, "GLEW_WIN_phong_shading", 22)) {
    /*                              ^             */
#ifdef GLEW_WIN_phong_shading
      *iv_return = GLEW_WIN_phong_shading;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_ARB_texture_storage", 22)) {
    /*                              ^             */
#ifdef GL_ARB_texture_storage
      *iv_return = GL_ARB_texture_storage;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_ARB_texture_swizzle", 22)) {
    /*                              ^             */
#ifdef GL_ARB_texture_swizzle
      *iv_return = GL_ARB_texture_swizzle;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_EXT_texture_swizzle", 22)) {
    /*                              ^             */
#ifdef GL_EXT_texture_swizzle
      *iv_return = GL_EXT_texture_swizzle;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_NV_geometry_shader4", 22)) {
    /*                              ^             */
#ifdef GL_NV_geometry_shader4
      *iv_return = GL_NV_geometry_shader4;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_NV_viewport_swizzle", 22)) {
    /*                              ^             */
#ifdef GL_NV_viewport_swizzle
      *iv_return = GL_NV_viewport_swizzle;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case 't':
    if (memEQ(name, "GLEW_ARB_clear_texture", 22)) {
    /*                              ^             */
#ifdef GLEW_ARB_clear_texture
      *iv_return = GLEW_ARB_clear_texture;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GLEW_ARB_depth_texture", 22)) {
    /*                              ^             */
#ifdef GLEW_ARB_depth_texture
      *iv_return = GLEW_ARB_depth_texture;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GLEW_ATI_element_array", 22)) {
    /*                              ^             */
#ifdef GLEW_ATI_element_array
      *iv_return = GLEW_ATI_element_array;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GLEW_EXT_index_texture", 22)) {
    /*                              ^             */
#ifdef GLEW_EXT_index_texture
      *iv_return = GLEW_EXT_index_texture;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GLEW_EXT_light_texture", 22)) {
    /*                              ^             */
#ifdef GLEW_EXT_light_texture
      *iv_return = GLEW_EXT_light_texture;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GLEW_INTEL_map_texture", 22)) {
    /*                              ^             */
#ifdef GLEW_INTEL_map_texture
      *iv_return = GLEW_INTEL_map_texture;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_ANGLE_depth_texture", 22)) {
    /*                              ^             */
#ifdef GL_ANGLE_depth_texture
      *iv_return = GL_ANGLE_depth_texture;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_APPLE_element_array", 22)) {
    /*                              ^             */
#ifdef GL_APPLE_element_array
      *iv_return = GL_APPLE_element_array;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_NV_bindless_texture", 22)) {
    /*                              ^             */
#ifdef GL_NV_bindless_texture
      *iv_return = GL_NV_bindless_texture;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_SGIS_detail_texture", 22)) {
    /*                              ^             */
#ifdef GL_SGIS_detail_texture
      *iv_return = GL_SGIS_detail_texture;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glDrawCommandsStatesNV", 22)) {
    /*                              ^             */
#ifdef glDrawCommandsStatesNV
      *iv_return = glDrawCommandsStatesNV;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glGetAttribLocationARB", 22)) {
    /*                              ^             */
#ifdef glGetAttribLocationARB
      *iv_return = glGetAttribLocationARB;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glGetBufferPointervARB", 22)) {
    /*                              ^             */
#ifdef glGetBufferPointervARB
      *iv_return = glGetBufferPointervARB;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glGetPathParameterfvNV", 22)) {
    /*                              ^             */
#ifdef glGetPathParameterfvNV
      *iv_return = glGetPathParameterfvNV;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glGetPathParameterivNV", 22)) {
    /*                              ^             */
#ifdef glGetPathParameterivNV
      *iv_return = glGetPathParameterivNV;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glGetQueryObjectuivARB", 22)) {
    /*                              ^             */
#ifdef glGetQueryObjectuivARB
      *iv_return = glGetQueryObjectuivARB;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glProgramParameter4dNV", 22)) {
    /*                              ^             */
#ifdef glProgramParameter4dNV
      *iv_return = glProgramParameter4dNV;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glProgramParameter4fNV", 22)) {
    /*                              ^             */
#ifdef glProgramParameter4fNV
      *iv_return = glProgramParameter4fNV;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glProgramParameteriARB", 22)) {
    /*                              ^             */
#ifdef glProgramParameteriARB
      *iv_return = glProgramParameteriARB;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glProgramParameteriEXT", 22)) {
    /*                              ^             */
#ifdef glProgramParameteriEXT
      *iv_return = glProgramParameteriEXT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glSamplerParameterIuiv", 22)) {
    /*                              ^             */
#ifdef glSamplerParameterIuiv
      *iv_return = glSamplerParameterIuiv;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glTextureParameterIuiv", 22)) {
    /*                              ^             */
#ifdef glTextureParameterIuiv
      *iv_return = glTextureParameterIuiv;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glTextureParameterfEXT", 22)) {
    /*                              ^             */
#ifdef glTextureParameterfEXT
      *iv_return = glTextureParameterfEXT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glTextureParameteriEXT", 22)) {
    /*                              ^             */
#ifdef glTextureParameteriEXT
      *iv_return = glTextureParameteriEXT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case 'u':
    if (memEQ(name, "GLEW_EXT_draw_buffers2", 22)) {
    /*                              ^             */
#ifdef GLEW_EXT_draw_buffers2
      *iv_return = GLEW_EXT_draw_buffers2;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GLEW_SGIS_fog_function", 22)) {
    /*                              ^             */
#ifdef GLEW_SGIS_fog_function
      *iv_return = GLEW_SGIS_fog_function;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glGetDetailTexFuncSGIS", 22)) {
    /*                              ^             */
#ifdef glGetDetailTexFuncSGIS
      *iv_return = glGetDetailTexFuncSGIS;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glGetTexFilterFuncSGIS", 22)) {
    /*                              ^             */
#ifdef glGetTexFilterFuncSGIS
      *iv_return = glGetTexFilterFuncSGIS;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glUniformHandleui64ARB", 22)) {
    /*                              ^             */
#ifdef glUniformHandleui64ARB
      *iv_return = glUniformHandleui64ARB;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glUniformHandleui64vNV", 22)) {
    /*                              ^             */
#ifdef glUniformHandleui64vNV
      *iv_return = glUniformHandleui64vNV;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case 'x':
    if (memEQ(name, "GLEW_NV_deep_texture3D", 22)) {
    /*                              ^             */
#ifdef GLEW_NV_deep_texture3D
      *iv_return = GLEW_NV_deep_texture3D;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glColor4ubVertex2fvSUN", 22)) {
    /*                              ^             */
#ifdef glColor4ubVertex2fvSUN
      *iv_return = glColor4ubVertex2fvSUN;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glColor4ubVertex3fvSUN", 22)) {
    /*                              ^             */
#ifdef glColor4ubVertex3fvSUN
      *iv_return = glColor4ubVertex3fvSUN;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glFramebufferTexture1D", 22)) {
    /*                              ^             */
#ifdef glFramebufferTexture1D
      *iv_return = glFramebufferTexture1D;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glFramebufferTexture2D", 22)) {
    /*                              ^             */
#ifdef glFramebufferTexture2D
      *iv_return = glFramebufferTexture2D;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glFramebufferTexture3D", 22)) {
    /*                              ^             */
#ifdef glFramebufferTexture3D
      *iv_return = glFramebufferTexture3D;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glGetDoubleIndexedvEXT", 22)) {
    /*                              ^             */
#ifdef glGetDoubleIndexedvEXT
      *iv_return = glGetDoubleIndexedvEXT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glNormal3fVertex3fvSUN", 22)) {
    /*                              ^             */
#ifdef glNormal3fVertex3fvSUN
      *iv_return = glNormal3fVertex3fvSUN;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case 'y':
    if (memEQ(name, "GL_EXT_secondary_color", 22)) {
    /*                              ^             */
#ifdef GL_EXT_secondary_color
      *iv_return = GL_EXT_secondary_color;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glGenVertexArraysAPPLE", 22)) {
    /*                              ^             */
#ifdef glGenVertexArraysAPPLE
      *iv_return = glGenVertexArraysAPPLE;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  }
  return PERL_constant_NOTFOUND;
}

static int
constant_23 (pTHX_ const char *name, IV *iv_return) {
  /* When generated this function returned values for the list of names given
     here.  However, subsequent manual editing may have added or removed some.
     GLEW_AMD_sparse_texture GLEW_APPLE_float_pixels GLEW_APPLE_pixel_buffer
     GLEW_ARB_buffer_storage GLEW_ARB_compute_shader GLEW_ARB_draw_instanced
     GLEW_ARB_matrix_palette GLEW_ARB_sample_shading GLEW_ARB_shader_objects
     GLEW_ARB_shadow_ambient GLEW_ARB_sparse_texture GLEW_ARB_texture_gather
     GLEW_ARB_vertex_program GLEW_ARB_viewport_array GLEW_ATIX_point_sprites
     GLEW_ATI_envmap_bumpmap GLEW_ATI_vertex_streams GLEW_EXT_blend_logic_op
     GLEW_EXT_blend_subtract GLEW_EXT_color_subtable GLEW_EXT_draw_instanced
     GLEW_EXT_index_material GLEW_EXT_misc_attribute GLEW_EXT_polygon_offset
     GLEW_EXT_rescale_normal GLEW_EXT_texture_object GLEW_HP_image_transform
     GLEW_IBM_rasterpos_clip GLEW_MESA_ycbcr_texture GLEW_NV_occlusion_query
     GLEW_NV_texture_barrier GLEW_NV_texture_shader2 GLEW_NV_texture_shader3
     GLEW_NV_vertex_program2 GLEW_NV_vertex_program3 GLEW_NV_vertex_program4
     GLEW_NV_viewport_array2 GLEW_REGAL_error_string GLEW_REGAL_proc_address
     GLEW_SGIS_pixel_texture GLEW_SGIX_depth_texture GLEW_SGIX_list_priority
     GLEW_SGIX_pixel_texture GLEW_SGIX_texture_range GLEW_SUNX_constant_data
     GL_ALL_BARRIER_BITS_EXT GL_ALPHA_MAX_CLAMP_INGR GL_ALPHA_MIN_CLAMP_INGR
     GL_ALPHA_REF_COMMAND_NV GL_ALWAYS_FAST_HINT_PGI GL_ALWAYS_SOFT_HINT_PGI
     GL_AMD_gpu_shader_int64 GL_AMD_sample_positions GL_AMD_texture_texture4
     GL_ANGLE_program_binary GL_APPLE_client_storage GL_APPLE_transform_hint
     GL_ARB_arrays_of_arrays GL_ARB_bindless_texture GL_ARB_enhanced_layouts
     GL_ARB_fragment_program GL_ARB_framebuffer_sRGB GL_ARB_geometry_shader4
     GL_ARB_gpu_shader_int64 GL_ARB_half_float_pixel GL_ARB_instanced_arrays
     GL_ARB_map_buffer_range GL_ARB_occlusion_query2 GL_ARB_point_parameters
     GL_ARB_provoking_vertex GL_ARB_sample_locations GL_ARB_shader_precision
     GL_ARB_texture_cube_map GL_ARB_texture_env_dot3 GL_ARB_texture_stencil8
     GL_ARB_transpose_matrix GL_ARRAY_BUFFER_BINDING GL_ASYNC_HISTOGRAM_SGIX
     GL_ASYNC_TEX_IMAGE_SGIX GL_ATI_separate_stencil GL_ATTRIB_ARRAY_SIZE_NV
     GL_ATTRIB_ARRAY_TYPE_NV GL_AUTO_GENERATE_MIPMAP GL_BLEND_EQUATION_ALPHA
     GL_BUFFER_STORAGE_FLAGS GL_CG_VERTEX_SHADER_EXT GL_CLAMP_FRAGMENT_COLOR
     GL_CLAMP_READ_COLOR_ARB GL_CLAMP_TO_BORDER_SGIS GL_COLOR_ARRAY_LIST_IBM
     GL_COLOR_ARRAY_SIZE_EXT GL_COLOR_ARRAY_TYPE_EXT GL_COLOR_TABLE_BIAS_SGI
     GL_COLOR_TABLE_RED_SIZE GL_COMPARE_R_TO_TEXTURE GL_COMPRESSED_ALPHA_ARB
     GL_COMPRESSED_INTENSITY GL_COMPRESSED_LUMINANCE GL_COMPRESSED_RED_RGTC1
     GL_COMPRESSED_RGB8_ETC2 GL_CONSTANT_ATTENUATION GL_CONTEXT_PROFILE_MASK
     GL_CURRENT_BINORMAL_EXT GL_CURRENT_RASTER_COLOR GL_CURRENT_RASTER_INDEX
     GL_DEBUG_SOURCE_API_ARB GL_DEBUG_TYPE_ERROR_ARB GL_DEBUG_TYPE_OTHER_ARB
     GL_DEBUG_TYPE_POP_GROUP GL_DEPTH24_STENCIL8_EXT GL_DEPTH32F_STENCIL8_NV
     GL_DEPTH_ATTACHMENT_EXT GL_DEPTH_CLAMP_NEAR_AMD GL_DRAW_FRAMEBUFFER_EXT
     GL_DRAW_INDIRECT_BUFFER GL_ELEMENT_ARRAY_BUFFER GL_EXT_bindable_uniform
     GL_EXT_clip_volume_hint GL_EXT_coordinate_frame GL_EXT_framebuffer_blit
     GL_EXT_framebuffer_sRGB GL_EXT_geometry_shader4 GL_EXT_paletted_texture
     GL_EXT_point_parameters GL_EXT_provoking_vertex GL_EXT_stencil_two_side
     GL_EXT_texture_cube_map GL_EXT_texture_env_dot3 GL_EXT_texture_lod_bias
     GL_EXT_vertex_weighting GL_FEEDBACK_BUFFER_SIZE GL_FEEDBACK_BUFFER_TYPE
     GL_FOG_COORDINATE_ARRAY GL_FOG_COORD_ARRAY_TYPE GL_FOG_DISTANCE_MODE_NV
     GL_FONT_ASCENDER_BIT_NV GL_FORCE_BLUE_TO_ONE_NV GL_FRAGMENT_PROGRAM_ARB
     GL_FRAMEBUFFER_COMPLETE GL_FRAMEBUFFER_SRGB_EXT GL_GENERATE_MIPMAP_HINT
     GL_GENERATE_MIPMAP_SGIS GL_GEOMETRY_OUTPUT_TYPE GL_GREEN_MAX_CLAMP_INGR
     GL_GREEN_MIN_CLAMP_INGR GL_GUILTY_CONTEXT_RESET GL_HISTOGRAM_ALPHA_SIZE
     GL_HISTOGRAM_FORMAT_EXT GL_HISTOGRAM_GREEN_SIZE GL_IMAGE_2D_MULTISAMPLE
     GL_IMAGE_BINDING_ACCESS GL_IMAGE_BINDING_FORMAT GL_IMAGE_CLASS_11_11_10
     GL_IMAGE_CUBE_MAP_ARRAY GL_INDEX_ARRAY_LIST_IBM GL_INDEX_ARRAY_TYPE_EXT
     GL_INT_IMAGE_BUFFER_EXT GL_INT_SAMPLER_1D_ARRAY GL_INT_SAMPLER_2D_ARRAY
     GL_INT_SAMPLER_CUBE_EXT GL_INVERSE_TRANSPOSE_NV GL_LAYOUT_DEFAULT_INTEL
     GL_LIGHT_MODEL_TWO_SIDE GL_LINEAR_MIPMAP_LINEAR GL_LINE_STIPPLE_PATTERN
     GL_LINE_STRIP_ADJACENCY GL_MAP1_TEXTURE_COORD_1 GL_MAP1_TEXTURE_COORD_2
     GL_MAP1_TEXTURE_COORD_3 GL_MAP1_TEXTURE_COORD_4 GL_MAP2_TEXTURE_COORD_1
     GL_MAP2_TEXTURE_COORD_2 GL_MAP2_TEXTURE_COORD_3 GL_MAP2_TEXTURE_COORD_4
     GL_MAT_EMISSION_BIT_PGI GL_MAT_SPECULAR_BIT_PGI GL_MAX_DRAW_BUFFERS_ARB
     GL_MAX_DRAW_BUFFERS_ATI GL_MAX_ELEMENTS_INDICES GL_MAX_NAME_STACK_DEPTH
     GL_MAX_SPOT_EXPONENT_NV GL_MAX_TEXTURE_LOD_BIAS GL_MAX_VERTEX_UNITS_ARB
     GL_MIN_SPARSE_LEVEL_AMD GL_MIRROR_CLAMP_TO_EDGE GL_MOVE_TO_CONTINUES_NV
     GL_MULTISAMPLE_BIT_3DFX GL_NORMALIZED_RANGE_EXT GL_NORMAL_ARRAY_POINTER
     GL_NUM_ACTIVE_VARIABLES GL_NV_draw_vulkan_image GL_NV_fragment_program2
     GL_NV_fragment_program4 GL_NV_geometry_program4 GL_NV_primitive_restart
     GL_NV_texgen_reflection GL_NV_texture_rectangle GL_NV_vertex_program1_1
     GL_OES_byte_coordinates GL_OES_single_precision GL_OFFSET_TEXTURE_2D_NV
     GL_ONE_MINUS_SRC1_ALPHA GL_ONE_MINUS_SRC1_COLOR GL_OP_CROSS_PRODUCT_EXT
     GL_PACK_ROW_BYTES_APPLE GL_PACK_SKIP_IMAGES_EXT GL_PALETTE4_RGB5_A1_OES
     GL_PALETTE8_RGB5_A1_OES GL_PARAMETER_BUFFER_ARB GL_PATH_FOG_GEN_MODE_NV
     GL_PATH_STENCIL_FUNC_NV GL_PATH_STROKE_BOUND_NV GL_PATH_STROKE_WIDTH_NV
     GL_PERFQUERY_WAIT_INTEL GL_PIXEL_MAG_FILTER_EXT GL_PIXEL_MIN_FILTER_EXT
     GL_POLYGON_OFFSET_POINT GL_POLYGON_OFFSET_UNITS GL_PRIMITIVES_GENERATED
     GL_PRIMITIVE_RESTART_NV GL_PROGRAM_BINARY_ANGLE GL_PROGRAM_PARAMETER_NV
     GL_PROVOKING_VERTEX_EXT GL_PROXY_TEXTURE_1D_EXT GL_PROXY_TEXTURE_2D_EXT
     GL_PROXY_TEXTURE_3D_EXT GL_QUERY_BUFFER_BINDING GL_QUERY_BY_REGION_WAIT
     GL_QUERY_RESULT_NO_WAIT GL_R1UI_C4F_N3F_V3F_SUN GL_R1UI_T2F_N3F_V3F_SUN
     GL_READ_FRAMEBUFFER_EXT GL_RENDERBUFFER_BINDING GL_RENDERBUFFER_SAMPLES
     GL_REPLACEMENT_CODE_SUN GL_RESAMPLE_AVERAGE_OML GL_SAMPLER_1D_ARRAY_EXT
     GL_SAMPLER_2D_ARRAY_EXT GL_SAMPLE_COUNT_BITS_NV GL_SAMPLE_MASK_VALUE_NV
     GL_SCALE_BY_ONE_HALF_NV GL_SECONDARY_COLOR_ATIX GL_SEPARATE_ATTRIBS_EXT
     GL_SGIS_generate_mipmap GL_SGIS_sharpen_texture GL_SGIS_texture_filter4
     GL_SGIX_async_histogram GL_SGIX_reference_plane GL_SGIX_texture_add_env
     GL_SHADER_CONSISTENT_NV GL_SHADER_SOURCE_LENGTH GL_SHADER_STORAGE_BLOCK
     GL_SIGNED_INTENSITY8_NV GL_SIGNED_LUMINANCE8_NV GL_SLUMINANCE_ALPHA_EXT
     GL_STENCIL_OP_VALUE_AMD GL_STENCIL_TAG_BITS_EXT GL_STORAGE_CACHED_APPLE
     GL_STORAGE_CLIENT_APPLE GL_STORAGE_SHARED_APPLE GL_TESS_CONTROL_TEXTURE
     GL_TEXTURE_1D_ARRAY_EXT GL_TEXTURE_2D_ARRAY_EXT GL_TEXTURE_BORDER_COLOR
     GL_TEXTURE_COMPARE_FUNC GL_TEXTURE_COMPARE_MODE GL_TEXTURE_COMPARE_SGIX
     GL_TEXTURE_CUBE_MAP_ARB GL_TEXTURE_CUBE_MAP_EXT GL_TEXTURE_IMAGE_FORMAT
     GL_TEXTURE_LOD_BIAS_EXT GL_TEXTURE_MAX_LOD_SGIS GL_TEXTURE_MIN_LOD_SGIS
     GL_TEXTURE_PRIORITY_EXT GL_TEXTURE_RECTANGLE_NV GL_TEXTURE_RED_SIZE_EXT
     GL_TEXTURE_RED_TYPE_ARB GL_TEXTURE_RESIDENT_EXT GL_TEXTURE_STENCIL_SIZE
     GL_TEXTURE_SWIZZLE_RGBA GL_TOP_LEVEL_ARRAY_SIZE GL_TRANSFORM_HINT_APPLE
     GL_UNIFORM_ARRAY_STRIDE GL_UNIFORM_BUFFER_START GL_UNIFORM_IS_ROW_MAJOR
     GL_UNPACK_CMYK_HINT_EXT GL_UNPACK_RESAMPLE_SGIX GL_UNSIGNED_IDENTITY_NV
     GL_UNSIGNED_INT_24_8_NV GL_UNSIGNED_INT_8_8_8_8 GL_UNSIGNED_SHORT_5_6_5
     GL_USE_MISSING_GLYPH_NV GL_VARIANT_DATATYPE_EXT GL_VERTEX_ARRAY_BINDING
     GL_VERTEX_ARRAY_POINTER GL_VERTEX_DATA_HINT_PGI GL_VERTEX_WEIGHTING_EXT
     GL_VIEW_CLASS_RGTC1_RED GL_WEIGHTED_AVERAGE_ARB GL_WEIGHTED_AVERAGE_EXT
     GL_WEIGHT_SUM_UNITY_ARB GL_WINDOW_RECTANGLE_EXT glAreProgramsResidentNV
     glBeginOcclusionQueryNV glBindAttribLocationARB glBindFragmentShaderATI
     glBindLightParameterEXT glBindTransformFeedback glBlendEquationSeparate
     glBlendFuncSeparateiARB glBufferParameteriAPPLE glColorTableParameterfv
     glColorTableParameteriv glCombinerParameterfvNV glCombinerParameterivNV
     glCommandListSegmentsNV glConvolutionParameterf glConvolutionParameteri
     glCopyTextureImage1DEXT glCopyTextureImage2DEXT glCopyTextureSubImage1D
     glCopyTextureSubImage2D glCopyTextureSubImage3D glCreateShaderObjectARB
     glDebugMessageEnableAMD glDebugMessageInsertAMD glDebugMessageInsertARB
     glDeleteFramebuffersEXT glDeletePerfMonitorsAMD glDeleteVertexShaderEXT
     glDisableVertexArrayEXT glDrawCommandsAddressNV glDrawElementArrayAPPLE
     glDrawElementsInstanced glDrawTransformFeedback glEnableClientStateiEXT
     glFlushPixelDataRangeNV glFragmentMaterialfSGIX glFragmentMaterialfvEXT
     glFragmentMaterialiSGIX glFragmentMaterialivEXT glFramebufferParameteri
     glFramebufferTextureARB glFramebufferTextureEXT glGenFragmentShadersATI
     glGenOcclusionQueriesNV glGenTransformFeedbacks glGenerateTextureMipmap
     glGetAttachedObjectsARB glGetBooleanIndexedvEXT glGetCompressedTexImage
     glGetDebugMessageLogAMD glGetDebugMessageLogARB glGetFragmentLightfvEXT
     glGetFragmentLightivEXT glGetIntegerIndexedvEXT glGetInternalformati64v
     glGetInvariantFloatvEXT glGetMapControlPointsNV glGetNamedBufferSubData
     glGetOcclusionQueryivNV glGetPerfQueryDataINTEL glGetPerfQueryInfoINTEL
     glGetPointerIndexedvEXT glGetProgramInterfaceiv glGetQueryObjecti64vEXT
     glGetQueryObjectivANGLE glGetSamplerParameterfv glGetSamplerParameteriv
     glGetSeparableFilterEXT glGetSharpenTexFuncSGIS glGetTexParameterIivEXT
     glGetTextureParameterfv glGetTextureParameteriv glGetUniformLocationARB
     glGetVariantBooleanvEXT glGetVariantIntegervEXT glGetVariantPointervEXT
     glGetVertexAttribIivEXT glGetVertexAttribLdvEXT glGetnPolygonStippleARB
     glGlobalAlphaFactorbSUN glGlobalAlphaFactordSUN glGlobalAlphaFactorfSUN
     glGlobalAlphaFactoriSUN glGlobalAlphaFactorsSUN glInvalidateFramebuffer
     glInvalidateTexSubImage glIsPointInStrokePathNV glIsTransformFeedbackNV
     glMatrixIndexPointerARB glMatrixLoadIdentityEXT glMemoryBarrierByRegion
     glMultiTexParameterfEXT glMultiTexParameteriEXT glMultiTexSubImage1DEXT
     glMultiTexSubImage2DEXT glMultiTexSubImage3DEXT glNamedBufferStorageEXT
     glNamedBufferSubDataEXT glNamedProgramStringEXT glPathGlyphIndexArrayNV
     glPathGlyphIndexRangeNV glPolygonOffsetClampEXT glPrimitiveRestartIndex
     glPrioritizeTexturesEXT glProgramParameter4dvNV glProgramParameter4fvNV
     glProgramUniform1i64ARB glProgramUniform1i64vNV glProgramUniform1ui64NV
     glProgramUniform1uivEXT glProgramUniform2i64ARB glProgramUniform2i64vNV
     glProgramUniform2ui64NV glProgramUniform2uivEXT glProgramUniform3i64ARB
     glProgramUniform3i64vNV glProgramUniform3ui64NV glProgramUniform3uivEXT
     glProgramUniform4i64ARB glProgramUniform4i64vNV glProgramUniform4ui64NV
     glProgramUniform4uivEXT glProgramUniformui64vNV glReleaseShaderCompiler
     glReplacementCodeubvSUN glReplacementCodeuivSUN glReplacementCodeusvSUN
     glSecondaryColor3ubvEXT glSecondaryColor3uivEXT glSecondaryColor3usvEXT
     glSecondaryColorPointer glSpriteParameterfvSGIX glSpriteParameterivSGIX
     glTessellationFactorAMD glTexBumpParameterfvATI glTexBumpParameterivATI
     glTexCoord2fVertex3fSUN glTexCoord4fVertex4fSUN glTexCoordPointervINTEL
     glTexImage2DMultisample glTexImage3DMultisample glTextureBufferRangeEXT
     glTextureParameterfvEXT glTextureParameterivEXT glUniformHandleui64vARB
     glUniformSubroutinesuiv glUpdateObjectBufferATI glVariantArrayObjectATI
     glVertexArrayRangeAPPLE glVertexAttribIFormatNV glVertexAttribL1ui64ARB
     glVertexAttribL1ui64vNV glVertexAttribL2ui64vNV glVertexAttribL3ui64vNV
     glVertexAttribL4ui64vNV glVertexAttribLFormatNV glVertexAttribPointerNV */
  /* Offset 16 gives the best switch position.  */
  switch (name[16]) {
  case '1':
    if (memEQ(name, "GL_IMAGE_CLASS_11_11_10", 23)) {
    /*                               ^             */
#ifdef GL_IMAGE_CLASS_11_11_10
      *iv_return = GL_IMAGE_CLASS_11_11_10;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_ONE_MINUS_SRC1_ALPHA", 23)) {
    /*                               ^             */
#ifdef GL_ONE_MINUS_SRC1_ALPHA
      *iv_return = GL_ONE_MINUS_SRC1_ALPHA;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_ONE_MINUS_SRC1_COLOR", 23)) {
    /*                               ^             */
#ifdef GL_ONE_MINUS_SRC1_COLOR
      *iv_return = GL_ONE_MINUS_SRC1_COLOR;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glProgramUniform1i64ARB", 23)) {
    /*                               ^             */
#ifdef glProgramUniform1i64ARB
      *iv_return = glProgramUniform1i64ARB;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glProgramUniform1i64vNV", 23)) {
    /*                               ^             */
#ifdef glProgramUniform1i64vNV
      *iv_return = glProgramUniform1i64vNV;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glProgramUniform1ui64NV", 23)) {
    /*                               ^             */
#ifdef glProgramUniform1ui64NV
      *iv_return = glProgramUniform1ui64NV;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glProgramUniform1uivEXT", 23)) {
    /*                               ^             */
#ifdef glProgramUniform1uivEXT
      *iv_return = glProgramUniform1uivEXT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case '2':
    if (memEQ(name, "GL_UNSIGNED_INT_24_8_NV", 23)) {
    /*                               ^             */
#ifdef GL_UNSIGNED_INT_24_8_NV
      *iv_return = GL_UNSIGNED_INT_24_8_NV;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glProgramUniform2i64ARB", 23)) {
    /*                               ^             */
#ifdef glProgramUniform2i64ARB
      *iv_return = glProgramUniform2i64ARB;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glProgramUniform2i64vNV", 23)) {
    /*                               ^             */
#ifdef glProgramUniform2i64vNV
      *iv_return = glProgramUniform2i64vNV;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glProgramUniform2ui64NV", 23)) {
    /*                               ^             */
#ifdef glProgramUniform2ui64NV
      *iv_return = glProgramUniform2ui64NV;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glProgramUniform2uivEXT", 23)) {
    /*                               ^             */
#ifdef glProgramUniform2uivEXT
      *iv_return = glProgramUniform2uivEXT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case '3':
    if (memEQ(name, "glProgramUniform3i64ARB", 23)) {
    /*                               ^             */
#ifdef glProgramUniform3i64ARB
      *iv_return = glProgramUniform3i64ARB;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glProgramUniform3i64vNV", 23)) {
    /*                               ^             */
#ifdef glProgramUniform3i64vNV
      *iv_return = glProgramUniform3i64vNV;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glProgramUniform3ui64NV", 23)) {
    /*                               ^             */
#ifdef glProgramUniform3ui64NV
      *iv_return = glProgramUniform3ui64NV;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glProgramUniform3uivEXT", 23)) {
    /*                               ^             */
#ifdef glProgramUniform3uivEXT
      *iv_return = glProgramUniform3uivEXT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glSecondaryColor3ubvEXT", 23)) {
    /*                               ^             */
#ifdef glSecondaryColor3ubvEXT
      *iv_return = glSecondaryColor3ubvEXT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glSecondaryColor3uivEXT", 23)) {
    /*                               ^             */
#ifdef glSecondaryColor3uivEXT
      *iv_return = glSecondaryColor3uivEXT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glSecondaryColor3usvEXT", 23)) {
    /*                               ^             */
#ifdef glSecondaryColor3usvEXT
      *iv_return = glSecondaryColor3usvEXT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case '4':
    if (memEQ(name, "glProgramUniform4i64ARB", 23)) {
    /*                               ^             */
#ifdef glProgramUniform4i64ARB
      *iv_return = glProgramUniform4i64ARB;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glProgramUniform4i64vNV", 23)) {
    /*                               ^             */
#ifdef glProgramUniform4i64vNV
      *iv_return = glProgramUniform4i64vNV;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glProgramUniform4ui64NV", 23)) {
    /*                               ^             */
#ifdef glProgramUniform4ui64NV
      *iv_return = glProgramUniform4ui64NV;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glProgramUniform4uivEXT", 23)) {
    /*                               ^             */
#ifdef glProgramUniform4uivEXT
      *iv_return = glProgramUniform4uivEXT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case '8':
    if (memEQ(name, "GL_UNSIGNED_INT_8_8_8_8", 23)) {
    /*                               ^             */
#ifdef GL_UNSIGNED_INT_8_8_8_8
      *iv_return = GL_UNSIGNED_INT_8_8_8_8;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case 'A':
    if (memEQ(name, "GL_ASYNC_HISTOGRAM_SGIX", 23)) {
    /*                               ^             */
#ifdef GL_ASYNC_HISTOGRAM_SGIX
      *iv_return = GL_ASYNC_HISTOGRAM_SGIX;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_DEBUG_SOURCE_API_ARB", 23)) {
    /*                               ^             */
#ifdef GL_DEBUG_SOURCE_API_ARB
      *iv_return = GL_DEBUG_SOURCE_API_ARB;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_FOG_COORD_ARRAY_TYPE", 23)) {
    /*                               ^             */
#ifdef GL_FOG_COORD_ARRAY_TYPE
      *iv_return = GL_FOG_COORD_ARRAY_TYPE;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_GENERATE_MIPMAP_HINT", 23)) {
    /*                               ^             */
#ifdef GL_GENERATE_MIPMAP_HINT
      *iv_return = GL_GENERATE_MIPMAP_HINT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_GENERATE_MIPMAP_SGIS", 23)) {
    /*                               ^             */
#ifdef GL_GENERATE_MIPMAP_SGIS
      *iv_return = GL_GENERATE_MIPMAP_SGIS;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_RESAMPLE_AVERAGE_OML", 23)) {
    /*                               ^             */
#ifdef GL_RESAMPLE_AVERAGE_OML
      *iv_return = GL_RESAMPLE_AVERAGE_OML;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_SAMPLE_MASK_VALUE_NV", 23)) {
    /*                               ^             */
#ifdef GL_SAMPLE_MASK_VALUE_NV
      *iv_return = GL_SAMPLE_MASK_VALUE_NV;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_TOP_LEVEL_ARRAY_SIZE", 23)) {
    /*                               ^             */
#ifdef GL_TOP_LEVEL_ARRAY_SIZE
      *iv_return = GL_TOP_LEVEL_ARRAY_SIZE;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_WEIGHTED_AVERAGE_ARB", 23)) {
    /*                               ^             */
#ifdef GL_WEIGHTED_AVERAGE_ARB
      *iv_return = GL_WEIGHTED_AVERAGE_ARB;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_WEIGHTED_AVERAGE_EXT", 23)) {
    /*                               ^             */
#ifdef GL_WEIGHTED_AVERAGE_EXT
      *iv_return = GL_WEIGHTED_AVERAGE_EXT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glPathGlyphIndexArrayNV", 23)) {
    /*                               ^             */
#ifdef glPathGlyphIndexArrayNV
      *iv_return = glPathGlyphIndexArrayNV;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case 'B':
    if (memEQ(name, "GL_ARRAY_BUFFER_BINDING", 23)) {
    /*                               ^             */
#ifdef GL_ARRAY_BUFFER_BINDING
      *iv_return = GL_ARRAY_BUFFER_BINDING;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_COMPRESSED_RGB8_ETC2", 23)) {
    /*                               ^             */
#ifdef GL_COMPRESSED_RGB8_ETC2
      *iv_return = GL_COMPRESSED_RGB8_ETC2;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_MAT_EMISSION_BIT_PGI", 23)) {
    /*                               ^             */
#ifdef GL_MAT_EMISSION_BIT_PGI
      *iv_return = GL_MAT_EMISSION_BIT_PGI;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_MAT_SPECULAR_BIT_PGI", 23)) {
    /*                               ^             */
#ifdef GL_MAT_SPECULAR_BIT_PGI
      *iv_return = GL_MAT_SPECULAR_BIT_PGI;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_QUERY_BUFFER_BINDING", 23)) {
    /*                               ^             */
#ifdef GL_QUERY_BUFFER_BINDING
      *iv_return = GL_QUERY_BUFFER_BINDING;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_RENDERBUFFER_BINDING", 23)) {
    /*                               ^             */
#ifdef GL_RENDERBUFFER_BINDING
      *iv_return = GL_RENDERBUFFER_BINDING;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_SAMPLE_COUNT_BITS_NV", 23)) {
    /*                               ^             */
#ifdef GL_SAMPLE_COUNT_BITS_NV
      *iv_return = GL_SAMPLE_COUNT_BITS_NV;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_VERTEX_ARRAY_BINDING", 23)) {
    /*                               ^             */
#ifdef GL_VERTEX_ARRAY_BINDING
      *iv_return = GL_VERTEX_ARRAY_BINDING;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case 'C':
    if (memEQ(name, "GL_DEPTH32F_STENCIL8_NV", 23)) {
    /*                               ^             */
#ifdef GL_DEPTH32F_STENCIL8_NV
      *iv_return = GL_DEPTH32F_STENCIL8_NV;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_MAP1_TEXTURE_COORD_1", 23)) {
    /*                               ^             */
#ifdef GL_MAP1_TEXTURE_COORD_1
      *iv_return = GL_MAP1_TEXTURE_COORD_1;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_MAP1_TEXTURE_COORD_2", 23)) {
    /*                               ^             */
#ifdef GL_MAP1_TEXTURE_COORD_2
      *iv_return = GL_MAP1_TEXTURE_COORD_2;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_MAP1_TEXTURE_COORD_3", 23)) {
    /*                               ^             */
#ifdef GL_MAP1_TEXTURE_COORD_3
      *iv_return = GL_MAP1_TEXTURE_COORD_3;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_MAP1_TEXTURE_COORD_4", 23)) {
    /*                               ^             */
#ifdef GL_MAP1_TEXTURE_COORD_4
      *iv_return = GL_MAP1_TEXTURE_COORD_4;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_MAP2_TEXTURE_COORD_1", 23)) {
    /*                               ^             */
#ifdef GL_MAP2_TEXTURE_COORD_1
      *iv_return = GL_MAP2_TEXTURE_COORD_1;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_MAP2_TEXTURE_COORD_2", 23)) {
    /*                               ^             */
#ifdef GL_MAP2_TEXTURE_COORD_2
      *iv_return = GL_MAP2_TEXTURE_COORD_2;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_MAP2_TEXTURE_COORD_3", 23)) {
    /*                               ^             */
#ifdef GL_MAP2_TEXTURE_COORD_3
      *iv_return = GL_MAP2_TEXTURE_COORD_3;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_MAP2_TEXTURE_COORD_4", 23)) {
    /*                               ^             */
#ifdef GL_MAP2_TEXTURE_COORD_4
      *iv_return = GL_MAP2_TEXTURE_COORD_4;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case 'D':
    if (memEQ(name, "GL_CG_VERTEX_SHADER_EXT", 23)) {
    /*                               ^             */
#ifdef GL_CG_VERTEX_SHADER_EXT
      *iv_return = GL_CG_VERTEX_SHADER_EXT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_COMPRESSED_RED_RGTC1", 23)) {
    /*                               ^             */
#ifdef GL_COMPRESSED_RED_RGTC1
      *iv_return = GL_COMPRESSED_RED_RGTC1;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_INT_SAMPLER_1D_ARRAY", 23)) {
    /*                               ^             */
#ifdef GL_INT_SAMPLER_1D_ARRAY
      *iv_return = GL_INT_SAMPLER_1D_ARRAY;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_INT_SAMPLER_2D_ARRAY", 23)) {
    /*                               ^             */
#ifdef GL_INT_SAMPLER_2D_ARRAY
      *iv_return = GL_INT_SAMPLER_2D_ARRAY;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_STORAGE_CACHED_APPLE", 23)) {
    /*                               ^             */
#ifdef GL_STORAGE_CACHED_APPLE
      *iv_return = GL_STORAGE_CACHED_APPLE;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_STORAGE_SHARED_APPLE", 23)) {
    /*                               ^             */
#ifdef GL_STORAGE_SHARED_APPLE
      *iv_return = GL_STORAGE_SHARED_APPLE;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glNamedBufferSubDataEXT", 23)) {
    /*                               ^             */
#ifdef glNamedBufferSubDataEXT
      *iv_return = glNamedBufferSubDataEXT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case 'E':
    if (memEQ(name, "GL_BUFFER_STORAGE_FLAGS", 23)) {
    /*                               ^             */
#ifdef GL_BUFFER_STORAGE_FLAGS
      *iv_return = GL_BUFFER_STORAGE_FLAGS;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_CLAMP_TO_BORDER_SGIS", 23)) {
    /*                               ^             */
#ifdef GL_CLAMP_TO_BORDER_SGIS
      *iv_return = GL_CLAMP_TO_BORDER_SGIS;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_COLOR_TABLE_RED_SIZE", 23)) {
    /*                               ^             */
#ifdef GL_COLOR_TABLE_RED_SIZE
      *iv_return = GL_COLOR_TABLE_RED_SIZE;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_DEPTH_ATTACHMENT_EXT", 23)) {
    /*                               ^             */
#ifdef GL_DEPTH_ATTACHMENT_EXT
      *iv_return = GL_DEPTH_ATTACHMENT_EXT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_DEPTH_CLAMP_NEAR_AMD", 23)) {
    /*                               ^             */
#ifdef GL_DEPTH_CLAMP_NEAR_AMD
      *iv_return = GL_DEPTH_CLAMP_NEAR_AMD;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_FEEDBACK_BUFFER_SIZE", 23)) {
    /*                               ^             */
#ifdef GL_FEEDBACK_BUFFER_SIZE
      *iv_return = GL_FEEDBACK_BUFFER_SIZE;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_FEEDBACK_BUFFER_TYPE", 23)) {
    /*                               ^             */
#ifdef GL_FEEDBACK_BUFFER_TYPE
      *iv_return = GL_FEEDBACK_BUFFER_TYPE;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_FOG_COORDINATE_ARRAY", 23)) {
    /*                               ^             */
#ifdef GL_FOG_COORDINATE_ARRAY
      *iv_return = GL_FOG_COORDINATE_ARRAY;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_HISTOGRAM_GREEN_SIZE", 23)) {
    /*                               ^             */
#ifdef GL_HISTOGRAM_GREEN_SIZE
      *iv_return = GL_HISTOGRAM_GREEN_SIZE;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_MAX_DRAW_BUFFERS_ARB", 23)) {
    /*                               ^             */
#ifdef GL_MAX_DRAW_BUFFERS_ARB
      *iv_return = GL_MAX_DRAW_BUFFERS_ARB;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_MAX_DRAW_BUFFERS_ATI", 23)) {
    /*                               ^             */
#ifdef GL_MAX_DRAW_BUFFERS_ATI
      *iv_return = GL_MAX_DRAW_BUFFERS_ATI;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_OFFSET_TEXTURE_2D_NV", 23)) {
    /*                               ^             */
#ifdef GL_OFFSET_TEXTURE_2D_NV
      *iv_return = GL_OFFSET_TEXTURE_2D_NV;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_PROGRAM_PARAMETER_NV", 23)) {
    /*                               ^             */
#ifdef GL_PROGRAM_PARAMETER_NV
      *iv_return = GL_PROGRAM_PARAMETER_NV;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_SHADER_STORAGE_BLOCK", 23)) {
    /*                               ^             */
#ifdef GL_SHADER_STORAGE_BLOCK
      *iv_return = GL_SHADER_STORAGE_BLOCK;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_TEXTURE_RESIDENT_EXT", 23)) {
    /*                               ^             */
#ifdef GL_TEXTURE_RESIDENT_EXT
      *iv_return = GL_TEXTURE_RESIDENT_EXT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case 'F':
    if (memEQ(name, "GL_DRAW_FRAMEBUFFER_EXT", 23)) {
    /*                               ^             */
#ifdef GL_DRAW_FRAMEBUFFER_EXT
      *iv_return = GL_DRAW_FRAMEBUFFER_EXT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_INT_IMAGE_BUFFER_EXT", 23)) {
    /*                               ^             */
#ifdef GL_INT_IMAGE_BUFFER_EXT
      *iv_return = GL_INT_IMAGE_BUFFER_EXT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_PARAMETER_BUFFER_ARB", 23)) {
    /*                               ^             */
#ifdef GL_PARAMETER_BUFFER_ARB
      *iv_return = GL_PARAMETER_BUFFER_ARB;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_PATH_STENCIL_FUNC_NV", 23)) {
    /*                               ^             */
#ifdef GL_PATH_STENCIL_FUNC_NV
      *iv_return = GL_PATH_STENCIL_FUNC_NV;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_READ_FRAMEBUFFER_EXT", 23)) {
    /*                               ^             */
#ifdef GL_READ_FRAMEBUFFER_EXT
      *iv_return = GL_READ_FRAMEBUFFER_EXT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case 'G':
    if (memEQ(name, "GL_ASYNC_TEX_IMAGE_SGIX", 23)) {
    /*                               ^             */
#ifdef GL_ASYNC_TEX_IMAGE_SGIX
      *iv_return = GL_ASYNC_TEX_IMAGE_SGIX;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_PACK_SKIP_IMAGES_EXT", 23)) {
    /*                               ^             */
#ifdef GL_PACK_SKIP_IMAGES_EXT
      *iv_return = GL_PACK_SKIP_IMAGES_EXT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_WINDOW_RECTANGLE_EXT", 23)) {
    /*                               ^             */
#ifdef GL_WINDOW_RECTANGLE_EXT
      *iv_return = GL_WINDOW_RECTANGLE_EXT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case 'H':
    if (memEQ(name, "GL_DEBUG_TYPE_OTHER_ARB", 23)) {
    /*                               ^             */
#ifdef GL_DEBUG_TYPE_OTHER_ARB
      *iv_return = GL_DEBUG_TYPE_OTHER_ARB;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_HISTOGRAM_ALPHA_SIZE", 23)) {
    /*                               ^             */
#ifdef GL_HISTOGRAM_ALPHA_SIZE
      *iv_return = GL_HISTOGRAM_ALPHA_SIZE;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_SCALE_BY_ONE_HALF_NV", 23)) {
    /*                               ^             */
#ifdef GL_SCALE_BY_ONE_HALF_NV
      *iv_return = GL_SCALE_BY_ONE_HALF_NV;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case 'I':
    if (memEQ(name, "GL_ALL_BARRIER_BITS_EXT", 23)) {
    /*                               ^             */
#ifdef GL_ALL_BARRIER_BITS_EXT
      *iv_return = GL_ALL_BARRIER_BITS_EXT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_ALWAYS_FAST_HINT_PGI", 23)) {
    /*                               ^             */
#ifdef GL_ALWAYS_FAST_HINT_PGI
      *iv_return = GL_ALWAYS_FAST_HINT_PGI;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_ALWAYS_SOFT_HINT_PGI", 23)) {
    /*                               ^             */
#ifdef GL_ALWAYS_SOFT_HINT_PGI
      *iv_return = GL_ALWAYS_SOFT_HINT_PGI;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_COLOR_ARRAY_LIST_IBM", 23)) {
    /*                               ^             */
#ifdef GL_COLOR_ARRAY_LIST_IBM
      *iv_return = GL_COLOR_ARRAY_LIST_IBM;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_COLOR_ARRAY_SIZE_EXT", 23)) {
    /*                               ^             */
#ifdef GL_COLOR_ARRAY_SIZE_EXT
      *iv_return = GL_COLOR_ARRAY_SIZE_EXT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_COLOR_TABLE_BIAS_SGI", 23)) {
    /*                               ^             */
#ifdef GL_COLOR_TABLE_BIAS_SGI
      *iv_return = GL_COLOR_TABLE_BIAS_SGI;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_DEPTH24_STENCIL8_EXT", 23)) {
    /*                               ^             */
#ifdef GL_DEPTH24_STENCIL8_EXT
      *iv_return = GL_DEPTH24_STENCIL8_EXT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_IMAGE_2D_MULTISAMPLE", 23)) {
    /*                               ^             */
#ifdef GL_IMAGE_2D_MULTISAMPLE
      *iv_return = GL_IMAGE_2D_MULTISAMPLE;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_INDEX_ARRAY_LIST_IBM", 23)) {
    /*                               ^             */
#ifdef GL_INDEX_ARRAY_LIST_IBM
      *iv_return = GL_INDEX_ARRAY_LIST_IBM;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_MAX_ELEMENTS_INDICES", 23)) {
    /*                               ^             */
#ifdef GL_MAX_ELEMENTS_INDICES
      *iv_return = GL_MAX_ELEMENTS_INDICES;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_MAX_VERTEX_UNITS_ARB", 23)) {
    /*                               ^             */
#ifdef GL_MAX_VERTEX_UNITS_ARB
      *iv_return = GL_MAX_VERTEX_UNITS_ARB;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_MULTISAMPLE_BIT_3DFX", 23)) {
    /*                               ^             */
#ifdef GL_MULTISAMPLE_BIT_3DFX
      *iv_return = GL_MULTISAMPLE_BIT_3DFX;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_PATH_STROKE_WIDTH_NV", 23)) {
    /*                               ^             */
#ifdef GL_PATH_STROKE_WIDTH_NV
      *iv_return = GL_PATH_STROKE_WIDTH_NV;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_SEPARATE_ATTRIBS_EXT", 23)) {
    /*                               ^             */
#ifdef GL_SEPARATE_ATTRIBS_EXT
      *iv_return = GL_SEPARATE_ATTRIBS_EXT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_SIGNED_INTENSITY8_NV", 23)) {
    /*                               ^             */
#ifdef GL_SIGNED_INTENSITY8_NV
      *iv_return = GL_SIGNED_INTENSITY8_NV;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_STENCIL_TAG_BITS_EXT", 23)) {
    /*                               ^             */
#ifdef GL_STENCIL_TAG_BITS_EXT
      *iv_return = GL_STENCIL_TAG_BITS_EXT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_TEXTURE_LOD_BIAS_EXT", 23)) {
    /*                               ^             */
#ifdef GL_TEXTURE_LOD_BIAS_EXT
      *iv_return = GL_TEXTURE_LOD_BIAS_EXT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_TEXTURE_PRIORITY_EXT", 23)) {
    /*                               ^             */
#ifdef GL_TEXTURE_PRIORITY_EXT
      *iv_return = GL_TEXTURE_PRIORITY_EXT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_TEXTURE_RED_SIZE_EXT", 23)) {
    /*                               ^             */
#ifdef GL_TEXTURE_RED_SIZE_EXT
      *iv_return = GL_TEXTURE_RED_SIZE_EXT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_TEXTURE_STENCIL_SIZE", 23)) {
    /*                               ^             */
#ifdef GL_TEXTURE_STENCIL_SIZE
      *iv_return = GL_TEXTURE_STENCIL_SIZE;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_UNPACK_CMYK_HINT_EXT", 23)) {
    /*                               ^             */
#ifdef GL_UNPACK_CMYK_HINT_EXT
      *iv_return = GL_UNPACK_CMYK_HINT_EXT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_VERTEX_DATA_HINT_PGI", 23)) {
    /*                               ^             */
#ifdef GL_VERTEX_DATA_HINT_PGI
      *iv_return = GL_VERTEX_DATA_HINT_PGI;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_VERTEX_WEIGHTING_EXT", 23)) {
    /*                               ^             */
#ifdef GL_VERTEX_WEIGHTING_EXT
      *iv_return = GL_VERTEX_WEIGHTING_EXT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_WEIGHT_SUM_UNITY_ARB", 23)) {
    /*                               ^             */
#ifdef GL_WEIGHT_SUM_UNITY_ARB
      *iv_return = GL_WEIGHT_SUM_UNITY_ARB;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glCopyTextureSubImage1D", 23)) {
    /*                               ^             */
#ifdef glCopyTextureSubImage1D
      *iv_return = glCopyTextureSubImage1D;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glCopyTextureSubImage2D", 23)) {
    /*                               ^             */
#ifdef glCopyTextureSubImage2D
      *iv_return = glCopyTextureSubImage2D;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glCopyTextureSubImage3D", 23)) {
    /*                               ^             */
#ifdef glCopyTextureSubImage3D
      *iv_return = glCopyTextureSubImage3D;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case 'J':
    if (memEQ(name, "GL_LINE_STRIP_ADJACENCY", 23)) {
    /*                               ^             */
#ifdef GL_LINE_STRIP_ADJACENCY
      *iv_return = GL_LINE_STRIP_ADJACENCY;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case 'K':
    if (memEQ(name, "GL_MAX_NAME_STACK_DEPTH", 23)) {
    /*                               ^             */
#ifdef GL_MAX_NAME_STACK_DEPTH
      *iv_return = GL_MAX_NAME_STACK_DEPTH;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case 'L':
    if (memEQ(name, "GL_CLAMP_READ_COLOR_ARB", 23)) {
    /*                               ^             */
#ifdef GL_CLAMP_READ_COLOR_ARB
      *iv_return = GL_CLAMP_READ_COLOR_ARB;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_CONTEXT_PROFILE_MASK", 23)) {
    /*                               ^             */
#ifdef GL_CONTEXT_PROFILE_MASK
      *iv_return = GL_CONTEXT_PROFILE_MASK;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_STENCIL_OP_VALUE_AMD", 23)) {
    /*                               ^             */
#ifdef GL_STENCIL_OP_VALUE_AMD
      *iv_return = GL_STENCIL_OP_VALUE_AMD;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_TEXTURE_SWIZZLE_RGBA", 23)) {
    /*                               ^             */
#ifdef GL_TEXTURE_SWIZZLE_RGBA
      *iv_return = GL_TEXTURE_SWIZZLE_RGBA;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_UNPACK_RESAMPLE_SGIX", 23)) {
    /*                               ^             */
#ifdef GL_UNPACK_RESAMPLE_SGIX
      *iv_return = GL_UNPACK_RESAMPLE_SGIX;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_USE_MISSING_GLYPH_NV", 23)) {
    /*                               ^             */
#ifdef GL_USE_MISSING_GLYPH_NV
      *iv_return = GL_USE_MISSING_GLYPH_NV;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case 'M':
    if (memEQ(name, "GL_ALPHA_MAX_CLAMP_INGR", 23)) {
    /*                               ^             */
#ifdef GL_ALPHA_MAX_CLAMP_INGR
      *iv_return = GL_ALPHA_MAX_CLAMP_INGR;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_ALPHA_MIN_CLAMP_INGR", 23)) {
    /*                               ^             */
#ifdef GL_ALPHA_MIN_CLAMP_INGR
      *iv_return = GL_ALPHA_MIN_CLAMP_INGR;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_ALPHA_REF_COMMAND_NV", 23)) {
    /*                               ^             */
#ifdef GL_ALPHA_REF_COMMAND_NV
      *iv_return = GL_ALPHA_REF_COMMAND_NV;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_COMPRESSED_LUMINANCE", 23)) {
    /*                               ^             */
#ifdef GL_COMPRESSED_LUMINANCE
      *iv_return = GL_COMPRESSED_LUMINANCE;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_CURRENT_BINORMAL_EXT", 23)) {
    /*                               ^             */
#ifdef GL_CURRENT_BINORMAL_EXT
      *iv_return = GL_CURRENT_BINORMAL_EXT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_FOG_DISTANCE_MODE_NV", 23)) {
    /*                               ^             */
#ifdef GL_FOG_DISTANCE_MODE_NV
      *iv_return = GL_FOG_DISTANCE_MODE_NV;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_GREEN_MAX_CLAMP_INGR", 23)) {
    /*                               ^             */
#ifdef GL_GREEN_MAX_CLAMP_INGR
      *iv_return = GL_GREEN_MAX_CLAMP_INGR;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_GREEN_MIN_CLAMP_INGR", 23)) {
    /*                               ^             */
#ifdef GL_GREEN_MIN_CLAMP_INGR
      *iv_return = GL_GREEN_MIN_CLAMP_INGR;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_HISTOGRAM_FORMAT_EXT", 23)) {
    /*                               ^             */
#ifdef GL_HISTOGRAM_FORMAT_EXT
      *iv_return = GL_HISTOGRAM_FORMAT_EXT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_PATH_FOG_GEN_MODE_NV", 23)) {
    /*                               ^             */
#ifdef GL_PATH_FOG_GEN_MODE_NV
      *iv_return = GL_PATH_FOG_GEN_MODE_NV;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_TEXTURE_CUBE_MAP_ARB", 23)) {
    /*                               ^             */
#ifdef GL_TEXTURE_CUBE_MAP_ARB
      *iv_return = GL_TEXTURE_CUBE_MAP_ARB;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_TEXTURE_CUBE_MAP_EXT", 23)) {
    /*                               ^             */
#ifdef GL_TEXTURE_CUBE_MAP_EXT
      *iv_return = GL_TEXTURE_CUBE_MAP_EXT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case 'N':
    if (memEQ(name, "GL_BLEND_EQUATION_ALPHA", 23)) {
    /*                               ^             */
#ifdef GL_BLEND_EQUATION_ALPHA
      *iv_return = GL_BLEND_EQUATION_ALPHA;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_CONSTANT_ATTENUATION", 23)) {
    /*                               ^             */
#ifdef GL_CONSTANT_ATTENUATION
      *iv_return = GL_CONSTANT_ATTENUATION;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_MAX_SPOT_EXPONENT_NV", 23)) {
    /*                               ^             */
#ifdef GL_MAX_SPOT_EXPONENT_NV
      *iv_return = GL_MAX_SPOT_EXPONENT_NV;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_MOVE_TO_CONTINUES_NV", 23)) {
    /*                               ^             */
#ifdef GL_MOVE_TO_CONTINUES_NV
      *iv_return = GL_MOVE_TO_CONTINUES_NV;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_NORMALIZED_RANGE_EXT", 23)) {
    /*                               ^             */
#ifdef GL_NORMALIZED_RANGE_EXT
      *iv_return = GL_NORMALIZED_RANGE_EXT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_PRIMITIVES_GENERATED", 23)) {
    /*                               ^             */
#ifdef GL_PRIMITIVES_GENERATED
      *iv_return = GL_PRIMITIVES_GENERATED;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_QUERY_RESULT_NO_WAIT", 23)) {
    /*                               ^             */
#ifdef GL_QUERY_RESULT_NO_WAIT
      *iv_return = GL_QUERY_RESULT_NO_WAIT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_SIGNED_LUMINANCE8_NV", 23)) {
    /*                               ^             */
#ifdef GL_SIGNED_LUMINANCE8_NV
      *iv_return = GL_SIGNED_LUMINANCE8_NV;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_TEXTURE_RECTANGLE_NV", 23)) {
    /*                               ^             */
#ifdef GL_TEXTURE_RECTANGLE_NV
      *iv_return = GL_TEXTURE_RECTANGLE_NV;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case 'O':
    if (memEQ(name, "GL_FRAMEBUFFER_COMPLETE", 23)) {
    /*                               ^             */
#ifdef GL_FRAMEBUFFER_COMPLETE
      *iv_return = GL_FRAMEBUFFER_COMPLETE;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_MAX_TEXTURE_LOD_BIAS", 23)) {
    /*                               ^             */
#ifdef GL_MAX_TEXTURE_LOD_BIAS
      *iv_return = GL_MAX_TEXTURE_LOD_BIAS;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_PATH_STROKE_BOUND_NV", 23)) {
    /*                               ^             */
#ifdef GL_PATH_STROKE_BOUND_NV
      *iv_return = GL_PATH_STROKE_BOUND_NV;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_QUERY_BY_REGION_WAIT", 23)) {
    /*                               ^             */
#ifdef GL_QUERY_BY_REGION_WAIT
      *iv_return = GL_QUERY_BY_REGION_WAIT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_REPLACEMENT_CODE_SUN", 23)) {
    /*                               ^             */
#ifdef GL_REPLACEMENT_CODE_SUN
      *iv_return = GL_REPLACEMENT_CODE_SUN;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_SECONDARY_COLOR_ATIX", 23)) {
    /*                               ^             */
#ifdef GL_SECONDARY_COLOR_ATIX
      *iv_return = GL_SECONDARY_COLOR_ATIX;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_TEXTURE_MAX_LOD_SGIS", 23)) {
    /*                               ^             */
#ifdef GL_TEXTURE_MAX_LOD_SGIS
      *iv_return = GL_TEXTURE_MAX_LOD_SGIS;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_TEXTURE_MIN_LOD_SGIS", 23)) {
    /*                               ^             */
#ifdef GL_TEXTURE_MIN_LOD_SGIS
      *iv_return = GL_TEXTURE_MIN_LOD_SGIS;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case 'P':
    if (memEQ(name, "GL_COMPRESSED_ALPHA_ARB", 23)) {
    /*                               ^             */
#ifdef GL_COMPRESSED_ALPHA_ARB
      *iv_return = GL_COMPRESSED_ALPHA_ARB;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_DEBUG_TYPE_POP_GROUP", 23)) {
    /*                               ^             */
#ifdef GL_DEBUG_TYPE_POP_GROUP
      *iv_return = GL_DEBUG_TYPE_POP_GROUP;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_IMAGE_CUBE_MAP_ARRAY", 23)) {
    /*                               ^             */
#ifdef GL_IMAGE_CUBE_MAP_ARRAY
      *iv_return = GL_IMAGE_CUBE_MAP_ARRAY;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_INVERSE_TRANSPOSE_NV", 23)) {
    /*                               ^             */
#ifdef GL_INVERSE_TRANSPOSE_NV
      *iv_return = GL_INVERSE_TRANSPOSE_NV;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_LINE_STIPPLE_PATTERN", 23)) {
    /*                               ^             */
#ifdef GL_LINE_STIPPLE_PATTERN
      *iv_return = GL_LINE_STIPPLE_PATTERN;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_NORMAL_ARRAY_POINTER", 23)) {
    /*                               ^             */
#ifdef GL_NORMAL_ARRAY_POINTER
      *iv_return = GL_NORMAL_ARRAY_POINTER;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_SLUMINANCE_ALPHA_EXT", 23)) {
    /*                               ^             */
#ifdef GL_SLUMINANCE_ALPHA_EXT
      *iv_return = GL_SLUMINANCE_ALPHA_EXT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_VERTEX_ARRAY_POINTER", 23)) {
    /*                               ^             */
#ifdef GL_VERTEX_ARRAY_POINTER
      *iv_return = GL_VERTEX_ARRAY_POINTER;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glSecondaryColorPointer", 23)) {
    /*                               ^             */
#ifdef glSecondaryColorPointer
      *iv_return = glSecondaryColorPointer;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case 'Q':
    if (memEQ(name, "glBeginOcclusionQueryNV", 23)) {
    /*                               ^             */
#ifdef glBeginOcclusionQueryNV
      *iv_return = glBeginOcclusionQueryNV;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case 'R':
    if (memEQ(name, "GL_CURRENT_RASTER_COLOR", 23)) {
    /*                               ^             */
#ifdef GL_CURRENT_RASTER_COLOR
      *iv_return = GL_CURRENT_RASTER_COLOR;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_CURRENT_RASTER_INDEX", 23)) {
    /*                               ^             */
#ifdef GL_CURRENT_RASTER_INDEX
      *iv_return = GL_CURRENT_RASTER_INDEX;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_DEBUG_TYPE_ERROR_ARB", 23)) {
    /*                               ^             */
#ifdef GL_DEBUG_TYPE_ERROR_ARB
      *iv_return = GL_DEBUG_TYPE_ERROR_ARB;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_FRAGMENT_PROGRAM_ARB", 23)) {
    /*                               ^             */
#ifdef GL_FRAGMENT_PROGRAM_ARB
      *iv_return = GL_FRAGMENT_PROGRAM_ARB;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_FRAMEBUFFER_SRGB_EXT", 23)) {
    /*                               ^             */
#ifdef GL_FRAMEBUFFER_SRGB_EXT
      *iv_return = GL_FRAMEBUFFER_SRGB_EXT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_NUM_ACTIVE_VARIABLES", 23)) {
    /*                               ^             */
#ifdef GL_NUM_ACTIVE_VARIABLES
      *iv_return = GL_NUM_ACTIVE_VARIABLES;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_SAMPLER_1D_ARRAY_EXT", 23)) {
    /*                               ^             */
#ifdef GL_SAMPLER_1D_ARRAY_EXT
      *iv_return = GL_SAMPLER_1D_ARRAY_EXT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_SAMPLER_2D_ARRAY_EXT", 23)) {
    /*                               ^             */
#ifdef GL_SAMPLER_2D_ARRAY_EXT
      *iv_return = GL_SAMPLER_2D_ARRAY_EXT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_TEXTURE_1D_ARRAY_EXT", 23)) {
    /*                               ^             */
#ifdef GL_TEXTURE_1D_ARRAY_EXT
      *iv_return = GL_TEXTURE_1D_ARRAY_EXT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_TEXTURE_2D_ARRAY_EXT", 23)) {
    /*                               ^             */
#ifdef GL_TEXTURE_2D_ARRAY_EXT
      *iv_return = GL_TEXTURE_2D_ARRAY_EXT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_TEXTURE_BORDER_COLOR", 23)) {
    /*                               ^             */
#ifdef GL_TEXTURE_BORDER_COLOR
      *iv_return = GL_TEXTURE_BORDER_COLOR;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_TEXTURE_COMPARE_FUNC", 23)) {
    /*                               ^             */
#ifdef GL_TEXTURE_COMPARE_FUNC
      *iv_return = GL_TEXTURE_COMPARE_FUNC;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_TEXTURE_COMPARE_MODE", 23)) {
    /*                               ^             */
#ifdef GL_TEXTURE_COMPARE_MODE
      *iv_return = GL_TEXTURE_COMPARE_MODE;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_TEXTURE_COMPARE_SGIX", 23)) {
    /*                               ^             */
#ifdef GL_TEXTURE_COMPARE_SGIX
      *iv_return = GL_TEXTURE_COMPARE_SGIX;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_UNIFORM_BUFFER_START", 23)) {
    /*                               ^             */
#ifdef GL_UNIFORM_BUFFER_START
      *iv_return = GL_UNIFORM_BUFFER_START;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glFlushPixelDataRangeNV", 23)) {
    /*                               ^             */
#ifdef glFlushPixelDataRangeNV
      *iv_return = glFlushPixelDataRangeNV;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glPathGlyphIndexRangeNV", 23)) {
    /*                               ^             */
#ifdef glPathGlyphIndexRangeNV
      *iv_return = glPathGlyphIndexRangeNV;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case 'S':
    if (memEQ(name, "GL_ATTRIB_ARRAY_SIZE_NV", 23)) {
    /*                               ^             */
#ifdef GL_ATTRIB_ARRAY_SIZE_NV
      *iv_return = GL_ATTRIB_ARRAY_SIZE_NV;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_PACK_ROW_BYTES_APPLE", 23)) {
    /*                               ^             */
#ifdef GL_PACK_ROW_BYTES_APPLE
      *iv_return = GL_PACK_ROW_BYTES_APPLE;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_RENDERBUFFER_SAMPLES", 23)) {
    /*                               ^             */
#ifdef GL_RENDERBUFFER_SAMPLES
      *iv_return = GL_RENDERBUFFER_SAMPLES;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glGetNamedBufferSubData", 23)) {
    /*                               ^             */
#ifdef glGetNamedBufferSubData
      *iv_return = glGetNamedBufferSubData;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case 'T':
    if (memEQ(name, "GL_ATTRIB_ARRAY_TYPE_NV", 23)) {
    /*                               ^             */
#ifdef GL_ATTRIB_ARRAY_TYPE_NV
      *iv_return = GL_ATTRIB_ARRAY_TYPE_NV;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_CLAMP_FRAGMENT_COLOR", 23)) {
    /*                               ^             */
#ifdef GL_CLAMP_FRAGMENT_COLOR
      *iv_return = GL_CLAMP_FRAGMENT_COLOR;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_COMPARE_R_TO_TEXTURE", 23)) {
    /*                               ^             */
#ifdef GL_COMPARE_R_TO_TEXTURE
      *iv_return = GL_COMPARE_R_TO_TEXTURE;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_COMPRESSED_INTENSITY", 23)) {
    /*                               ^             */
#ifdef GL_COMPRESSED_INTENSITY
      *iv_return = GL_COMPRESSED_INTENSITY;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_GUILTY_CONTEXT_RESET", 23)) {
    /*                               ^             */
#ifdef GL_GUILTY_CONTEXT_RESET
      *iv_return = GL_GUILTY_CONTEXT_RESET;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_LAYOUT_DEFAULT_INTEL", 23)) {
    /*                               ^             */
#ifdef GL_LAYOUT_DEFAULT_INTEL
      *iv_return = GL_LAYOUT_DEFAULT_INTEL;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_MIRROR_CLAMP_TO_EDGE", 23)) {
    /*                               ^             */
#ifdef GL_MIRROR_CLAMP_TO_EDGE
      *iv_return = GL_MIRROR_CLAMP_TO_EDGE;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_PERFQUERY_WAIT_INTEL", 23)) {
    /*                               ^             */
#ifdef GL_PERFQUERY_WAIT_INTEL
      *iv_return = GL_PERFQUERY_WAIT_INTEL;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_PIXEL_MAG_FILTER_EXT", 23)) {
    /*                               ^             */
#ifdef GL_PIXEL_MAG_FILTER_EXT
      *iv_return = GL_PIXEL_MAG_FILTER_EXT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_PIXEL_MIN_FILTER_EXT", 23)) {
    /*                               ^             */
#ifdef GL_PIXEL_MIN_FILTER_EXT
      *iv_return = GL_PIXEL_MIN_FILTER_EXT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_POLYGON_OFFSET_POINT", 23)) {
    /*                               ^             */
#ifdef GL_POLYGON_OFFSET_POINT
      *iv_return = GL_POLYGON_OFFSET_POINT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_POLYGON_OFFSET_UNITS", 23)) {
    /*                               ^             */
#ifdef GL_POLYGON_OFFSET_UNITS
      *iv_return = GL_POLYGON_OFFSET_UNITS;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_PRIMITIVE_RESTART_NV", 23)) {
    /*                               ^             */
#ifdef GL_PRIMITIVE_RESTART_NV
      *iv_return = GL_PRIMITIVE_RESTART_NV;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_PROVOKING_VERTEX_EXT", 23)) {
    /*                               ^             */
#ifdef GL_PROVOKING_VERTEX_EXT
      *iv_return = GL_PROVOKING_VERTEX_EXT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_SHADER_CONSISTENT_NV", 23)) {
    /*                               ^             */
#ifdef GL_SHADER_CONSISTENT_NV
      *iv_return = GL_SHADER_CONSISTENT_NV;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_STORAGE_CLIENT_APPLE", 23)) {
    /*                               ^             */
#ifdef GL_STORAGE_CLIENT_APPLE
      *iv_return = GL_STORAGE_CLIENT_APPLE;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_TESS_CONTROL_TEXTURE", 23)) {
    /*                               ^             */
#ifdef GL_TESS_CONTROL_TEXTURE
      *iv_return = GL_TESS_CONTROL_TEXTURE;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_TRANSFORM_HINT_APPLE", 23)) {
    /*                               ^             */
#ifdef GL_TRANSFORM_HINT_APPLE
      *iv_return = GL_TRANSFORM_HINT_APPLE;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_UNSIGNED_IDENTITY_NV", 23)) {
    /*                               ^             */
#ifdef GL_UNSIGNED_IDENTITY_NV
      *iv_return = GL_UNSIGNED_IDENTITY_NV;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_UNSIGNED_SHORT_5_6_5", 23)) {
    /*                               ^             */
#ifdef GL_UNSIGNED_SHORT_5_6_5
      *iv_return = GL_UNSIGNED_SHORT_5_6_5;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_VIEW_CLASS_RGTC1_RED", 23)) {
    /*                               ^             */
#ifdef GL_VIEW_CLASS_RGTC1_RED
      *iv_return = GL_VIEW_CLASS_RGTC1_RED;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case 'U':
    if (memEQ(name, "GL_GEOMETRY_OUTPUT_TYPE", 23)) {
    /*                               ^             */
#ifdef GL_GEOMETRY_OUTPUT_TYPE
      *iv_return = GL_GEOMETRY_OUTPUT_TYPE;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_INT_SAMPLER_CUBE_EXT", 23)) {
    /*                               ^             */
#ifdef GL_INT_SAMPLER_CUBE_EXT
      *iv_return = GL_INT_SAMPLER_CUBE_EXT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_OP_CROSS_PRODUCT_EXT", 23)) {
    /*                               ^             */
#ifdef GL_OP_CROSS_PRODUCT_EXT
      *iv_return = GL_OP_CROSS_PRODUCT_EXT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case 'V':
    if (memEQ(name, "GL_MIN_SPARSE_LEVEL_AMD", 23)) {
    /*                               ^             */
#ifdef GL_MIN_SPARSE_LEVEL_AMD
      *iv_return = GL_MIN_SPARSE_LEVEL_AMD;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_R1UI_C4F_N3F_V3F_SUN", 23)) {
    /*                               ^             */
#ifdef GL_R1UI_C4F_N3F_V3F_SUN
      *iv_return = GL_R1UI_C4F_N3F_V3F_SUN;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_R1UI_T2F_N3F_V3F_SUN", 23)) {
    /*                               ^             */
#ifdef GL_R1UI_T2F_N3F_V3F_SUN
      *iv_return = GL_R1UI_T2F_N3F_V3F_SUN;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case 'W':
    if (memEQ(name, "GL_LIGHT_MODEL_TWO_SIDE", 23)) {
    /*                               ^             */
#ifdef GL_LIGHT_MODEL_TWO_SIDE
      *iv_return = GL_LIGHT_MODEL_TWO_SIDE;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_UNIFORM_IS_ROW_MAJOR", 23)) {
    /*                               ^             */
#ifdef GL_UNIFORM_IS_ROW_MAJOR
      *iv_return = GL_UNIFORM_IS_ROW_MAJOR;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case 'Y':
    if (memEQ(name, "GL_COLOR_ARRAY_TYPE_EXT", 23)) {
    /*                               ^             */
#ifdef GL_COLOR_ARRAY_TYPE_EXT
      *iv_return = GL_COLOR_ARRAY_TYPE_EXT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_INDEX_ARRAY_TYPE_EXT", 23)) {
    /*                               ^             */
#ifdef GL_INDEX_ARRAY_TYPE_EXT
      *iv_return = GL_INDEX_ARRAY_TYPE_EXT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_PROGRAM_BINARY_ANGLE", 23)) {
    /*                               ^             */
#ifdef GL_PROGRAM_BINARY_ANGLE
      *iv_return = GL_PROGRAM_BINARY_ANGLE;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_TEXTURE_RED_TYPE_ARB", 23)) {
    /*                               ^             */
#ifdef GL_TEXTURE_RED_TYPE_ARB
      *iv_return = GL_TEXTURE_RED_TYPE_ARB;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_VARIANT_DATATYPE_EXT", 23)) {
    /*                               ^             */
#ifdef GL_VARIANT_DATATYPE_EXT
      *iv_return = GL_VARIANT_DATATYPE_EXT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case '_':
    if (memEQ(name, "GLEW_APPLE_float_pixels", 23)) {
    /*                               ^             */
#ifdef GLEW_APPLE_float_pixels
      *iv_return = GLEW_APPLE_float_pixels;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GLEW_APPLE_pixel_buffer", 23)) {
    /*                               ^             */
#ifdef GLEW_APPLE_pixel_buffer
      *iv_return = GLEW_APPLE_pixel_buffer;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GLEW_ARB_compute_shader", 23)) {
    /*                               ^             */
#ifdef GLEW_ARB_compute_shader
      *iv_return = GLEW_ARB_compute_shader;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GLEW_ARB_texture_gather", 23)) {
    /*                               ^             */
#ifdef GLEW_ARB_texture_gather
      *iv_return = GLEW_ARB_texture_gather;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GLEW_EXT_polygon_offset", 23)) {
    /*                               ^             */
#ifdef GLEW_EXT_polygon_offset
      *iv_return = GLEW_EXT_polygon_offset;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GLEW_EXT_rescale_normal", 23)) {
    /*                               ^             */
#ifdef GLEW_EXT_rescale_normal
      *iv_return = GLEW_EXT_rescale_normal;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GLEW_EXT_texture_object", 23)) {
    /*                               ^             */
#ifdef GLEW_EXT_texture_object
      *iv_return = GLEW_EXT_texture_object;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GLEW_NV_viewport_array2", 23)) {
    /*                               ^             */
#ifdef GLEW_NV_viewport_array2
      *iv_return = GLEW_NV_viewport_array2;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GLEW_REGAL_error_string", 23)) {
    /*                               ^             */
#ifdef GLEW_REGAL_error_string
      *iv_return = GLEW_REGAL_error_string;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_ANGLE_program_binary", 23)) {
    /*                               ^             */
#ifdef GL_ANGLE_program_binary
      *iv_return = GL_ANGLE_program_binary;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_ARB_arrays_of_arrays", 23)) {
    /*                               ^             */
#ifdef GL_ARB_arrays_of_arrays
      *iv_return = GL_ARB_arrays_of_arrays;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_ARB_instanced_arrays", 23)) {
    /*                               ^             */
#ifdef GL_ARB_instanced_arrays
      *iv_return = GL_ARB_instanced_arrays;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_ARB_occlusion_query2", 23)) {
    /*                               ^             */
#ifdef GL_ARB_occlusion_query2
      *iv_return = GL_ARB_occlusion_query2;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_ARB_provoking_vertex", 23)) {
    /*                               ^             */
#ifdef GL_ARB_provoking_vertex
      *iv_return = GL_ARB_provoking_vertex;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_ARB_transpose_matrix", 23)) {
    /*                               ^             */
#ifdef GL_ARB_transpose_matrix
      *iv_return = GL_ARB_transpose_matrix;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_AUTO_GENERATE_MIPMAP", 23)) {
    /*                               ^             */
#ifdef GL_AUTO_GENERATE_MIPMAP
      *iv_return = GL_AUTO_GENERATE_MIPMAP;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_DRAW_INDIRECT_BUFFER", 23)) {
    /*                               ^             */
#ifdef GL_DRAW_INDIRECT_BUFFER
      *iv_return = GL_DRAW_INDIRECT_BUFFER;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_ELEMENT_ARRAY_BUFFER", 23)) {
    /*                               ^             */
#ifdef GL_ELEMENT_ARRAY_BUFFER
      *iv_return = GL_ELEMENT_ARRAY_BUFFER;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_EXT_provoking_vertex", 23)) {
    /*                               ^             */
#ifdef GL_EXT_provoking_vertex
      *iv_return = GL_EXT_provoking_vertex;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_FONT_ASCENDER_BIT_NV", 23)) {
    /*                               ^             */
#ifdef GL_FONT_ASCENDER_BIT_NV
      *iv_return = GL_FONT_ASCENDER_BIT_NV;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_FORCE_BLUE_TO_ONE_NV", 23)) {
    /*                               ^             */
#ifdef GL_FORCE_BLUE_TO_ONE_NV
      *iv_return = GL_FORCE_BLUE_TO_ONE_NV;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_IMAGE_BINDING_ACCESS", 23)) {
    /*                               ^             */
#ifdef GL_IMAGE_BINDING_ACCESS
      *iv_return = GL_IMAGE_BINDING_ACCESS;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_IMAGE_BINDING_FORMAT", 23)) {
    /*                               ^             */
#ifdef GL_IMAGE_BINDING_FORMAT
      *iv_return = GL_IMAGE_BINDING_FORMAT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_LINEAR_MIPMAP_LINEAR", 23)) {
    /*                               ^             */
#ifdef GL_LINEAR_MIPMAP_LINEAR
      *iv_return = GL_LINEAR_MIPMAP_LINEAR;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_PALETTE4_RGB5_A1_OES", 23)) {
    /*                               ^             */
#ifdef GL_PALETTE4_RGB5_A1_OES
      *iv_return = GL_PALETTE4_RGB5_A1_OES;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_PALETTE8_RGB5_A1_OES", 23)) {
    /*                               ^             */
#ifdef GL_PALETTE8_RGB5_A1_OES
      *iv_return = GL_PALETTE8_RGB5_A1_OES;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_PROXY_TEXTURE_1D_EXT", 23)) {
    /*                               ^             */
#ifdef GL_PROXY_TEXTURE_1D_EXT
      *iv_return = GL_PROXY_TEXTURE_1D_EXT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_PROXY_TEXTURE_2D_EXT", 23)) {
    /*                               ^             */
#ifdef GL_PROXY_TEXTURE_2D_EXT
      *iv_return = GL_PROXY_TEXTURE_2D_EXT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_PROXY_TEXTURE_3D_EXT", 23)) {
    /*                               ^             */
#ifdef GL_PROXY_TEXTURE_3D_EXT
      *iv_return = GL_PROXY_TEXTURE_3D_EXT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_SGIS_generate_mipmap", 23)) {
    /*                               ^             */
#ifdef GL_SGIS_generate_mipmap
      *iv_return = GL_SGIS_generate_mipmap;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_SHADER_SOURCE_LENGTH", 23)) {
    /*                               ^             */
#ifdef GL_SHADER_SOURCE_LENGTH
      *iv_return = GL_SHADER_SOURCE_LENGTH;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_TEXTURE_IMAGE_FORMAT", 23)) {
    /*                               ^             */
#ifdef GL_TEXTURE_IMAGE_FORMAT
      *iv_return = GL_TEXTURE_IMAGE_FORMAT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_UNIFORM_ARRAY_STRIDE", 23)) {
    /*                               ^             */
#ifdef GL_UNIFORM_ARRAY_STRIDE
      *iv_return = GL_UNIFORM_ARRAY_STRIDE;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case 'a':
    if (memEQ(name, "GLEW_ARB_shadow_ambient", 23)) {
    /*                               ^             */
#ifdef GLEW_ARB_shadow_ambient
      *iv_return = GLEW_ARB_shadow_ambient;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GLEW_EXT_index_material", 23)) {
    /*                               ^             */
#ifdef GLEW_EXT_index_material
      *iv_return = GLEW_EXT_index_material;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GLEW_HP_image_transform", 23)) {
    /*                               ^             */
#ifdef GLEW_HP_image_transform
      *iv_return = GLEW_HP_image_transform;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GLEW_REGAL_proc_address", 23)) {
    /*                               ^             */
#ifdef GLEW_REGAL_proc_address
      *iv_return = GLEW_REGAL_proc_address;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_ARB_point_parameters", 23)) {
    /*                               ^             */
#ifdef GL_ARB_point_parameters
      *iv_return = GL_ARB_point_parameters;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_EXT_point_parameters", 23)) {
    /*                               ^             */
#ifdef GL_EXT_point_parameters
      *iv_return = GL_EXT_point_parameters;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_SGIX_texture_add_env", 23)) {
    /*                               ^             */
#ifdef GL_SGIX_texture_add_env
      *iv_return = GL_SGIX_texture_add_env;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glBindFragmentShaderATI", 23)) {
    /*                               ^             */
#ifdef glBindFragmentShaderATI
      *iv_return = glBindFragmentShaderATI;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glBlendFuncSeparateiARB", 23)) {
    /*                               ^             */
#ifdef glBlendFuncSeparateiARB
      *iv_return = glBlendFuncSeparateiARB;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glConvolutionParameterf", 23)) {
    /*                               ^             */
#ifdef glConvolutionParameterf
      *iv_return = glConvolutionParameterf;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glConvolutionParameteri", 23)) {
    /*                               ^             */
#ifdef glConvolutionParameteri
      *iv_return = glConvolutionParameteri;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glDebugMessageEnableAMD", 23)) {
    /*                               ^             */
#ifdef glDebugMessageEnableAMD
      *iv_return = glDebugMessageEnableAMD;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glDeleteVertexShaderEXT", 23)) {
    /*                               ^             */
#ifdef glDeleteVertexShaderEXT
      *iv_return = glDeleteVertexShaderEXT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glDrawElementArrayAPPLE", 23)) {
    /*                               ^             */
#ifdef glDrawElementArrayAPPLE
      *iv_return = glDrawElementArrayAPPLE;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glEnableClientStateiEXT", 23)) {
    /*                               ^             */
#ifdef glEnableClientStateiEXT
      *iv_return = glEnableClientStateiEXT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glFragmentMaterialfSGIX", 23)) {
    /*                               ^             */
#ifdef glFragmentMaterialfSGIX
      *iv_return = glFragmentMaterialfSGIX;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glFragmentMaterialfvEXT", 23)) {
    /*                               ^             */
#ifdef glFragmentMaterialfvEXT
      *iv_return = glFragmentMaterialfvEXT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glFragmentMaterialiSGIX", 23)) {
    /*                               ^             */
#ifdef glFragmentMaterialiSGIX
      *iv_return = glFragmentMaterialiSGIX;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glFragmentMaterialivEXT", 23)) {
    /*                               ^             */
#ifdef glFragmentMaterialivEXT
      *iv_return = glFragmentMaterialivEXT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glFramebufferParameteri", 23)) {
    /*                               ^             */
#ifdef glFramebufferParameteri
      *iv_return = glFramebufferParameteri;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glTextureBufferRangeEXT", 23)) {
    /*                               ^             */
#ifdef glTextureBufferRangeEXT
      *iv_return = glTextureBufferRangeEXT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case 'b':
    if (memEQ(name, "GLEW_ATI_envmap_bumpmap", 23)) {
    /*                               ^             */
#ifdef GLEW_ATI_envmap_bumpmap
      *iv_return = GLEW_ATI_envmap_bumpmap;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GLEW_NV_texture_barrier", 23)) {
    /*                               ^             */
#ifdef GLEW_NV_texture_barrier
      *iv_return = GLEW_NV_texture_barrier;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glGetVertexAttribIivEXT", 23)) {
    /*                               ^             */
#ifdef glGetVertexAttribIivEXT
      *iv_return = glGetVertexAttribIivEXT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glGetVertexAttribLdvEXT", 23)) {
    /*                               ^             */
#ifdef glGetVertexAttribLdvEXT
      *iv_return = glGetVertexAttribLdvEXT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case 'c':
    if (memEQ(name, "GL_ARB_sample_locations", 23)) {
    /*                               ^             */
#ifdef GL_ARB_sample_locations
      *iv_return = GL_ARB_sample_locations;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_NV_texture_rectangle", 23)) {
    /*                               ^             */
#ifdef GL_NV_texture_rectangle
      *iv_return = GL_NV_texture_rectangle;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glTessellationFactorAMD", 23)) {
    /*                               ^             */
#ifdef glTessellationFactorAMD
      *iv_return = glTessellationFactorAMD;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case 'd':
    if (memEQ(name, "GL_OES_byte_coordinates", 23)) {
    /*                               ^             */
#ifdef GL_OES_byte_coordinates
      *iv_return = GL_OES_byte_coordinates;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glDrawCommandsAddressNV", 23)) {
    /*                               ^             */
#ifdef glDrawCommandsAddressNV
      *iv_return = glDrawCommandsAddressNV;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glGenFragmentShadersATI", 23)) {
    /*                               ^             */
#ifdef glGenFragmentShadersATI
      *iv_return = glGenFragmentShadersATI;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glIsTransformFeedbackNV", 23)) {
    /*                               ^             */
#ifdef glIsTransformFeedbackNV
      *iv_return = glIsTransformFeedbackNV;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case 'e':
    if (memEQ(name, "GLEW_SGIX_texture_range", 23)) {
    /*                               ^             */
#ifdef GLEW_SGIX_texture_range
      *iv_return = GLEW_SGIX_texture_range;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_AMD_texture_texture4", 23)) {
    /*                               ^             */
#ifdef GL_AMD_texture_texture4
      *iv_return = GL_AMD_texture_texture4;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_ARB_framebuffer_sRGB", 23)) {
    /*                               ^             */
#ifdef GL_ARB_framebuffer_sRGB
      *iv_return = GL_ARB_framebuffer_sRGB;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_ARB_shader_precision", 23)) {
    /*                               ^             */
#ifdef GL_ARB_shader_precision
      *iv_return = GL_ARB_shader_precision;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_EXT_coordinate_frame", 23)) {
    /*                               ^             */
#ifdef GL_EXT_coordinate_frame
      *iv_return = GL_EXT_coordinate_frame;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_EXT_framebuffer_blit", 23)) {
    /*                               ^             */
#ifdef GL_EXT_framebuffer_blit
      *iv_return = GL_EXT_framebuffer_blit;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_EXT_framebuffer_sRGB", 23)) {
    /*                               ^             */
#ifdef GL_EXT_framebuffer_sRGB
      *iv_return = GL_EXT_framebuffer_sRGB;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_OES_single_precision", 23)) {
    /*                               ^             */
#ifdef GL_OES_single_precision
      *iv_return = GL_OES_single_precision;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_SGIX_reference_plane", 23)) {
    /*                               ^             */
#ifdef GL_SGIX_reference_plane
      *iv_return = GL_SGIX_reference_plane;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glBindLightParameterEXT", 23)) {
    /*                               ^             */
#ifdef glBindLightParameterEXT
      *iv_return = glBindLightParameterEXT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glBindTransformFeedback", 23)) {
    /*                               ^             */
#ifdef glBindTransformFeedback
      *iv_return = glBindTransformFeedback;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glBlendEquationSeparate", 23)) {
    /*                               ^             */
#ifdef glBlendEquationSeparate
      *iv_return = glBlendEquationSeparate;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glDrawTransformFeedback", 23)) {
    /*                               ^             */
#ifdef glDrawTransformFeedback
      *iv_return = glDrawTransformFeedback;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glGenOcclusionQueriesNV", 23)) {
    /*                               ^             */
#ifdef glGenOcclusionQueriesNV
      *iv_return = glGenOcclusionQueriesNV;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glGenTransformFeedbacks", 23)) {
    /*                               ^             */
#ifdef glGenTransformFeedbacks
      *iv_return = glGenTransformFeedbacks;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glGenerateTextureMipmap", 23)) {
    /*                               ^             */
#ifdef glGenerateTextureMipmap
      *iv_return = glGenerateTextureMipmap;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glGetAttachedObjectsARB", 23)) {
    /*                               ^             */
#ifdef glGetAttachedObjectsARB
      *iv_return = glGetAttachedObjectsARB;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glGetCompressedTexImage", 23)) {
    /*                               ^             */
#ifdef glGetCompressedTexImage
      *iv_return = glGetCompressedTexImage;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glGetDebugMessageLogAMD", 23)) {
    /*                               ^             */
#ifdef glGetDebugMessageLogAMD
      *iv_return = glGetDebugMessageLogAMD;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glGetDebugMessageLogARB", 23)) {
    /*                               ^             */
#ifdef glGetDebugMessageLogARB
      *iv_return = glGetDebugMessageLogARB;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glGetOcclusionQueryivNV", 23)) {
    /*                               ^             */
#ifdef glGetOcclusionQueryivNV
      *iv_return = glGetOcclusionQueryivNV;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glGetVariantBooleanvEXT", 23)) {
    /*                               ^             */
#ifdef glGetVariantBooleanvEXT
      *iv_return = glGetVariantBooleanvEXT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glInvalidateFramebuffer", 23)) {
    /*                               ^             */
#ifdef glInvalidateFramebuffer
      *iv_return = glInvalidateFramebuffer;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glIsPointInStrokePathNV", 23)) {
    /*                               ^             */
#ifdef glIsPointInStrokePathNV
      *iv_return = glIsPointInStrokePathNV;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glProgramParameter4dvNV", 23)) {
    /*                               ^             */
#ifdef glProgramParameter4dvNV
      *iv_return = glProgramParameter4dvNV;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glProgramParameter4fvNV", 23)) {
    /*                               ^             */
#ifdef glProgramParameter4fvNV
      *iv_return = glProgramParameter4fvNV;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glReplacementCodeubvSUN", 23)) {
    /*                               ^             */
#ifdef glReplacementCodeubvSUN
      *iv_return = glReplacementCodeubvSUN;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glReplacementCodeuivSUN", 23)) {
    /*                               ^             */
#ifdef glReplacementCodeuivSUN
      *iv_return = glReplacementCodeuivSUN;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glReplacementCodeusvSUN", 23)) {
    /*                               ^             */
#ifdef glReplacementCodeusvSUN
      *iv_return = glReplacementCodeusvSUN;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glTexBumpParameterfvATI", 23)) {
    /*                               ^             */
#ifdef glTexBumpParameterfvATI
      *iv_return = glTexBumpParameterfvATI;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glTexBumpParameterivATI", 23)) {
    /*                               ^             */
#ifdef glTexBumpParameterivATI
      *iv_return = glTexBumpParameterivATI;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glTexCoord2fVertex3fSUN", 23)) {
    /*                               ^             */
#ifdef glTexCoord2fVertex3fSUN
      *iv_return = glTexCoord2fVertex3fSUN;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glTexCoord4fVertex4fSUN", 23)) {
    /*                               ^             */
#ifdef glTexCoord4fVertex4fSUN
      *iv_return = glTexCoord4fVertex4fSUN;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glTextureParameterfvEXT", 23)) {
    /*                               ^             */
#ifdef glTextureParameterfvEXT
      *iv_return = glTextureParameterfvEXT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glTextureParameterivEXT", 23)) {
    /*                               ^             */
#ifdef glTextureParameterivEXT
      *iv_return = glTextureParameterivEXT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case 'f':
    if (memEQ(name, "GL_SGIS_texture_filter4", 23)) {
    /*                               ^             */
#ifdef GL_SGIS_texture_filter4
      *iv_return = GL_SGIS_texture_filter4;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glDeleteFramebuffersEXT", 23)) {
    /*                               ^             */
#ifdef glDeleteFramebuffersEXT
      *iv_return = glDeleteFramebuffersEXT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glGetPerfQueryInfoINTEL", 23)) {
    /*                               ^             */
#ifdef glGetPerfQueryInfoINTEL
      *iv_return = glGetPerfQueryInfoINTEL;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glUpdateObjectBufferATI", 23)) {
    /*                               ^             */
#ifdef glUpdateObjectBufferATI
      *iv_return = glUpdateObjectBufferATI;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case 'g':
    if (memEQ(name, "GL_NV_vertex_program1_1", 23)) {
    /*                               ^             */
#ifdef GL_NV_vertex_program1_1
      *iv_return = GL_NV_vertex_program1_1;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glCopyTextureImage1DEXT", 23)) {
    /*                               ^             */
#ifdef glCopyTextureImage1DEXT
      *iv_return = glCopyTextureImage1DEXT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glCopyTextureImage2DEXT", 23)) {
    /*                               ^             */
#ifdef glCopyTextureImage2DEXT
      *iv_return = glCopyTextureImage2DEXT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glGetVariantIntegervEXT", 23)) {
    /*                               ^             */
#ifdef glGetVariantIntegervEXT
      *iv_return = glGetVariantIntegervEXT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glMultiTexSubImage1DEXT", 23)) {
    /*                               ^             */
#ifdef glMultiTexSubImage1DEXT
      *iv_return = glMultiTexSubImage1DEXT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glMultiTexSubImage2DEXT", 23)) {
    /*                               ^             */
#ifdef glMultiTexSubImage2DEXT
      *iv_return = glMultiTexSubImage2DEXT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glMultiTexSubImage3DEXT", 23)) {
    /*                               ^             */
#ifdef glMultiTexSubImage3DEXT
      *iv_return = glMultiTexSubImage3DEXT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glVertexArrayRangeAPPLE", 23)) {
    /*                               ^             */
#ifdef glVertexArrayRangeAPPLE
      *iv_return = glVertexArrayRangeAPPLE;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case 'h':
    if (memEQ(name, "glGetFragmentLightfvEXT", 23)) {
    /*                               ^             */
#ifdef glGetFragmentLightfvEXT
      *iv_return = glGetFragmentLightfvEXT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glGetFragmentLightivEXT", 23)) {
    /*                               ^             */
#ifdef glGetFragmentLightivEXT
      *iv_return = glGetFragmentLightivEXT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case 'i':
    if (memEQ(name, "GL_EXT_vertex_weighting", 23)) {
    /*                               ^             */
#ifdef GL_EXT_vertex_weighting
      *iv_return = GL_EXT_vertex_weighting;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glAreProgramsResidentNV", 23)) {
    /*                               ^             */
#ifdef glAreProgramsResidentNV
      *iv_return = glAreProgramsResidentNV;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glGetQueryObjecti64vEXT", 23)) {
    /*                               ^             */
#ifdef glGetQueryObjecti64vEXT
      *iv_return = glGetQueryObjecti64vEXT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glGetQueryObjectivANGLE", 23)) {
    /*                               ^             */
#ifdef glGetQueryObjectivANGLE
      *iv_return = glGetQueryObjectivANGLE;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glTexImage2DMultisample", 23)) {
    /*                               ^             */
#ifdef glTexImage2DMultisample
      *iv_return = glTexImage2DMultisample;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glTexImage3DMultisample", 23)) {
    /*                               ^             */
#ifdef glTexImage3DMultisample
      *iv_return = glTexImage3DMultisample;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glUniformHandleui64vARB", 23)) {
    /*                               ^             */
#ifdef glUniformHandleui64vARB
      *iv_return = glUniformHandleui64vARB;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glUniformSubroutinesuiv", 23)) {
    /*                               ^             */
#ifdef glUniformSubroutinesuiv
      *iv_return = glUniformSubroutinesuiv;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glVertexAttribPointerNV", 23)) {
    /*                               ^             */
#ifdef glVertexAttribPointerNV
      *iv_return = glVertexAttribPointerNV;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case 'j':
    if (memEQ(name, "glCreateShaderObjectARB", 23)) {
    /*                               ^             */
#ifdef glCreateShaderObjectARB
      *iv_return = glCreateShaderObjectARB;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glVariantArrayObjectATI", 23)) {
    /*                               ^             */
#ifdef glVariantArrayObjectATI
      *iv_return = glVariantArrayObjectATI;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case 'l':
    if (memEQ(name, "GL_ARB_enhanced_layouts", 23)) {
    /*                               ^             */
#ifdef GL_ARB_enhanced_layouts
      *iv_return = GL_ARB_enhanced_layouts;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_NV_texgen_reflection", 23)) {
    /*                               ^             */
#ifdef GL_NV_texgen_reflection
      *iv_return = GL_NV_texgen_reflection;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glGetSeparableFilterEXT", 23)) {
    /*                               ^             */
#ifdef glGetSeparableFilterEXT
      *iv_return = glGetSeparableFilterEXT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glPolygonOffsetClampEXT", 23)) {
    /*                               ^             */
#ifdef glPolygonOffsetClampEXT
      *iv_return = glPolygonOffsetClampEXT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case 'm':
    if (memEQ(name, "GL_EXT_clip_volume_hint", 23)) {
    /*                               ^             */
#ifdef GL_EXT_clip_volume_hint
      *iv_return = GL_EXT_clip_volume_hint;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glColorTableParameterfv", 23)) {
    /*                               ^             */
#ifdef glColorTableParameterfv
      *iv_return = glColorTableParameterfv;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glColorTableParameteriv", 23)) {
    /*                               ^             */
#ifdef glColorTableParameteriv
      *iv_return = glColorTableParameteriv;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glCommandListSegmentsNV", 23)) {
    /*                               ^             */
#ifdef glCommandListSegmentsNV
      *iv_return = glCommandListSegmentsNV;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glGetInternalformati64v", 23)) {
    /*                               ^             */
#ifdef glGetInternalformati64v
      *iv_return = glGetInternalformati64v;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glGetSamplerParameterfv", 23)) {
    /*                               ^             */
#ifdef glGetSamplerParameterfv
      *iv_return = glGetSamplerParameterfv;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glGetSamplerParameteriv", 23)) {
    /*                               ^             */
#ifdef glGetSamplerParameteriv
      *iv_return = glGetSamplerParameteriv;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glGetTextureParameterfv", 23)) {
    /*                               ^             */
#ifdef glGetTextureParameterfv
      *iv_return = glGetTextureParameterfv;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glGetTextureParameteriv", 23)) {
    /*                               ^             */
#ifdef glGetTextureParameteriv
      *iv_return = glGetTextureParameteriv;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case 'n':
    if (memEQ(name, "GLEW_NV_occlusion_query", 23)) {
    /*                               ^             */
#ifdef GLEW_NV_occlusion_query
      *iv_return = GLEW_NV_occlusion_query;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GLEW_SUNX_constant_data", 23)) {
    /*                               ^             */
#ifdef GLEW_SUNX_constant_data
      *iv_return = GLEW_SUNX_constant_data;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_ARB_texture_env_dot3", 23)) {
    /*                               ^             */
#ifdef GL_ARB_texture_env_dot3
      *iv_return = GL_ARB_texture_env_dot3;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_EXT_texture_env_dot3", 23)) {
    /*                               ^             */
#ifdef GL_EXT_texture_env_dot3
      *iv_return = GL_EXT_texture_env_dot3;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_NV_draw_vulkan_image", 23)) {
    /*                               ^             */
#ifdef GL_NV_draw_vulkan_image
      *iv_return = GL_NV_draw_vulkan_image;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glMatrixIndexPointerARB", 23)) {
    /*                               ^             */
#ifdef glMatrixIndexPointerARB
      *iv_return = glMatrixIndexPointerARB;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case 'o':
    if (memEQ(name, "GLEW_ARB_shader_objects", 23)) {
    /*                               ^             */
#ifdef GLEW_ARB_shader_objects
      *iv_return = GLEW_ARB_shader_objects;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GLEW_EXT_blend_logic_op", 23)) {
    /*                               ^             */
#ifdef GLEW_EXT_blend_logic_op
      *iv_return = GLEW_EXT_blend_logic_op;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GLEW_IBM_rasterpos_clip", 23)) {
    /*                               ^             */
#ifdef GLEW_IBM_rasterpos_clip
      *iv_return = GLEW_IBM_rasterpos_clip;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_EXT_texture_lod_bias", 23)) {
    /*                               ^             */
#ifdef GL_EXT_texture_lod_bias
      *iv_return = GL_EXT_texture_lod_bias;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glGetInvariantFloatvEXT", 23)) {
    /*                               ^             */
#ifdef glGetInvariantFloatvEXT
      *iv_return = glGetInvariantFloatvEXT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glGetMapControlPointsNV", 23)) {
    /*                               ^             */
#ifdef glGetMapControlPointsNV
      *iv_return = glGetMapControlPointsNV;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glReleaseShaderCompiler", 23)) {
    /*                               ^             */
#ifdef glReleaseShaderCompiler
      *iv_return = glReleaseShaderCompiler;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glVertexAttribIFormatNV", 23)) {
    /*                               ^             */
#ifdef glVertexAttribIFormatNV
      *iv_return = glVertexAttribIFormatNV;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glVertexAttribLFormatNV", 23)) {
    /*                               ^             */
#ifdef glVertexAttribLFormatNV
      *iv_return = glVertexAttribLFormatNV;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case 'p':
    if (memEQ(name, "GLEW_ARB_matrix_palette", 23)) {
    /*                               ^             */
#ifdef GLEW_ARB_matrix_palette
      *iv_return = GLEW_ARB_matrix_palette;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GLEW_ARB_vertex_program", 23)) {
    /*                               ^             */
#ifdef GLEW_ARB_vertex_program
      *iv_return = GLEW_ARB_vertex_program;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_ARB_fragment_program", 23)) {
    /*                               ^             */
#ifdef GL_ARB_fragment_program
      *iv_return = GL_ARB_fragment_program;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glGetnPolygonStippleARB", 23)) {
    /*                               ^             */
#ifdef glGetnPolygonStippleARB
      *iv_return = glGetnPolygonStippleARB;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case 'r':
    if (memEQ(name, "GLEW_NV_vertex_program2", 23)) {
    /*                               ^             */
#ifdef GLEW_NV_vertex_program2
      *iv_return = GLEW_NV_vertex_program2;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GLEW_NV_vertex_program3", 23)) {
    /*                               ^             */
#ifdef GLEW_NV_vertex_program3
      *iv_return = GLEW_NV_vertex_program3;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GLEW_NV_vertex_program4", 23)) {
    /*                               ^             */
#ifdef GLEW_NV_vertex_program4
      *iv_return = GLEW_NV_vertex_program4;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GLEW_SGIX_list_priority", 23)) {
    /*                               ^             */
#ifdef GLEW_SGIX_list_priority
      *iv_return = GLEW_SGIX_list_priority;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_AMD_gpu_shader_int64", 23)) {
    /*                               ^             */
#ifdef GL_AMD_gpu_shader_int64
      *iv_return = GL_AMD_gpu_shader_int64;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_APPLE_transform_hint", 23)) {
    /*                               ^             */
#ifdef GL_APPLE_transform_hint
      *iv_return = GL_APPLE_transform_hint;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_ARB_gpu_shader_int64", 23)) {
    /*                               ^             */
#ifdef GL_ARB_gpu_shader_int64
      *iv_return = GL_ARB_gpu_shader_int64;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_ARB_map_buffer_range", 23)) {
    /*                               ^             */
#ifdef GL_ARB_map_buffer_range
      *iv_return = GL_ARB_map_buffer_range;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_NV_fragment_program2", 23)) {
    /*                               ^             */
#ifdef GL_NV_fragment_program2
      *iv_return = GL_NV_fragment_program2;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_NV_fragment_program4", 23)) {
    /*                               ^             */
#ifdef GL_NV_fragment_program4
      *iv_return = GL_NV_fragment_program4;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_NV_geometry_program4", 23)) {
    /*                               ^             */
#ifdef GL_NV_geometry_program4
      *iv_return = GL_NV_geometry_program4;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_NV_primitive_restart", 23)) {
    /*                               ^             */
#ifdef GL_NV_primitive_restart
      *iv_return = GL_NV_primitive_restart;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glBufferParameteriAPPLE", 23)) {
    /*                               ^             */
#ifdef glBufferParameteriAPPLE
      *iv_return = glBufferParameteriAPPLE;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glDisableVertexArrayEXT", 23)) {
    /*                               ^             */
#ifdef glDisableVertexArrayEXT
      *iv_return = glDisableVertexArrayEXT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glGetProgramInterfaceiv", 23)) {
    /*                               ^             */
#ifdef glGetProgramInterfaceiv
      *iv_return = glGetProgramInterfaceiv;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glGetTexParameterIivEXT", 23)) {
    /*                               ^             */
#ifdef glGetTexParameterIivEXT
      *iv_return = glGetTexParameterIivEXT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glNamedBufferStorageEXT", 23)) {
    /*                               ^             */
#ifdef glNamedBufferStorageEXT
      *iv_return = glNamedBufferStorageEXT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glNamedProgramStringEXT", 23)) {
    /*                               ^             */
#ifdef glNamedProgramStringEXT
      *iv_return = glNamedProgramStringEXT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glPrimitiveRestartIndex", 23)) {
    /*                               ^             */
#ifdef glPrimitiveRestartIndex
      *iv_return = glPrimitiveRestartIndex;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glSpriteParameterfvSGIX", 23)) {
    /*                               ^             */
#ifdef glSpriteParameterfvSGIX
      *iv_return = glSpriteParameterfvSGIX;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glSpriteParameterivSGIX", 23)) {
    /*                               ^             */
#ifdef glSpriteParameterivSGIX
      *iv_return = glSpriteParameterivSGIX;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glTexCoordPointervINTEL", 23)) {
    /*                               ^             */
#ifdef glTexCoordPointervINTEL
      *iv_return = glTexCoordPointervINTEL;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case 's':
    if (memEQ(name, "GLEW_ARB_buffer_storage", 23)) {
    /*                               ^             */
#ifdef GLEW_ARB_buffer_storage
      *iv_return = GLEW_ARB_buffer_storage;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GLEW_ARB_draw_instanced", 23)) {
    /*                               ^             */
#ifdef GLEW_ARB_draw_instanced
      *iv_return = GLEW_ARB_draw_instanced;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GLEW_ARB_sample_shading", 23)) {
    /*                               ^             */
#ifdef GLEW_ARB_sample_shading
      *iv_return = GLEW_ARB_sample_shading;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GLEW_ATIX_point_sprites", 23)) {
    /*                               ^             */
#ifdef GLEW_ATIX_point_sprites
      *iv_return = GLEW_ATIX_point_sprites;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GLEW_ATI_vertex_streams", 23)) {
    /*                               ^             */
#ifdef GLEW_ATI_vertex_streams
      *iv_return = GLEW_ATI_vertex_streams;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GLEW_EXT_draw_instanced", 23)) {
    /*                               ^             */
#ifdef GLEW_EXT_draw_instanced
      *iv_return = GLEW_EXT_draw_instanced;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GLEW_NV_texture_shader2", 23)) {
    /*                               ^             */
#ifdef GLEW_NV_texture_shader2
      *iv_return = GLEW_NV_texture_shader2;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GLEW_NV_texture_shader3", 23)) {
    /*                               ^             */
#ifdef GLEW_NV_texture_shader3
      *iv_return = GLEW_NV_texture_shader3;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_AMD_sample_positions", 23)) {
    /*                               ^             */
#ifdef GL_AMD_sample_positions
      *iv_return = GL_AMD_sample_positions;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_APPLE_client_storage", 23)) {
    /*                               ^             */
#ifdef GL_APPLE_client_storage
      *iv_return = GL_APPLE_client_storage;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_ARB_geometry_shader4", 23)) {
    /*                               ^             */
#ifdef GL_ARB_geometry_shader4
      *iv_return = GL_ARB_geometry_shader4;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_ATI_separate_stencil", 23)) {
    /*                               ^             */
#ifdef GL_ATI_separate_stencil
      *iv_return = GL_ATI_separate_stencil;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_EXT_geometry_shader4", 23)) {
    /*                               ^             */
#ifdef GL_EXT_geometry_shader4
      *iv_return = GL_EXT_geometry_shader4;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_SGIX_async_histogram", 23)) {
    /*                               ^             */
#ifdef GL_SGIX_async_histogram
      *iv_return = GL_SGIX_async_histogram;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glDebugMessageInsertAMD", 23)) {
    /*                               ^             */
#ifdef glDebugMessageInsertAMD
      *iv_return = glDebugMessageInsertAMD;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glDebugMessageInsertARB", 23)) {
    /*                               ^             */
#ifdef glDebugMessageInsertARB
      *iv_return = glDebugMessageInsertARB;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glDrawElementsInstanced", 23)) {
    /*                               ^             */
#ifdef glDrawElementsInstanced
      *iv_return = glDrawElementsInstanced;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case 't':
    if (memEQ(name, "GLEW_AMD_sparse_texture", 23)) {
    /*                               ^             */
#ifdef GLEW_AMD_sparse_texture
      *iv_return = GLEW_AMD_sparse_texture;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GLEW_ARB_sparse_texture", 23)) {
    /*                               ^             */
#ifdef GLEW_ARB_sparse_texture
      *iv_return = GLEW_ARB_sparse_texture;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GLEW_ARB_viewport_array", 23)) {
    /*                               ^             */
#ifdef GLEW_ARB_viewport_array
      *iv_return = GLEW_ARB_viewport_array;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GLEW_EXT_misc_attribute", 23)) {
    /*                               ^             */
#ifdef GLEW_EXT_misc_attribute
      *iv_return = GLEW_EXT_misc_attribute;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GLEW_MESA_ycbcr_texture", 23)) {
    /*                               ^             */
#ifdef GLEW_MESA_ycbcr_texture
      *iv_return = GLEW_MESA_ycbcr_texture;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GLEW_SGIS_pixel_texture", 23)) {
    /*                               ^             */
#ifdef GLEW_SGIS_pixel_texture
      *iv_return = GLEW_SGIS_pixel_texture;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GLEW_SGIX_depth_texture", 23)) {
    /*                               ^             */
#ifdef GLEW_SGIX_depth_texture
      *iv_return = GLEW_SGIX_depth_texture;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GLEW_SGIX_pixel_texture", 23)) {
    /*                               ^             */
#ifdef GLEW_SGIX_pixel_texture
      *iv_return = GLEW_SGIX_pixel_texture;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_ARB_bindless_texture", 23)) {
    /*                               ^             */
#ifdef GL_ARB_bindless_texture
      *iv_return = GL_ARB_bindless_texture;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_ARB_half_float_pixel", 23)) {
    /*                               ^             */
#ifdef GL_ARB_half_float_pixel
      *iv_return = GL_ARB_half_float_pixel;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_ARB_texture_stencil8", 23)) {
    /*                               ^             */
#ifdef GL_ARB_texture_stencil8
      *iv_return = GL_ARB_texture_stencil8;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_EXT_paletted_texture", 23)) {
    /*                               ^             */
#ifdef GL_EXT_paletted_texture
      *iv_return = GL_EXT_paletted_texture;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_SGIS_sharpen_texture", 23)) {
    /*                               ^             */
#ifdef GL_SGIS_sharpen_texture
      *iv_return = GL_SGIS_sharpen_texture;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glBindAttribLocationARB", 23)) {
    /*                               ^             */
#ifdef glBindAttribLocationARB
      *iv_return = glBindAttribLocationARB;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glCombinerParameterfvNV", 23)) {
    /*                               ^             */
#ifdef glCombinerParameterfvNV
      *iv_return = glCombinerParameterfvNV;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glCombinerParameterivNV", 23)) {
    /*                               ^             */
#ifdef glCombinerParameterivNV
      *iv_return = glCombinerParameterivNV;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glDeletePerfMonitorsAMD", 23)) {
    /*                               ^             */
#ifdef glDeletePerfMonitorsAMD
      *iv_return = glDeletePerfMonitorsAMD;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glFramebufferTextureARB", 23)) {
    /*                               ^             */
#ifdef glFramebufferTextureARB
      *iv_return = glFramebufferTextureARB;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glFramebufferTextureEXT", 23)) {
    /*                               ^             */
#ifdef glFramebufferTextureEXT
      *iv_return = glFramebufferTextureEXT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glGetPerfQueryDataINTEL", 23)) {
    /*                               ^             */
#ifdef glGetPerfQueryDataINTEL
      *iv_return = glGetPerfQueryDataINTEL;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glGetUniformLocationARB", 23)) {
    /*                               ^             */
#ifdef glGetUniformLocationARB
      *iv_return = glGetUniformLocationARB;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glGetVariantPointervEXT", 23)) {
    /*                               ^             */
#ifdef glGetVariantPointervEXT
      *iv_return = glGetVariantPointervEXT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glGlobalAlphaFactorbSUN", 23)) {
    /*                               ^             */
#ifdef glGlobalAlphaFactorbSUN
      *iv_return = glGlobalAlphaFactorbSUN;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glGlobalAlphaFactordSUN", 23)) {
    /*                               ^             */
#ifdef glGlobalAlphaFactordSUN
      *iv_return = glGlobalAlphaFactordSUN;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glGlobalAlphaFactorfSUN", 23)) {
    /*                               ^             */
#ifdef glGlobalAlphaFactorfSUN
      *iv_return = glGlobalAlphaFactorfSUN;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glGlobalAlphaFactoriSUN", 23)) {
    /*                               ^             */
#ifdef glGlobalAlphaFactoriSUN
      *iv_return = glGlobalAlphaFactoriSUN;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glGlobalAlphaFactorsSUN", 23)) {
    /*                               ^             */
#ifdef glGlobalAlphaFactorsSUN
      *iv_return = glGlobalAlphaFactorsSUN;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glMatrixLoadIdentityEXT", 23)) {
    /*                               ^             */
#ifdef glMatrixLoadIdentityEXT
      *iv_return = glMatrixLoadIdentityEXT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glMultiTexParameterfEXT", 23)) {
    /*                               ^             */
#ifdef glMultiTexParameterfEXT
      *iv_return = glMultiTexParameterfEXT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glMultiTexParameteriEXT", 23)) {
    /*                               ^             */
#ifdef glMultiTexParameteriEXT
      *iv_return = glMultiTexParameteriEXT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case 'u':
    if (memEQ(name, "GLEW_EXT_blend_subtract", 23)) {
    /*                               ^             */
#ifdef GLEW_EXT_blend_subtract
      *iv_return = GLEW_EXT_blend_subtract;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GLEW_EXT_color_subtable", 23)) {
    /*                               ^             */
#ifdef GLEW_EXT_color_subtable
      *iv_return = GLEW_EXT_color_subtable;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_ARB_texture_cube_map", 23)) {
    /*                               ^             */
#ifdef GL_ARB_texture_cube_map
      *iv_return = GL_ARB_texture_cube_map;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_EXT_bindable_uniform", 23)) {
    /*                               ^             */
#ifdef GL_EXT_bindable_uniform
      *iv_return = GL_EXT_bindable_uniform;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_EXT_texture_cube_map", 23)) {
    /*                               ^             */
#ifdef GL_EXT_texture_cube_map
      *iv_return = GL_EXT_texture_cube_map;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glGetSharpenTexFuncSGIS", 23)) {
    /*                               ^             */
#ifdef glGetSharpenTexFuncSGIS
      *iv_return = glGetSharpenTexFuncSGIS;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glInvalidateTexSubImage", 23)) {
    /*                               ^             */
#ifdef glInvalidateTexSubImage
      *iv_return = glInvalidateTexSubImage;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glPrioritizeTexturesEXT", 23)) {
    /*                               ^             */
#ifdef glPrioritizeTexturesEXT
      *iv_return = glPrioritizeTexturesEXT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glProgramUniformui64vNV", 23)) {
    /*                               ^             */
#ifdef glProgramUniformui64vNV
      *iv_return = glProgramUniformui64vNV;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glVertexAttribL1ui64ARB", 23)) {
    /*                               ^             */
#ifdef glVertexAttribL1ui64ARB
      *iv_return = glVertexAttribL1ui64ARB;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glVertexAttribL1ui64vNV", 23)) {
    /*                               ^             */
#ifdef glVertexAttribL1ui64vNV
      *iv_return = glVertexAttribL1ui64vNV;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glVertexAttribL2ui64vNV", 23)) {
    /*                               ^             */
#ifdef glVertexAttribL2ui64vNV
      *iv_return = glVertexAttribL2ui64vNV;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glVertexAttribL3ui64vNV", 23)) {
    /*                               ^             */
#ifdef glVertexAttribL3ui64vNV
      *iv_return = glVertexAttribL3ui64vNV;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glVertexAttribL4ui64vNV", 23)) {
    /*                               ^             */
#ifdef glVertexAttribL4ui64vNV
      *iv_return = glVertexAttribL4ui64vNV;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case 'w':
    if (memEQ(name, "GL_EXT_stencil_two_side", 23)) {
    /*                               ^             */
#ifdef GL_EXT_stencil_two_side
      *iv_return = GL_EXT_stencil_two_side;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case 'x':
    if (memEQ(name, "glGetBooleanIndexedvEXT", 23)) {
    /*                               ^             */
#ifdef glGetBooleanIndexedvEXT
      *iv_return = glGetBooleanIndexedvEXT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glGetIntegerIndexedvEXT", 23)) {
    /*                               ^             */
#ifdef glGetIntegerIndexedvEXT
      *iv_return = glGetIntegerIndexedvEXT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glGetPointerIndexedvEXT", 23)) {
    /*                               ^             */
#ifdef glGetPointerIndexedvEXT
      *iv_return = glGetPointerIndexedvEXT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case 'y':
    if (memEQ(name, "glMemoryBarrierByRegion", 23)) {
    /*                               ^             */
#ifdef glMemoryBarrierByRegion
      *iv_return = glMemoryBarrierByRegion;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  }
  return PERL_constant_NOTFOUND;
}

static int
constant_24 (pTHX_ const char *name, IV *iv_return) {
  /* When generated this function returned values for the list of names given
     here.  However, subsequent manual editing may have added or removed some.
     GLEW_AMD_name_gen_delete GLEW_ANGLE_depth_texture GLEW_ANGLE_texture_usage
     GLEW_APPLE_element_array GLEW_APPLE_texture_range GLEW_ARB_fragment_shader
     GLEW_ARB_gpu_shader_fp64 GLEW_ARB_occlusion_query GLEW_ARB_sampler_objects
     GLEW_ARB_sparse_texture2 GLEW_ARB_texture_barrier GLEW_ARB_texture_env_add
     GLEW_ARB_texture_storage GLEW_ARB_texture_swizzle GLEW_ATI_fragment_shader
     GLEW_ERROR_NO_GL_VERSION GLEW_EXT_pixel_transform GLEW_EXT_secondary_color
     GLEW_EXT_sparse_texture2 GLEW_EXT_texture_env_add GLEW_EXT_texture_integer
     GLEW_EXT_texture_swizzle GLEW_EXT_x11_sync_object GLEW_HP_texture_lighting
     GLEW_INGR_interlace_read GLEW_MESAX_texture_stack GLEW_MESA_resize_buffers
     GLEW_NVX_gpu_memory_info GLEW_NV_bindless_texture GLEW_NV_compute_program5
     GLEW_NV_fragment_program GLEW_NV_geometry_shader4 GLEW_NV_gpu_program_fp64
     GLEW_NV_pixel_data_range GLEW_NV_sample_locations GLEW_NV_viewport_swizzle
     GLEW_SGIS_detail_texture GLEW_SGIS_texture_select GLEW_SGIX_ir_instrument1
     GLEW_SGIX_shadow_ambient GLEW_SGIX_vertex_preclip GL_ACTIVE_UNIFORM_BLOCKS
     GL_APPLE_specular_vector GL_ARB_ES2_compatibility GL_ARB_ES3_compatibility
     GL_ARB_half_float_vertex GL_ARB_seamless_cube_map GL_ARB_shader_group_vote
     GL_ARB_shader_image_size GL_ARB_shader_subroutine GL_ARB_stencil_texturing
     GL_ARB_texture_query_lod GL_ARB_texture_rectangle GL_ARB_vertex_array_bgra
     GL_ATI_map_object_buffer GL_ATOMIC_COUNTER_BUFFER GL_BACK_NORMALS_HINT_PGI
     GL_BACK_PRIMARY_COLOR_NV GL_BUFFER_GPU_ADDRESS_NV GL_CIRCULAR_CW_ARC_TO_NV
     GL_CLIENT_ACTIVE_TEXTURE GL_COLOR_ARRAY_COUNT_EXT GL_COLOR_ARRAY_LENGTH_NV
     GL_COLOR_ATTACHMENT0_EXT GL_COLOR_ATTACHMENT1_EXT GL_COLOR_ATTACHMENT2_EXT
     GL_COLOR_ATTACHMENT3_EXT GL_COLOR_ATTACHMENT4_EXT GL_COLOR_ATTACHMENT5_EXT
     GL_COLOR_ATTACHMENT6_EXT GL_COLOR_ATTACHMENT7_EXT GL_COLOR_ATTACHMENT8_EXT
     GL_COLOR_ATTACHMENT9_EXT GL_COLOR_TABLE_BLUE_SIZE GL_COLOR_TABLE_SCALE_SGI
     GL_COLOR_TABLE_WIDTH_EXT GL_COLOR_TABLE_WIDTH_SGI GL_COMBINER_AB_OUTPUT_NV
     GL_COMBINER_CD_OUTPUT_NV GL_COMPLETION_STATUS_ARB GL_COMPRESSED_SLUMINANCE
     GL_COMPRESSED_SRGB8_ETC2 GL_COMPRESSED_SRGB_ALPHA GL_CONTEXT_ROBUST_ACCESS
     GL_CONVOLUTION_HINT_SGIX GL_CONVOLUTION_WIDTH_EXT GL_CURRENT_VERTEX_ATTRIB
     GL_DEBUG_LOGGED_MESSAGES GL_DEBUG_SEVERITY_MEDIUM GL_DEBUG_TYPE_PUSH_GROUP
     GL_DEPTH_BOUNDS_TEST_EXT GL_DEPTH_COMPONENT16_ARB GL_DEPTH_COMPONENT24_ARB
     GL_DEPTH_COMPONENT32F_NV GL_DEPTH_COMPONENT32_ARB GL_DSDT_MAG_INTENSITY_NV
     GL_EVAL_TRIANGULAR_2D_NV GL_EXT_depth_bounds_test GL_EXT_fragment_lighting
     GL_EXT_multi_draw_arrays GL_EXT_stencil_clear_tag GL_EXT_texture_rectangle
     GL_EXT_vertex_array_bgra GL_EXT_window_rectangles GL_EYE_PLANE_ABSOLUTE_NV
     GL_FOG_COORDINATE_SOURCE GL_FOG_OFFSET_VALUE_SGIX GL_FONT_DESCENDER_BIT_NV
     GL_FRAGMENT_LIGHTING_EXT GL_FRAGMENT_MATERIAL_EXT GL_FRAMEBUFFER_UNDEFINED
     GL_FRONT_FACE_COMMAND_NV GL_FULL_STIPPLE_HINT_PGI GL_FUNC_REVERSE_SUBTRACT
     GL_GEOMETRY_VERTICES_OUT GL_GREMEDY_string_marker GL_HORIZONTAL_LINE_TO_NV
     GL_IMAGE_BINDING_LAYERED GL_INDEX_ARRAY_COUNT_EXT GL_INDEX_ARRAY_LENGTH_NV
     GL_INTEL_parallel_arrays GL_INTEL_texture_scissor GL_INTENSITY_FLOAT16_ATI
     GL_INTENSITY_FLOAT32_ATI GL_INTENSITY_SIGNED_SGIX GL_INT_IMAGE_2D_RECT_EXT
     GL_LINEAR_MIPMAP_NEAREST GL_LINE_WIDTH_COMMAND_NV GL_LOSE_CONTEXT_ON_RESET
     GL_LUMINANCE4_ALPHA4_EXT GL_LUMINANCE6_ALPHA2_EXT GL_LUMINANCE8_ALPHA8_EXT
     GL_LUMINANCE_ALPHA8I_EXT GL_LUMINANCE_ALPHA_SNORM GL_LUMINANCE_FLOAT16_ATI
     GL_LUMINANCE_FLOAT32_ATI GL_LUMINANCE_INTEGER_EXT GL_LUMINANCE_SIGNED_SGIX
     GL_MAP_ATTRIB_U_ORDER_NV GL_MAP_ATTRIB_V_ORDER_NV GL_MAT_SHININESS_BIT_PGI
     GL_MAX_ACTIVE_LIGHTS_EXT GL_MAX_COLOR_ATTACHMENTS GL_MAX_CONVOLUTION_WIDTH
     GL_MAX_ELEMENTS_VERTICES GL_MAX_FRAMEBUFFER_WIDTH GL_MAX_IMAGE_SAMPLES_EXT
     GL_MAX_RENDERBUFFER_SIZE GL_MAX_SAMPLE_MASK_WORDS GL_MAX_TEXTURE_COORDS_NV
     GL_MAX_TEXTURE_UNITS_ARB GL_MAX_TRACK_MATRICES_NV GL_MAX_UNIFORM_LOCATIONS
     GL_MODELVIEW0_MATRIX_EXT GL_MODELVIEW1_MATRIX_EXT GL_MODELVIEW_STACK_DEPTH
     GL_MODULATE_SUBTRACT_ATI GL_NAMED_STRING_TYPE_ARB GL_NEAREST_MIPMAP_LINEAR
     GL_NORMAL_ARRAY_LIST_IBM GL_NORMAL_ARRAY_TYPE_EXT GL_NO_RESET_NOTIFICATION
     GL_NUM_SPARSE_LEVELS_ARB GL_NV_conditional_render GL_NV_depth_buffer_float
     GL_NV_light_max_exponent GL_NV_register_combiners GL_NV_shader_buffer_load
     GL_NV_transform_feedback GL_NV_vertex_array_range GL_PACK_IMAGE_HEIGHT_EXT
     GL_PALETTE4_R5_G6_B5_OES GL_PALETTE8_R5_G6_B5_OES GL_PARALLEL_ARRAYS_INTEL
     GL_PATH_CLIENT_LENGTH_NV GL_PATH_COMMAND_COUNT_NV GL_PERFQUERY_FLUSH_INTEL
     GL_PIXEL_COUNTER_BITS_NV GL_PIXEL_MAP_A_TO_A_SIZE GL_PIXEL_MAP_B_TO_B_SIZE
     GL_PIXEL_MAP_G_TO_G_SIZE GL_PIXEL_MAP_I_TO_A_SIZE GL_PIXEL_MAP_I_TO_B_SIZE
     GL_PIXEL_MAP_I_TO_G_SIZE GL_PIXEL_MAP_I_TO_I_SIZE GL_PIXEL_MAP_I_TO_R_SIZE
     GL_PIXEL_MAP_R_TO_R_SIZE GL_PIXEL_MAP_S_TO_S_SIZE GL_PIXEL_PACK_BUFFER_ARB
     GL_PIXEL_PACK_BUFFER_EXT GL_PLUS_CLAMPED_ALPHA_NV GL_POLYGON_OFFSET_FACTOR
     GL_PROGRAM_BINARY_LENGTH GL_PROXY_COLOR_TABLE_SGI GL_QUADRATIC_ATTENUATION
     GL_QUADRATIC_CURVE_TO_NV GL_RASTERIZER_DISCARD_NV GL_REGAL_extension_query
     GL_REGISTER_COMBINERS_NV GL_RENDERBUFFER_RED_SIZE GL_RESAMPLE_DECIMATE_OML
     GL_RGBA_INTEGER_MODE_EXT GL_SAMPLER_1D_SHADOW_ARB GL_SAMPLER_2D_SHADOW_ARB
     GL_SAMPLE_COVERAGE_VALUE GL_SAMPLE_MASK_VALUE_EXT GL_SECONDARY_COLOR_ARRAY
     GL_SELECTION_BUFFER_SIZE GL_SGIX_texture_lod_bias GL_SHADER_BINARY_FORMATS
     GL_SHADER_STORAGE_BUFFER GL_SKIP_MISSING_GLYPH_NV GL_STANDARD_FONT_NAME_NV
     GL_STENCIL_BACK_FAIL_ATI GL_STENCIL_BACK_FUNC_ATI GL_STORAGE_PRIVATE_APPLE
     GL_SUN_read_video_pixels GL_SURFACE_REGISTERED_NV GL_TESSELLATION_MODE_AMD
     GL_TESS_GEN_VERTEX_ORDER GL_TEXTURE_BLUE_SIZE_EXT GL_TEXTURE_BLUE_TYPE_ARB
     GL_TEXTURE_BUFFER_FORMAT GL_TEXTURE_BUFFER_OFFSET GL_TEXTURE_GATHER_SHADOW
     GL_TEXTURE_GEQUAL_R_SGIX GL_TEXTURE_LEQUAL_R_SGIX GL_TEXTURE_RECTANGLE_ARB
     GL_TEXTURE_RECTANGLE_EXT GL_TEXTURE_SWIZZLE_A_EXT GL_TEXTURE_SWIZZLE_B_EXT
     GL_TEXTURE_SWIZZLE_G_EXT GL_TEXTURE_SWIZZLE_R_EXT GL_TRANSFORM_FEEDBACK_NV
     GL_UNIFORM_BLOCK_BINDING GL_UNIFORM_MATRIX_STRIDE GL_UNKNOWN_CONTEXT_RESET
     GL_UNSIGNED_INT8_VEC2_NV GL_UNSIGNED_INT8_VEC3_NV GL_UNSIGNED_INT8_VEC4_NV
     GL_UNSIGNED_INT_24_8_EXT GL_UNSIGNED_INT_IMAGE_1D GL_UNSIGNED_INT_IMAGE_2D
     GL_UNSIGNED_INT_IMAGE_3D GL_UNSIGNED_INT_VEC2_EXT GL_UNSIGNED_INT_VEC3_EXT
     GL_UNSIGNED_INT_VEC4_EXT GL_VERTEX_ARRAY_LIST_IBM GL_VERTEX_ARRAY_RANGE_NV
     GL_VERTEX_ARRAY_SIZE_EXT GL_VERTEX_ARRAY_TYPE_EXT GL_VERTEX_ATTRIB_BINDING
     GL_VERTEX_BINDING_BUFFER GL_VERTEX_BINDING_OFFSET GL_VERTEX_BINDING_STRIDE
     GL_VERTEX_ID_SWIZZLE_AMD GL_VIDEO_BUFFER_PITCH_NV GL_VIEWPORT_BOUNDS_RANGE
     GL_VIEWPORT_SWIZZLE_W_NV GL_VIEWPORT_SWIZZLE_X_NV GL_VIEWPORT_SWIZZLE_Y_NV
     GL_VIEWPORT_SWIZZLE_Z_NV GL_VIEW_CLASS_BPTC_FLOAT GL_VIEW_CLASS_BPTC_UNORM
     GL_WEIGHT_ARRAY_SIZE_ARB GL_WEIGHT_ARRAY_TYPE_ARB glAreTexturesResidentEXT
     glBeginConditionalRender glBeginFragmentShaderATI glBeginTransformFeedback
     glBindTexGenParameterEXT glBlendEquationSeparatei glCheckFramebufferStatus
     glClientActiveTextureARB glClientAttribDefaultEXT glConvolutionFilter1DEXT
     glConvolutionFilter2DEXT glConvolutionParameterfv glConvolutionParameteriv
     glCopyMultiTexImage1DEXT glCopyMultiTexImage2DEXT glCopyNamedBufferSubData
     glCreateProgramObjectARB glCreateProgramPipelines glCreateShaderProgramEXT
     glDebugMessageControlARB glDeleteAsyncMarkersSGIX glDeleteProgramPipelines
     glDeleteRenderbuffersEXT glDisableClientStateiEXT glDrawArraysInstancedARB
     glDrawArraysInstancedEXT glDrawElementsBaseVertex glEdgeFlagPointerListIBM
     glEndConditionalRenderNV glEndTransformFeedbackNV glFlushMappedBufferRange
     glFogCoordPointerListIBM glFragmentLightModelfEXT glFragmentLightModeliEXT
     glFragmentMaterialfvSGIX glFragmentMaterialivSGIX glFrameTerminatorGREMEDY
     glGetBufferParameteri64v glGetFragDataLocationEXT glGetFragmentLightfvSGIX
     glGetFragmentLightivSGIX glGetGraphicsResetStatus glGetNamedBufferPointerv
     glGetOcclusionQueryuivNV glGetProgramResourceName glGetProgramResourcefvNV
     glGetQueryBufferObjectiv glGetQueryObjectui64vEXT glGetQueryObjectuivANGLE
     glGetSamplerParameterIiv glGetTexParameterIuivEXT glGetTextureParameterIiv
     glGetTransformFeedbackiv glGetVertexAttribIuivEXT glGetVertexAttribLi64vNV
     glGetnCompressedTexImage glGetnSeparableFilterARB glGlobalAlphaFactorubSUN
     glGlobalAlphaFactoruiSUN glGlobalAlphaFactorusSUN glMapNamedBufferRangeEXT
     glMapVertexAttrib1dAPPLE glMapVertexAttrib1fAPPLE glMapVertexAttrib2dAPPLE
     glMapVertexAttrib2fAPPLE glMultiModeDrawArraysIBM glMultiTexParameterfvEXT
     glMultiTexParameterivEXT glObjectUnpurgeableAPPLE glPauseTransformFeedback
     glPresentFrameDualFillNV glProgramParameters4dvNV glProgramParameters4fvNV
     glProgramUniform1i64vARB glProgramUniform1ui64ARB glProgramUniform1ui64vNV
     glProgramUniform2i64vARB glProgramUniform2ui64ARB glProgramUniform2ui64vNV
     glProgramUniform3i64vARB glProgramUniform3ui64ARB glProgramUniform3ui64vNV
     glProgramUniform4i64vARB glProgramUniform4ui64ARB glProgramUniform4ui64vNV
     glRenderbufferStorageEXT glSecondaryColorFormatNV glStencilFuncSeparateATI
     glTexCoord2fVertex3fvSUN glTexCoord4fVertex4fvSUN glTexCoordPointerListIBM
     glTextureParameterIivEXT glTextureRenderbufferEXT glVertexAttribDivisorARB
     glVertexAttribL1ui64vARB glVertexAttribPointerARB glVertexWeightPointerEXT
     */
  /* Offset 19 gives the best switch position.  */
  switch (name[19]) {
  case '0':
    if (memEQ(name, "GL_COLOR_ATTACHMENT0_EXT", 24)) {
    /*                                  ^           */
#ifdef GL_COLOR_ATTACHMENT0_EXT
      *iv_return = GL_COLOR_ATTACHMENT0_EXT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case '1':
    if (memEQ(name, "GL_COLOR_ATTACHMENT1_EXT", 24)) {
    /*                                  ^           */
#ifdef GL_COLOR_ATTACHMENT1_EXT
      *iv_return = GL_COLOR_ATTACHMENT1_EXT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glConvolutionFilter1DEXT", 24)) {
    /*                                  ^           */
#ifdef glConvolutionFilter1DEXT
      *iv_return = glConvolutionFilter1DEXT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glCopyMultiTexImage1DEXT", 24)) {
    /*                                  ^           */
#ifdef glCopyMultiTexImage1DEXT
      *iv_return = glCopyMultiTexImage1DEXT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case '2':
    if (memEQ(name, "GL_COLOR_ATTACHMENT2_EXT", 24)) {
    /*                                  ^           */
#ifdef GL_COLOR_ATTACHMENT2_EXT
      *iv_return = GL_COLOR_ATTACHMENT2_EXT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_DEPTH_COMPONENT32F_NV", 24)) {
    /*                                  ^           */
#ifdef GL_DEPTH_COMPONENT32F_NV
      *iv_return = GL_DEPTH_COMPONENT32F_NV;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_DEPTH_COMPONENT32_ARB", 24)) {
    /*                                  ^           */
#ifdef GL_DEPTH_COMPONENT32_ARB
      *iv_return = GL_DEPTH_COMPONENT32_ARB;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_EVAL_TRIANGULAR_2D_NV", 24)) {
    /*                                  ^           */
#ifdef GL_EVAL_TRIANGULAR_2D_NV
      *iv_return = GL_EVAL_TRIANGULAR_2D_NV;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_INTENSITY_FLOAT32_ATI", 24)) {
    /*                                  ^           */
#ifdef GL_INTENSITY_FLOAT32_ATI
      *iv_return = GL_INTENSITY_FLOAT32_ATI;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_LUMINANCE6_ALPHA2_EXT", 24)) {
    /*                                  ^           */
#ifdef GL_LUMINANCE6_ALPHA2_EXT
      *iv_return = GL_LUMINANCE6_ALPHA2_EXT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_LUMINANCE_FLOAT32_ATI", 24)) {
    /*                                  ^           */
#ifdef GL_LUMINANCE_FLOAT32_ATI
      *iv_return = GL_LUMINANCE_FLOAT32_ATI;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_UNSIGNED_INT_VEC2_EXT", 24)) {
    /*                                  ^           */
#ifdef GL_UNSIGNED_INT_VEC2_EXT
      *iv_return = GL_UNSIGNED_INT_VEC2_EXT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glConvolutionFilter2DEXT", 24)) {
    /*                                  ^           */
#ifdef glConvolutionFilter2DEXT
      *iv_return = glConvolutionFilter2DEXT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glCopyMultiTexImage2DEXT", 24)) {
    /*                                  ^           */
#ifdef glCopyMultiTexImage2DEXT
      *iv_return = glCopyMultiTexImage2DEXT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case '3':
    if (memEQ(name, "GL_COLOR_ATTACHMENT3_EXT", 24)) {
    /*                                  ^           */
#ifdef GL_COLOR_ATTACHMENT3_EXT
      *iv_return = GL_COLOR_ATTACHMENT3_EXT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_UNSIGNED_INT_VEC3_EXT", 24)) {
    /*                                  ^           */
#ifdef GL_UNSIGNED_INT_VEC3_EXT
      *iv_return = GL_UNSIGNED_INT_VEC3_EXT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case '4':
    if (memEQ(name, "GL_COLOR_ATTACHMENT4_EXT", 24)) {
    /*                                  ^           */
#ifdef GL_COLOR_ATTACHMENT4_EXT
      *iv_return = GL_COLOR_ATTACHMENT4_EXT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_DEPTH_COMPONENT24_ARB", 24)) {
    /*                                  ^           */
#ifdef GL_DEPTH_COMPONENT24_ARB
      *iv_return = GL_DEPTH_COMPONENT24_ARB;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_LUMINANCE4_ALPHA4_EXT", 24)) {
    /*                                  ^           */
#ifdef GL_LUMINANCE4_ALPHA4_EXT
      *iv_return = GL_LUMINANCE4_ALPHA4_EXT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_UNSIGNED_INT_VEC4_EXT", 24)) {
    /*                                  ^           */
#ifdef GL_UNSIGNED_INT_VEC4_EXT
      *iv_return = GL_UNSIGNED_INT_VEC4_EXT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glGetQueryObjectui64vEXT", 24)) {
    /*                                  ^           */
#ifdef glGetQueryObjectui64vEXT
      *iv_return = glGetQueryObjectui64vEXT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glProgramParameters4dvNV", 24)) {
    /*                                  ^           */
#ifdef glProgramParameters4dvNV
      *iv_return = glProgramParameters4dvNV;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glProgramParameters4fvNV", 24)) {
    /*                                  ^           */
#ifdef glProgramParameters4fvNV
      *iv_return = glProgramParameters4fvNV;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glProgramUniform1i64vARB", 24)) {
    /*                                  ^           */
#ifdef glProgramUniform1i64vARB
      *iv_return = glProgramUniform1i64vARB;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glProgramUniform2i64vARB", 24)) {
    /*                                  ^           */
#ifdef glProgramUniform2i64vARB
      *iv_return = glProgramUniform2i64vARB;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glProgramUniform3i64vARB", 24)) {
    /*                                  ^           */
#ifdef glProgramUniform3i64vARB
      *iv_return = glProgramUniform3i64vARB;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glProgramUniform4i64vARB", 24)) {
    /*                                  ^           */
#ifdef glProgramUniform4i64vARB
      *iv_return = glProgramUniform4i64vARB;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glVertexAttribL1ui64vARB", 24)) {
    /*                                  ^           */
#ifdef glVertexAttribL1ui64vARB
      *iv_return = glVertexAttribL1ui64vARB;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case '5':
    if (memEQ(name, "GL_COLOR_ATTACHMENT5_EXT", 24)) {
    /*                                  ^           */
#ifdef GL_COLOR_ATTACHMENT5_EXT
      *iv_return = GL_COLOR_ATTACHMENT5_EXT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_PALETTE4_R5_G6_B5_OES", 24)) {
    /*                                  ^           */
#ifdef GL_PALETTE4_R5_G6_B5_OES
      *iv_return = GL_PALETTE4_R5_G6_B5_OES;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_PALETTE8_R5_G6_B5_OES", 24)) {
    /*                                  ^           */
#ifdef GL_PALETTE8_R5_G6_B5_OES
      *iv_return = GL_PALETTE8_R5_G6_B5_OES;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case '6':
    if (memEQ(name, "GL_COLOR_ATTACHMENT6_EXT", 24)) {
    /*                                  ^           */
#ifdef GL_COLOR_ATTACHMENT6_EXT
      *iv_return = GL_COLOR_ATTACHMENT6_EXT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_DEPTH_COMPONENT16_ARB", 24)) {
    /*                                  ^           */
#ifdef GL_DEPTH_COMPONENT16_ARB
      *iv_return = GL_DEPTH_COMPONENT16_ARB;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_INTENSITY_FLOAT16_ATI", 24)) {
    /*                                  ^           */
#ifdef GL_INTENSITY_FLOAT16_ATI
      *iv_return = GL_INTENSITY_FLOAT16_ATI;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_LUMINANCE_FLOAT16_ATI", 24)) {
    /*                                  ^           */
#ifdef GL_LUMINANCE_FLOAT16_ATI
      *iv_return = GL_LUMINANCE_FLOAT16_ATI;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glGetVertexAttribLi64vNV", 24)) {
    /*                                  ^           */
#ifdef glGetVertexAttribLi64vNV
      *iv_return = glGetVertexAttribLi64vNV;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glProgramUniform1ui64ARB", 24)) {
    /*                                  ^           */
#ifdef glProgramUniform1ui64ARB
      *iv_return = glProgramUniform1ui64ARB;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glProgramUniform1ui64vNV", 24)) {
    /*                                  ^           */
#ifdef glProgramUniform1ui64vNV
      *iv_return = glProgramUniform1ui64vNV;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glProgramUniform2ui64ARB", 24)) {
    /*                                  ^           */
#ifdef glProgramUniform2ui64ARB
      *iv_return = glProgramUniform2ui64ARB;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glProgramUniform2ui64vNV", 24)) {
    /*                                  ^           */
#ifdef glProgramUniform2ui64vNV
      *iv_return = glProgramUniform2ui64vNV;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glProgramUniform3ui64ARB", 24)) {
    /*                                  ^           */
#ifdef glProgramUniform3ui64ARB
      *iv_return = glProgramUniform3ui64ARB;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glProgramUniform3ui64vNV", 24)) {
    /*                                  ^           */
#ifdef glProgramUniform3ui64vNV
      *iv_return = glProgramUniform3ui64vNV;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glProgramUniform4ui64ARB", 24)) {
    /*                                  ^           */
#ifdef glProgramUniform4ui64ARB
      *iv_return = glProgramUniform4ui64ARB;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glProgramUniform4ui64vNV", 24)) {
    /*                                  ^           */
#ifdef glProgramUniform4ui64vNV
      *iv_return = glProgramUniform4ui64vNV;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case '7':
    if (memEQ(name, "GL_COLOR_ATTACHMENT7_EXT", 24)) {
    /*                                  ^           */
#ifdef GL_COLOR_ATTACHMENT7_EXT
      *iv_return = GL_COLOR_ATTACHMENT7_EXT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case '8':
    if (memEQ(name, "GL_COLOR_ATTACHMENT8_EXT", 24)) {
    /*                                  ^           */
#ifdef GL_COLOR_ATTACHMENT8_EXT
      *iv_return = GL_COLOR_ATTACHMENT8_EXT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_LUMINANCE8_ALPHA8_EXT", 24)) {
    /*                                  ^           */
#ifdef GL_LUMINANCE8_ALPHA8_EXT
      *iv_return = GL_LUMINANCE8_ALPHA8_EXT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_UNSIGNED_INT_24_8_EXT", 24)) {
    /*                                  ^           */
#ifdef GL_UNSIGNED_INT_24_8_EXT
      *iv_return = GL_UNSIGNED_INT_24_8_EXT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case '9':
    if (memEQ(name, "GL_COLOR_ATTACHMENT9_EXT", 24)) {
    /*                                  ^           */
#ifdef GL_COLOR_ATTACHMENT9_EXT
      *iv_return = GL_COLOR_ATTACHMENT9_EXT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case 'A':
    if (memEQ(name, "GL_COMPRESSED_SRGB_ALPHA", 24)) {
    /*                                  ^           */
#ifdef GL_COMPRESSED_SRGB_ALPHA
      *iv_return = GL_COMPRESSED_SRGB_ALPHA;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_LINEAR_MIPMAP_NEAREST", 24)) {
    /*                                  ^           */
#ifdef GL_LINEAR_MIPMAP_NEAREST
      *iv_return = GL_LINEAR_MIPMAP_NEAREST;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_NO_RESET_NOTIFICATION", 24)) {
    /*                                  ^           */
#ifdef GL_NO_RESET_NOTIFICATION
      *iv_return = GL_NO_RESET_NOTIFICATION;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_POLYGON_OFFSET_FACTOR", 24)) {
    /*                                  ^           */
#ifdef GL_POLYGON_OFFSET_FACTOR
      *iv_return = GL_POLYGON_OFFSET_FACTOR;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_QUADRATIC_ATTENUATION", 24)) {
    /*                                  ^           */
#ifdef GL_QUADRATIC_ATTENUATION
      *iv_return = GL_QUADRATIC_ATTENUATION;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_SECONDARY_COLOR_ARRAY", 24)) {
    /*                                  ^           */
#ifdef GL_SECONDARY_COLOR_ARRAY
      *iv_return = GL_SECONDARY_COLOR_ARRAY;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_STORAGE_PRIVATE_APPLE", 24)) {
    /*                                  ^           */
#ifdef GL_STORAGE_PRIVATE_APPLE
      *iv_return = GL_STORAGE_PRIVATE_APPLE;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_TEXTURE_SWIZZLE_A_EXT", 24)) {
    /*                                  ^           */
#ifdef GL_TEXTURE_SWIZZLE_A_EXT
      *iv_return = GL_TEXTURE_SWIZZLE_A_EXT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glGetQueryObjectuivANGLE", 24)) {
    /*                                  ^           */
#ifdef glGetQueryObjectuivANGLE
      *iv_return = glGetQueryObjectuivANGLE;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glMapVertexAttrib1dAPPLE", 24)) {
    /*                                  ^           */
#ifdef glMapVertexAttrib1dAPPLE
      *iv_return = glMapVertexAttrib1dAPPLE;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glMapVertexAttrib1fAPPLE", 24)) {
    /*                                  ^           */
#ifdef glMapVertexAttrib1fAPPLE
      *iv_return = glMapVertexAttrib1fAPPLE;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glMapVertexAttrib2dAPPLE", 24)) {
    /*                                  ^           */
#ifdef glMapVertexAttrib2dAPPLE
      *iv_return = glMapVertexAttrib2dAPPLE;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glMapVertexAttrib2fAPPLE", 24)) {
    /*                                  ^           */
#ifdef glMapVertexAttrib2fAPPLE
      *iv_return = glMapVertexAttrib2fAPPLE;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glObjectUnpurgeableAPPLE", 24)) {
    /*                                  ^           */
#ifdef glObjectUnpurgeableAPPLE
      *iv_return = glObjectUnpurgeableAPPLE;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case 'B':
    if (memEQ(name, "GL_TEXTURE_SWIZZLE_B_EXT", 24)) {
    /*                                  ^           */
#ifdef GL_TEXTURE_SWIZZLE_B_EXT
      *iv_return = GL_TEXTURE_SWIZZLE_B_EXT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case 'C':
    if (memEQ(name, "GL_CONTEXT_ROBUST_ACCESS", 24)) {
    /*                                  ^           */
#ifdef GL_CONTEXT_ROBUST_ACCESS
      *iv_return = GL_CONTEXT_ROBUST_ACCESS;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_STENCIL_BACK_FUNC_ATI", 24)) {
    /*                                  ^           */
#ifdef GL_STENCIL_BACK_FUNC_ATI
      *iv_return = GL_STENCIL_BACK_FUNC_ATI;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_TRANSFORM_FEEDBACK_NV", 24)) {
    /*                                  ^           */
#ifdef GL_TRANSFORM_FEEDBACK_NV
      *iv_return = GL_TRANSFORM_FEEDBACK_NV;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_UNSIGNED_INT8_VEC2_NV", 24)) {
    /*                                  ^           */
#ifdef GL_UNSIGNED_INT8_VEC2_NV
      *iv_return = GL_UNSIGNED_INT8_VEC2_NV;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_UNSIGNED_INT8_VEC3_NV", 24)) {
    /*                                  ^           */
#ifdef GL_UNSIGNED_INT8_VEC3_NV
      *iv_return = GL_UNSIGNED_INT8_VEC3_NV;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_UNSIGNED_INT8_VEC4_NV", 24)) {
    /*                                  ^           */
#ifdef GL_UNSIGNED_INT8_VEC4_NV
      *iv_return = GL_UNSIGNED_INT8_VEC4_NV;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_VIDEO_BUFFER_PITCH_NV", 24)) {
    /*                                  ^           */
#ifdef GL_VIDEO_BUFFER_PITCH_NV
      *iv_return = GL_VIDEO_BUFFER_PITCH_NV;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case 'D':
    if (memEQ(name, "GL_MAX_TEXTURE_COORDS_NV", 24)) {
    /*                                  ^           */
#ifdef GL_MAX_TEXTURE_COORDS_NV
      *iv_return = GL_MAX_TEXTURE_COORDS_NV;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_MODELVIEW_STACK_DEPTH", 24)) {
    /*                                  ^           */
#ifdef GL_MODELVIEW_STACK_DEPTH
      *iv_return = GL_MODELVIEW_STACK_DEPTH;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case 'E':
    if (memEQ(name, "GL_COLOR_TABLE_SCALE_SGI", 24)) {
    /*                                  ^           */
#ifdef GL_COLOR_TABLE_SCALE_SGI
      *iv_return = GL_COLOR_TABLE_SCALE_SGI;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_DEBUG_SEVERITY_MEDIUM", 24)) {
    /*                                  ^           */
#ifdef GL_DEBUG_SEVERITY_MEDIUM
      *iv_return = GL_DEBUG_SEVERITY_MEDIUM;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_MAP_ATTRIB_U_ORDER_NV", 24)) {
    /*                                  ^           */
#ifdef GL_MAP_ATTRIB_U_ORDER_NV
      *iv_return = GL_MAP_ATTRIB_U_ORDER_NV;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_MAP_ATTRIB_V_ORDER_NV", 24)) {
    /*                                  ^           */
#ifdef GL_MAP_ATTRIB_V_ORDER_NV
      *iv_return = GL_MAP_ATTRIB_V_ORDER_NV;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_MAX_TRACK_MATRICES_NV", 24)) {
    /*                                  ^           */
#ifdef GL_MAX_TRACK_MATRICES_NV
      *iv_return = GL_MAX_TRACK_MATRICES_NV;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_NAMED_STRING_TYPE_ARB", 24)) {
    /*                                  ^           */
#ifdef GL_NAMED_STRING_TYPE_ARB
      *iv_return = GL_NAMED_STRING_TYPE_ARB;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_NORMAL_ARRAY_TYPE_EXT", 24)) {
    /*                                  ^           */
#ifdef GL_NORMAL_ARRAY_TYPE_EXT
      *iv_return = GL_NORMAL_ARRAY_TYPE_EXT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_PROGRAM_BINARY_LENGTH", 24)) {
    /*                                  ^           */
#ifdef GL_PROGRAM_BINARY_LENGTH
      *iv_return = GL_PROGRAM_BINARY_LENGTH;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_PROXY_COLOR_TABLE_SGI", 24)) {
    /*                                  ^           */
#ifdef GL_PROXY_COLOR_TABLE_SGI
      *iv_return = GL_PROXY_COLOR_TABLE_SGI;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_RESAMPLE_DECIMATE_OML", 24)) {
    /*                                  ^           */
#ifdef GL_RESAMPLE_DECIMATE_OML
      *iv_return = GL_RESAMPLE_DECIMATE_OML;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_RGBA_INTEGER_MODE_EXT", 24)) {
    /*                                  ^           */
#ifdef GL_RGBA_INTEGER_MODE_EXT
      *iv_return = GL_RGBA_INTEGER_MODE_EXT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_SAMPLE_MASK_VALUE_EXT", 24)) {
    /*                                  ^           */
#ifdef GL_SAMPLE_MASK_VALUE_EXT
      *iv_return = GL_SAMPLE_MASK_VALUE_EXT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_SURFACE_REGISTERED_NV", 24)) {
    /*                                  ^           */
#ifdef GL_SURFACE_REGISTERED_NV
      *iv_return = GL_SURFACE_REGISTERED_NV;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_TESSELLATION_MODE_AMD", 24)) {
    /*                                  ^           */
#ifdef GL_TESSELLATION_MODE_AMD
      *iv_return = GL_TESSELLATION_MODE_AMD;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_TEXTURE_BLUE_SIZE_EXT", 24)) {
    /*                                  ^           */
#ifdef GL_TEXTURE_BLUE_SIZE_EXT
      *iv_return = GL_TEXTURE_BLUE_SIZE_EXT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_TEXTURE_BLUE_TYPE_ARB", 24)) {
    /*                                  ^           */
#ifdef GL_TEXTURE_BLUE_TYPE_ARB
      *iv_return = GL_TEXTURE_BLUE_TYPE_ARB;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_TEXTURE_RECTANGLE_ARB", 24)) {
    /*                                  ^           */
#ifdef GL_TEXTURE_RECTANGLE_ARB
      *iv_return = GL_TEXTURE_RECTANGLE_ARB;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_TEXTURE_RECTANGLE_EXT", 24)) {
    /*                                  ^           */
#ifdef GL_TEXTURE_RECTANGLE_EXT
      *iv_return = GL_TEXTURE_RECTANGLE_EXT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_VERTEX_ARRAY_SIZE_EXT", 24)) {
    /*                                  ^           */
#ifdef GL_VERTEX_ARRAY_SIZE_EXT
      *iv_return = GL_VERTEX_ARRAY_SIZE_EXT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_VERTEX_ARRAY_TYPE_EXT", 24)) {
    /*                                  ^           */
#ifdef GL_VERTEX_ARRAY_TYPE_EXT
      *iv_return = GL_VERTEX_ARRAY_TYPE_EXT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_VERTEX_ID_SWIZZLE_AMD", 24)) {
    /*                                  ^           */
#ifdef GL_VERTEX_ID_SWIZZLE_AMD
      *iv_return = GL_VERTEX_ID_SWIZZLE_AMD;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_WEIGHT_ARRAY_SIZE_ARB", 24)) {
    /*                                  ^           */
#ifdef GL_WEIGHT_ARRAY_SIZE_ARB
      *iv_return = GL_WEIGHT_ARRAY_SIZE_ARB;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_WEIGHT_ARRAY_TYPE_ARB", 24)) {
    /*                                  ^           */
#ifdef GL_WEIGHT_ARRAY_TYPE_ARB
      *iv_return = GL_WEIGHT_ARRAY_TYPE_ARB;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glFrameTerminatorGREMEDY", 24)) {
    /*                                  ^           */
#ifdef glFrameTerminatorGREMEDY
      *iv_return = glFrameTerminatorGREMEDY;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case 'F':
    if (memEQ(name, "GL_FRAMEBUFFER_UNDEFINED", 24)) {
    /*                                  ^           */
#ifdef GL_FRAMEBUFFER_UNDEFINED
      *iv_return = GL_FRAMEBUFFER_UNDEFINED;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_TEXTURE_BUFFER_OFFSET", 24)) {
    /*                                  ^           */
#ifdef GL_TEXTURE_BUFFER_OFFSET
      *iv_return = GL_TEXTURE_BUFFER_OFFSET;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_VERTEX_BINDING_OFFSET", 24)) {
    /*                                  ^           */
#ifdef GL_VERTEX_BINDING_OFFSET
      *iv_return = GL_VERTEX_BINDING_OFFSET;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_VIEW_CLASS_BPTC_FLOAT", 24)) {
    /*                                  ^           */
#ifdef GL_VIEW_CLASS_BPTC_FLOAT
      *iv_return = GL_VIEW_CLASS_BPTC_FLOAT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case 'G':
    if (memEQ(name, "GL_DEBUG_TYPE_PUSH_GROUP", 24)) {
    /*                                  ^           */
#ifdef GL_DEBUG_TYPE_PUSH_GROUP
      *iv_return = GL_DEBUG_TYPE_PUSH_GROUP;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_FRAGMENT_LIGHTING_EXT", 24)) {
    /*                                  ^           */
#ifdef GL_FRAGMENT_LIGHTING_EXT
      *iv_return = GL_FRAGMENT_LIGHTING_EXT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_TEXTURE_SWIZZLE_G_EXT", 24)) {
    /*                                  ^           */
#ifdef GL_TEXTURE_SWIZZLE_G_EXT
      *iv_return = GL_TEXTURE_SWIZZLE_G_EXT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_UNSIGNED_INT_IMAGE_1D", 24)) {
    /*                                  ^           */
#ifdef GL_UNSIGNED_INT_IMAGE_1D
      *iv_return = GL_UNSIGNED_INT_IMAGE_1D;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_UNSIGNED_INT_IMAGE_2D", 24)) {
    /*                                  ^           */
#ifdef GL_UNSIGNED_INT_IMAGE_2D
      *iv_return = GL_UNSIGNED_INT_IMAGE_2D;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_UNSIGNED_INT_IMAGE_3D", 24)) {
    /*                                  ^           */
#ifdef GL_UNSIGNED_INT_IMAGE_3D
      *iv_return = GL_UNSIGNED_INT_IMAGE_3D;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_VERTEX_ARRAY_RANGE_NV", 24)) {
    /*                                  ^           */
#ifdef GL_VERTEX_ARRAY_RANGE_NV
      *iv_return = GL_VERTEX_ARRAY_RANGE_NV;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case 'H':
    if (memEQ(name, "GL_COLOR_TABLE_WIDTH_EXT", 24)) {
    /*                                  ^           */
#ifdef GL_COLOR_TABLE_WIDTH_EXT
      *iv_return = GL_COLOR_TABLE_WIDTH_EXT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_COLOR_TABLE_WIDTH_SGI", 24)) {
    /*                                  ^           */
#ifdef GL_COLOR_TABLE_WIDTH_SGI
      *iv_return = GL_COLOR_TABLE_WIDTH_SGI;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_CONVOLUTION_WIDTH_EXT", 24)) {
    /*                                  ^           */
#ifdef GL_CONVOLUTION_WIDTH_EXT
      *iv_return = GL_CONVOLUTION_WIDTH_EXT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_PLUS_CLAMPED_ALPHA_NV", 24)) {
    /*                                  ^           */
#ifdef GL_PLUS_CLAMPED_ALPHA_NV
      *iv_return = GL_PLUS_CLAMPED_ALPHA_NV;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_TEXTURE_GATHER_SHADOW", 24)) {
    /*                                  ^           */
#ifdef GL_TEXTURE_GATHER_SHADOW
      *iv_return = GL_TEXTURE_GATHER_SHADOW;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case 'I':
    if (memEQ(name, "GL_FONT_DESCENDER_BIT_NV", 24)) {
    /*                                  ^           */
#ifdef GL_FONT_DESCENDER_BIT_NV
      *iv_return = GL_FONT_DESCENDER_BIT_NV;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_LUMINANCE_ALPHA8I_EXT", 24)) {
    /*                                  ^           */
#ifdef GL_LUMINANCE_ALPHA8I_EXT
      *iv_return = GL_LUMINANCE_ALPHA8I_EXT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_NEAREST_MIPMAP_LINEAR", 24)) {
    /*                                  ^           */
#ifdef GL_NEAREST_MIPMAP_LINEAR
      *iv_return = GL_NEAREST_MIPMAP_LINEAR;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_PARALLEL_ARRAYS_INTEL", 24)) {
    /*                                  ^           */
#ifdef GL_PARALLEL_ARRAYS_INTEL
      *iv_return = GL_PARALLEL_ARRAYS_INTEL;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_PERFQUERY_FLUSH_INTEL", 24)) {
    /*                                  ^           */
#ifdef GL_PERFQUERY_FLUSH_INTEL
      *iv_return = GL_PERFQUERY_FLUSH_INTEL;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glGetnCompressedTexImage", 24)) {
    /*                                  ^           */
#ifdef glGetnCompressedTexImage
      *iv_return = glGetnCompressedTexImage;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case 'L':
    if (memEQ(name, "GL_ACTIVE_UNIFORM_BLOCKS", 24)) {
    /*                                  ^           */
#ifdef GL_ACTIVE_UNIFORM_BLOCKS
      *iv_return = GL_ACTIVE_UNIFORM_BLOCKS;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_FRAGMENT_MATERIAL_EXT", 24)) {
    /*                                  ^           */
#ifdef GL_FRAGMENT_MATERIAL_EXT
      *iv_return = GL_FRAGMENT_MATERIAL_EXT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_STENCIL_BACK_FAIL_ATI", 24)) {
    /*                                  ^           */
#ifdef GL_STENCIL_BACK_FAIL_ATI
      *iv_return = GL_STENCIL_BACK_FAIL_ATI;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case 'M':
    if (memEQ(name, "GL_MAX_COLOR_ATTACHMENTS", 24)) {
    /*                                  ^           */
#ifdef GL_MAX_COLOR_ATTACHMENTS
      *iv_return = GL_MAX_COLOR_ATTACHMENTS;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_STANDARD_FONT_NAME_NV", 24)) {
    /*                                  ^           */
#ifdef GL_STANDARD_FONT_NAME_NV
      *iv_return = GL_STANDARD_FONT_NAME_NV;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case 'N':
    if (memEQ(name, "GL_COMPRESSED_SLUMINANCE", 24)) {
    /*                                  ^           */
#ifdef GL_COMPRESSED_SLUMINANCE
      *iv_return = GL_COMPRESSED_SLUMINANCE;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_FRONT_FACE_COMMAND_NV", 24)) {
    /*                                  ^           */
#ifdef GL_FRONT_FACE_COMMAND_NV
      *iv_return = GL_FRONT_FACE_COMMAND_NV;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_LINE_WIDTH_COMMAND_NV", 24)) {
    /*                                  ^           */
#ifdef GL_LINE_WIDTH_COMMAND_NV
      *iv_return = GL_LINE_WIDTH_COMMAND_NV;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_PATH_COMMAND_COUNT_NV", 24)) {
    /*                                  ^           */
#ifdef GL_PATH_COMMAND_COUNT_NV
      *iv_return = GL_PATH_COMMAND_COUNT_NV;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_UNIFORM_BLOCK_BINDING", 24)) {
    /*                                  ^           */
#ifdef GL_UNIFORM_BLOCK_BINDING
      *iv_return = GL_UNIFORM_BLOCK_BINDING;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_VERTEX_ATTRIB_BINDING", 24)) {
    /*                                  ^           */
#ifdef GL_VERTEX_ATTRIB_BINDING
      *iv_return = GL_VERTEX_ATTRIB_BINDING;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case 'O':
    if (memEQ(name, "GL_BACK_PRIMARY_COLOR_NV", 24)) {
    /*                                  ^           */
#ifdef GL_BACK_PRIMARY_COLOR_NV
      *iv_return = GL_BACK_PRIMARY_COLOR_NV;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_FOG_COORDINATE_SOURCE", 24)) {
    /*                                  ^           */
#ifdef GL_FOG_COORDINATE_SOURCE
      *iv_return = GL_FOG_COORDINATE_SOURCE;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_TESS_GEN_VERTEX_ORDER", 24)) {
    /*                                  ^           */
#ifdef GL_TESS_GEN_VERTEX_ORDER
      *iv_return = GL_TESS_GEN_VERTEX_ORDER;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_TEXTURE_BUFFER_FORMAT", 24)) {
    /*                                  ^           */
#ifdef GL_TEXTURE_BUFFER_FORMAT
      *iv_return = GL_TEXTURE_BUFFER_FORMAT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case 'P':
    if (memEQ(name, "GL_SKIP_MISSING_GLYPH_NV", 24)) {
    /*                                  ^           */
#ifdef GL_SKIP_MISSING_GLYPH_NV
      *iv_return = GL_SKIP_MISSING_GLYPH_NV;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case 'R':
    if (memEQ(name, "GLEW_ERROR_NO_GL_VERSION", 24)) {
    /*                                  ^           */
#ifdef GLEW_ERROR_NO_GL_VERSION
      *iv_return = GLEW_ERROR_NO_GL_VERSION;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_LOSE_CONTEXT_ON_RESET", 24)) {
    /*                                  ^           */
#ifdef GL_LOSE_CONTEXT_ON_RESET
      *iv_return = GL_LOSE_CONTEXT_ON_RESET;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_LUMINANCE_INTEGER_EXT", 24)) {
    /*                                  ^           */
#ifdef GL_LUMINANCE_INTEGER_EXT
      *iv_return = GL_LUMINANCE_INTEGER_EXT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_PIXEL_PACK_BUFFER_ARB", 24)) {
    /*                                  ^           */
#ifdef GL_PIXEL_PACK_BUFFER_ARB
      *iv_return = GL_PIXEL_PACK_BUFFER_ARB;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_PIXEL_PACK_BUFFER_EXT", 24)) {
    /*                                  ^           */
#ifdef GL_PIXEL_PACK_BUFFER_EXT
      *iv_return = GL_PIXEL_PACK_BUFFER_EXT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_RASTERIZER_DISCARD_NV", 24)) {
    /*                                  ^           */
#ifdef GL_RASTERIZER_DISCARD_NV
      *iv_return = GL_RASTERIZER_DISCARD_NV;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_REGISTER_COMBINERS_NV", 24)) {
    /*                                  ^           */
#ifdef GL_REGISTER_COMBINERS_NV
      *iv_return = GL_REGISTER_COMBINERS_NV;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_SHADER_BINARY_FORMATS", 24)) {
    /*                                  ^           */
#ifdef GL_SHADER_BINARY_FORMATS
      *iv_return = GL_SHADER_BINARY_FORMATS;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_TEXTURE_SWIZZLE_R_EXT", 24)) {
    /*                                  ^           */
#ifdef GL_TEXTURE_SWIZZLE_R_EXT
      *iv_return = GL_TEXTURE_SWIZZLE_R_EXT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_UNKNOWN_CONTEXT_RESET", 24)) {
    /*                                  ^           */
#ifdef GL_UNKNOWN_CONTEXT_RESET
      *iv_return = GL_UNKNOWN_CONTEXT_RESET;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_VIEWPORT_BOUNDS_RANGE", 24)) {
    /*                                  ^           */
#ifdef GL_VIEWPORT_BOUNDS_RANGE
      *iv_return = GL_VIEWPORT_BOUNDS_RANGE;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glFlushMappedBufferRange", 24)) {
    /*                                  ^           */
#ifdef glFlushMappedBufferRange
      *iv_return = glFlushMappedBufferRange;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case 'S':
    if (memEQ(name, "GL_BUFFER_GPU_ADDRESS_NV", 24)) {
    /*                                  ^           */
#ifdef GL_BUFFER_GPU_ADDRESS_NV
      *iv_return = GL_BUFFER_GPU_ADDRESS_NV;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_COMPLETION_STATUS_ARB", 24)) {
    /*                                  ^           */
#ifdef GL_COMPLETION_STATUS_ARB
      *iv_return = GL_COMPLETION_STATUS_ARB;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_DEBUG_LOGGED_MESSAGES", 24)) {
    /*                                  ^           */
#ifdef GL_DEBUG_LOGGED_MESSAGES
      *iv_return = GL_DEBUG_LOGGED_MESSAGES;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_GEOMETRY_VERTICES_OUT", 24)) {
    /*                                  ^           */
#ifdef GL_GEOMETRY_VERTICES_OUT
      *iv_return = GL_GEOMETRY_VERTICES_OUT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_LUMINANCE_ALPHA_SNORM", 24)) {
    /*                                  ^           */
#ifdef GL_LUMINANCE_ALPHA_SNORM
      *iv_return = GL_LUMINANCE_ALPHA_SNORM;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_MAX_ACTIVE_LIGHTS_EXT", 24)) {
    /*                                  ^           */
#ifdef GL_MAX_ACTIVE_LIGHTS_EXT
      *iv_return = GL_MAX_ACTIVE_LIGHTS_EXT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_MAX_IMAGE_SAMPLES_EXT", 24)) {
    /*                                  ^           */
#ifdef GL_MAX_IMAGE_SAMPLES_EXT
      *iv_return = GL_MAX_IMAGE_SAMPLES_EXT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_MAX_TEXTURE_UNITS_ARB", 24)) {
    /*                                  ^           */
#ifdef GL_MAX_TEXTURE_UNITS_ARB
      *iv_return = GL_MAX_TEXTURE_UNITS_ARB;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_NUM_SPARSE_LEVELS_ARB", 24)) {
    /*                                  ^           */
#ifdef GL_NUM_SPARSE_LEVELS_ARB
      *iv_return = GL_NUM_SPARSE_LEVELS_ARB;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case 'T':
    if (memEQ(name, "GL_BACK_NORMALS_HINT_PGI", 24)) {
    /*                                  ^           */
#ifdef GL_BACK_NORMALS_HINT_PGI
      *iv_return = GL_BACK_NORMALS_HINT_PGI;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_CIRCULAR_CW_ARC_TO_NV", 24)) {
    /*                                  ^           */
#ifdef GL_CIRCULAR_CW_ARC_TO_NV
      *iv_return = GL_CIRCULAR_CW_ARC_TO_NV;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_COLOR_ARRAY_COUNT_EXT", 24)) {
    /*                                  ^           */
#ifdef GL_COLOR_ARRAY_COUNT_EXT
      *iv_return = GL_COLOR_ARRAY_COUNT_EXT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_COLOR_ARRAY_LENGTH_NV", 24)) {
    /*                                  ^           */
#ifdef GL_COLOR_ARRAY_LENGTH_NV
      *iv_return = GL_COLOR_ARRAY_LENGTH_NV;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_CURRENT_VERTEX_ATTRIB", 24)) {
    /*                                  ^           */
#ifdef GL_CURRENT_VERTEX_ATTRIB
      *iv_return = GL_CURRENT_VERTEX_ATTRIB;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_DEPTH_BOUNDS_TEST_EXT", 24)) {
    /*                                  ^           */
#ifdef GL_DEPTH_BOUNDS_TEST_EXT
      *iv_return = GL_DEPTH_BOUNDS_TEST_EXT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_DSDT_MAG_INTENSITY_NV", 24)) {
    /*                                  ^           */
#ifdef GL_DSDT_MAG_INTENSITY_NV
      *iv_return = GL_DSDT_MAG_INTENSITY_NV;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_EYE_PLANE_ABSOLUTE_NV", 24)) {
    /*                                  ^           */
#ifdef GL_EYE_PLANE_ABSOLUTE_NV
      *iv_return = GL_EYE_PLANE_ABSOLUTE_NV;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_FULL_STIPPLE_HINT_PGI", 24)) {
    /*                                  ^           */
#ifdef GL_FULL_STIPPLE_HINT_PGI
      *iv_return = GL_FULL_STIPPLE_HINT_PGI;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_FUNC_REVERSE_SUBTRACT", 24)) {
    /*                                  ^           */
#ifdef GL_FUNC_REVERSE_SUBTRACT
      *iv_return = GL_FUNC_REVERSE_SUBTRACT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_HORIZONTAL_LINE_TO_NV", 24)) {
    /*                                  ^           */
#ifdef GL_HORIZONTAL_LINE_TO_NV
      *iv_return = GL_HORIZONTAL_LINE_TO_NV;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_INDEX_ARRAY_COUNT_EXT", 24)) {
    /*                                  ^           */
#ifdef GL_INDEX_ARRAY_COUNT_EXT
      *iv_return = GL_INDEX_ARRAY_COUNT_EXT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_INDEX_ARRAY_LENGTH_NV", 24)) {
    /*                                  ^           */
#ifdef GL_INDEX_ARRAY_LENGTH_NV
      *iv_return = GL_INDEX_ARRAY_LENGTH_NV;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_INT_IMAGE_2D_RECT_EXT", 24)) {
    /*                                  ^           */
#ifdef GL_INT_IMAGE_2D_RECT_EXT
      *iv_return = GL_INT_IMAGE_2D_RECT_EXT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_MAT_SHININESS_BIT_PGI", 24)) {
    /*                                  ^           */
#ifdef GL_MAT_SHININESS_BIT_PGI
      *iv_return = GL_MAT_SHININESS_BIT_PGI;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_MAX_ELEMENTS_VERTICES", 24)) {
    /*                                  ^           */
#ifdef GL_MAX_ELEMENTS_VERTICES
      *iv_return = GL_MAX_ELEMENTS_VERTICES;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_MAX_UNIFORM_LOCATIONS", 24)) {
    /*                                  ^           */
#ifdef GL_MAX_UNIFORM_LOCATIONS
      *iv_return = GL_MAX_UNIFORM_LOCATIONS;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_MODULATE_SUBTRACT_ATI", 24)) {
    /*                                  ^           */
#ifdef GL_MODULATE_SUBTRACT_ATI
      *iv_return = GL_MODULATE_SUBTRACT_ATI;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_NORMAL_ARRAY_LIST_IBM", 24)) {
    /*                                  ^           */
#ifdef GL_NORMAL_ARRAY_LIST_IBM
      *iv_return = GL_NORMAL_ARRAY_LIST_IBM;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_PACK_IMAGE_HEIGHT_EXT", 24)) {
    /*                                  ^           */
#ifdef GL_PACK_IMAGE_HEIGHT_EXT
      *iv_return = GL_PACK_IMAGE_HEIGHT_EXT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_PATH_CLIENT_LENGTH_NV", 24)) {
    /*                                  ^           */
#ifdef GL_PATH_CLIENT_LENGTH_NV
      *iv_return = GL_PATH_CLIENT_LENGTH_NV;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_PIXEL_COUNTER_BITS_NV", 24)) {
    /*                                  ^           */
#ifdef GL_PIXEL_COUNTER_BITS_NV
      *iv_return = GL_PIXEL_COUNTER_BITS_NV;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_QUADRATIC_CURVE_TO_NV", 24)) {
    /*                                  ^           */
#ifdef GL_QUADRATIC_CURVE_TO_NV
      *iv_return = GL_QUADRATIC_CURVE_TO_NV;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_UNIFORM_MATRIX_STRIDE", 24)) {
    /*                                  ^           */
#ifdef GL_UNIFORM_MATRIX_STRIDE
      *iv_return = GL_UNIFORM_MATRIX_STRIDE;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_VERTEX_ARRAY_LIST_IBM", 24)) {
    /*                                  ^           */
#ifdef GL_VERTEX_ARRAY_LIST_IBM
      *iv_return = GL_VERTEX_ARRAY_LIST_IBM;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_VERTEX_BINDING_STRIDE", 24)) {
    /*                                  ^           */
#ifdef GL_VERTEX_BINDING_STRIDE
      *iv_return = GL_VERTEX_BINDING_STRIDE;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case 'U':
    if (memEQ(name, "GL_ATOMIC_COUNTER_BUFFER", 24)) {
    /*                                  ^           */
#ifdef GL_ATOMIC_COUNTER_BUFFER
      *iv_return = GL_ATOMIC_COUNTER_BUFFER;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_COMBINER_AB_OUTPUT_NV", 24)) {
    /*                                  ^           */
#ifdef GL_COMBINER_AB_OUTPUT_NV
      *iv_return = GL_COMBINER_AB_OUTPUT_NV;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_COMBINER_CD_OUTPUT_NV", 24)) {
    /*                                  ^           */
#ifdef GL_COMBINER_CD_OUTPUT_NV
      *iv_return = GL_COMBINER_CD_OUTPUT_NV;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_SHADER_STORAGE_BUFFER", 24)) {
    /*                                  ^           */
#ifdef GL_SHADER_STORAGE_BUFFER
      *iv_return = GL_SHADER_STORAGE_BUFFER;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_VERTEX_BINDING_BUFFER", 24)) {
    /*                                  ^           */
#ifdef GL_VERTEX_BINDING_BUFFER
      *iv_return = GL_VERTEX_BINDING_BUFFER;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_VIEW_CLASS_BPTC_UNORM", 24)) {
    /*                                  ^           */
#ifdef GL_VIEW_CLASS_BPTC_UNORM
      *iv_return = GL_VIEW_CLASS_BPTC_UNORM;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case 'V':
    if (memEQ(name, "GL_SAMPLE_COVERAGE_VALUE", 24)) {
    /*                                  ^           */
#ifdef GL_SAMPLE_COVERAGE_VALUE
      *iv_return = GL_SAMPLE_COVERAGE_VALUE;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case 'W':
    if (memEQ(name, "GL_MAX_CONVOLUTION_WIDTH", 24)) {
    /*                                  ^           */
#ifdef GL_MAX_CONVOLUTION_WIDTH
      *iv_return = GL_MAX_CONVOLUTION_WIDTH;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_MAX_FRAMEBUFFER_WIDTH", 24)) {
    /*                                  ^           */
#ifdef GL_MAX_FRAMEBUFFER_WIDTH
      *iv_return = GL_MAX_FRAMEBUFFER_WIDTH;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_MAX_SAMPLE_MASK_WORDS", 24)) {
    /*                                  ^           */
#ifdef GL_MAX_SAMPLE_MASK_WORDS
      *iv_return = GL_MAX_SAMPLE_MASK_WORDS;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_SAMPLER_1D_SHADOW_ARB", 24)) {
    /*                                  ^           */
#ifdef GL_SAMPLER_1D_SHADOW_ARB
      *iv_return = GL_SAMPLER_1D_SHADOW_ARB;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_SAMPLER_2D_SHADOW_ARB", 24)) {
    /*                                  ^           */
#ifdef GL_SAMPLER_2D_SHADOW_ARB
      *iv_return = GL_SAMPLER_2D_SHADOW_ARB;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case 'X':
    if (memEQ(name, "GL_CLIENT_ACTIVE_TEXTURE", 24)) {
    /*                                  ^           */
#ifdef GL_CLIENT_ACTIVE_TEXTURE
      *iv_return = GL_CLIENT_ACTIVE_TEXTURE;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_MODELVIEW0_MATRIX_EXT", 24)) {
    /*                                  ^           */
#ifdef GL_MODELVIEW0_MATRIX_EXT
      *iv_return = GL_MODELVIEW0_MATRIX_EXT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_MODELVIEW1_MATRIX_EXT", 24)) {
    /*                                  ^           */
#ifdef GL_MODELVIEW1_MATRIX_EXT
      *iv_return = GL_MODELVIEW1_MATRIX_EXT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case 'Y':
    if (memEQ(name, "GL_IMAGE_BINDING_LAYERED", 24)) {
    /*                                  ^           */
#ifdef GL_IMAGE_BINDING_LAYERED
      *iv_return = GL_IMAGE_BINDING_LAYERED;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case '_':
    if (memEQ(name, "GLEW_ARB_gpu_shader_fp64", 24)) {
    /*                                  ^           */
#ifdef GLEW_ARB_gpu_shader_fp64
      *iv_return = GLEW_ARB_gpu_shader_fp64;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GLEW_INGR_interlace_read", 24)) {
    /*                                  ^           */
#ifdef GLEW_INGR_interlace_read
      *iv_return = GLEW_INGR_interlace_read;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GLEW_NVX_gpu_memory_info", 24)) {
    /*                                  ^           */
#ifdef GLEW_NVX_gpu_memory_info
      *iv_return = GLEW_NVX_gpu_memory_info;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GLEW_NV_gpu_program_fp64", 24)) {
    /*                                  ^           */
#ifdef GLEW_NV_gpu_program_fp64
      *iv_return = GLEW_NV_gpu_program_fp64;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_ARB_shader_group_vote", 24)) {
    /*                                  ^           */
#ifdef GL_ARB_shader_group_vote
      *iv_return = GL_ARB_shader_group_vote;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_ARB_shader_image_size", 24)) {
    /*                                  ^           */
#ifdef GL_ARB_shader_image_size
      *iv_return = GL_ARB_shader_image_size;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_ARB_vertex_array_bgra", 24)) {
    /*                                  ^           */
#ifdef GL_ARB_vertex_array_bgra
      *iv_return = GL_ARB_vertex_array_bgra;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_COLOR_TABLE_BLUE_SIZE", 24)) {
    /*                                  ^           */
#ifdef GL_COLOR_TABLE_BLUE_SIZE
      *iv_return = GL_COLOR_TABLE_BLUE_SIZE;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_COMPRESSED_SRGB8_ETC2", 24)) {
    /*                                  ^           */
#ifdef GL_COMPRESSED_SRGB8_ETC2
      *iv_return = GL_COMPRESSED_SRGB8_ETC2;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_CONVOLUTION_HINT_SGIX", 24)) {
    /*                                  ^           */
#ifdef GL_CONVOLUTION_HINT_SGIX
      *iv_return = GL_CONVOLUTION_HINT_SGIX;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_EXT_depth_bounds_test", 24)) {
    /*                                  ^           */
#ifdef GL_EXT_depth_bounds_test
      *iv_return = GL_EXT_depth_bounds_test;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_EXT_vertex_array_bgra", 24)) {
    /*                                  ^           */
#ifdef GL_EXT_vertex_array_bgra
      *iv_return = GL_EXT_vertex_array_bgra;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_FOG_OFFSET_VALUE_SGIX", 24)) {
    /*                                  ^           */
#ifdef GL_FOG_OFFSET_VALUE_SGIX
      *iv_return = GL_FOG_OFFSET_VALUE_SGIX;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_INTENSITY_SIGNED_SGIX", 24)) {
    /*                                  ^           */
#ifdef GL_INTENSITY_SIGNED_SGIX
      *iv_return = GL_INTENSITY_SIGNED_SGIX;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_LUMINANCE_SIGNED_SGIX", 24)) {
    /*                                  ^           */
#ifdef GL_LUMINANCE_SIGNED_SGIX
      *iv_return = GL_LUMINANCE_SIGNED_SGIX;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_MAX_RENDERBUFFER_SIZE", 24)) {
    /*                                  ^           */
#ifdef GL_MAX_RENDERBUFFER_SIZE
      *iv_return = GL_MAX_RENDERBUFFER_SIZE;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_NV_shader_buffer_load", 24)) {
    /*                                  ^           */
#ifdef GL_NV_shader_buffer_load
      *iv_return = GL_NV_shader_buffer_load;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_PIXEL_MAP_A_TO_A_SIZE", 24)) {
    /*                                  ^           */
#ifdef GL_PIXEL_MAP_A_TO_A_SIZE
      *iv_return = GL_PIXEL_MAP_A_TO_A_SIZE;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_PIXEL_MAP_B_TO_B_SIZE", 24)) {
    /*                                  ^           */
#ifdef GL_PIXEL_MAP_B_TO_B_SIZE
      *iv_return = GL_PIXEL_MAP_B_TO_B_SIZE;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_PIXEL_MAP_G_TO_G_SIZE", 24)) {
    /*                                  ^           */
#ifdef GL_PIXEL_MAP_G_TO_G_SIZE
      *iv_return = GL_PIXEL_MAP_G_TO_G_SIZE;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_PIXEL_MAP_I_TO_A_SIZE", 24)) {
    /*                                  ^           */
#ifdef GL_PIXEL_MAP_I_TO_A_SIZE
      *iv_return = GL_PIXEL_MAP_I_TO_A_SIZE;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_PIXEL_MAP_I_TO_B_SIZE", 24)) {
    /*                                  ^           */
#ifdef GL_PIXEL_MAP_I_TO_B_SIZE
      *iv_return = GL_PIXEL_MAP_I_TO_B_SIZE;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_PIXEL_MAP_I_TO_G_SIZE", 24)) {
    /*                                  ^           */
#ifdef GL_PIXEL_MAP_I_TO_G_SIZE
      *iv_return = GL_PIXEL_MAP_I_TO_G_SIZE;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_PIXEL_MAP_I_TO_I_SIZE", 24)) {
    /*                                  ^           */
#ifdef GL_PIXEL_MAP_I_TO_I_SIZE
      *iv_return = GL_PIXEL_MAP_I_TO_I_SIZE;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_PIXEL_MAP_I_TO_R_SIZE", 24)) {
    /*                                  ^           */
#ifdef GL_PIXEL_MAP_I_TO_R_SIZE
      *iv_return = GL_PIXEL_MAP_I_TO_R_SIZE;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_PIXEL_MAP_R_TO_R_SIZE", 24)) {
    /*                                  ^           */
#ifdef GL_PIXEL_MAP_R_TO_R_SIZE
      *iv_return = GL_PIXEL_MAP_R_TO_R_SIZE;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_PIXEL_MAP_S_TO_S_SIZE", 24)) {
    /*                                  ^           */
#ifdef GL_PIXEL_MAP_S_TO_S_SIZE
      *iv_return = GL_PIXEL_MAP_S_TO_S_SIZE;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_RENDERBUFFER_RED_SIZE", 24)) {
    /*                                  ^           */
#ifdef GL_RENDERBUFFER_RED_SIZE
      *iv_return = GL_RENDERBUFFER_RED_SIZE;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_SELECTION_BUFFER_SIZE", 24)) {
    /*                                  ^           */
#ifdef GL_SELECTION_BUFFER_SIZE
      *iv_return = GL_SELECTION_BUFFER_SIZE;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_SGIX_texture_lod_bias", 24)) {
    /*                                  ^           */
#ifdef GL_SGIX_texture_lod_bias
      *iv_return = GL_SGIX_texture_lod_bias;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_TEXTURE_GEQUAL_R_SGIX", 24)) {
    /*                                  ^           */
#ifdef GL_TEXTURE_GEQUAL_R_SGIX
      *iv_return = GL_TEXTURE_GEQUAL_R_SGIX;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_TEXTURE_LEQUAL_R_SGIX", 24)) {
    /*                                  ^           */
#ifdef GL_TEXTURE_LEQUAL_R_SGIX
      *iv_return = GL_TEXTURE_LEQUAL_R_SGIX;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_VIEWPORT_SWIZZLE_W_NV", 24)) {
    /*                                  ^           */
#ifdef GL_VIEWPORT_SWIZZLE_W_NV
      *iv_return = GL_VIEWPORT_SWIZZLE_W_NV;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_VIEWPORT_SWIZZLE_X_NV", 24)) {
    /*                                  ^           */
#ifdef GL_VIEWPORT_SWIZZLE_X_NV
      *iv_return = GL_VIEWPORT_SWIZZLE_X_NV;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_VIEWPORT_SWIZZLE_Y_NV", 24)) {
    /*                                  ^           */
#ifdef GL_VIEWPORT_SWIZZLE_Y_NV
      *iv_return = GL_VIEWPORT_SWIZZLE_Y_NV;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_VIEWPORT_SWIZZLE_Z_NV", 24)) {
    /*                                  ^           */
#ifdef GL_VIEWPORT_SWIZZLE_Z_NV
      *iv_return = GL_VIEWPORT_SWIZZLE_Z_NV;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case 'a':
    if (memEQ(name, "GLEW_APPLE_element_array", 24)) {
    /*                                  ^           */
#ifdef GLEW_APPLE_element_array
      *iv_return = GLEW_APPLE_element_array;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GLEW_NV_geometry_shader4", 24)) {
    /*                                  ^           */
#ifdef GLEW_NV_geometry_shader4
      *iv_return = GLEW_NV_geometry_shader4;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_ARB_texture_rectangle", 24)) {
    /*                                  ^           */
#ifdef GL_ARB_texture_rectangle
      *iv_return = GL_ARB_texture_rectangle;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_EXT_texture_rectangle", 24)) {
    /*                                  ^           */
#ifdef GL_EXT_texture_rectangle
      *iv_return = GL_EXT_texture_rectangle;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_GREMEDY_string_marker", 24)) {
    /*                                  ^           */
#ifdef GL_GREMEDY_string_marker
      *iv_return = GL_GREMEDY_string_marker;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glCreateShaderProgramEXT", 24)) {
    /*                                  ^           */
#ifdef glCreateShaderProgramEXT
      *iv_return = glCreateShaderProgramEXT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glEndTransformFeedbackNV", 24)) {
    /*                                  ^           */
#ifdef glEndTransformFeedbackNV
      *iv_return = glEndTransformFeedbackNV;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glGetTransformFeedbackiv", 24)) {
    /*                                  ^           */
#ifdef glGetTransformFeedbackiv
      *iv_return = glGetTransformFeedbackiv;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case 'b':
    if (memEQ(name, "GLEW_EXT_x11_sync_object", 24)) {
    /*                                  ^           */
#ifdef GLEW_EXT_x11_sync_object
      *iv_return = GLEW_EXT_x11_sync_object;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GLEW_SGIX_shadow_ambient", 24)) {
    /*                                  ^           */
#ifdef GLEW_SGIX_shadow_ambient
      *iv_return = GLEW_SGIX_shadow_ambient;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glCopyNamedBufferSubData", 24)) {
    /*                                  ^           */
#ifdef glCopyNamedBufferSubData
      *iv_return = glCopyNamedBufferSubData;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case 'c':
    if (memEQ(name, "GLEW_EXT_secondary_color", 24)) {
    /*                                  ^           */
#ifdef GLEW_EXT_secondary_color
      *iv_return = GLEW_EXT_secondary_color;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glCreateProgramObjectARB", 24)) {
    /*                                  ^           */
#ifdef glCreateProgramObjectARB
      *iv_return = glCreateProgramObjectARB;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case 'd':
    if (memEQ(name, "GL_NV_transform_feedback", 24)) {
    /*                                  ^           */
#ifdef GL_NV_transform_feedback
      *iv_return = GL_NV_transform_feedback;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glBeginTransformFeedback", 24)) {
    /*                                  ^           */
#ifdef glBeginTransformFeedback
      *iv_return = glBeginTransformFeedback;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glEndConditionalRenderNV", 24)) {
    /*                                  ^           */
#ifdef glEndConditionalRenderNV
      *iv_return = glEndConditionalRenderNV;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glPauseTransformFeedback", 24)) {
    /*                                  ^           */
#ifdef glPauseTransformFeedback
      *iv_return = glPauseTransformFeedback;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case 'e':
    if (memEQ(name, "GLEW_AMD_name_gen_delete", 24)) {
    /*                                  ^           */
#ifdef GLEW_AMD_name_gen_delete
      *iv_return = GLEW_AMD_name_gen_delete;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GLEW_SGIS_texture_select", 24)) {
    /*                                  ^           */
#ifdef GLEW_SGIS_texture_select
      *iv_return = GLEW_SGIS_texture_select;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GLEW_SGIX_vertex_preclip", 24)) {
    /*                                  ^           */
#ifdef GLEW_SGIX_vertex_preclip
      *iv_return = GLEW_SGIX_vertex_preclip;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_APPLE_specular_vector", 24)) {
    /*                                  ^           */
#ifdef GL_APPLE_specular_vector
      *iv_return = GL_APPLE_specular_vector;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_ARB_half_float_vertex", 24)) {
    /*                                  ^           */
#ifdef GL_ARB_half_float_vertex
      *iv_return = GL_ARB_half_float_vertex;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_ARB_seamless_cube_map", 24)) {
    /*                                  ^           */
#ifdef GL_ARB_seamless_cube_map
      *iv_return = GL_ARB_seamless_cube_map;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_NV_conditional_render", 24)) {
    /*                                  ^           */
#ifdef GL_NV_conditional_render
      *iv_return = GL_NV_conditional_render;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glBeginConditionalRender", 24)) {
    /*                                  ^           */
#ifdef glBeginConditionalRender
      *iv_return = glBeginConditionalRender;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glBeginFragmentShaderATI", 24)) {
    /*                                  ^           */
#ifdef glBeginFragmentShaderATI
      *iv_return = glBeginFragmentShaderATI;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glBindTexGenParameterEXT", 24)) {
    /*                                  ^           */
#ifdef glBindTexGenParameterEXT
      *iv_return = glBindTexGenParameterEXT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glDisableClientStateiEXT", 24)) {
    /*                                  ^           */
#ifdef glDisableClientStateiEXT
      *iv_return = glDisableClientStateiEXT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glDrawArraysInstancedARB", 24)) {
    /*                                  ^           */
#ifdef glDrawArraysInstancedARB
      *iv_return = glDrawArraysInstancedARB;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glDrawArraysInstancedEXT", 24)) {
    /*                                  ^           */
#ifdef glDrawArraysInstancedEXT
      *iv_return = glDrawArraysInstancedEXT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glDrawElementsBaseVertex", 24)) {
    /*                                  ^           */
#ifdef glDrawElementsBaseVertex
      *iv_return = glDrawElementsBaseVertex;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glGetProgramResourceName", 24)) {
    /*                                  ^           */
#ifdef glGetProgramResourceName
      *iv_return = glGetProgramResourceName;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glGetProgramResourcefvNV", 24)) {
    /*                                  ^           */
#ifdef glGetProgramResourcefvNV
      *iv_return = glGetProgramResourcefvNV;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glGetQueryBufferObjectiv", 24)) {
    /*                                  ^           */
#ifdef glGetQueryBufferObjectiv
      *iv_return = glGetQueryBufferObjectiv;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glGetSamplerParameterIiv", 24)) {
    /*                                  ^           */
#ifdef glGetSamplerParameterIiv
      *iv_return = glGetSamplerParameterIiv;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glGetTextureParameterIiv", 24)) {
    /*                                  ^           */
#ifdef glGetTextureParameterIiv
      *iv_return = glGetTextureParameterIiv;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glGetnSeparableFilterARB", 24)) {
    /*                                  ^           */
#ifdef glGetnSeparableFilterARB
      *iv_return = glGetnSeparableFilterARB;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glTextureRenderbufferEXT", 24)) {
    /*                                  ^           */
#ifdef glTextureRenderbufferEXT
      *iv_return = glTextureRenderbufferEXT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glVertexAttribPointerARB", 24)) {
    /*                                  ^           */
#ifdef glVertexAttribPointerARB
      *iv_return = glVertexAttribPointerARB;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glVertexWeightPointerEXT", 24)) {
    /*                                  ^           */
#ifdef glVertexWeightPointerEXT
      *iv_return = glVertexWeightPointerEXT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case 'f':
    if (memEQ(name, "GLEW_MESA_resize_buffers", 24)) {
    /*                                  ^           */
#ifdef GLEW_MESA_resize_buffers
      *iv_return = GLEW_MESA_resize_buffers;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_NV_depth_buffer_float", 24)) {
    /*                                  ^           */
#ifdef GL_NV_depth_buffer_float
      *iv_return = GL_NV_depth_buffer_float;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glMultiTexParameterfvEXT", 24)) {
    /*                                  ^           */
#ifdef glMultiTexParameterfvEXT
      *iv_return = glMultiTexParameterfvEXT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glTexCoord2fVertex3fvSUN", 24)) {
    /*                                  ^           */
#ifdef glTexCoord2fVertex3fvSUN
      *iv_return = glTexCoord2fVertex3fvSUN;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glTexCoord4fVertex4fvSUN", 24)) {
    /*                                  ^           */
#ifdef glTexCoord4fVertex4fvSUN
      *iv_return = glTexCoord4fVertex4fvSUN;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case 'g':
    if (memEQ(name, "GLEW_NV_compute_program5", 24)) {
    /*                                  ^           */
#ifdef GLEW_NV_compute_program5
      *iv_return = GLEW_NV_compute_program5;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glMapNamedBufferRangeEXT", 24)) {
    /*                                  ^           */
#ifdef glMapNamedBufferRangeEXT
      *iv_return = glMapNamedBufferRangeEXT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glRenderbufferStorageEXT", 24)) {
    /*                                  ^           */
#ifdef glRenderbufferStorageEXT
      *iv_return = glRenderbufferStorageEXT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case 'h':
    if (memEQ(name, "GLEW_ARB_fragment_shader", 24)) {
    /*                                  ^           */
#ifdef GLEW_ARB_fragment_shader
      *iv_return = GLEW_ARB_fragment_shader;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GLEW_ATI_fragment_shader", 24)) {
    /*                                  ^           */
#ifdef GLEW_ATI_fragment_shader
      *iv_return = GLEW_ATI_fragment_shader;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GLEW_HP_texture_lighting", 24)) {
    /*                                  ^           */
#ifdef GLEW_HP_texture_lighting
      *iv_return = GLEW_HP_texture_lighting;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_EXT_fragment_lighting", 24)) {
    /*                                  ^           */
#ifdef GL_EXT_fragment_lighting
      *iv_return = GL_EXT_fragment_lighting;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case 'i':
    if (memEQ(name, "GLEW_ARB_texture_swizzle", 24)) {
    /*                                  ^           */
#ifdef GLEW_ARB_texture_swizzle
      *iv_return = GLEW_ARB_texture_swizzle;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GLEW_EXT_texture_swizzle", 24)) {
    /*                                  ^           */
#ifdef GLEW_EXT_texture_swizzle
      *iv_return = GLEW_EXT_texture_swizzle;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GLEW_NV_viewport_swizzle", 24)) {
    /*                                  ^           */
#ifdef GLEW_NV_viewport_swizzle
      *iv_return = GLEW_NV_viewport_swizzle;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_ARB_ES2_compatibility", 24)) {
    /*                                  ^           */
#ifdef GL_ARB_ES2_compatibility
      *iv_return = GL_ARB_ES2_compatibility;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_ARB_ES3_compatibility", 24)) {
    /*                                  ^           */
#ifdef GL_ARB_ES3_compatibility
      *iv_return = GL_ARB_ES3_compatibility;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_INTEL_texture_scissor", 24)) {
    /*                                  ^           */
#ifdef GL_INTEL_texture_scissor
      *iv_return = GL_INTEL_texture_scissor;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_NV_register_combiners", 24)) {
    /*                                  ^           */
#ifdef GL_NV_register_combiners
      *iv_return = GL_NV_register_combiners;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_SUN_read_video_pixels", 24)) {
    /*                                  ^           */
#ifdef GL_SUN_read_video_pixels
      *iv_return = GL_SUN_read_video_pixels;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glGetTexParameterIuivEXT", 24)) {
    /*                                  ^           */
#ifdef glGetTexParameterIuivEXT
      *iv_return = glGetTexParameterIuivEXT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glGetVertexAttribIuivEXT", 24)) {
    /*                                  ^           */
#ifdef glGetVertexAttribIuivEXT
      *iv_return = glGetVertexAttribIuivEXT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glMultiTexParameterivEXT", 24)) {
    /*                                  ^           */
#ifdef glMultiTexParameterivEXT
      *iv_return = glMultiTexParameterivEXT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glPresentFrameDualFillNV", 24)) {
    /*                                  ^           */
#ifdef glPresentFrameDualFillNV
      *iv_return = glPresentFrameDualFillNV;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glTextureParameterIivEXT", 24)) {
    /*                                  ^           */
#ifdef glTextureParameterIivEXT
      *iv_return = glTextureParameterIivEXT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case 'j':
    if (memEQ(name, "GLEW_ARB_sampler_objects", 24)) {
    /*                                  ^           */
#ifdef GLEW_ARB_sampler_objects
      *iv_return = GLEW_ARB_sampler_objects;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case 'l':
    if (memEQ(name, "glClientAttribDefaultEXT", 24)) {
    /*                                  ^           */
#ifdef glClientAttribDefaultEXT
      *iv_return = glClientAttribDefaultEXT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glCreateProgramPipelines", 24)) {
    /*                                  ^           */
#ifdef glCreateProgramPipelines
      *iv_return = glCreateProgramPipelines;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glDeleteProgramPipelines", 24)) {
    /*                                  ^           */
#ifdef glDeleteProgramPipelines
      *iv_return = glDeleteProgramPipelines;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glFragmentLightModelfEXT", 24)) {
    /*                                  ^           */
#ifdef glFragmentLightModelfEXT
      *iv_return = glFragmentLightModelfEXT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glFragmentLightModeliEXT", 24)) {
    /*                                  ^           */
#ifdef glFragmentLightModeliEXT
      *iv_return = glFragmentLightModeliEXT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case 'm':
    if (memEQ(name, "GLEW_SGIX_ir_instrument1", 24)) {
    /*                                  ^           */
#ifdef GLEW_SGIX_ir_instrument1
      *iv_return = GLEW_SGIX_ir_instrument1;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glSecondaryColorFormatNV", 24)) {
    /*                                  ^           */
#ifdef glSecondaryColorFormatNV
      *iv_return = glSecondaryColorFormatNV;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case 'n':
    if (memEQ(name, "GL_EXT_window_rectangles", 24)) {
    /*                                  ^           */
#ifdef GL_EXT_window_rectangles
      *iv_return = GL_EXT_window_rectangles;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glAreTexturesResidentEXT", 24)) {
    /*                                  ^           */
#ifdef glAreTexturesResidentEXT
      *iv_return = glAreTexturesResidentEXT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glGetNamedBufferPointerv", 24)) {
    /*                                  ^           */
#ifdef glGetNamedBufferPointerv
      *iv_return = glGetNamedBufferPointerv;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case 'o':
    if (memEQ(name, "GLEW_ARB_texture_storage", 24)) {
    /*                                  ^           */
#ifdef GLEW_ARB_texture_storage
      *iv_return = GLEW_ARB_texture_storage;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GLEW_NV_fragment_program", 24)) {
    /*                                  ^           */
#ifdef GLEW_NV_fragment_program
      *iv_return = GLEW_NV_fragment_program;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_NV_light_max_exponent", 24)) {
    /*                                  ^           */
#ifdef GL_NV_light_max_exponent
      *iv_return = GL_NV_light_max_exponent;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glDebugMessageControlARB", 24)) {
    /*                                  ^           */
#ifdef glDebugMessageControlARB
      *iv_return = glDebugMessageControlARB;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glGetFragDataLocationEXT", 24)) {
    /*                                  ^           */
#ifdef glGetFragDataLocationEXT
      *iv_return = glGetFragDataLocationEXT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glVertexAttribDivisorARB", 24)) {
    /*                                  ^           */
#ifdef glVertexAttribDivisorARB
      *iv_return = glVertexAttribDivisorARB;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case 'q':
    if (memEQ(name, "GLEW_ARB_occlusion_query", 24)) {
    /*                                  ^           */
#ifdef GLEW_ARB_occlusion_query
      *iv_return = GLEW_ARB_occlusion_query;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_REGAL_extension_query", 24)) {
    /*                                  ^           */
#ifdef GL_REGAL_extension_query
      *iv_return = GL_REGAL_extension_query;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case 'r':
    if (memEQ(name, "GLEW_APPLE_texture_range", 24)) {
    /*                                  ^           */
#ifdef GLEW_APPLE_texture_range
      *iv_return = GLEW_APPLE_texture_range;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GLEW_ARB_texture_barrier", 24)) {
    /*                                  ^           */
#ifdef GLEW_ARB_texture_barrier
      *iv_return = GLEW_ARB_texture_barrier;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GLEW_NV_pixel_data_range", 24)) {
    /*                                  ^           */
#ifdef GLEW_NV_pixel_data_range
      *iv_return = GLEW_NV_pixel_data_range;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_EXT_multi_draw_arrays", 24)) {
    /*                                  ^           */
#ifdef GL_EXT_multi_draw_arrays
      *iv_return = GL_EXT_multi_draw_arrays;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_EXT_stencil_clear_tag", 24)) {
    /*                                  ^           */
#ifdef GL_EXT_stencil_clear_tag
      *iv_return = GL_EXT_stencil_clear_tag;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_INTEL_parallel_arrays", 24)) {
    /*                                  ^           */
#ifdef GL_INTEL_parallel_arrays
      *iv_return = GL_INTEL_parallel_arrays;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_NV_vertex_array_range", 24)) {
    /*                                  ^           */
#ifdef GL_NV_vertex_array_range
      *iv_return = GL_NV_vertex_array_range;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glBlendEquationSeparatei", 24)) {
    /*                                  ^           */
#ifdef glBlendEquationSeparatei
      *iv_return = glBlendEquationSeparatei;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glClientActiveTextureARB", 24)) {
    /*                                  ^           */
#ifdef glClientActiveTextureARB
      *iv_return = glClientActiveTextureARB;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glDeleteRenderbuffersEXT", 24)) {
    /*                                  ^           */
#ifdef glDeleteRenderbuffersEXT
      *iv_return = glDeleteRenderbuffersEXT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glGetBufferParameteri64v", 24)) {
    /*                                  ^           */
#ifdef glGetBufferParameteri64v
      *iv_return = glGetBufferParameteri64v;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case 's':
    if (memEQ(name, "GLEW_EXT_pixel_transform", 24)) {
    /*                                  ^           */
#ifdef GLEW_EXT_pixel_transform
      *iv_return = GLEW_EXT_pixel_transform;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GLEW_MESAX_texture_stack", 24)) {
    /*                                  ^           */
#ifdef GLEW_MESAX_texture_stack
      *iv_return = GLEW_MESAX_texture_stack;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glDeleteAsyncMarkersSGIX", 24)) {
    /*                                  ^           */
#ifdef glDeleteAsyncMarkersSGIX
      *iv_return = glDeleteAsyncMarkersSGIX;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glEdgeFlagPointerListIBM", 24)) {
    /*                                  ^           */
#ifdef glEdgeFlagPointerListIBM
      *iv_return = glEdgeFlagPointerListIBM;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glFogCoordPointerListIBM", 24)) {
    /*                                  ^           */
#ifdef glFogCoordPointerListIBM
      *iv_return = glFogCoordPointerListIBM;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glTexCoordPointerListIBM", 24)) {
    /*                                  ^           */
#ifdef glTexCoordPointerListIBM
      *iv_return = glTexCoordPointerListIBM;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case 't':
    if (memEQ(name, "GLEW_ARB_sparse_texture2", 24)) {
    /*                                  ^           */
#ifdef GLEW_ARB_sparse_texture2
      *iv_return = GLEW_ARB_sparse_texture2;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GLEW_EXT_sparse_texture2", 24)) {
    /*                                  ^           */
#ifdef GLEW_EXT_sparse_texture2
      *iv_return = GLEW_EXT_sparse_texture2;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GLEW_EXT_texture_integer", 24)) {
    /*                                  ^           */
#ifdef GLEW_EXT_texture_integer
      *iv_return = GLEW_EXT_texture_integer;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GLEW_NV_sample_locations", 24)) {
    /*                                  ^           */
#ifdef GLEW_NV_sample_locations
      *iv_return = GLEW_NV_sample_locations;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glCheckFramebufferStatus", 24)) {
    /*                                  ^           */
#ifdef glCheckFramebufferStatus
      *iv_return = glCheckFramebufferStatus;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glConvolutionParameterfv", 24)) {
    /*                                  ^           */
#ifdef glConvolutionParameterfv
      *iv_return = glConvolutionParameterfv;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glConvolutionParameteriv", 24)) {
    /*                                  ^           */
#ifdef glConvolutionParameteriv
      *iv_return = glConvolutionParameteriv;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glGetGraphicsResetStatus", 24)) {
    /*                                  ^           */
#ifdef glGetGraphicsResetStatus
      *iv_return = glGetGraphicsResetStatus;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glStencilFuncSeparateATI", 24)) {
    /*                                  ^           */
#ifdef glStencilFuncSeparateATI
      *iv_return = glStencilFuncSeparateATI;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case 'u':
    if (memEQ(name, "GLEW_ANGLE_texture_usage", 24)) {
    /*                                  ^           */
#ifdef GLEW_ANGLE_texture_usage
      *iv_return = GLEW_ANGLE_texture_usage;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_ARB_shader_subroutine", 24)) {
    /*                                  ^           */
#ifdef GL_ARB_shader_subroutine
      *iv_return = GL_ARB_shader_subroutine;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_ARB_stencil_texturing", 24)) {
    /*                                  ^           */
#ifdef GL_ARB_stencil_texturing
      *iv_return = GL_ARB_stencil_texturing;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_ATI_map_object_buffer", 24)) {
    /*                                  ^           */
#ifdef GL_ATI_map_object_buffer
      *iv_return = GL_ATI_map_object_buffer;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glGetOcclusionQueryuivNV", 24)) {
    /*                                  ^           */
#ifdef glGetOcclusionQueryuivNV
      *iv_return = glGetOcclusionQueryuivNV;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glGlobalAlphaFactorubSUN", 24)) {
    /*                                  ^           */
#ifdef glGlobalAlphaFactorubSUN
      *iv_return = glGlobalAlphaFactorubSUN;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glGlobalAlphaFactoruiSUN", 24)) {
    /*                                  ^           */
#ifdef glGlobalAlphaFactoruiSUN
      *iv_return = glGlobalAlphaFactoruiSUN;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glGlobalAlphaFactorusSUN", 24)) {
    /*                                  ^           */
#ifdef glGlobalAlphaFactorusSUN
      *iv_return = glGlobalAlphaFactorusSUN;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case 'v':
    if (memEQ(name, "GLEW_ARB_texture_env_add", 24)) {
    /*                                  ^           */
#ifdef GLEW_ARB_texture_env_add
      *iv_return = GLEW_ARB_texture_env_add;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GLEW_EXT_texture_env_add", 24)) {
    /*                                  ^           */
#ifdef GLEW_EXT_texture_env_add
      *iv_return = GLEW_EXT_texture_env_add;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glFragmentMaterialfvSGIX", 24)) {
    /*                                  ^           */
#ifdef glFragmentMaterialfvSGIX
      *iv_return = glFragmentMaterialfvSGIX;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glFragmentMaterialivSGIX", 24)) {
    /*                                  ^           */
#ifdef glFragmentMaterialivSGIX
      *iv_return = glFragmentMaterialivSGIX;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glGetFragmentLightfvSGIX", 24)) {
    /*                                  ^           */
#ifdef glGetFragmentLightfvSGIX
      *iv_return = glGetFragmentLightfvSGIX;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glGetFragmentLightivSGIX", 24)) {
    /*                                  ^           */
#ifdef glGetFragmentLightivSGIX
      *iv_return = glGetFragmentLightivSGIX;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case 'x':
    if (memEQ(name, "GLEW_ANGLE_depth_texture", 24)) {
    /*                                  ^           */
#ifdef GLEW_ANGLE_depth_texture
      *iv_return = GLEW_ANGLE_depth_texture;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GLEW_NV_bindless_texture", 24)) {
    /*                                  ^           */
#ifdef GLEW_NV_bindless_texture
      *iv_return = GLEW_NV_bindless_texture;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GLEW_SGIS_detail_texture", 24)) {
    /*                                  ^           */
#ifdef GLEW_SGIS_detail_texture
      *iv_return = GLEW_SGIS_detail_texture;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case 'y':
    if (memEQ(name, "GL_ARB_texture_query_lod", 24)) {
    /*                                  ^           */
#ifdef GL_ARB_texture_query_lod
      *iv_return = GL_ARB_texture_query_lod;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glMultiModeDrawArraysIBM", 24)) {
    /*                                  ^           */
#ifdef glMultiModeDrawArraysIBM
      *iv_return = glMultiModeDrawArraysIBM;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  }
  return PERL_constant_NOTFOUND;
}

static int
constant_25 (pTHX_ const char *name, IV *iv_return) {
  /* When generated this function returned values for the list of names given
     here.  However, subsequent manual editing may have added or removed some.
     GLEW_AMD_gpu_shader_int64 GLEW_AMD_sample_positions
     GLEW_AMD_texture_texture4 GLEW_ANGLE_program_binary
     GLEW_APPLE_client_storage GLEW_APPLE_transform_hint
     GLEW_ARB_arrays_of_arrays GLEW_ARB_bindless_texture
     GLEW_ARB_enhanced_layouts GLEW_ARB_fragment_program
     GLEW_ARB_framebuffer_sRGB GLEW_ARB_geometry_shader4
     GLEW_ARB_gpu_shader_int64 GLEW_ARB_half_float_pixel
     GLEW_ARB_instanced_arrays GLEW_ARB_map_buffer_range
     GLEW_ARB_occlusion_query2 GLEW_ARB_point_parameters
     GLEW_ARB_provoking_vertex GLEW_ARB_sample_locations
     GLEW_ARB_shader_precision GLEW_ARB_texture_cube_map
     GLEW_ARB_texture_env_dot3 GLEW_ARB_texture_stencil8
     GLEW_ARB_transpose_matrix GLEW_ATI_separate_stencil
     GLEW_EXT_bindable_uniform GLEW_EXT_clip_volume_hint
     GLEW_EXT_coordinate_frame GLEW_EXT_framebuffer_blit
     GLEW_EXT_framebuffer_sRGB GLEW_EXT_geometry_shader4
     GLEW_EXT_paletted_texture GLEW_EXT_point_parameters
     GLEW_EXT_provoking_vertex GLEW_EXT_stencil_two_side
     GLEW_EXT_texture_cube_map GLEW_EXT_texture_env_dot3
     GLEW_EXT_texture_lod_bias GLEW_EXT_vertex_weighting
     GLEW_NV_draw_vulkan_image GLEW_NV_fragment_program2
     GLEW_NV_fragment_program4 GLEW_NV_geometry_program4
     GLEW_NV_primitive_restart GLEW_NV_texgen_reflection
     GLEW_NV_texture_rectangle GLEW_NV_vertex_program1_1
     GLEW_OES_byte_coordinates GLEW_OES_single_precision
     GLEW_SGIS_generate_mipmap GLEW_SGIS_sharpen_texture
     GLEW_SGIS_texture_filter4 GLEW_SGIX_async_histogram
     GLEW_SGIX_reference_plane GLEW_SGIX_texture_add_env
     GL_AMD_conservative_depth GL_AMD_draw_buffers_blend
     GL_ANGLE_framebuffer_blit GL_ANGLE_instanced_arrays
     GL_APPLE_object_purgeable GL_ARB_color_buffer_float
     GL_ARB_conservative_depth GL_ARB_depth_buffer_float
     GL_ARB_derivative_control GL_ARB_draw_buffers_blend
     GL_ARB_framebuffer_object GL_ARB_get_program_binary
     GL_ARB_invalidate_subdata GL_ARB_shader_texture_lod
     GL_ARB_texture_rgb10_a2ui GL_ASYNC_DRAW_PIXELS_SGIX
     GL_ASYNC_READ_PIXELS_SGIX GL_ATIX_texture_env_route
     GL_ATI_shader_texture_lod GL_ATTRIB_ARRAY_STRIDE_NV
     GL_BLEND_COLOR_COMMAND_NV GL_BLEND_EQUATION_RGB_EXT
     GL_BUFFER_MAP_POINTER_ARB GL_BUMP_NUM_TEX_UNITS_ATI
     GL_CG_FRAGMENT_SHADER_EXT GL_CIRCULAR_CCW_ARC_TO_NV
     GL_CLAMP_VERTEX_COLOR_ARB GL_CLIENT_ALL_ATTRIB_BITS
     GL_CLIENT_PIXEL_STORE_BIT GL_COLOR_ARRAY_ADDRESS_NV
     GL_COLOR_ARRAY_STRIDE_EXT GL_COLOR_ATTACHMENT10_EXT
     GL_COLOR_ATTACHMENT11_EXT GL_COLOR_ATTACHMENT12_EXT
     GL_COLOR_ATTACHMENT13_EXT GL_COLOR_ATTACHMENT14_EXT
     GL_COLOR_ATTACHMENT15_EXT GL_COLOR_TABLE_ALPHA_SIZE
     GL_COLOR_TABLE_FORMAT_EXT GL_COLOR_TABLE_FORMAT_SGI
     GL_COLOR_TABLE_GREEN_SIZE GL_COMBINER_SUM_OUTPUT_NV
     GL_COMPARE_REF_TO_TEXTURE GL_COMPATIBLE_SUBROUTINES
     GL_CONTEXT_FLAG_DEBUG_BIT GL_CONVOLUTION_FORMAT_EXT
     GL_CONVOLUTION_HEIGHT_EXT GL_COVERAGE_MODULATION_NV
     GL_CURRENT_FOG_COORDINATE GL_CURRENT_TEXTURE_COORDS
     GL_DEBUG_SEVERITY_LOW_AMD GL_DEBUG_SEVERITY_LOW_ARB
     GL_DEBUG_SOURCE_OTHER_ARB GL_DEBUG_TYPE_PERFORMANCE
     GL_DEBUG_TYPE_PORTABILITY GL_DEPTH_COMPONENT16_SGIX
     GL_DEPTH_COMPONENT24_SGIX GL_DEPTH_COMPONENT32_SGIX
     GL_DEPTH_TEXTURE_MODE_ARB GL_DRAW_ARRAYS_COMMAND_NV
     GL_DRAW_FRAMEBUFFER_ANGLE GL_EDGE_FLAG_ARRAY_STRIDE
     GL_ELEMENT_ARRAY_TYPE_ATI GL_EVAL_VERTEX_ATTRIB0_NV
     GL_EVAL_VERTEX_ATTRIB1_NV GL_EVAL_VERTEX_ATTRIB2_NV
     GL_EVAL_VERTEX_ATTRIB3_NV GL_EVAL_VERTEX_ATTRIB4_NV
     GL_EVAL_VERTEX_ATTRIB5_NV GL_EVAL_VERTEX_ATTRIB6_NV
     GL_EVAL_VERTEX_ATTRIB7_NV GL_EVAL_VERTEX_ATTRIB8_NV
     GL_EVAL_VERTEX_ATTRIB9_NV GL_EXT_framebuffer_object
     GL_EXT_raster_multisample GL_EXT_shader_integer_mix
     GL_EXT_texture_edge_clamp GL_EXT_transform_feedback
     GL_FOG_COORD_ARRAY_STRIDE GL_FONT_UNINTELLIGIBLE_NV
     GL_FRAMEBUFFER_RENDERABLE GL_GET_TEXTURE_IMAGE_TYPE
     GL_HISTOGRAM_RED_SIZE_EXT GL_IBM_vertex_array_lists
     GL_IMAGE_BINDING_NAME_EXT GL_IMAGE_CLASS_10_10_10_2
     GL_INDEX_ARRAY_ADDRESS_NV GL_INDEX_ARRAY_STRIDE_EXT
     GL_INNOCENT_CONTEXT_RESET GL_INTEL_framebuffer_CMAA
     GL_INTERLEAVED_ATTRIBS_NV GL_INT_IMAGE_1D_ARRAY_EXT
     GL_INT_IMAGE_2D_ARRAY_EXT GL_INT_SAMPLER_BUFFER_AMD
     GL_INT_SAMPLER_BUFFER_EXT GL_INVARIANT_DATATYPE_EXT
     GL_INVERTED_SCREEN_W_REND GL_LAST_VERTEX_CONVENTION
     GL_LAYER_PROVOKING_VERTEX GL_LINE_WIDTH_GRANULARITY
     GL_LUMINANCE12_ALPHA4_EXT GL_LUMINANCE_ALPHA16F_ARB
     GL_LUMINANCE_ALPHA16I_EXT GL_LUMINANCE_ALPHA32F_ARB
     GL_LUMINANCE_ALPHA32I_EXT GL_LUMINANCE_ALPHA8UI_EXT
     GL_MANUAL_GENERATE_MIPMAP GL_MAP_FLUSH_EXPLICIT_BIT
     GL_MAP_UNSYNCHRONIZED_BIT GL_MATERIAL_SIDE_HINT_PGI
     GL_MATRIX_INDEX_ARRAY_ARB GL_MAX_ATTRIB_STACK_DEPTH
     GL_MAX_CONVOLUTION_HEIGHT GL_MAX_FRAMEBUFFER_HEIGHT
     GL_MAX_FRAMEBUFFER_LAYERS GL_MAX_RASTER_SAMPLES_EXT
     GL_MAX_TEXTURE_COORDS_ARB GL_MAX_UNIFORM_BLOCK_SIZE
     GL_MAX_VARYING_COMPONENTS GL_MAX_VARYING_FLOATS_ARB
     GL_MAX_VERTEX_ATTRIBS_ARB GL_MAX_VERTEX_STREAMS_ATI
     GL_MODULATE_SUBTRACT_ATIX GL_NEAREST_MIPMAP_NEAREST
     GL_NORMAL_ARRAY_COUNT_EXT GL_NORMAL_ARRAY_LENGTH_NV
     GL_NVX_conditional_render GL_NV_conservative_raster
     GL_NV_copy_depth_to_color GL_NV_register_combiners2
     GL_NV_shader_atomic_float GL_NV_shader_atomic_int64
     GL_NV_shader_thread_group GL_NV_texture_multisample
     GL_NV_transform_feedback2 GL_NV_vertex_array_range2
     GL_OBJECT_BUFFER_SIZE_ATI GL_OBJECT_LINK_STATUS_ARB
     GL_OFFSET_TEXTURE_BIAS_NV GL_OP_MULTIPLY_MATRIX_EXT
     GL_OUTPUT_POINT_SIZE_ATIX GL_PATH_ERROR_POSITION_NV
     GL_PATH_GEN_COMPONENTS_NV GL_PER_GPU_STORAGE_BIT_NV
     GL_PER_STAGE_CONSTANTS_NV GL_PIXEL_CUBIC_WEIGHT_EXT
     GL_PIXEL_TRANSFORM_2D_EXT GL_POINT_SIZE_GRANULARITY
     GL_POINT_SPRITE_R_MODE_NV GL_PROGRAM_BINARY_FORMATS
     GL_PROGRAM_PARAMETERS_ARB GL_PROGRAM_POINT_SIZE_ARB
     GL_PROGRAM_POINT_SIZE_EXT GL_PROJECTION_STACK_DEPTH
     GL_PROXY_TEXTURE_1D_ARRAY GL_PROXY_TEXTURE_2D_ARRAY
     GL_PROXY_TEXTURE_CUBE_MAP GL_QUERY_COUNTER_BITS_ARB
     GL_QUERY_NO_WAIT_INVERTED GL_QUERY_RESULT_AVAILABLE
     GL_RASTERIZER_DISCARD_EXT GL_RASTER_MULTISAMPLE_EXT
     GL_READ_FRAMEBUFFER_ANGLE GL_RENDERBUFFER_BLUE_SIZE
     GL_RENDERBUFFER_WIDTH_EXT GL_RESAMPLE_DECIMATE_SGIX
     GL_RESAMPLE_REPLICATE_OML GL_RESAMPLE_ZERO_FILL_OML
     GL_SAMPLER_2D_MULTISAMPLE GL_SAMPLER_2D_RECT_SHADOW
     GL_SAMPLER_CUBE_MAP_ARRAY GL_SAMPLE_COVERAGE_INVERT
     GL_SAMPLE_MASK_INVERT_EXT GL_SAMPLE_MASK_VALUE_SGIS
     GL_SGIS_point_line_texgen GL_SGIX_tag_sample_buffer
     GL_SHADOW_ATTENUATION_EXT GL_SLUMINANCE8_ALPHA8_EXT
     GL_SPARSE_STORAGE_BIT_ARB GL_STENCIL_ATTACHMENT_EXT
     GL_STENCIL_BACK_WRITEMASK GL_STENCIL_REF_COMMAND_NV
     GL_SUBSAMPLE_DISTANCE_AMD GL_SUPERSAMPLE_SCALE_X_NV
     GL_SUPERSAMPLE_SCALE_Y_NV GL_TANGENT_ARRAY_TYPE_EXT
     GL_TESS_EVALUATION_SHADER GL_TEXTURE_1D_BINDING_EXT
     GL_TEXTURE_1D_STACK_MESAX GL_TEXTURE_2D_BINDING_EXT
     GL_TEXTURE_2D_MULTISAMPLE GL_TEXTURE_2D_STACK_MESAX
     GL_TEXTURE_3D_BINDING_EXT GL_TEXTURE_ALPHA_SIZE_EXT
     GL_TEXTURE_ALPHA_TYPE_ARB GL_TEXTURE_BINDING_BUFFER
     GL_TEXTURE_BUFFER_BINDING GL_TEXTURE_COMPRESSED_ARB
     GL_TEXTURE_CUBE_MAP_ARRAY GL_TEXTURE_DEPTH_SIZE_ARB
     GL_TEXTURE_DEPTH_TYPE_ARB GL_TEXTURE_FILTER_CONTROL
     GL_TEXTURE_GREEN_SIZE_EXT GL_TEXTURE_GREEN_TYPE_ARB
     GL_TEXTURE_INDEX_SIZE_EXT GL_TEXTURE_INTENSITY_SIZE
     GL_TEXTURE_INTENSITY_TYPE GL_TEXTURE_LUMINANCE_SIZE
     GL_TEXTURE_LUMINANCE_TYPE GL_TEXTURE_MAX_LEVEL_SGIS
     GL_TEXTURE_VIEW_MIN_LAYER GL_TEXTURE_VIEW_MIN_LEVEL
     GL_TOP_LEVEL_ARRAY_STRIDE GL_TRANSPOSE_AFFINE_2D_NV
     GL_TRANSPOSE_AFFINE_3D_NV GL_TRANSPOSE_COLOR_MATRIX
     GL_UNIFORM_BUFFER_BINDING GL_UNPACK_ROW_BYTES_APPLE
     GL_UNPACK_SKIP_IMAGES_EXT GL_UNSIGNED_INT16_VEC2_NV
     GL_UNSIGNED_INT16_VEC3_NV GL_UNSIGNED_INT16_VEC4_NV
     GL_UNSIGNED_INT64_VEC2_NV GL_UNSIGNED_INT64_VEC3_NV
     GL_UNSIGNED_INT64_VEC4_NV GL_UNSIGNED_SHORT_4_4_4_4
     GL_UNSIGNED_SHORT_5_5_5_1 GL_VARIANT_ARRAY_TYPE_EXT
     GL_VERTEX_ARRAY_COUNT_EXT GL_VERTEX_ARRAY_LENGTH_NV
     GL_VERTEX_BINDING_DIVISOR GL_VERTICES_SUBMITTED_ARB
     GL_VIEWPORT_SUBPIXEL_BITS glBindFragDataLocationEXT
     glBindTransformFeedbackNV glBlendEquationIndexedAMD
     glBufferPageCommitmentARB glClearNamedBufferDataEXT
     glClearNamedBufferSubData glClearNamedFramebufferfi
     glClearNamedFramebufferfv glClearNamedFramebufferiv
     glCompileShaderIncludeARB glCompressedTexImage1DARB
     glCompressedTexImage2DARB glCompressedTexImage3DARB
     glCompressedTexSubImage1D glCompressedTexSubImage2D
     glCompressedTexSubImage3D glCopyConvolutionFilter1D
     glCopyConvolutionFilter2D glCurrentPaletteMatrixARB
     glDebugMessageCallbackAMD glDebugMessageCallbackARB
     glDeleteFragmentShaderATI glDeleteVertexArraysAPPLE
     glDispatchComputeIndirect glDrawTransformFeedbackNV
     glEnableVertexArrayAttrib glEnableVertexAttribAPPLE
     glEnableVertexAttribArray glEndConditionalRenderNVX
     glEndTransformFeedbackEXT glFlushVertexArrayRangeNV
     glFragmentCoverageColorNV glFragmentLightModelfSGIX
     glFragmentLightModelfvEXT glFragmentLightModeliSGIX
     glFragmentLightModelivEXT glFramebufferRenderbuffer
     glFramebufferTexture1DEXT glFramebufferTexture2DEXT
     glFramebufferTexture3DEXT glFramebufferTextureLayer
     glGenTransformFeedbacksNV glGetActiveSubroutineName
     glGetActiveUniformBlockiv glGetBufferParameterivARB
     glGetConvolutionFilterEXT glGetHistogramParameterfv
     glGetHistogramParameteriv glGetInvariantBooleanvEXT
     glGetInvariantIntegervEXT glGetMinmaxParameterfvEXT
     glGetMinmaxParameterivEXT glGetNextPerfQueryIdINTEL
     glGetObjectParameterfvARB glGetObjectParameterivARB
     glGetPerfCounterInfoINTEL glGetPerfMonitorGroupsAMD
     glGetProgramParameterdvNV glGetProgramParameterfvNV
     glGetProgramResourceIndex glGetQueryBufferObjectuiv
     glGetQueryObjecti64vANGLE glGetSamplerParameterIuiv
     glGetTextureParameterIuiv glGetTransformFeedbacki_v
     glGetUniformBufferSizeEXT glGetUniformSubroutineuiv
     glGetVertexArrayIndexediv glGetVertexAttribLui64vNV
     glGetVertexAttribPointerv glInvalidateBufferSubData
     glIsImageHandleResidentNV glIsNamedBufferResidentNV
     glLGPUCopyImageSubDataNVX glLoadTransposeMatrixdARB
     glLoadTransposeMatrixfARB glLogMessageCallbackREGAL
     glMakeBufferNonResidentNV glMatrixLoadTransposedEXT
     glMatrixLoadTransposefEXT glMatrixMultTransposedEXT
     glMatrixMultTransposefEXT glMultTransposeMatrixdARB
     glMultTransposeMatrixfARB glMultiDrawArraysIndirect
     glMultiTexCoordPointerEXT glMultiTexParameterIivEXT
     glMultiTexRenderbufferEXT glNamedFramebufferTexture
     glPrimitiveBoundingBoxARB glPrimitiveRestartIndexNV
     glProgramUniform1ui64vARB glProgramUniform2ui64vARB
     glProgramUniform3ui64vARB glProgramUniform4ui64vARB
     glProgramUniformMatrix2dv glProgramUniformMatrix2fv
     glProgramUniformMatrix3dv glProgramUniformMatrix3fv
     glProgramUniformMatrix4dv glProgramUniformMatrix4fv
     glResumeTransformFeedback glSubpixelPrecisionBiasNV
     glTexStorage2DMultisample glTexStorage3DMultisample
     glTextureParameterIuivEXT glTextureStorageSparseAMD
     glValidateProgramPipeline glVertexArrayAttribFormat
     glVertexArrayVertexBuffer glVertexAttribIPointerEXT
     glVertexAttribLPointerEXT */
  /* Offset 11 gives the best switch position.  */
  switch (name[11]) {
  case '1':
    if (memEQ(name, "GL_TEXTURE_1D_BINDING_EXT", 25)) {
    /*                          ^                    */
#ifdef GL_TEXTURE_1D_BINDING_EXT
      *iv_return = GL_TEXTURE_1D_BINDING_EXT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_TEXTURE_1D_STACK_MESAX", 25)) {
    /*                          ^                    */
#ifdef GL_TEXTURE_1D_STACK_MESAX
      *iv_return = GL_TEXTURE_1D_STACK_MESAX;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case '2':
    if (memEQ(name, "GL_SAMPLER_2D_MULTISAMPLE", 25)) {
    /*                          ^                    */
#ifdef GL_SAMPLER_2D_MULTISAMPLE
      *iv_return = GL_SAMPLER_2D_MULTISAMPLE;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_SAMPLER_2D_RECT_SHADOW", 25)) {
    /*                          ^                    */
#ifdef GL_SAMPLER_2D_RECT_SHADOW
      *iv_return = GL_SAMPLER_2D_RECT_SHADOW;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_TEXTURE_2D_BINDING_EXT", 25)) {
    /*                          ^                    */
#ifdef GL_TEXTURE_2D_BINDING_EXT
      *iv_return = GL_TEXTURE_2D_BINDING_EXT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_TEXTURE_2D_MULTISAMPLE", 25)) {
    /*                          ^                    */
#ifdef GL_TEXTURE_2D_MULTISAMPLE
      *iv_return = GL_TEXTURE_2D_MULTISAMPLE;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_TEXTURE_2D_STACK_MESAX", 25)) {
    /*                          ^                    */
#ifdef GL_TEXTURE_2D_STACK_MESAX
      *iv_return = GL_TEXTURE_2D_STACK_MESAX;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case '3':
    if (memEQ(name, "GL_TEXTURE_3D_BINDING_EXT", 25)) {
    /*                          ^                    */
#ifdef GL_TEXTURE_3D_BINDING_EXT
      *iv_return = GL_TEXTURE_3D_BINDING_EXT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case 'A':
    if (memEQ(name, "GL_ASYNC_DRAW_PIXELS_SGIX", 25)) {
    /*                          ^                    */
#ifdef GL_ASYNC_DRAW_PIXELS_SGIX
      *iv_return = GL_ASYNC_DRAW_PIXELS_SGIX;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_ASYNC_READ_PIXELS_SGIX", 25)) {
    /*                          ^                    */
#ifdef GL_ASYNC_READ_PIXELS_SGIX
      *iv_return = GL_ASYNC_READ_PIXELS_SGIX;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_BUFFER_MAP_POINTER_ARB", 25)) {
    /*                          ^                    */
#ifdef GL_BUFFER_MAP_POINTER_ARB
      *iv_return = GL_BUFFER_MAP_POINTER_ARB;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_DRAW_ARRAYS_COMMAND_NV", 25)) {
    /*                          ^                    */
#ifdef GL_DRAW_ARRAYS_COMMAND_NV
      *iv_return = GL_DRAW_ARRAYS_COMMAND_NV;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_ELEMENT_ARRAY_TYPE_ATI", 25)) {
    /*                          ^                    */
#ifdef GL_ELEMENT_ARRAY_TYPE_ATI
      *iv_return = GL_ELEMENT_ARRAY_TYPE_ATI;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_IMAGE_CLASS_10_10_10_2", 25)) {
    /*                          ^                    */
#ifdef GL_IMAGE_CLASS_10_10_10_2
      *iv_return = GL_IMAGE_CLASS_10_10_10_2;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_PIXEL_TRANSFORM_2D_EXT", 25)) {
    /*                          ^                    */
#ifdef GL_PIXEL_TRANSFORM_2D_EXT
      *iv_return = GL_PIXEL_TRANSFORM_2D_EXT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_SAMPLE_MASK_INVERT_EXT", 25)) {
    /*                          ^                    */
#ifdef GL_SAMPLE_MASK_INVERT_EXT
      *iv_return = GL_SAMPLE_MASK_INVERT_EXT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_SAMPLE_MASK_VALUE_SGIS", 25)) {
    /*                          ^                    */
#ifdef GL_SAMPLE_MASK_VALUE_SGIS
      *iv_return = GL_SAMPLE_MASK_VALUE_SGIS;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_STENCIL_ATTACHMENT_EXT", 25)) {
    /*                          ^                    */
#ifdef GL_STENCIL_ATTACHMENT_EXT
      *iv_return = GL_STENCIL_ATTACHMENT_EXT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_TANGENT_ARRAY_TYPE_EXT", 25)) {
    /*                          ^                    */
#ifdef GL_TANGENT_ARRAY_TYPE_EXT
      *iv_return = GL_TANGENT_ARRAY_TYPE_EXT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_TEXTURE_ALPHA_SIZE_EXT", 25)) {
    /*                          ^                    */
#ifdef GL_TEXTURE_ALPHA_SIZE_EXT
      *iv_return = GL_TEXTURE_ALPHA_SIZE_EXT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_TEXTURE_ALPHA_TYPE_ARB", 25)) {
    /*                          ^                    */
#ifdef GL_TEXTURE_ALPHA_TYPE_ARB
      *iv_return = GL_TEXTURE_ALPHA_TYPE_ARB;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_VARIANT_ARRAY_TYPE_EXT", 25)) {
    /*                          ^                    */
#ifdef GL_VARIANT_ARRAY_TYPE_EXT
      *iv_return = GL_VARIANT_ARRAY_TYPE_EXT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glGetVertexArrayIndexediv", 25)) {
    /*                          ^                    */
#ifdef glGetVertexArrayIndexediv
      *iv_return = glGetVertexArrayIndexediv;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glGetVertexAttribLui64vNV", 25)) {
    /*                          ^                    */
#ifdef glGetVertexAttribLui64vNV
      *iv_return = glGetVertexAttribLui64vNV;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glGetVertexAttribPointerv", 25)) {
    /*                          ^                    */
#ifdef glGetVertexAttribPointerv
      *iv_return = glGetVertexAttribPointerv;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glMultiDrawArraysIndirect", 25)) {
    /*                          ^                    */
#ifdef glMultiDrawArraysIndirect
      *iv_return = glMultiDrawArraysIndirect;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case 'B':
    if (memEQ(name, "GL_COLOR_TABLE_ALPHA_SIZE", 25)) {
    /*                          ^                    */
#ifdef GL_COLOR_TABLE_ALPHA_SIZE
      *iv_return = GL_COLOR_TABLE_ALPHA_SIZE;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_COLOR_TABLE_FORMAT_EXT", 25)) {
    /*                          ^                    */
#ifdef GL_COLOR_TABLE_FORMAT_EXT
      *iv_return = GL_COLOR_TABLE_FORMAT_EXT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_COLOR_TABLE_FORMAT_SGI", 25)) {
    /*                          ^                    */
#ifdef GL_COLOR_TABLE_FORMAT_SGI
      *iv_return = GL_COLOR_TABLE_FORMAT_SGI;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_COLOR_TABLE_GREEN_SIZE", 25)) {
    /*                          ^                    */
#ifdef GL_COLOR_TABLE_GREEN_SIZE
      *iv_return = GL_COLOR_TABLE_GREEN_SIZE;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_PIXEL_CUBIC_WEIGHT_EXT", 25)) {
    /*                          ^                    */
#ifdef GL_PIXEL_CUBIC_WEIGHT_EXT
      *iv_return = GL_PIXEL_CUBIC_WEIGHT_EXT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_PROGRAM_BINARY_FORMATS", 25)) {
    /*                          ^                    */
#ifdef GL_PROGRAM_BINARY_FORMATS
      *iv_return = GL_PROGRAM_BINARY_FORMATS;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_STENCIL_BACK_WRITEMASK", 25)) {
    /*                          ^                    */
#ifdef GL_STENCIL_BACK_WRITEMASK
      *iv_return = GL_STENCIL_BACK_WRITEMASK;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_TEXTURE_BINDING_BUFFER", 25)) {
    /*                          ^                    */
#ifdef GL_TEXTURE_BINDING_BUFFER
      *iv_return = GL_TEXTURE_BINDING_BUFFER;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_TEXTURE_BUFFER_BINDING", 25)) {
    /*                          ^                    */
#ifdef GL_TEXTURE_BUFFER_BINDING
      *iv_return = GL_TEXTURE_BUFFER_BINDING;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_UNIFORM_BUFFER_BINDING", 25)) {
    /*                          ^                    */
#ifdef GL_UNIFORM_BUFFER_BINDING
      *iv_return = GL_UNIFORM_BUFFER_BINDING;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glPrimitiveBoundingBoxARB", 25)) {
    /*                          ^                    */
#ifdef glPrimitiveBoundingBoxARB
      *iv_return = glPrimitiveBoundingBoxARB;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case 'C':
    if (memEQ(name, "GL_SAMPLER_CUBE_MAP_ARRAY", 25)) {
    /*                          ^                    */
#ifdef GL_SAMPLER_CUBE_MAP_ARRAY
      *iv_return = GL_SAMPLER_CUBE_MAP_ARRAY;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_SLUMINANCE8_ALPHA8_EXT", 25)) {
    /*                          ^                    */
#ifdef GL_SLUMINANCE8_ALPHA8_EXT
      *iv_return = GL_SLUMINANCE8_ALPHA8_EXT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_TEXTURE_COMPRESSED_ARB", 25)) {
    /*                          ^                    */
#ifdef GL_TEXTURE_COMPRESSED_ARB
      *iv_return = GL_TEXTURE_COMPRESSED_ARB;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_TEXTURE_CUBE_MAP_ARRAY", 25)) {
    /*                          ^                    */
#ifdef GL_TEXTURE_CUBE_MAP_ARRAY
      *iv_return = GL_TEXTURE_CUBE_MAP_ARRAY;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case 'D':
    if (memEQ(name, "GL_FOG_COORD_ARRAY_STRIDE", 25)) {
    /*                          ^                    */
#ifdef GL_FOG_COORD_ARRAY_STRIDE
      *iv_return = GL_FOG_COORD_ARRAY_STRIDE;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_TEXTURE_DEPTH_SIZE_ARB", 25)) {
    /*                          ^                    */
#ifdef GL_TEXTURE_DEPTH_SIZE_ARB
      *iv_return = GL_TEXTURE_DEPTH_SIZE_ARB;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_TEXTURE_DEPTH_TYPE_ARB", 25)) {
    /*                          ^                    */
#ifdef GL_TEXTURE_DEPTH_TYPE_ARB
      *iv_return = GL_TEXTURE_DEPTH_TYPE_ARB;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case 'E':
    if (memEQ(name, "GL_CG_FRAGMENT_SHADER_EXT", 25)) {
    /*                          ^                    */
#ifdef GL_CG_FRAGMENT_SHADER_EXT
      *iv_return = GL_CG_FRAGMENT_SHADER_EXT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_INT_IMAGE_1D_ARRAY_EXT", 25)) {
    /*                          ^                    */
#ifdef GL_INT_IMAGE_1D_ARRAY_EXT
      *iv_return = GL_INT_IMAGE_1D_ARRAY_EXT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_INT_IMAGE_2D_ARRAY_EXT", 25)) {
    /*                          ^                    */
#ifdef GL_INT_IMAGE_2D_ARRAY_EXT
      *iv_return = GL_INT_IMAGE_2D_ARRAY_EXT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_LUMINANCE12_ALPHA4_EXT", 25)) {
    /*                          ^                    */
#ifdef GL_LUMINANCE12_ALPHA4_EXT
      *iv_return = GL_LUMINANCE12_ALPHA4_EXT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_LUMINANCE_ALPHA16F_ARB", 25)) {
    /*                          ^                    */
#ifdef GL_LUMINANCE_ALPHA16F_ARB
      *iv_return = GL_LUMINANCE_ALPHA16F_ARB;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_LUMINANCE_ALPHA16I_EXT", 25)) {
    /*                          ^                    */
#ifdef GL_LUMINANCE_ALPHA16I_EXT
      *iv_return = GL_LUMINANCE_ALPHA16I_EXT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_LUMINANCE_ALPHA32F_ARB", 25)) {
    /*                          ^                    */
#ifdef GL_LUMINANCE_ALPHA32F_ARB
      *iv_return = GL_LUMINANCE_ALPHA32F_ARB;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_LUMINANCE_ALPHA32I_EXT", 25)) {
    /*                          ^                    */
#ifdef GL_LUMINANCE_ALPHA32I_EXT
      *iv_return = GL_LUMINANCE_ALPHA32I_EXT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_LUMINANCE_ALPHA8UI_EXT", 25)) {
    /*                          ^                    */
#ifdef GL_LUMINANCE_ALPHA8UI_EXT
      *iv_return = GL_LUMINANCE_ALPHA8UI_EXT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_MANUAL_GENERATE_MIPMAP", 25)) {
    /*                          ^                    */
#ifdef GL_MANUAL_GENERATE_MIPMAP
      *iv_return = GL_MANUAL_GENERATE_MIPMAP;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_MAX_FRAMEBUFFER_HEIGHT", 25)) {
    /*                          ^                    */
#ifdef GL_MAX_FRAMEBUFFER_HEIGHT
      *iv_return = GL_MAX_FRAMEBUFFER_HEIGHT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_MAX_FRAMEBUFFER_LAYERS", 25)) {
    /*                          ^                    */
#ifdef GL_MAX_FRAMEBUFFER_LAYERS
      *iv_return = GL_MAX_FRAMEBUFFER_LAYERS;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_MAX_RASTER_SAMPLES_EXT", 25)) {
    /*                          ^                    */
#ifdef GL_MAX_RASTER_SAMPLES_EXT
      *iv_return = GL_MAX_RASTER_SAMPLES_EXT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_MAX_VERTEX_ATTRIBS_ARB", 25)) {
    /*                          ^                    */
#ifdef GL_MAX_VERTEX_ATTRIBS_ARB
      *iv_return = GL_MAX_VERTEX_ATTRIBS_ARB;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_MAX_VERTEX_STREAMS_ATI", 25)) {
    /*                          ^                    */
#ifdef GL_MAX_VERTEX_STREAMS_ATI
      *iv_return = GL_MAX_VERTEX_STREAMS_ATI;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_OFFSET_TEXTURE_BIAS_NV", 25)) {
    /*                          ^                    */
#ifdef GL_OFFSET_TEXTURE_BIAS_NV
      *iv_return = GL_OFFSET_TEXTURE_BIAS_NV;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_PER_STAGE_CONSTANTS_NV", 25)) {
    /*                          ^                    */
#ifdef GL_PER_STAGE_CONSTANTS_NV
      *iv_return = GL_PER_STAGE_CONSTANTS_NV;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_RASTERIZER_DISCARD_EXT", 25)) {
    /*                          ^                    */
#ifdef GL_RASTERIZER_DISCARD_EXT
      *iv_return = GL_RASTERIZER_DISCARD_EXT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_SUBSAMPLE_DISTANCE_AMD", 25)) {
    /*                          ^                    */
#ifdef GL_SUBSAMPLE_DISTANCE_AMD
      *iv_return = GL_SUBSAMPLE_DISTANCE_AMD;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_TRANSPOSE_AFFINE_2D_NV", 25)) {
    /*                          ^                    */
#ifdef GL_TRANSPOSE_AFFINE_2D_NV
      *iv_return = GL_TRANSPOSE_AFFINE_2D_NV;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_TRANSPOSE_AFFINE_3D_NV", 25)) {
    /*                          ^                    */
#ifdef GL_TRANSPOSE_AFFINE_3D_NV
      *iv_return = GL_TRANSPOSE_AFFINE_3D_NV;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_TRANSPOSE_COLOR_MATRIX", 25)) {
    /*                          ^                    */
#ifdef GL_TRANSPOSE_COLOR_MATRIX
      *iv_return = GL_TRANSPOSE_COLOR_MATRIX;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case 'F':
    if (memEQ(name, "GL_CONTEXT_FLAG_DEBUG_BIT", 25)) {
    /*                          ^                    */
#ifdef GL_CONTEXT_FLAG_DEBUG_BIT
      *iv_return = GL_CONTEXT_FLAG_DEBUG_BIT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_CURRENT_FOG_COORDINATE", 25)) {
    /*                          ^                    */
#ifdef GL_CURRENT_FOG_COORDINATE
      *iv_return = GL_CURRENT_FOG_COORDINATE;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_FRAMEBUFFER_RENDERABLE", 25)) {
    /*                          ^                    */
#ifdef GL_FRAMEBUFFER_RENDERABLE
      *iv_return = GL_FRAMEBUFFER_RENDERABLE;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_RENDERBUFFER_BLUE_SIZE", 25)) {
    /*                          ^                    */
#ifdef GL_RENDERBUFFER_BLUE_SIZE
      *iv_return = GL_RENDERBUFFER_BLUE_SIZE;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_RENDERBUFFER_WIDTH_EXT", 25)) {
    /*                          ^                    */
#ifdef GL_RENDERBUFFER_WIDTH_EXT
      *iv_return = GL_RENDERBUFFER_WIDTH_EXT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_TEXTURE_FILTER_CONTROL", 25)) {
    /*                          ^                    */
#ifdef GL_TEXTURE_FILTER_CONTROL
      *iv_return = GL_TEXTURE_FILTER_CONTROL;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case 'G':
    if (memEQ(name, "GL_EDGE_FLAG_ARRAY_STRIDE", 25)) {
    /*                          ^                    */
#ifdef GL_EDGE_FLAG_ARRAY_STRIDE
      *iv_return = GL_EDGE_FLAG_ARRAY_STRIDE;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_TEXTURE_GREEN_SIZE_EXT", 25)) {
    /*                          ^                    */
#ifdef GL_TEXTURE_GREEN_SIZE_EXT
      *iv_return = GL_TEXTURE_GREEN_SIZE_EXT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_TEXTURE_GREEN_TYPE_ARB", 25)) {
    /*                          ^                    */
#ifdef GL_TEXTURE_GREEN_TYPE_ARB
      *iv_return = GL_TEXTURE_GREEN_TYPE_ARB;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case 'H':
    if (memEQ(name, "GL_MAP_FLUSH_EXPLICIT_BIT", 25)) {
    /*                          ^                    */
#ifdef GL_MAP_FLUSH_EXPLICIT_BIT
      *iv_return = GL_MAP_FLUSH_EXPLICIT_BIT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case 'I':
    if (memEQ(name, "GL_CLIENT_PIXEL_STORE_BIT", 25)) {
    /*                          ^                    */
#ifdef GL_CLIENT_PIXEL_STORE_BIT
      *iv_return = GL_CLIENT_PIXEL_STORE_BIT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_CONVOLUTION_FORMAT_EXT", 25)) {
    /*                          ^                    */
#ifdef GL_CONVOLUTION_FORMAT_EXT
      *iv_return = GL_CONVOLUTION_FORMAT_EXT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_CONVOLUTION_HEIGHT_EXT", 25)) {
    /*                          ^                    */
#ifdef GL_CONVOLUTION_HEIGHT_EXT
      *iv_return = GL_CONVOLUTION_HEIGHT_EXT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_MAX_ATTRIB_STACK_DEPTH", 25)) {
    /*                          ^                    */
#ifdef GL_MAX_ATTRIB_STACK_DEPTH
      *iv_return = GL_MAX_ATTRIB_STACK_DEPTH;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_MAX_VARYING_COMPONENTS", 25)) {
    /*                          ^                    */
#ifdef GL_MAX_VARYING_COMPONENTS
      *iv_return = GL_MAX_VARYING_COMPONENTS;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_MAX_VARYING_FLOATS_ARB", 25)) {
    /*                          ^                    */
#ifdef GL_MAX_VARYING_FLOATS_ARB
      *iv_return = GL_MAX_VARYING_FLOATS_ARB;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_OBJECT_LINK_STATUS_ARB", 25)) {
    /*                          ^                    */
#ifdef GL_OBJECT_LINK_STATUS_ARB
      *iv_return = GL_OBJECT_LINK_STATUS_ARB;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_TEXTURE_INDEX_SIZE_EXT", 25)) {
    /*                          ^                    */
#ifdef GL_TEXTURE_INDEX_SIZE_EXT
      *iv_return = GL_TEXTURE_INDEX_SIZE_EXT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_TEXTURE_INTENSITY_SIZE", 25)) {
    /*                          ^                    */
#ifdef GL_TEXTURE_INTENSITY_SIZE
      *iv_return = GL_TEXTURE_INTENSITY_SIZE;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_TEXTURE_INTENSITY_TYPE", 25)) {
    /*                          ^                    */
#ifdef GL_TEXTURE_INTENSITY_TYPE
      *iv_return = GL_TEXTURE_INTENSITY_TYPE;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_VERTEX_BINDING_DIVISOR", 25)) {
    /*                          ^                    */
#ifdef GL_VERTEX_BINDING_DIVISOR
      *iv_return = GL_VERTEX_BINDING_DIVISOR;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case 'K':
    if (memEQ(name, "GL_UNPACK_SKIP_IMAGES_EXT", 25)) {
    /*                          ^                    */
#ifdef GL_UNPACK_SKIP_IMAGES_EXT
      *iv_return = GL_UNPACK_SKIP_IMAGES_EXT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case 'L':
    if (memEQ(name, "GL_BLEND_COLOR_COMMAND_NV", 25)) {
    /*                          ^                    */
#ifdef GL_BLEND_COLOR_COMMAND_NV
      *iv_return = GL_BLEND_COLOR_COMMAND_NV;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_CLIENT_ALL_ATTRIB_BITS", 25)) {
    /*                          ^                    */
#ifdef GL_CLIENT_ALL_ATTRIB_BITS
      *iv_return = GL_CLIENT_ALL_ATTRIB_BITS;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_COMPATIBLE_SUBROUTINES", 25)) {
    /*                          ^                    */
#ifdef GL_COMPATIBLE_SUBROUTINES
      *iv_return = GL_COMPATIBLE_SUBROUTINES;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_INT_SAMPLER_BUFFER_AMD", 25)) {
    /*                          ^                    */
#ifdef GL_INT_SAMPLER_BUFFER_AMD
      *iv_return = GL_INT_SAMPLER_BUFFER_AMD;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_INT_SAMPLER_BUFFER_EXT", 25)) {
    /*                          ^                    */
#ifdef GL_INT_SAMPLER_BUFFER_EXT
      *iv_return = GL_INT_SAMPLER_BUFFER_EXT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_TESS_EVALUATION_SHADER", 25)) {
    /*                          ^                    */
#ifdef GL_TESS_EVALUATION_SHADER
      *iv_return = GL_TESS_EVALUATION_SHADER;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_TEXTURE_LUMINANCE_SIZE", 25)) {
    /*                          ^                    */
#ifdef GL_TEXTURE_LUMINANCE_SIZE
      *iv_return = GL_TEXTURE_LUMINANCE_SIZE;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_TEXTURE_LUMINANCE_TYPE", 25)) {
    /*                          ^                    */
#ifdef GL_TEXTURE_LUMINANCE_TYPE
      *iv_return = GL_TEXTURE_LUMINANCE_TYPE;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_TOP_LEVEL_ARRAY_STRIDE", 25)) {
    /*                          ^                    */
#ifdef GL_TOP_LEVEL_ARRAY_STRIDE
      *iv_return = GL_TOP_LEVEL_ARRAY_STRIDE;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case 'M':
    if (memEQ(name, "GL_DEPTH_COMPONENT16_SGIX", 25)) {
    /*                          ^                    */
#ifdef GL_DEPTH_COMPONENT16_SGIX
      *iv_return = GL_DEPTH_COMPONENT16_SGIX;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_DEPTH_COMPONENT24_SGIX", 25)) {
    /*                          ^                    */
#ifdef GL_DEPTH_COMPONENT24_SGIX
      *iv_return = GL_DEPTH_COMPONENT24_SGIX;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_DEPTH_COMPONENT32_SGIX", 25)) {
    /*                          ^                    */
#ifdef GL_DEPTH_COMPONENT32_SGIX
      *iv_return = GL_DEPTH_COMPONENT32_SGIX;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_DRAW_FRAMEBUFFER_ANGLE", 25)) {
    /*                          ^                    */
#ifdef GL_DRAW_FRAMEBUFFER_ANGLE
      *iv_return = GL_DRAW_FRAMEBUFFER_ANGLE;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_HISTOGRAM_RED_SIZE_EXT", 25)) {
    /*                          ^                    */
#ifdef GL_HISTOGRAM_RED_SIZE_EXT
      *iv_return = GL_HISTOGRAM_RED_SIZE_EXT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_NEAREST_MIPMAP_NEAREST", 25)) {
    /*                          ^                    */
#ifdef GL_NEAREST_MIPMAP_NEAREST
      *iv_return = GL_NEAREST_MIPMAP_NEAREST;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_READ_FRAMEBUFFER_ANGLE", 25)) {
    /*                          ^                    */
#ifdef GL_READ_FRAMEBUFFER_ANGLE
      *iv_return = GL_READ_FRAMEBUFFER_ANGLE;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_TEXTURE_MAX_LEVEL_SGIS", 25)) {
    /*                          ^                    */
#ifdef GL_TEXTURE_MAX_LEVEL_SGIS
      *iv_return = GL_TEXTURE_MAX_LEVEL_SGIS;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case 'N':
    if (memEQ(name, "GL_FONT_UNINTELLIGIBLE_NV", 25)) {
    /*                          ^                    */
#ifdef GL_FONT_UNINTELLIGIBLE_NV
      *iv_return = GL_FONT_UNINTELLIGIBLE_NV;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_IMAGE_BINDING_NAME_EXT", 25)) {
    /*                          ^                    */
#ifdef GL_IMAGE_BINDING_NAME_EXT
      *iv_return = GL_IMAGE_BINDING_NAME_EXT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_MAP_UNSYNCHRONIZED_BIT", 25)) {
    /*                          ^                    */
#ifdef GL_MAP_UNSYNCHRONIZED_BIT
      *iv_return = GL_MAP_UNSYNCHRONIZED_BIT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_MATRIX_INDEX_ARRAY_ARB", 25)) {
    /*                          ^                    */
#ifdef GL_MATRIX_INDEX_ARRAY_ARB
      *iv_return = GL_MATRIX_INDEX_ARRAY_ARB;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case 'O':
    if (memEQ(name, "GL_LAYER_PROVOKING_VERTEX", 25)) {
    /*                          ^                    */
#ifdef GL_LAYER_PROVOKING_VERTEX
      *iv_return = GL_LAYER_PROVOKING_VERTEX;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_MAX_CONVOLUTION_HEIGHT", 25)) {
    /*                          ^                    */
#ifdef GL_MAX_CONVOLUTION_HEIGHT
      *iv_return = GL_MAX_CONVOLUTION_HEIGHT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_MAX_UNIFORM_BLOCK_SIZE", 25)) {
    /*                          ^                    */
#ifdef GL_MAX_UNIFORM_BLOCK_SIZE
      *iv_return = GL_MAX_UNIFORM_BLOCK_SIZE;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_OUTPUT_POINT_SIZE_ATIX", 25)) {
    /*                          ^                    */
#ifdef GL_OUTPUT_POINT_SIZE_ATIX
      *iv_return = GL_OUTPUT_POINT_SIZE_ATIX;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_PATH_ERROR_POSITION_NV", 25)) {
    /*                          ^                    */
#ifdef GL_PATH_ERROR_POSITION_NV
      *iv_return = GL_PATH_ERROR_POSITION_NV;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_PROJECTION_STACK_DEPTH", 25)) {
    /*                          ^                    */
#ifdef GL_PROJECTION_STACK_DEPTH
      *iv_return = GL_PROJECTION_STACK_DEPTH;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_SAMPLE_COVERAGE_INVERT", 25)) {
    /*                          ^                    */
#ifdef GL_SAMPLE_COVERAGE_INVERT
      *iv_return = GL_SAMPLE_COVERAGE_INVERT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_UNPACK_ROW_BYTES_APPLE", 25)) {
    /*                          ^                    */
#ifdef GL_UNPACK_ROW_BYTES_APPLE
      *iv_return = GL_UNPACK_ROW_BYTES_APPLE;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case 'P':
    if (memEQ(name, "GL_DEBUG_TYPE_PERFORMANCE", 25)) {
    /*                          ^                    */
#ifdef GL_DEBUG_TYPE_PERFORMANCE
      *iv_return = GL_DEBUG_TYPE_PERFORMANCE;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_DEBUG_TYPE_PORTABILITY", 25)) {
    /*                          ^                    */
#ifdef GL_DEBUG_TYPE_PORTABILITY
      *iv_return = GL_DEBUG_TYPE_PORTABILITY;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_OP_MULTIPLY_MATRIX_EXT", 25)) {
    /*                          ^                    */
#ifdef GL_OP_MULTIPLY_MATRIX_EXT
      *iv_return = GL_OP_MULTIPLY_MATRIX_EXT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_PROGRAM_PARAMETERS_ARB", 25)) {
    /*                          ^                    */
#ifdef GL_PROGRAM_PARAMETERS_ARB
      *iv_return = GL_PROGRAM_PARAMETERS_ARB;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_PROGRAM_POINT_SIZE_ARB", 25)) {
    /*                          ^                    */
#ifdef GL_PROGRAM_POINT_SIZE_ARB
      *iv_return = GL_PROGRAM_POINT_SIZE_ARB;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_PROGRAM_POINT_SIZE_EXT", 25)) {
    /*                          ^                    */
#ifdef GL_PROGRAM_POINT_SIZE_EXT
      *iv_return = GL_PROGRAM_POINT_SIZE_EXT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_SUPERSAMPLE_SCALE_X_NV", 25)) {
    /*                          ^                    */
#ifdef GL_SUPERSAMPLE_SCALE_X_NV
      *iv_return = GL_SUPERSAMPLE_SCALE_X_NV;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_SUPERSAMPLE_SCALE_Y_NV", 25)) {
    /*                          ^                    */
#ifdef GL_SUPERSAMPLE_SCALE_Y_NV
      *iv_return = GL_SUPERSAMPLE_SCALE_Y_NV;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glGetBufferParameterivARB", 25)) {
    /*                          ^                    */
#ifdef glGetBufferParameterivARB
      *iv_return = glGetBufferParameterivARB;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glGetMinmaxParameterfvEXT", 25)) {
    /*                          ^                    */
#ifdef glGetMinmaxParameterfvEXT
      *iv_return = glGetMinmaxParameterfvEXT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glGetMinmaxParameterivEXT", 25)) {
    /*                          ^                    */
#ifdef glGetMinmaxParameterivEXT
      *iv_return = glGetMinmaxParameterivEXT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glGetObjectParameterfvARB", 25)) {
    /*                          ^                    */
#ifdef glGetObjectParameterfvARB
      *iv_return = glGetObjectParameterfvARB;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glGetObjectParameterivARB", 25)) {
    /*                          ^                    */
#ifdef glGetObjectParameterivARB
      *iv_return = glGetObjectParameterivARB;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case 'R':
    if (memEQ(name, "GL_ATTRIB_ARRAY_STRIDE_NV", 25)) {
    /*                          ^                    */
#ifdef GL_ATTRIB_ARRAY_STRIDE_NV
      *iv_return = GL_ATTRIB_ARRAY_STRIDE_NV;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_CLAMP_VERTEX_COLOR_ARB", 25)) {
    /*                          ^                    */
#ifdef GL_CLAMP_VERTEX_COLOR_ARB
      *iv_return = GL_CLAMP_VERTEX_COLOR_ARB;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_COLOR_ARRAY_ADDRESS_NV", 25)) {
    /*                          ^                    */
#ifdef GL_COLOR_ARRAY_ADDRESS_NV
      *iv_return = GL_COLOR_ARRAY_ADDRESS_NV;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_COLOR_ARRAY_STRIDE_EXT", 25)) {
    /*                          ^                    */
#ifdef GL_COLOR_ARRAY_STRIDE_EXT
      *iv_return = GL_COLOR_ARRAY_STRIDE_EXT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_COMPARE_REF_TO_TEXTURE", 25)) {
    /*                          ^                    */
#ifdef GL_COMPARE_REF_TO_TEXTURE
      *iv_return = GL_COMPARE_REF_TO_TEXTURE;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_INDEX_ARRAY_ADDRESS_NV", 25)) {
    /*                          ^                    */
#ifdef GL_INDEX_ARRAY_ADDRESS_NV
      *iv_return = GL_INDEX_ARRAY_ADDRESS_NV;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_INDEX_ARRAY_STRIDE_EXT", 25)) {
    /*                          ^                    */
#ifdef GL_INDEX_ARRAY_STRIDE_EXT
      *iv_return = GL_INDEX_ARRAY_STRIDE_EXT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_NORMAL_ARRAY_COUNT_EXT", 25)) {
    /*                          ^                    */
#ifdef GL_NORMAL_ARRAY_COUNT_EXT
      *iv_return = GL_NORMAL_ARRAY_COUNT_EXT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_NORMAL_ARRAY_LENGTH_NV", 25)) {
    /*                          ^                    */
#ifdef GL_NORMAL_ARRAY_LENGTH_NV
      *iv_return = GL_NORMAL_ARRAY_LENGTH_NV;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_POINT_SPRITE_R_MODE_NV", 25)) {
    /*                          ^                    */
#ifdef GL_POINT_SPRITE_R_MODE_NV
      *iv_return = GL_POINT_SPRITE_R_MODE_NV;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_STENCIL_REF_COMMAND_NV", 25)) {
    /*                          ^                    */
#ifdef GL_STENCIL_REF_COMMAND_NV
      *iv_return = GL_STENCIL_REF_COMMAND_NV;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_VERTEX_ARRAY_COUNT_EXT", 25)) {
    /*                          ^                    */
#ifdef GL_VERTEX_ARRAY_COUNT_EXT
      *iv_return = GL_VERTEX_ARRAY_COUNT_EXT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_VERTEX_ARRAY_LENGTH_NV", 25)) {
    /*                          ^                    */
#ifdef GL_VERTEX_ARRAY_LENGTH_NV
      *iv_return = GL_VERTEX_ARRAY_LENGTH_NV;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glPrimitiveRestartIndexNV", 25)) {
    /*                          ^                    */
#ifdef glPrimitiveRestartIndexNV
      *iv_return = glPrimitiveRestartIndexNV;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case 'S':
    if (memEQ(name, "GL_PER_GPU_STORAGE_BIT_NV", 25)) {
    /*                          ^                    */
#ifdef GL_PER_GPU_STORAGE_BIT_NV
      *iv_return = GL_PER_GPU_STORAGE_BIT_NV;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_QUERY_RESULT_AVAILABLE", 25)) {
    /*                          ^                    */
#ifdef GL_QUERY_RESULT_AVAILABLE
      *iv_return = GL_QUERY_RESULT_AVAILABLE;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glGetActiveSubroutineName", 25)) {
    /*                          ^                    */
#ifdef glGetActiveSubroutineName
      *iv_return = glGetActiveSubroutineName;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case 'T':
    if (memEQ(name, "GL_COLOR_ATTACHMENT10_EXT", 25)) {
    /*                          ^                    */
#ifdef GL_COLOR_ATTACHMENT10_EXT
      *iv_return = GL_COLOR_ATTACHMENT10_EXT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_COLOR_ATTACHMENT11_EXT", 25)) {
    /*                          ^                    */
#ifdef GL_COLOR_ATTACHMENT11_EXT
      *iv_return = GL_COLOR_ATTACHMENT11_EXT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_COLOR_ATTACHMENT12_EXT", 25)) {
    /*                          ^                    */
#ifdef GL_COLOR_ATTACHMENT12_EXT
      *iv_return = GL_COLOR_ATTACHMENT12_EXT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_COLOR_ATTACHMENT13_EXT", 25)) {
    /*                          ^                    */
#ifdef GL_COLOR_ATTACHMENT13_EXT
      *iv_return = GL_COLOR_ATTACHMENT13_EXT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_COLOR_ATTACHMENT14_EXT", 25)) {
    /*                          ^                    */
#ifdef GL_COLOR_ATTACHMENT14_EXT
      *iv_return = GL_COLOR_ATTACHMENT14_EXT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_COLOR_ATTACHMENT15_EXT", 25)) {
    /*                          ^                    */
#ifdef GL_COLOR_ATTACHMENT15_EXT
      *iv_return = GL_COLOR_ATTACHMENT15_EXT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_CURRENT_TEXTURE_COORDS", 25)) {
    /*                          ^                    */
#ifdef GL_CURRENT_TEXTURE_COORDS
      *iv_return = GL_CURRENT_TEXTURE_COORDS;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_EVAL_VERTEX_ATTRIB0_NV", 25)) {
    /*                          ^                    */
#ifdef GL_EVAL_VERTEX_ATTRIB0_NV
      *iv_return = GL_EVAL_VERTEX_ATTRIB0_NV;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_EVAL_VERTEX_ATTRIB1_NV", 25)) {
    /*                          ^                    */
#ifdef GL_EVAL_VERTEX_ATTRIB1_NV
      *iv_return = GL_EVAL_VERTEX_ATTRIB1_NV;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_EVAL_VERTEX_ATTRIB2_NV", 25)) {
    /*                          ^                    */
#ifdef GL_EVAL_VERTEX_ATTRIB2_NV
      *iv_return = GL_EVAL_VERTEX_ATTRIB2_NV;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_EVAL_VERTEX_ATTRIB3_NV", 25)) {
    /*                          ^                    */
#ifdef GL_EVAL_VERTEX_ATTRIB3_NV
      *iv_return = GL_EVAL_VERTEX_ATTRIB3_NV;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_EVAL_VERTEX_ATTRIB4_NV", 25)) {
    /*                          ^                    */
#ifdef GL_EVAL_VERTEX_ATTRIB4_NV
      *iv_return = GL_EVAL_VERTEX_ATTRIB4_NV;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_EVAL_VERTEX_ATTRIB5_NV", 25)) {
    /*                          ^                    */
#ifdef GL_EVAL_VERTEX_ATTRIB5_NV
      *iv_return = GL_EVAL_VERTEX_ATTRIB5_NV;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_EVAL_VERTEX_ATTRIB6_NV", 25)) {
    /*                          ^                    */
#ifdef GL_EVAL_VERTEX_ATTRIB6_NV
      *iv_return = GL_EVAL_VERTEX_ATTRIB6_NV;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_EVAL_VERTEX_ATTRIB7_NV", 25)) {
    /*                          ^                    */
#ifdef GL_EVAL_VERTEX_ATTRIB7_NV
      *iv_return = GL_EVAL_VERTEX_ATTRIB7_NV;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_EVAL_VERTEX_ATTRIB8_NV", 25)) {
    /*                          ^                    */
#ifdef GL_EVAL_VERTEX_ATTRIB8_NV
      *iv_return = GL_EVAL_VERTEX_ATTRIB8_NV;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_EVAL_VERTEX_ATTRIB9_NV", 25)) {
    /*                          ^                    */
#ifdef GL_EVAL_VERTEX_ATTRIB9_NV
      *iv_return = GL_EVAL_VERTEX_ATTRIB9_NV;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_INVARIANT_DATATYPE_EXT", 25)) {
    /*                          ^                    */
#ifdef GL_INVARIANT_DATATYPE_EXT
      *iv_return = GL_INVARIANT_DATATYPE_EXT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_LAST_VERTEX_CONVENTION", 25)) {
    /*                          ^                    */
#ifdef GL_LAST_VERTEX_CONVENTION
      *iv_return = GL_LAST_VERTEX_CONVENTION;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_LINE_WIDTH_GRANULARITY", 25)) {
    /*                          ^                    */
#ifdef GL_LINE_WIDTH_GRANULARITY
      *iv_return = GL_LINE_WIDTH_GRANULARITY;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_SHADOW_ATTENUATION_EXT", 25)) {
    /*                          ^                    */
#ifdef GL_SHADOW_ATTENUATION_EXT
      *iv_return = GL_SHADOW_ATTENUATION_EXT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_SPARSE_STORAGE_BIT_ARB", 25)) {
    /*                          ^                    */
#ifdef GL_SPARSE_STORAGE_BIT_ARB
      *iv_return = GL_SPARSE_STORAGE_BIT_ARB;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case 'U':
    if (memEQ(name, "GL_BLEND_EQUATION_RGB_EXT", 25)) {
    /*                          ^                    */
#ifdef GL_BLEND_EQUATION_RGB_EXT
      *iv_return = GL_BLEND_EQUATION_RGB_EXT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_DEBUG_SOURCE_OTHER_ARB", 25)) {
    /*                          ^                    */
#ifdef GL_DEBUG_SOURCE_OTHER_ARB
      *iv_return = GL_DEBUG_SOURCE_OTHER_ARB;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_GET_TEXTURE_IMAGE_TYPE", 25)) {
    /*                          ^                    */
#ifdef GL_GET_TEXTURE_IMAGE_TYPE
      *iv_return = GL_GET_TEXTURE_IMAGE_TYPE;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_MAX_TEXTURE_COORDS_ARB", 25)) {
    /*                          ^                    */
#ifdef GL_MAX_TEXTURE_COORDS_ARB
      *iv_return = GL_MAX_TEXTURE_COORDS_ARB;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_OBJECT_BUFFER_SIZE_ATI", 25)) {
    /*                          ^                    */
#ifdef GL_OBJECT_BUFFER_SIZE_ATI
      *iv_return = GL_OBJECT_BUFFER_SIZE_ATI;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_QUERY_COUNTER_BITS_ARB", 25)) {
    /*                          ^                    */
#ifdef GL_QUERY_COUNTER_BITS_ARB
      *iv_return = GL_QUERY_COUNTER_BITS_ARB;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_RASTER_MULTISAMPLE_EXT", 25)) {
    /*                          ^                    */
#ifdef GL_RASTER_MULTISAMPLE_EXT
      *iv_return = GL_RASTER_MULTISAMPLE_EXT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glGetActiveUniformBlockiv", 25)) {
    /*                          ^                    */
#ifdef glGetActiveUniformBlockiv
      *iv_return = glGetActiveUniformBlockiv;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case 'V':
    if (memEQ(name, "GL_DEBUG_SEVERITY_LOW_AMD", 25)) {
    /*                          ^                    */
#ifdef GL_DEBUG_SEVERITY_LOW_AMD
      *iv_return = GL_DEBUG_SEVERITY_LOW_AMD;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_DEBUG_SEVERITY_LOW_ARB", 25)) {
    /*                          ^                    */
#ifdef GL_DEBUG_SEVERITY_LOW_ARB
      *iv_return = GL_DEBUG_SEVERITY_LOW_ARB;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_INTERLEAVED_ATTRIBS_NV", 25)) {
    /*                          ^                    */
#ifdef GL_INTERLEAVED_ATTRIBS_NV
      *iv_return = GL_INTERLEAVED_ATTRIBS_NV;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_TEXTURE_VIEW_MIN_LAYER", 25)) {
    /*                          ^                    */
#ifdef GL_TEXTURE_VIEW_MIN_LAYER
      *iv_return = GL_TEXTURE_VIEW_MIN_LAYER;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_TEXTURE_VIEW_MIN_LEVEL", 25)) {
    /*                          ^                    */
#ifdef GL_TEXTURE_VIEW_MIN_LEVEL
      *iv_return = GL_TEXTURE_VIEW_MIN_LEVEL;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case 'X':
    if (memEQ(name, "GL_DEPTH_TEXTURE_MODE_ARB", 25)) {
    /*                          ^                    */
#ifdef GL_DEPTH_TEXTURE_MODE_ARB
      *iv_return = GL_DEPTH_TEXTURE_MODE_ARB;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_PROXY_TEXTURE_1D_ARRAY", 25)) {
    /*                          ^                    */
#ifdef GL_PROXY_TEXTURE_1D_ARRAY
      *iv_return = GL_PROXY_TEXTURE_1D_ARRAY;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_PROXY_TEXTURE_2D_ARRAY", 25)) {
    /*                          ^                    */
#ifdef GL_PROXY_TEXTURE_2D_ARRAY
      *iv_return = GL_PROXY_TEXTURE_2D_ARRAY;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_PROXY_TEXTURE_CUBE_MAP", 25)) {
    /*                          ^                    */
#ifdef GL_PROXY_TEXTURE_CUBE_MAP
      *iv_return = GL_PROXY_TEXTURE_CUBE_MAP;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case 'Z':
    if (memEQ(name, "GL_POINT_SIZE_GRANULARITY", 25)) {
    /*                          ^                    */
#ifdef GL_POINT_SIZE_GRANULARITY
      *iv_return = GL_POINT_SIZE_GRANULARITY;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case '_':
    if (memEQ(name, "GL_AMD_draw_buffers_blend", 25)) {
    /*                          ^                    */
#ifdef GL_AMD_draw_buffers_blend
      *iv_return = GL_AMD_draw_buffers_blend;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_ARB_draw_buffers_blend", 25)) {
    /*                          ^                    */
#ifdef GL_ARB_draw_buffers_blend
      *iv_return = GL_ARB_draw_buffers_blend;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_BUMP_NUM_TEX_UNITS_ATI", 25)) {
    /*                          ^                    */
#ifdef GL_BUMP_NUM_TEX_UNITS_ATI
      *iv_return = GL_BUMP_NUM_TEX_UNITS_ATI;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_CIRCULAR_CCW_ARC_TO_NV", 25)) {
    /*                          ^                    */
#ifdef GL_CIRCULAR_CCW_ARC_TO_NV
      *iv_return = GL_CIRCULAR_CCW_ARC_TO_NV;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_COMBINER_SUM_OUTPUT_NV", 25)) {
    /*                          ^                    */
#ifdef GL_COMBINER_SUM_OUTPUT_NV
      *iv_return = GL_COMBINER_SUM_OUTPUT_NV;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_COVERAGE_MODULATION_NV", 25)) {
    /*                          ^                    */
#ifdef GL_COVERAGE_MODULATION_NV
      *iv_return = GL_COVERAGE_MODULATION_NV;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_INNOCENT_CONTEXT_RESET", 25)) {
    /*                          ^                    */
#ifdef GL_INNOCENT_CONTEXT_RESET
      *iv_return = GL_INNOCENT_CONTEXT_RESET;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_INVERTED_SCREEN_W_REND", 25)) {
    /*                          ^                    */
#ifdef GL_INVERTED_SCREEN_W_REND
      *iv_return = GL_INVERTED_SCREEN_W_REND;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_MATERIAL_SIDE_HINT_PGI", 25)) {
    /*                          ^                    */
#ifdef GL_MATERIAL_SIDE_HINT_PGI
      *iv_return = GL_MATERIAL_SIDE_HINT_PGI;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_MODULATE_SUBTRACT_ATIX", 25)) {
    /*                          ^                    */
#ifdef GL_MODULATE_SUBTRACT_ATIX
      *iv_return = GL_MODULATE_SUBTRACT_ATIX;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_PATH_GEN_COMPONENTS_NV", 25)) {
    /*                          ^                    */
#ifdef GL_PATH_GEN_COMPONENTS_NV
      *iv_return = GL_PATH_GEN_COMPONENTS_NV;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_QUERY_NO_WAIT_INVERTED", 25)) {
    /*                          ^                    */
#ifdef GL_QUERY_NO_WAIT_INVERTED
      *iv_return = GL_QUERY_NO_WAIT_INVERTED;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_RESAMPLE_DECIMATE_SGIX", 25)) {
    /*                          ^                    */
#ifdef GL_RESAMPLE_DECIMATE_SGIX
      *iv_return = GL_RESAMPLE_DECIMATE_SGIX;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_RESAMPLE_REPLICATE_OML", 25)) {
    /*                          ^                    */
#ifdef GL_RESAMPLE_REPLICATE_OML
      *iv_return = GL_RESAMPLE_REPLICATE_OML;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_RESAMPLE_ZERO_FILL_OML", 25)) {
    /*                          ^                    */
#ifdef GL_RESAMPLE_ZERO_FILL_OML
      *iv_return = GL_RESAMPLE_ZERO_FILL_OML;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_SGIX_tag_sample_buffer", 25)) {
    /*                          ^                    */
#ifdef GL_SGIX_tag_sample_buffer
      *iv_return = GL_SGIX_tag_sample_buffer;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_UNSIGNED_INT16_VEC2_NV", 25)) {
    /*                          ^                    */
#ifdef GL_UNSIGNED_INT16_VEC2_NV
      *iv_return = GL_UNSIGNED_INT16_VEC2_NV;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_UNSIGNED_INT16_VEC3_NV", 25)) {
    /*                          ^                    */
#ifdef GL_UNSIGNED_INT16_VEC3_NV
      *iv_return = GL_UNSIGNED_INT16_VEC3_NV;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_UNSIGNED_INT16_VEC4_NV", 25)) {
    /*                          ^                    */
#ifdef GL_UNSIGNED_INT16_VEC4_NV
      *iv_return = GL_UNSIGNED_INT16_VEC4_NV;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_UNSIGNED_INT64_VEC2_NV", 25)) {
    /*                          ^                    */
#ifdef GL_UNSIGNED_INT64_VEC2_NV
      *iv_return = GL_UNSIGNED_INT64_VEC2_NV;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_UNSIGNED_INT64_VEC3_NV", 25)) {
    /*                          ^                    */
#ifdef GL_UNSIGNED_INT64_VEC3_NV
      *iv_return = GL_UNSIGNED_INT64_VEC3_NV;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_UNSIGNED_INT64_VEC4_NV", 25)) {
    /*                          ^                    */
#ifdef GL_UNSIGNED_INT64_VEC4_NV
      *iv_return = GL_UNSIGNED_INT64_VEC4_NV;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_UNSIGNED_SHORT_4_4_4_4", 25)) {
    /*                          ^                    */
#ifdef GL_UNSIGNED_SHORT_4_4_4_4
      *iv_return = GL_UNSIGNED_SHORT_4_4_4_4;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_UNSIGNED_SHORT_5_5_5_1", 25)) {
    /*                          ^                    */
#ifdef GL_UNSIGNED_SHORT_5_5_5_1
      *iv_return = GL_UNSIGNED_SHORT_5_5_5_1;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_VERTICES_SUBMITTED_ARB", 25)) {
    /*                          ^                    */
#ifdef GL_VERTICES_SUBMITTED_ARB
      *iv_return = GL_VERTICES_SUBMITTED_ARB;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_VIEWPORT_SUBPIXEL_BITS", 25)) {
    /*                          ^                    */
#ifdef GL_VIEWPORT_SUBPIXEL_BITS
      *iv_return = GL_VIEWPORT_SUBPIXEL_BITS;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case 'a':
    if (memEQ(name, "GLEW_ARB_fragment_program", 25)) {
    /*                          ^                    */
#ifdef GLEW_ARB_fragment_program
      *iv_return = GLEW_ARB_fragment_program;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GLEW_ARB_framebuffer_sRGB", 25)) {
    /*                          ^                    */
#ifdef GLEW_ARB_framebuffer_sRGB
      *iv_return = GLEW_ARB_framebuffer_sRGB;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GLEW_ARB_shader_precision", 25)) {
    /*                          ^                    */
#ifdef GLEW_ARB_shader_precision
      *iv_return = GLEW_ARB_shader_precision;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GLEW_ARB_transpose_matrix", 25)) {
    /*                          ^                    */
#ifdef GLEW_ARB_transpose_matrix
      *iv_return = GLEW_ARB_transpose_matrix;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GLEW_EXT_framebuffer_blit", 25)) {
    /*                          ^                    */
#ifdef GLEW_EXT_framebuffer_blit
      *iv_return = GLEW_EXT_framebuffer_blit;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GLEW_EXT_framebuffer_sRGB", 25)) {
    /*                          ^                    */
#ifdef GLEW_EXT_framebuffer_sRGB
      *iv_return = GLEW_EXT_framebuffer_sRGB;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_ANGLE_framebuffer_blit", 25)) {
    /*                          ^                    */
#ifdef GL_ANGLE_framebuffer_blit
      *iv_return = GL_ANGLE_framebuffer_blit;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_INTEL_framebuffer_CMAA", 25)) {
    /*                          ^                    */
#ifdef GL_INTEL_framebuffer_CMAA
      *iv_return = GL_INTEL_framebuffer_CMAA;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glBindFragDataLocationEXT", 25)) {
    /*                          ^                    */
#ifdef glBindFragDataLocationEXT
      *iv_return = glBindFragDataLocationEXT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glCompileShaderIncludeARB", 25)) {
    /*                          ^                    */
#ifdef glCompileShaderIncludeARB
      *iv_return = glCompileShaderIncludeARB;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glDebugMessageCallbackAMD", 25)) {
    /*                          ^                    */
#ifdef glDebugMessageCallbackAMD
      *iv_return = glDebugMessageCallbackAMD;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glDebugMessageCallbackARB", 25)) {
    /*                          ^                    */
#ifdef glDebugMessageCallbackARB
      *iv_return = glDebugMessageCallbackARB;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glGetInvariantBooleanvEXT", 25)) {
    /*                          ^                    */
#ifdef glGetInvariantBooleanvEXT
      *iv_return = glGetInvariantBooleanvEXT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glGetInvariantIntegervEXT", 25)) {
    /*                          ^                    */
#ifdef glGetInvariantIntegervEXT
      *iv_return = glGetInvariantIntegervEXT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glMultiTexParameterIivEXT", 25)) {
    /*                          ^                    */
#ifdef glMultiTexParameterIivEXT
      *iv_return = glMultiTexParameterIivEXT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glVertexArrayAttribFormat", 25)) {
    /*                          ^                    */
#ifdef glVertexArrayAttribFormat
      *iv_return = glVertexArrayAttribFormat;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glVertexArrayVertexBuffer", 25)) {
    /*                          ^                    */
#ifdef glVertexArrayVertexBuffer
      *iv_return = glVertexArrayVertexBuffer;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case 'b':
    if (memEQ(name, "glGetQueryObjecti64vANGLE", 25)) {
    /*                          ^                    */
#ifdef glGetQueryObjecti64vANGLE
      *iv_return = glGetQueryObjecti64vANGLE;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case 'c':
    if (memEQ(name, "GLEW_APPLE_client_storage", 25)) {
    /*                          ^                    */
#ifdef GLEW_APPLE_client_storage
      *iv_return = GLEW_APPLE_client_storage;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GLEW_ARB_occlusion_query2", 25)) {
    /*                          ^                    */
#ifdef GLEW_ARB_occlusion_query2
      *iv_return = GLEW_ARB_occlusion_query2;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case 'd':
    if (memEQ(name, "GL_NV_copy_depth_to_color", 25)) {
    /*                          ^                    */
#ifdef GL_NV_copy_depth_to_color
      *iv_return = GL_NV_copy_depth_to_color;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glClearNamedBufferDataEXT", 25)) {
    /*                          ^                    */
#ifdef glClearNamedBufferDataEXT
      *iv_return = glClearNamedBufferDataEXT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glClearNamedBufferSubData", 25)) {
    /*                          ^                    */
#ifdef glClearNamedBufferSubData
      *iv_return = glClearNamedBufferSubData;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glClearNamedFramebufferfi", 25)) {
    /*                          ^                    */
#ifdef glClearNamedFramebufferfi
      *iv_return = glClearNamedFramebufferfi;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glClearNamedFramebufferfv", 25)) {
    /*                          ^                    */
#ifdef glClearNamedFramebufferfv
      *iv_return = glClearNamedFramebufferfv;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glClearNamedFramebufferiv", 25)) {
    /*                          ^                    */
#ifdef glClearNamedFramebufferiv
      *iv_return = glClearNamedFramebufferiv;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glCompressedTexImage1DARB", 25)) {
    /*                          ^                    */
#ifdef glCompressedTexImage1DARB
      *iv_return = glCompressedTexImage1DARB;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glCompressedTexImage2DARB", 25)) {
    /*                          ^                    */
#ifdef glCompressedTexImage2DARB
      *iv_return = glCompressedTexImage2DARB;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glCompressedTexImage3DARB", 25)) {
    /*                          ^                    */
#ifdef glCompressedTexImage3DARB
      *iv_return = glCompressedTexImage3DARB;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glCompressedTexSubImage1D", 25)) {
    /*                          ^                    */
#ifdef glCompressedTexSubImage1D
      *iv_return = glCompressedTexSubImage1D;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glCompressedTexSubImage2D", 25)) {
    /*                          ^                    */
#ifdef glCompressedTexSubImage2D
      *iv_return = glCompressedTexSubImage2D;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glCompressedTexSubImage3D", 25)) {
    /*                          ^                    */
#ifdef glCompressedTexSubImage3D
      *iv_return = glCompressedTexSubImage3D;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glMatrixLoadTransposedEXT", 25)) {
    /*                          ^                    */
#ifdef glMatrixLoadTransposedEXT
      *iv_return = glMatrixLoadTransposedEXT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glMatrixLoadTransposefEXT", 25)) {
    /*                          ^                    */
#ifdef glMatrixLoadTransposefEXT
      *iv_return = glMatrixLoadTransposefEXT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case 'e':
    if (memEQ(name, "GLEW_EXT_stencil_two_side", 25)) {
    /*                          ^                    */
#ifdef GLEW_EXT_stencil_two_side
      *iv_return = GLEW_EXT_stencil_two_side;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GLEW_SGIS_generate_mipmap", 25)) {
    /*                          ^                    */
#ifdef GLEW_SGIS_generate_mipmap
      *iv_return = GLEW_SGIS_generate_mipmap;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GLEW_SGIS_texture_filter4", 25)) {
    /*                          ^                    */
#ifdef GLEW_SGIS_texture_filter4
      *iv_return = GLEW_SGIS_texture_filter4;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GLEW_SGIX_reference_plane", 25)) {
    /*                          ^                    */
#ifdef GLEW_SGIX_reference_plane
      *iv_return = GLEW_SGIX_reference_plane;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GLEW_SGIX_texture_add_env", 25)) {
    /*                          ^                    */
#ifdef GLEW_SGIX_texture_add_env
      *iv_return = GLEW_SGIX_texture_add_env;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_AMD_conservative_depth", 25)) {
    /*                          ^                    */
#ifdef GL_AMD_conservative_depth
      *iv_return = GL_AMD_conservative_depth;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_ARB_conservative_depth", 25)) {
    /*                          ^                    */
#ifdef GL_ARB_conservative_depth
      *iv_return = GL_ARB_conservative_depth;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_ARB_framebuffer_object", 25)) {
    /*                          ^                    */
#ifdef GL_ARB_framebuffer_object
      *iv_return = GL_ARB_framebuffer_object;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_ARB_shader_texture_lod", 25)) {
    /*                          ^                    */
#ifdef GL_ARB_shader_texture_lod
      *iv_return = GL_ARB_shader_texture_lod;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_ATI_shader_texture_lod", 25)) {
    /*                          ^                    */
#ifdef GL_ATI_shader_texture_lod
      *iv_return = GL_ATI_shader_texture_lod;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_EXT_framebuffer_object", 25)) {
    /*                          ^                    */
#ifdef GL_EXT_framebuffer_object
      *iv_return = GL_EXT_framebuffer_object;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_EXT_raster_multisample", 25)) {
    /*                          ^                    */
#ifdef GL_EXT_raster_multisample
      *iv_return = GL_EXT_raster_multisample;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_EXT_shader_integer_mix", 25)) {
    /*                          ^                    */
#ifdef GL_EXT_shader_integer_mix
      *iv_return = GL_EXT_shader_integer_mix;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_IBM_vertex_array_lists", 25)) {
    /*                          ^                    */
#ifdef GL_IBM_vertex_array_lists
      *iv_return = GL_IBM_vertex_array_lists;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glBufferPageCommitmentARB", 25)) {
    /*                          ^                    */
#ifdef glBufferPageCommitmentARB
      *iv_return = glBufferPageCommitmentARB;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glFlushVertexArrayRangeNV", 25)) {
    /*                          ^                    */
#ifdef glFlushVertexArrayRangeNV
      *iv_return = glFlushVertexArrayRangeNV;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glFramebufferRenderbuffer", 25)) {
    /*                          ^                    */
#ifdef glFramebufferRenderbuffer
      *iv_return = glFramebufferRenderbuffer;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glFramebufferTexture1DEXT", 25)) {
    /*                          ^                    */
#ifdef glFramebufferTexture1DEXT
      *iv_return = glFramebufferTexture1DEXT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glFramebufferTexture2DEXT", 25)) {
    /*                          ^                    */
#ifdef glFramebufferTexture2DEXT
      *iv_return = glFramebufferTexture2DEXT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glFramebufferTexture3DEXT", 25)) {
    /*                          ^                    */
#ifdef glFramebufferTexture3DEXT
      *iv_return = glFramebufferTexture3DEXT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glFramebufferTextureLayer", 25)) {
    /*                          ^                    */
#ifdef glFramebufferTextureLayer
      *iv_return = glFramebufferTextureLayer;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glGetTextureParameterIuiv", 25)) {
    /*                          ^                    */
#ifdef glGetTextureParameterIuiv
      *iv_return = glGetTextureParameterIuiv;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glInvalidateBufferSubData", 25)) {
    /*                          ^                    */
#ifdef glInvalidateBufferSubData
      *iv_return = glInvalidateBufferSubData;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glLogMessageCallbackREGAL", 25)) {
    /*                          ^                    */
#ifdef glLogMessageCallbackREGAL
      *iv_return = glLogMessageCallbackREGAL;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glMultiTexRenderbufferEXT", 25)) {
    /*                          ^                    */
#ifdef glMultiTexRenderbufferEXT
      *iv_return = glMultiTexRenderbufferEXT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glNamedFramebufferTexture", 25)) {
    /*                          ^                    */
#ifdef glNamedFramebufferTexture
      *iv_return = glNamedFramebufferTexture;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glTexStorage2DMultisample", 25)) {
    /*                          ^                    */
#ifdef glTexStorage2DMultisample
      *iv_return = glTexStorage2DMultisample;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glTexStorage3DMultisample", 25)) {
    /*                          ^                    */
#ifdef glTexStorage3DMultisample
      *iv_return = glTexStorage3DMultisample;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case 'f':
    if (memEQ(name, "GL_NV_transform_feedback2", 25)) {
    /*                          ^                    */
#ifdef GL_NV_transform_feedback2
      *iv_return = GL_NV_transform_feedback2;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glBindTransformFeedbackNV", 25)) {
    /*                          ^                    */
#ifdef glBindTransformFeedbackNV
      *iv_return = glBindTransformFeedbackNV;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glDrawTransformFeedbackNV", 25)) {
    /*                          ^                    */
#ifdef glDrawTransformFeedbackNV
      *iv_return = glDrawTransformFeedbackNV;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glIsNamedBufferResidentNV", 25)) {
    /*                          ^                    */
#ifdef glIsNamedBufferResidentNV
      *iv_return = glIsNamedBufferResidentNV;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case 'g':
    if (memEQ(name, "GLEW_NV_fragment_program2", 25)) {
    /*                          ^                    */
#ifdef GLEW_NV_fragment_program2
      *iv_return = GLEW_NV_fragment_program2;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GLEW_NV_fragment_program4", 25)) {
    /*                          ^                    */
#ifdef GLEW_NV_fragment_program4
      *iv_return = GLEW_NV_fragment_program4;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GLEW_NV_texgen_reflection", 25)) {
    /*                          ^                    */
#ifdef GLEW_NV_texgen_reflection
      *iv_return = GLEW_NV_texgen_reflection;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glDeleteFragmentShaderATI", 25)) {
    /*                          ^                    */
#ifdef glDeleteFragmentShaderATI
      *iv_return = glDeleteFragmentShaderATI;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case 'h':
    if (memEQ(name, "GLEW_ARB_enhanced_layouts", 25)) {
    /*                          ^                    */
#ifdef GLEW_ARB_enhanced_layouts
      *iv_return = GLEW_ARB_enhanced_layouts;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GLEW_SGIS_sharpen_texture", 25)) {
    /*                          ^                    */
#ifdef GLEW_SGIS_sharpen_texture
      *iv_return = GLEW_SGIS_sharpen_texture;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_ARB_depth_buffer_float", 25)) {
    /*                          ^                    */
#ifdef GL_ARB_depth_buffer_float
      *iv_return = GL_ARB_depth_buffer_float;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case 'i':
    if (memEQ(name, "GLEW_ARB_point_parameters", 25)) {
    /*                          ^                    */
#ifdef GLEW_ARB_point_parameters
      *iv_return = GLEW_ARB_point_parameters;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GLEW_EXT_clip_volume_hint", 25)) {
    /*                          ^                    */
#ifdef GLEW_EXT_clip_volume_hint
      *iv_return = GLEW_EXT_clip_volume_hint;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GLEW_EXT_point_parameters", 25)) {
    /*                          ^                    */
#ifdef GLEW_EXT_point_parameters
      *iv_return = GLEW_EXT_point_parameters;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_NVX_conditional_render", 25)) {
    /*                          ^                    */
#ifdef GL_NVX_conditional_render
      *iv_return = GL_NVX_conditional_render;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glEndConditionalRenderNVX", 25)) {
    /*                          ^                    */
#ifdef glEndConditionalRenderNVX
      *iv_return = glEndConditionalRenderNVX;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glFragmentLightModelfSGIX", 25)) {
    /*                          ^                    */
#ifdef glFragmentLightModelfSGIX
      *iv_return = glFragmentLightModelfSGIX;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glFragmentLightModelfvEXT", 25)) {
    /*                          ^                    */
#ifdef glFragmentLightModelfvEXT
      *iv_return = glFragmentLightModelfvEXT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glFragmentLightModeliSGIX", 25)) {
    /*                          ^                    */
#ifdef glFragmentLightModeliSGIX
      *iv_return = glFragmentLightModeliSGIX;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glFragmentLightModelivEXT", 25)) {
    /*                          ^                    */
#ifdef glFragmentLightModelivEXT
      *iv_return = glFragmentLightModelivEXT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glProgramUniform1ui64vARB", 25)) {
    /*                          ^                    */
#ifdef glProgramUniform1ui64vARB
      *iv_return = glProgramUniform1ui64vARB;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glProgramUniform2ui64vARB", 25)) {
    /*                          ^                    */
#ifdef glProgramUniform2ui64vARB
      *iv_return = glProgramUniform2ui64vARB;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glProgramUniform3ui64vARB", 25)) {
    /*                          ^                    */
#ifdef glProgramUniform3ui64vARB
      *iv_return = glProgramUniform3ui64vARB;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glProgramUniform4ui64vARB", 25)) {
    /*                          ^                    */
#ifdef glProgramUniform4ui64vARB
      *iv_return = glProgramUniform4ui64vARB;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glProgramUniformMatrix2dv", 25)) {
    /*                          ^                    */
#ifdef glProgramUniformMatrix2dv
      *iv_return = glProgramUniformMatrix2dv;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glProgramUniformMatrix2fv", 25)) {
    /*                          ^                    */
#ifdef glProgramUniformMatrix2fv
      *iv_return = glProgramUniformMatrix2fv;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glProgramUniformMatrix3dv", 25)) {
    /*                          ^                    */
#ifdef glProgramUniformMatrix3dv
      *iv_return = glProgramUniformMatrix3dv;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glProgramUniformMatrix3fv", 25)) {
    /*                          ^                    */
#ifdef glProgramUniformMatrix3fv
      *iv_return = glProgramUniformMatrix3fv;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glProgramUniformMatrix4dv", 25)) {
    /*                          ^                    */
#ifdef glProgramUniformMatrix4dv
      *iv_return = glProgramUniformMatrix4dv;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glProgramUniformMatrix4fv", 25)) {
    /*                          ^                    */
#ifdef glProgramUniformMatrix4fv
      *iv_return = glProgramUniformMatrix4fv;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case 'j':
    if (memEQ(name, "GL_APPLE_object_purgeable", 25)) {
    /*                          ^                    */
#ifdef GL_APPLE_object_purgeable
      *iv_return = GL_APPLE_object_purgeable;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case 'l':
    if (memEQ(name, "GLEW_ARB_half_float_pixel", 25)) {
    /*                          ^                    */
#ifdef GLEW_ARB_half_float_pixel
      *iv_return = GLEW_ARB_half_float_pixel;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GLEW_EXT_paletted_texture", 25)) {
    /*                          ^                    */
#ifdef GLEW_EXT_paletted_texture
      *iv_return = GLEW_EXT_paletted_texture;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_ARB_invalidate_subdata", 25)) {
    /*                          ^                    */
#ifdef GL_ARB_invalidate_subdata
      *iv_return = GL_ARB_invalidate_subdata;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glCopyConvolutionFilter1D", 25)) {
    /*                          ^                    */
#ifdef glCopyConvolutionFilter1D
      *iv_return = glCopyConvolutionFilter1D;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glCopyConvolutionFilter2D", 25)) {
    /*                          ^                    */
#ifdef glCopyConvolutionFilter2D
      *iv_return = glCopyConvolutionFilter2D;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glCurrentPaletteMatrixARB", 25)) {
    /*                          ^                    */
#ifdef glCurrentPaletteMatrixARB
      *iv_return = glCurrentPaletteMatrixARB;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case 'm':
    if (memEQ(name, "GLEW_AMD_sample_positions", 25)) {
    /*                          ^                    */
#ifdef GLEW_AMD_sample_positions
      *iv_return = GLEW_AMD_sample_positions;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GLEW_ARB_sample_locations", 25)) {
    /*                          ^                    */
#ifdef GLEW_ARB_sample_locations
      *iv_return = GLEW_ARB_sample_locations;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GLEW_NV_geometry_program4", 25)) {
    /*                          ^                    */
#ifdef GLEW_NV_geometry_program4
      *iv_return = GLEW_NV_geometry_program4;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GLEW_NV_primitive_restart", 25)) {
    /*                          ^                    */
#ifdef GLEW_NV_primitive_restart
      *iv_return = GLEW_NV_primitive_restart;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glGetProgramParameterdvNV", 25)) {
    /*                          ^                    */
#ifdef glGetProgramParameterdvNV
      *iv_return = glGetProgramParameterdvNV;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glGetProgramParameterfvNV", 25)) {
    /*                          ^                    */
#ifdef glGetProgramParameterfvNV
      *iv_return = glGetProgramParameterfvNV;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glGetProgramResourceIndex", 25)) {
    /*                          ^                    */
#ifdef glGetProgramResourceIndex
      *iv_return = glGetProgramResourceIndex;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glGetUniformBufferSizeEXT", 25)) {
    /*                          ^                    */
#ifdef glGetUniformBufferSizeEXT
      *iv_return = glGetUniformBufferSizeEXT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glGetUniformSubroutineuiv", 25)) {
    /*                          ^                    */
#ifdef glGetUniformSubroutineuiv
      *iv_return = glGetUniformSubroutineuiv;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glLGPUCopyImageSubDataNVX", 25)) {
    /*                          ^                    */
#ifdef glLGPUCopyImageSubDataNVX
      *iv_return = glLGPUCopyImageSubDataNVX;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case 'n':
    if (memEQ(name, "GLEW_ARB_bindless_texture", 25)) {
    /*                          ^                    */
#ifdef GLEW_ARB_bindless_texture
      *iv_return = GLEW_ARB_bindless_texture;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GLEW_EXT_bindable_uniform", 25)) {
    /*                          ^                    */
#ifdef GLEW_EXT_bindable_uniform
      *iv_return = GLEW_EXT_bindable_uniform;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GLEW_OES_single_precision", 25)) {
    /*                          ^                    */
#ifdef GLEW_OES_single_precision
      *iv_return = GLEW_OES_single_precision;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_SGIS_point_line_texgen", 25)) {
    /*                          ^                    */
#ifdef GL_SGIS_point_line_texgen
      *iv_return = GL_SGIS_point_line_texgen;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glGetPerfMonitorGroupsAMD", 25)) {
    /*                          ^                    */
#ifdef glGetPerfMonitorGroupsAMD
      *iv_return = glGetPerfMonitorGroupsAMD;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glIsImageHandleResidentNV", 25)) {
    /*                          ^                    */
#ifdef glIsImageHandleResidentNV
      *iv_return = glIsImageHandleResidentNV;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glResumeTransformFeedback", 25)) {
    /*                          ^                    */
#ifdef glResumeTransformFeedback
      *iv_return = glResumeTransformFeedback;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case 'o':
    if (memEQ(name, "GLEW_ARB_geometry_shader4", 25)) {
    /*                          ^                    */
#ifdef GLEW_ARB_geometry_shader4
      *iv_return = GLEW_ARB_geometry_shader4;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GLEW_ARB_provoking_vertex", 25)) {
    /*                          ^                    */
#ifdef GLEW_ARB_provoking_vertex
      *iv_return = GLEW_ARB_provoking_vertex;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GLEW_EXT_coordinate_frame", 25)) {
    /*                          ^                    */
#ifdef GLEW_EXT_coordinate_frame
      *iv_return = GLEW_EXT_coordinate_frame;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GLEW_EXT_geometry_shader4", 25)) {
    /*                          ^                    */
#ifdef GLEW_EXT_geometry_shader4
      *iv_return = GLEW_EXT_geometry_shader4;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GLEW_EXT_provoking_vertex", 25)) {
    /*                          ^                    */
#ifdef GLEW_EXT_provoking_vertex
      *iv_return = GLEW_EXT_provoking_vertex;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glDispatchComputeIndirect", 25)) {
    /*                          ^                    */
#ifdef glDispatchComputeIndirect
      *iv_return = glDispatchComputeIndirect;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glEndTransformFeedbackEXT", 25)) {
    /*                          ^                    */
#ifdef glEndTransformFeedbackEXT
      *iv_return = glEndTransformFeedbackEXT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glFragmentCoverageColorNV", 25)) {
    /*                          ^                    */
#ifdef glFragmentCoverageColorNV
      *iv_return = glFragmentCoverageColorNV;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glGenTransformFeedbacksNV", 25)) {
    /*                          ^                    */
#ifdef glGenTransformFeedbacksNV
      *iv_return = glGenTransformFeedbacksNV;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glGetTransformFeedbacki_v", 25)) {
    /*                          ^                    */
#ifdef glGetTransformFeedbacki_v
      *iv_return = glGetTransformFeedbacki_v;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glMultiTexCoordPointerEXT", 25)) {
    /*                          ^                    */
#ifdef glMultiTexCoordPointerEXT
      *iv_return = glMultiTexCoordPointerEXT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glTextureStorageSparseAMD", 25)) {
    /*                          ^                    */
#ifdef glTextureStorageSparseAMD
      *iv_return = glTextureStorageSparseAMD;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case 'p':
    if (memEQ(name, "GLEW_ANGLE_program_binary", 25)) {
    /*                          ^                    */
#ifdef GLEW_ANGLE_program_binary
      *iv_return = GLEW_ANGLE_program_binary;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GLEW_ARB_map_buffer_range", 25)) {
    /*                          ^                    */
#ifdef GLEW_ARB_map_buffer_range
      *iv_return = GLEW_ARB_map_buffer_range;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GLEW_ATI_separate_stencil", 25)) {
    /*                          ^                    */
#ifdef GLEW_ATI_separate_stencil
      *iv_return = GLEW_ATI_separate_stencil;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_ARB_get_program_binary", 25)) {
    /*                          ^                    */
#ifdef GL_ARB_get_program_binary
      *iv_return = GL_ARB_get_program_binary;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glLoadTransposeMatrixdARB", 25)) {
    /*                          ^                    */
#ifdef glLoadTransposeMatrixdARB
      *iv_return = glLoadTransposeMatrixdARB;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glLoadTransposeMatrixfARB", 25)) {
    /*                          ^                    */
#ifdef glLoadTransposeMatrixfARB
      *iv_return = glLoadTransposeMatrixfARB;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glMultTransposeMatrixdARB", 25)) {
    /*                          ^                    */
#ifdef glMultTransposeMatrixdARB
      *iv_return = glMultTransposeMatrixdARB;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glMultTransposeMatrixfARB", 25)) {
    /*                          ^                    */
#ifdef glMultTransposeMatrixfARB
      *iv_return = glMultTransposeMatrixfARB;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case 'r':
    if (memEQ(name, "GLEW_ARB_arrays_of_arrays", 25)) {
    /*                          ^                    */
#ifdef GLEW_ARB_arrays_of_arrays
      *iv_return = GLEW_ARB_arrays_of_arrays;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GLEW_EXT_vertex_weighting", 25)) {
    /*                          ^                    */
#ifdef GLEW_EXT_vertex_weighting
      *iv_return = GLEW_EXT_vertex_weighting;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_ARB_color_buffer_float", 25)) {
    /*                          ^                    */
#ifdef GL_ARB_color_buffer_float
      *iv_return = GL_ARB_color_buffer_float;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_NV_conservative_raster", 25)) {
    /*                          ^                    */
#ifdef GL_NV_conservative_raster
      *iv_return = GL_NV_conservative_raster;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_NV_shader_atomic_float", 25)) {
    /*                          ^                    */
#ifdef GL_NV_shader_atomic_float
      *iv_return = GL_NV_shader_atomic_float;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_NV_shader_atomic_int64", 25)) {
    /*                          ^                    */
#ifdef GL_NV_shader_atomic_int64
      *iv_return = GL_NV_shader_atomic_int64;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_NV_shader_thread_group", 25)) {
    /*                          ^                    */
#ifdef GL_NV_shader_thread_group
      *iv_return = GL_NV_shader_thread_group;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_NV_texture_multisample", 25)) {
    /*                          ^                    */
#ifdef GL_NV_texture_multisample
      *iv_return = GL_NV_texture_multisample;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glGetHistogramParameterfv", 25)) {
    /*                          ^                    */
#ifdef glGetHistogramParameterfv
      *iv_return = glGetHistogramParameterfv;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glGetHistogramParameteriv", 25)) {
    /*                          ^                    */
#ifdef glGetHistogramParameteriv
      *iv_return = glGetHistogramParameteriv;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glGetNextPerfQueryIdINTEL", 25)) {
    /*                          ^                    */
#ifdef glGetNextPerfQueryIdINTEL
      *iv_return = glGetNextPerfQueryIdINTEL;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glGetSamplerParameterIuiv", 25)) {
    /*                          ^                    */
#ifdef glGetSamplerParameterIuiv
      *iv_return = glGetSamplerParameterIuiv;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glMakeBufferNonResidentNV", 25)) {
    /*                          ^                    */
#ifdef glMakeBufferNonResidentNV
      *iv_return = glMakeBufferNonResidentNV;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glSubpixelPrecisionBiasNV", 25)) {
    /*                          ^                    */
#ifdef glSubpixelPrecisionBiasNV
      *iv_return = glSubpixelPrecisionBiasNV;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glTextureParameterIuivEXT", 25)) {
    /*                          ^                    */
#ifdef glTextureParameterIuivEXT
      *iv_return = glTextureParameterIuivEXT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glValidateProgramPipeline", 25)) {
    /*                          ^                    */
#ifdef glValidateProgramPipeline
      *iv_return = glValidateProgramPipeline;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glVertexAttribIPointerEXT", 25)) {
    /*                          ^                    */
#ifdef glVertexAttribIPointerEXT
      *iv_return = glVertexAttribIPointerEXT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glVertexAttribLPointerEXT", 25)) {
    /*                          ^                    */
#ifdef glVertexAttribLPointerEXT
      *iv_return = glVertexAttribLPointerEXT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case 's':
    if (memEQ(name, "GLEW_ARB_instanced_arrays", 25)) {
    /*                          ^                    */
#ifdef GLEW_ARB_instanced_arrays
      *iv_return = GLEW_ARB_instanced_arrays;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GLEW_SGIX_async_histogram", 25)) {
    /*                          ^                    */
#ifdef GLEW_SGIX_async_histogram
      *iv_return = GLEW_SGIX_async_histogram;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_ANGLE_instanced_arrays", 25)) {
    /*                          ^                    */
#ifdef GL_ANGLE_instanced_arrays
      *iv_return = GL_ANGLE_instanced_arrays;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_EXT_transform_feedback", 25)) {
    /*                          ^                    */
#ifdef GL_EXT_transform_feedback
      *iv_return = GL_EXT_transform_feedback;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case 't':
    if (memEQ(name, "GLEW_APPLE_transform_hint", 25)) {
    /*                          ^                    */
#ifdef GLEW_APPLE_transform_hint
      *iv_return = GLEW_APPLE_transform_hint;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GLEW_NV_texture_rectangle", 25)) {
    /*                          ^                    */
#ifdef GLEW_NV_texture_rectangle
      *iv_return = GLEW_NV_texture_rectangle;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GLEW_NV_vertex_program1_1", 25)) {
    /*                          ^                    */
#ifdef GLEW_NV_vertex_program1_1
      *iv_return = GLEW_NV_vertex_program1_1;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GLEW_OES_byte_coordinates", 25)) {
    /*                          ^                    */
#ifdef GLEW_OES_byte_coordinates
      *iv_return = GLEW_OES_byte_coordinates;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_ATIX_texture_env_route", 25)) {
    /*                          ^                    */
#ifdef GL_ATIX_texture_env_route
      *iv_return = GL_ATIX_texture_env_route;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_NV_register_combiners2", 25)) {
    /*                          ^                    */
#ifdef GL_NV_register_combiners2
      *iv_return = GL_NV_register_combiners2;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glBlendEquationIndexedAMD", 25)) {
    /*                          ^                    */
#ifdef glBlendEquationIndexedAMD
      *iv_return = glBlendEquationIndexedAMD;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glDeleteVertexArraysAPPLE", 25)) {
    /*                          ^                    */
#ifdef glDeleteVertexArraysAPPLE
      *iv_return = glDeleteVertexArraysAPPLE;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glEnableVertexArrayAttrib", 25)) {
    /*                          ^                    */
#ifdef glEnableVertexArrayAttrib
      *iv_return = glEnableVertexArrayAttrib;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glEnableVertexAttribAPPLE", 25)) {
    /*                          ^                    */
#ifdef glEnableVertexAttribAPPLE
      *iv_return = glEnableVertexAttribAPPLE;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glEnableVertexAttribArray", 25)) {
    /*                          ^                    */
#ifdef glEnableVertexAttribArray
      *iv_return = glEnableVertexAttribArray;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glMatrixMultTransposedEXT", 25)) {
    /*                          ^                    */
#ifdef glMatrixMultTransposedEXT
      *iv_return = glMatrixMultTransposedEXT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glMatrixMultTransposefEXT", 25)) {
    /*                          ^                    */
#ifdef glMatrixMultTransposefEXT
      *iv_return = glMatrixMultTransposefEXT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case 'u':
    if (memEQ(name, "GLEW_AMD_gpu_shader_int64", 25)) {
    /*                          ^                    */
#ifdef GLEW_AMD_gpu_shader_int64
      *iv_return = GLEW_AMD_gpu_shader_int64;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GLEW_ARB_gpu_shader_int64", 25)) {
    /*                          ^                    */
#ifdef GLEW_ARB_gpu_shader_int64
      *iv_return = GLEW_ARB_gpu_shader_int64;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_ARB_texture_rgb10_a2ui", 25)) {
    /*                          ^                    */
#ifdef GL_ARB_texture_rgb10_a2ui
      *iv_return = GL_ARB_texture_rgb10_a2ui;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_EXT_texture_edge_clamp", 25)) {
    /*                          ^                    */
#ifdef GL_EXT_texture_edge_clamp
      *iv_return = GL_EXT_texture_edge_clamp;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glGetConvolutionFilterEXT", 25)) {
    /*                          ^                    */
#ifdef glGetConvolutionFilterEXT
      *iv_return = glGetConvolutionFilterEXT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glGetPerfCounterInfoINTEL", 25)) {
    /*                          ^                    */
#ifdef glGetPerfCounterInfoINTEL
      *iv_return = glGetPerfCounterInfoINTEL;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glGetQueryBufferObjectuiv", 25)) {
    /*                          ^                    */
#ifdef glGetQueryBufferObjectuiv
      *iv_return = glGetQueryBufferObjectuiv;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case 'v':
    if (memEQ(name, "GL_ARB_derivative_control", 25)) {
    /*                          ^                    */
#ifdef GL_ARB_derivative_control
      *iv_return = GL_ARB_derivative_control;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case 'w':
    if (memEQ(name, "GLEW_NV_draw_vulkan_image", 25)) {
    /*                          ^                    */
#ifdef GLEW_NV_draw_vulkan_image
      *iv_return = GLEW_NV_draw_vulkan_image;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case 'x':
    if (memEQ(name, "GLEW_AMD_texture_texture4", 25)) {
    /*                          ^                    */
#ifdef GLEW_AMD_texture_texture4
      *iv_return = GLEW_AMD_texture_texture4;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GLEW_ARB_texture_cube_map", 25)) {
    /*                          ^                    */
#ifdef GLEW_ARB_texture_cube_map
      *iv_return = GLEW_ARB_texture_cube_map;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GLEW_ARB_texture_env_dot3", 25)) {
    /*                          ^                    */
#ifdef GLEW_ARB_texture_env_dot3
      *iv_return = GLEW_ARB_texture_env_dot3;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GLEW_ARB_texture_stencil8", 25)) {
    /*                          ^                    */
#ifdef GLEW_ARB_texture_stencil8
      *iv_return = GLEW_ARB_texture_stencil8;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GLEW_EXT_texture_cube_map", 25)) {
    /*                          ^                    */
#ifdef GLEW_EXT_texture_cube_map
      *iv_return = GLEW_EXT_texture_cube_map;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GLEW_EXT_texture_env_dot3", 25)) {
    /*                          ^                    */
#ifdef GLEW_EXT_texture_env_dot3
      *iv_return = GLEW_EXT_texture_env_dot3;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GLEW_EXT_texture_lod_bias", 25)) {
    /*                          ^                    */
#ifdef GLEW_EXT_texture_lod_bias
      *iv_return = GLEW_EXT_texture_lod_bias;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_NV_vertex_array_range2", 25)) {
    /*                          ^                    */
#ifdef GL_NV_vertex_array_range2
      *iv_return = GL_NV_vertex_array_range2;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  }
  return PERL_constant_NOTFOUND;
}

static int
constant_26 (pTHX_ const char *name, IV *iv_return) {
  /* When generated this function returned values for the list of names given
     here.  However, subsequent manual editing may have added or removed some.
     GLEW_APPLE_specular_vector GLEW_ARB_ES2_compatibility
     GLEW_ARB_ES3_compatibility GLEW_ARB_half_float_vertex
     GLEW_ARB_seamless_cube_map GLEW_ARB_shader_group_vote
     GLEW_ARB_shader_image_size GLEW_ARB_shader_subroutine
     GLEW_ARB_stencil_texturing GLEW_ARB_texture_query_lod
     GLEW_ARB_texture_rectangle GLEW_ARB_vertex_array_bgra
     GLEW_ATI_map_object_buffer GLEW_EXT_depth_bounds_test
     GLEW_EXT_fragment_lighting GLEW_EXT_multi_draw_arrays
     GLEW_EXT_stencil_clear_tag GLEW_EXT_texture_rectangle
     GLEW_EXT_vertex_array_bgra GLEW_EXT_window_rectangles
     GLEW_GREMEDY_string_marker GLEW_INTEL_parallel_arrays
     GLEW_INTEL_texture_scissor GLEW_NV_conditional_render
     GLEW_NV_depth_buffer_float GLEW_NV_light_max_exponent
     GLEW_NV_register_combiners GLEW_NV_shader_buffer_load
     GLEW_NV_transform_feedback GLEW_NV_vertex_array_range
     GLEW_REGAL_extension_query GLEW_SGIX_texture_lod_bias
     GLEW_SUN_read_video_pixels GL_ACCUM_ADJACENT_PAIRS_NV
     GL_ACTIVE_STENCIL_FACE_EXT GL_ACTIVE_VERTEX_UNITS_ARB
     GL_ALLOW_DRAW_FRG_HINT_PGI GL_ALLOW_DRAW_MEM_HINT_PGI
     GL_ALLOW_DRAW_OBJ_HINT_PGI GL_ALLOW_DRAW_WIN_HINT_PGI
     GL_AMD_blend_minmax_factor GL_AMD_multi_draw_indirect
     GL_AMD_performance_monitor GL_AMD_query_buffer_object
     GL_AMD_transform_feedback4 GL_AMD_vertex_shader_layer
     GL_APPLE_aux_depth_stencil GL_ARB_ES3_1_compatibility
     GL_ARB_ES3_2_compatibility GL_ARB_blend_func_extended
     GL_ARB_clear_buffer_object GL_ARB_direct_state_access
     GL_ARB_indirect_parameters GL_ARB_multi_draw_indirect
     GL_ARB_pixel_buffer_object GL_ARB_post_depth_coverage
     GL_ARB_query_buffer_object GL_ARB_shader_bit_encoding
     GL_ARB_tessellation_shader GL_ARB_texture_compression
     GL_ARB_texture_env_combine GL_ARB_texture_multisample
     GL_ARB_transform_feedback2 GL_ARB_transform_feedback3
     GL_ARB_vertex_array_object GL_ARB_vertex_attrib_64bit
     GL_ARRAY_OBJECT_BUFFER_ATI GL_ARRAY_OBJECT_OFFSET_ATI
     GL_ATI_texture_mirror_once GL_ATI_vertex_array_object
     GL_ATTRIB_ARRAY_POINTER_NV GL_AUX_DEPTH_STENCIL_APPLE
     GL_BACK_SECONDARY_COLOR_NV GL_BINORMAL_ARRAY_TYPE_EXT
     GL_CLIENT_VERTEX_ARRAY_BIT GL_COLOR_ALPHA_PAIRING_ATI
     GL_COLOR_ARRAY_POINTER_EXT GL_COMMAND_BARRIER_BIT_EXT
     GL_COMPUTE_WORK_GROUP_SIZE GL_CONVOLUTION_BORDER_MODE
     GL_CONVOLUTION_FILTER_BIAS GL_CURRENT_RASTER_DISTANCE
     GL_CURRENT_RASTER_POSITION GL_CURRENT_SECONDARY_COLOR
     GL_DEBUG_CALLBACK_FUNCTION GL_DEBUG_GROUP_STACK_DEPTH
     GL_DEBUG_SEVERITY_HIGH_AMD GL_DEBUG_SEVERITY_HIGH_ARB
     GL_DRAW_INDIRECT_LENGTH_NV GL_EDGE_FLAG_ARRAY_POINTER
     GL_ELEMENT_ARRAY_LENGTH_NV GL_EVAL_VERTEX_ATTRIB10_NV
     GL_EVAL_VERTEX_ATTRIB11_NV GL_EVAL_VERTEX_ATTRIB12_NV
     GL_EVAL_VERTEX_ATTRIB13_NV GL_EVAL_VERTEX_ATTRIB14_NV
     GL_EVAL_VERTEX_ATTRIB15_NV GL_EXT_blend_func_separate
     GL_EXT_direct_state_access GL_EXT_draw_range_elements
     GL_EXT_index_array_formats GL_EXT_pixel_buffer_object
     GL_EXT_post_depth_coverage GL_EXT_texture_env_combine
     GL_EXT_texture_sRGB_decode GL_EXT_vertex_attrib_64bit
     GL_FEEDBACK_BUFFER_POINTER GL_FIRST_VERTEX_CONVENTION
     GL_FOG_COORD_ARRAY_POINTER GL_FONT_HAS_KERNING_BIT_NV
     GL_FRAMEBUFFER_BARRIER_BIT GL_FRAMEBUFFER_BINDING_EXT
     GL_FRAMEBUFFER_UNSUPPORTED GL_GEOMETRY_INPUT_TYPE_ARB
     GL_GEOMETRY_INPUT_TYPE_EXT GL_GLOBAL_ALPHA_FACTOR_SUN
     GL_HISTOGRAM_BLUE_SIZE_EXT GL_IMAGE_BINDING_LAYER_EXT
     GL_IMAGE_BINDING_LEVEL_EXT GL_INDEX_ARRAY_POINTER_EXT
     GL_INTEL_performance_query GL_INTENSITY16_SIGNED_SGIX
     GL_INTENSITY_FLOAT16_APPLE GL_INTENSITY_FLOAT32_APPLE
     GL_INTERLEAVED_ATTRIBS_EXT GL_INTERNALFORMAT_RED_SIZE
     GL_INTERNALFORMAT_RED_TYPE GL_INT_SAMPLER_2D_RECT_EXT
     GL_LUMINANCE12_ALPHA12_EXT GL_LUMINANCE16_ALPHA16_EXT
     GL_LUMINANCE16_SIGNED_SGIX GL_LUMINANCE8_ALPHA8_SNORM
     GL_LUMINANCE_ALPHA16UI_EXT GL_LUMINANCE_ALPHA32UI_EXT
     GL_LUMINANCE_FLOAT16_APPLE GL_LUMINANCE_FLOAT32_APPLE
     GL_MAX_3D_TEXTURE_SIZE_EXT GL_MAX_COMBINED_DIMENSIONS
     GL_MAX_FRAGMENT_LIGHTS_EXT GL_MAX_FRAMEBUFFER_SAMPLES
     GL_MAX_MAP_TESSELLATION_NV GL_MAX_PROGRAM_ATTRIBS_ARB
     GL_MAX_PROGRAM_IF_DEPTH_NV GL_MAX_SERVER_WAIT_TIMEOUT
     GL_MAX_TEXTURE_BUFFER_SIZE GL_MAX_TEXTURE_IMAGE_UNITS
     GL_MAX_TEXTURE_STACK_DEPTH GL_MODELVIEW_PROJECTION_NV
     GL_MODULATE_SIGNED_ADD_ATI GL_NAMED_STRING_LENGTH_ARB
     GL_NORMAL_ARRAY_ADDRESS_NV GL_NORMAL_ARRAY_STRIDE_EXT
     GL_NV_clip_space_w_scaling GL_NV_explicit_multisample
     GL_NV_multisample_coverage GL_NV_packed_depth_stencil
     GL_NV_texture_env_combine4 GL_OBJECT_BUFFER_USAGE_ATI
     GL_OFFSET_TEXTURE_SCALE_NV GL_PATH_COMPUTED_LENGTH_NV
     GL_PATH_FILL_COVER_MODE_NV GL_PATH_INITIAL_END_CAP_NV
     GL_PERFMON_RESULT_SIZE_AMD GL_PERFORMANCE_MONITOR_AMD
     GL_PIXEL_UNPACK_BUFFER_ARB GL_PIXEL_UNPACK_BUFFER_EXT
     GL_POLYGON_OFFSET_BIAS_EXT GL_PRIMITIVES_GENERATED_NV
     GL_PRIMITIVE_RESTART_INDEX GL_PROGRAM_ERROR_STRING_NV
     GL_PROGRAM_TEMPORARIES_ARB GL_PROXY_TEXTURE_RECTANGLE
     GL_PURGED_CONTEXT_RESET_NV GL_QUERY_BY_REGION_NO_WAIT
     GL_QUERY_BY_REGION_WAIT_NV GL_RECLAIM_MEMORY_HINT_PGI
     GL_RENDERBUFFER_ALPHA_SIZE GL_RENDERBUFFER_DEPTH_SIZE
     GL_RENDERBUFFER_GREEN_SIZE GL_RENDERBUFFER_HEIGHT_EXT
     GL_REND_screen_coordinates GL_RESAMPLE_REPLICATE_SGIX
     GL_RESAMPLE_ZERO_FILL_SGIX GL_RGB_EXTENDED_RANGE_SGIX
     GL_SAMPLER_1D_ARRAY_SHADOW GL_SAMPLER_2D_ARRAY_SHADOW
     GL_SAMPLER_CUBE_SHADOW_EXT GL_SAMPLER_RENDERBUFFER_NV
     GL_SAMPLE_ALPHA_TO_ONE_ARB GL_SAMPLE_ALPHA_TO_ONE_EXT
     GL_SAMPLE_MASK_INVERT_SGIS GL_SCREEN_COORDINATES_REND
     GL_SEPARATE_SPECULAR_COLOR GL_SGIS_texture_edge_clamp
     GL_SGIX_blend_alpha_minmax GL_SGIX_pixel_texture_bits
     GL_SGIX_texture_scale_bias GL_SGI_texture_color_table
     GL_SMOOTH_LINE_WIDTH_RANGE GL_SMOOTH_POINT_SIZE_RANGE
     GL_STANDARD_FONT_FORMAT_NV GL_STATIC_VERTEX_ARRAY_IBM
     GL_STENCIL_BACK_VALUE_MASK GL_STENCIL_PASS_DEPTH_FAIL
     GL_STENCIL_PASS_DEPTH_PASS GL_STRICT_SCISSOR_HINT_PGI
     GL_SYNC_FLUSH_COMMANDS_BIT GL_TESSELLATION_FACTOR_AMD
     GL_TESS_CONTROL_PROGRAM_NV GL_TESS_CONTROL_SHADER_BIT
     GL_TESS_CONTROL_SUBROUTINE GL_TESS_EVALUATION_TEXTURE
     GL_TEXTURE_BASE_LEVEL_SGIS GL_TEXTURE_COLOR_TABLE_SGI
     GL_TEXTURE_COORD_ARRAY_EXT GL_TEXTURE_FREE_MEMORY_ATI
     GL_TEXTURE_INTERNAL_FORMAT GL_TEXTURE_OUTPUT_RGB_ATIX
     GL_TEXTURE_POINT_MODE_ATIX GL_TEXTURE_RENDERBUFFER_NV
     GL_TEXTURE_SHARED_SIZE_EXT GL_TEXTURE_SRGB_DECODE_EXT
     GL_TEXTURE_VIEW_NUM_LAYERS GL_TEXTURE_VIEW_NUM_LEVELS
     GL_TRIANGLES_ADJACENCY_ARB GL_TRIANGLES_ADJACENCY_EXT
     GL_UNIFORM_BARRIER_BIT_EXT GL_UNIFORM_BLOCK_DATA_SIZE
     GL_UNPACK_IMAGE_HEIGHT_EXT GL_UNSIGNED_BYTE_2_3_3_REV
     GL_UNSIGNED_BYTE_3_3_2_EXT GL_UNSIGNED_INT64_VEC2_ARB
     GL_UNSIGNED_INT64_VEC3_ARB GL_UNSIGNED_INT64_VEC4_ARB
     GL_UNSIGNED_INT_10_10_10_2 GL_UNSIGNED_INT_IMAGE_CUBE
     GL_UNSIGNED_INT_SAMPLER_1D GL_UNSIGNED_INT_SAMPLER_2D
     GL_UNSIGNED_INT_SAMPLER_3D GL_UNSIGNED_NORMALIZED_ARB
     GL_UNSIGNED_SHORT_8_8_MESA GL_VERTEX_ARRAY_ADDRESS_NV
     GL_VERTEX_ARRAY_OBJECT_AMD GL_VERTEX_ARRAY_OBJECT_EXT
     GL_VERTEX_ARRAY_STRIDE_EXT GL_VERTEX_ATTRIB_ARRAY0_NV
     GL_VERTEX_ATTRIB_ARRAY1_NV GL_VERTEX_ATTRIB_ARRAY2_NV
     GL_VERTEX_ATTRIB_ARRAY3_NV GL_VERTEX_ATTRIB_ARRAY4_NV
     GL_VERTEX_ATTRIB_ARRAY5_NV GL_VERTEX_ATTRIB_ARRAY6_NV
     GL_VERTEX_ATTRIB_ARRAY7_NV GL_VERTEX_ATTRIB_ARRAY8_NV
     GL_VERTEX_ATTRIB_ARRAY9_NV GL_VERTEX_PROGRAM_TWO_SIDE
     GL_VERTEX_STATE_PROGRAM_NV GL_VERTEX_WEIGHT_ARRAY_EXT
     GL_VIDEO_BUFFER_BINDING_NV GL_VIRTUAL_PAGE_SIZE_X_AMD
     GL_VIRTUAL_PAGE_SIZE_X_ARB GL_VIRTUAL_PAGE_SIZE_Y_AMD
     GL_VIRTUAL_PAGE_SIZE_Y_ARB GL_VIRTUAL_PAGE_SIZE_Z_AMD
     GL_VIRTUAL_PAGE_SIZE_Z_ARB GL_WEIGHT_ARRAY_STRIDE_ARB
     glBeginConditionalRenderNV glBeginTransformFeedbackNV
     glBindMaterialParameterEXT glBlendEquationSeparateEXT
     glClearNamedFramebufferuiv glColorTableParameterfvSGI
     glColorTableParameterivSGI glConvolutionParameterfEXT
     glConvolutionParameteriEXT glCopyTextureSubImage1DEXT
     glCopyTextureSubImage2DEXT glCopyTextureSubImage3DEXT
     glCoverFillPathInstancedNV glCreateSyncFromCLeventARB
     glCreateTransformFeedbacks glDeleteOcclusionQueriesNV
     glDeleteTransformFeedbacks glDisableVertexArrayAttrib
     glDisableVertexAttribAPPLE glDisableVertexAttribArray
     glDrawArraysInstancedANGLE glDrawElementsInstancedARB
     glDrawElementsInstancedEXT glDrawRangeElementArrayATI
     glFragmentColorMaterialEXT glFragmentLightModelfvSGIX
     glFragmentLightModelivSGIX glFramebufferDrawBufferEXT
     glFramebufferReadBufferEXT glGenerateTextureMipmapEXT
     glGetColorTableParameterfv glGetColorTableParameteriv
     glGetCompressedTexImageARB glGetFirstPerfQueryIdINTEL
     glGetFragmentMaterialfvEXT glGetFragmentMaterialivEXT
     glGetNamedBufferSubDataEXT glGetNamedProgramStringEXT
     glGetQueryBufferObjecti64v glGetQueryObjectui64vANGLE
     glGetShaderPrecisionFormat glGetTexBumpParameterfvATI
     glGetTexBumpParameterivATI glGetTextureParameterfvEXT
     glGetTextureParameterivEXT glGetVertexAttribLui64vARB
     glGetnConvolutionFilterARB glInvalidateSubFramebuffer
     glIsImageHandleResidentARB glMultiModeDrawElementsIBM
     glMultiTexParameterIuivEXT glMulticastBufferSubDataNV
     glNamedRenderbufferStorage glPathStencilDepthOffsetNV
     glPauseTransformFeedbackNV glProgramEnvParameter4dARB
     glProgramEnvParameter4fARB glProgramEnvParameterI4iNV
     glSecondaryColorPointerEXT glTexturePageCommitmentEXT
     glVDPAUUnregisterSurfaceNV glVertexArrayAttribBinding
     glVertexArrayAttribIFormat glVertexArrayAttribLFormat
     glVertexArrayElementBuffer glVertexArrayVertexBuffers
     glVertexAttribDivisorANGLE glViewportPositionWScaleNV */
  /* Offset 11 gives the best switch position.  */
  switch (name[11]) {
  case '1':
    if (memEQ(name, "GL_ARB_ES3_1_compatibility", 26)) {
    /*                          ^                     */
#ifdef GL_ARB_ES3_1_compatibility
      *iv_return = GL_ARB_ES3_1_compatibility;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_SAMPLER_1D_ARRAY_SHADOW", 26)) {
    /*                          ^                     */
#ifdef GL_SAMPLER_1D_ARRAY_SHADOW
      *iv_return = GL_SAMPLER_1D_ARRAY_SHADOW;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case '2':
    if (memEQ(name, "GLEW_ARB_ES2_compatibility", 26)) {
    /*                          ^                     */
#ifdef GLEW_ARB_ES2_compatibility
      *iv_return = GLEW_ARB_ES2_compatibility;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_ARB_ES3_2_compatibility", 26)) {
    /*                          ^                     */
#ifdef GL_ARB_ES3_2_compatibility
      *iv_return = GL_ARB_ES3_2_compatibility;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_SAMPLER_2D_ARRAY_SHADOW", 26)) {
    /*                          ^                     */
#ifdef GL_SAMPLER_2D_ARRAY_SHADOW
      *iv_return = GL_SAMPLER_2D_ARRAY_SHADOW;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case '3':
    if (memEQ(name, "GLEW_ARB_ES3_compatibility", 26)) {
    /*                          ^                     */
#ifdef GLEW_ARB_ES3_compatibility
      *iv_return = GLEW_ARB_ES3_compatibility;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case 'A':
    if (memEQ(name, "GL_ALLOW_DRAW_FRG_HINT_PGI", 26)) {
    /*                          ^                     */
#ifdef GL_ALLOW_DRAW_FRG_HINT_PGI
      *iv_return = GL_ALLOW_DRAW_FRG_HINT_PGI;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_ALLOW_DRAW_MEM_HINT_PGI", 26)) {
    /*                          ^                     */
#ifdef GL_ALLOW_DRAW_MEM_HINT_PGI
      *iv_return = GL_ALLOW_DRAW_MEM_HINT_PGI;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_ALLOW_DRAW_OBJ_HINT_PGI", 26)) {
    /*                          ^                     */
#ifdef GL_ALLOW_DRAW_OBJ_HINT_PGI
      *iv_return = GL_ALLOW_DRAW_OBJ_HINT_PGI;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_ALLOW_DRAW_WIN_HINT_PGI", 26)) {
    /*                          ^                     */
#ifdef GL_ALLOW_DRAW_WIN_HINT_PGI
      *iv_return = GL_ALLOW_DRAW_WIN_HINT_PGI;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_ELEMENT_ARRAY_LENGTH_NV", 26)) {
    /*                          ^                     */
#ifdef GL_ELEMENT_ARRAY_LENGTH_NV
      *iv_return = GL_ELEMENT_ARRAY_LENGTH_NV;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_SAMPLE_MASK_INVERT_SGIS", 26)) {
    /*                          ^                     */
#ifdef GL_SAMPLE_MASK_INVERT_SGIS
      *iv_return = GL_SAMPLE_MASK_INVERT_SGIS;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glGetVertexAttribLui64vARB", 26)) {
    /*                          ^                     */
#ifdef glGetVertexAttribLui64vARB
      *iv_return = glGetVertexAttribLui64vARB;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case 'B':
    if (memEQ(name, "GL_COMMAND_BARRIER_BIT_EXT", 26)) {
    /*                          ^                     */
#ifdef GL_COMMAND_BARRIER_BIT_EXT
      *iv_return = GL_COMMAND_BARRIER_BIT_EXT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_STENCIL_BACK_VALUE_MASK", 26)) {
    /*                          ^                     */
#ifdef GL_STENCIL_BACK_VALUE_MASK
      *iv_return = GL_STENCIL_BACK_VALUE_MASK;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_TEXTURE_BASE_LEVEL_SGIS", 26)) {
    /*                          ^                     */
#ifdef GL_TEXTURE_BASE_LEVEL_SGIS
      *iv_return = GL_TEXTURE_BASE_LEVEL_SGIS;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_UNIFORM_BARRIER_BIT_EXT", 26)) {
    /*                          ^                     */
#ifdef GL_UNIFORM_BARRIER_BIT_EXT
      *iv_return = GL_UNIFORM_BARRIER_BIT_EXT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_UNIFORM_BLOCK_DATA_SIZE", 26)) {
    /*                          ^                     */
#ifdef GL_UNIFORM_BLOCK_DATA_SIZE
      *iv_return = GL_UNIFORM_BLOCK_DATA_SIZE;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glMulticastBufferSubDataNV", 26)) {
    /*                          ^                     */
#ifdef glMulticastBufferSubDataNV
      *iv_return = glMulticastBufferSubDataNV;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case 'C':
    if (memEQ(name, "GL_SAMPLER_CUBE_SHADOW_EXT", 26)) {
    /*                          ^                     */
#ifdef GL_SAMPLER_CUBE_SHADOW_EXT
      *iv_return = GL_SAMPLER_CUBE_SHADOW_EXT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_STRICT_SCISSOR_HINT_PGI", 26)) {
    /*                          ^                     */
#ifdef GL_STRICT_SCISSOR_HINT_PGI
      *iv_return = GL_STRICT_SCISSOR_HINT_PGI;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_TEXTURE_COLOR_TABLE_SGI", 26)) {
    /*                          ^                     */
#ifdef GL_TEXTURE_COLOR_TABLE_SGI
      *iv_return = GL_TEXTURE_COLOR_TABLE_SGI;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_TEXTURE_COORD_ARRAY_EXT", 26)) {
    /*                          ^                     */
#ifdef GL_TEXTURE_COORD_ARRAY_EXT
      *iv_return = GL_TEXTURE_COORD_ARRAY_EXT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glSecondaryColorPointerEXT", 26)) {
    /*                          ^                     */
#ifdef glSecondaryColorPointerEXT
      *iv_return = glSecondaryColorPointerEXT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case 'D':
    if (memEQ(name, "GL_FOG_COORD_ARRAY_POINTER", 26)) {
    /*                          ^                     */
#ifdef GL_FOG_COORD_ARRAY_POINTER
      *iv_return = GL_FOG_COORD_ARRAY_POINTER;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glMultiModeDrawElementsIBM", 26)) {
    /*                          ^                     */
#ifdef glMultiModeDrawElementsIBM
      *iv_return = glMultiModeDrawElementsIBM;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case 'E':
    if (memEQ(name, "GL_ACTIVE_VERTEX_UNITS_ARB", 26)) {
    /*                          ^                     */
#ifdef GL_ACTIVE_VERTEX_UNITS_ARB
      *iv_return = GL_ACTIVE_VERTEX_UNITS_ARB;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_CLIENT_VERTEX_ARRAY_BIT", 26)) {
    /*                          ^                     */
#ifdef GL_CLIENT_VERTEX_ARRAY_BIT
      *iv_return = GL_CLIENT_VERTEX_ARRAY_BIT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_LUMINANCE12_ALPHA12_EXT", 26)) {
    /*                          ^                     */
#ifdef GL_LUMINANCE12_ALPHA12_EXT
      *iv_return = GL_LUMINANCE12_ALPHA12_EXT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_LUMINANCE16_ALPHA16_EXT", 26)) {
    /*                          ^                     */
#ifdef GL_LUMINANCE16_ALPHA16_EXT
      *iv_return = GL_LUMINANCE16_ALPHA16_EXT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_LUMINANCE16_SIGNED_SGIX", 26)) {
    /*                          ^                     */
#ifdef GL_LUMINANCE16_SIGNED_SGIX
      *iv_return = GL_LUMINANCE16_SIGNED_SGIX;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_LUMINANCE8_ALPHA8_SNORM", 26)) {
    /*                          ^                     */
#ifdef GL_LUMINANCE8_ALPHA8_SNORM
      *iv_return = GL_LUMINANCE8_ALPHA8_SNORM;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_LUMINANCE_ALPHA16UI_EXT", 26)) {
    /*                          ^                     */
#ifdef GL_LUMINANCE_ALPHA16UI_EXT
      *iv_return = GL_LUMINANCE_ALPHA16UI_EXT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_LUMINANCE_ALPHA32UI_EXT", 26)) {
    /*                          ^                     */
#ifdef GL_LUMINANCE_ALPHA32UI_EXT
      *iv_return = GL_LUMINANCE_ALPHA32UI_EXT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_LUMINANCE_FLOAT16_APPLE", 26)) {
    /*                          ^                     */
#ifdef GL_LUMINANCE_FLOAT16_APPLE
      *iv_return = GL_LUMINANCE_FLOAT16_APPLE;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_LUMINANCE_FLOAT32_APPLE", 26)) {
    /*                          ^                     */
#ifdef GL_LUMINANCE_FLOAT32_APPLE
      *iv_return = GL_LUMINANCE_FLOAT32_APPLE;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_MAX_3D_TEXTURE_SIZE_EXT", 26)) {
    /*                          ^                     */
#ifdef GL_MAX_3D_TEXTURE_SIZE_EXT
      *iv_return = GL_MAX_3D_TEXTURE_SIZE_EXT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_MAX_FRAMEBUFFER_SAMPLES", 26)) {
    /*                          ^                     */
#ifdef GL_MAX_FRAMEBUFFER_SAMPLES
      *iv_return = GL_MAX_FRAMEBUFFER_SAMPLES;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_MAX_SERVER_WAIT_TIMEOUT", 26)) {
    /*                          ^                     */
#ifdef GL_MAX_SERVER_WAIT_TIMEOUT
      *iv_return = GL_MAX_SERVER_WAIT_TIMEOUT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_OFFSET_TEXTURE_SCALE_NV", 26)) {
    /*                          ^                     */
#ifdef GL_OFFSET_TEXTURE_SCALE_NV
      *iv_return = GL_OFFSET_TEXTURE_SCALE_NV;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_PRIMITIVES_GENERATED_NV", 26)) {
    /*                          ^                     */
#ifdef GL_PRIMITIVES_GENERATED_NV
      *iv_return = GL_PRIMITIVES_GENERATED_NV;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_PRIMITIVE_RESTART_INDEX", 26)) {
    /*                          ^                     */
#ifdef GL_PRIMITIVE_RESTART_INDEX
      *iv_return = GL_PRIMITIVE_RESTART_INDEX;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_PROGRAM_ERROR_STRING_NV", 26)) {
    /*                          ^                     */
#ifdef GL_PROGRAM_ERROR_STRING_NV
      *iv_return = GL_PROGRAM_ERROR_STRING_NV;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_STATIC_VERTEX_ARRAY_IBM", 26)) {
    /*                          ^                     */
#ifdef GL_STATIC_VERTEX_ARRAY_IBM
      *iv_return = GL_STATIC_VERTEX_ARRAY_IBM;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_VERTEX_WEIGHT_ARRAY_EXT", 26)) {
    /*                          ^                     */
#ifdef GL_VERTEX_WEIGHT_ARRAY_EXT
      *iv_return = GL_VERTEX_WEIGHT_ARRAY_EXT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glDrawRangeElementArrayATI", 26)) {
    /*                          ^                     */
#ifdef glDrawRangeElementArrayATI
      *iv_return = glDrawRangeElementArrayATI;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case 'F':
    if (memEQ(name, "GL_FRAMEBUFFER_BARRIER_BIT", 26)) {
    /*                          ^                     */
#ifdef GL_FRAMEBUFFER_BARRIER_BIT
      *iv_return = GL_FRAMEBUFFER_BARRIER_BIT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_FRAMEBUFFER_BINDING_EXT", 26)) {
    /*                          ^                     */
#ifdef GL_FRAMEBUFFER_BINDING_EXT
      *iv_return = GL_FRAMEBUFFER_BINDING_EXT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_FRAMEBUFFER_UNSUPPORTED", 26)) {
    /*                          ^                     */
#ifdef GL_FRAMEBUFFER_UNSUPPORTED
      *iv_return = GL_FRAMEBUFFER_UNSUPPORTED;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_INTERNALFORMAT_RED_SIZE", 26)) {
    /*                          ^                     */
#ifdef GL_INTERNALFORMAT_RED_SIZE
      *iv_return = GL_INTERNALFORMAT_RED_SIZE;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_INTERNALFORMAT_RED_TYPE", 26)) {
    /*                          ^                     */
#ifdef GL_INTERNALFORMAT_RED_TYPE
      *iv_return = GL_INTERNALFORMAT_RED_TYPE;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_RENDERBUFFER_ALPHA_SIZE", 26)) {
    /*                          ^                     */
#ifdef GL_RENDERBUFFER_ALPHA_SIZE
      *iv_return = GL_RENDERBUFFER_ALPHA_SIZE;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_RENDERBUFFER_DEPTH_SIZE", 26)) {
    /*                          ^                     */
#ifdef GL_RENDERBUFFER_DEPTH_SIZE
      *iv_return = GL_RENDERBUFFER_DEPTH_SIZE;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_RENDERBUFFER_GREEN_SIZE", 26)) {
    /*                          ^                     */
#ifdef GL_RENDERBUFFER_GREEN_SIZE
      *iv_return = GL_RENDERBUFFER_GREEN_SIZE;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_RENDERBUFFER_HEIGHT_EXT", 26)) {
    /*                          ^                     */
#ifdef GL_RENDERBUFFER_HEIGHT_EXT
      *iv_return = GL_RENDERBUFFER_HEIGHT_EXT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_TEXTURE_FREE_MEMORY_ATI", 26)) {
    /*                          ^                     */
#ifdef GL_TEXTURE_FREE_MEMORY_ATI
      *iv_return = GL_TEXTURE_FREE_MEMORY_ATI;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_VIDEO_BUFFER_BINDING_NV", 26)) {
    /*                          ^                     */
#ifdef GL_VIDEO_BUFFER_BINDING_NV
      *iv_return = GL_VIDEO_BUFFER_BINDING_NV;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case 'G':
    if (memEQ(name, "GL_EDGE_FLAG_ARRAY_POINTER", 26)) {
    /*                          ^                     */
#ifdef GL_EDGE_FLAG_ARRAY_POINTER
      *iv_return = GL_EDGE_FLAG_ARRAY_POINTER;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case 'H':
    if (memEQ(name, "GL_AUX_DEPTH_STENCIL_APPLE", 26)) {
    /*                          ^                     */
#ifdef GL_AUX_DEPTH_STENCIL_APPLE
      *iv_return = GL_AUX_DEPTH_STENCIL_APPLE;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case 'I':
    if (memEQ(name, "GL_CONVOLUTION_BORDER_MODE", 26)) {
    /*                          ^                     */
#ifdef GL_CONVOLUTION_BORDER_MODE
      *iv_return = GL_CONVOLUTION_BORDER_MODE;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_CONVOLUTION_FILTER_BIAS", 26)) {
    /*                          ^                     */
#ifdef GL_CONVOLUTION_FILTER_BIAS
      *iv_return = GL_CONVOLUTION_FILTER_BIAS;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_DRAW_INDIRECT_LENGTH_NV", 26)) {
    /*                          ^                     */
#ifdef GL_DRAW_INDIRECT_LENGTH_NV
      *iv_return = GL_DRAW_INDIRECT_LENGTH_NV;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_MAX_COMBINED_DIMENSIONS", 26)) {
    /*                          ^                     */
#ifdef GL_MAX_COMBINED_DIMENSIONS
      *iv_return = GL_MAX_COMBINED_DIMENSIONS;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_SMOOTH_LINE_WIDTH_RANGE", 26)) {
    /*                          ^                     */
#ifdef GL_SMOOTH_LINE_WIDTH_RANGE
      *iv_return = GL_SMOOTH_LINE_WIDTH_RANGE;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_TEXTURE_INTERNAL_FORMAT", 26)) {
    /*                          ^                     */
#ifdef GL_TEXTURE_INTERNAL_FORMAT
      *iv_return = GL_TEXTURE_INTERNAL_FORMAT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case 'J':
    if (memEQ(name, "GL_ACCUM_ADJACENT_PAIRS_NV", 26)) {
    /*                          ^                     */
#ifdef GL_ACCUM_ADJACENT_PAIRS_NV
      *iv_return = GL_ACCUM_ADJACENT_PAIRS_NV;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_ARRAY_OBJECT_BUFFER_ATI", 26)) {
    /*                          ^                     */
#ifdef GL_ARRAY_OBJECT_BUFFER_ATI
      *iv_return = GL_ARRAY_OBJECT_BUFFER_ATI;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_ARRAY_OBJECT_OFFSET_ATI", 26)) {
    /*                          ^                     */
#ifdef GL_ARRAY_OBJECT_OFFSET_ATI
      *iv_return = GL_ARRAY_OBJECT_OFFSET_ATI;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case 'L':
    if (memEQ(name, "GL_DEBUG_CALLBACK_FUNCTION", 26)) {
    /*                          ^                     */
#ifdef GL_DEBUG_CALLBACK_FUNCTION
      *iv_return = GL_DEBUG_CALLBACK_FUNCTION;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_GLOBAL_ALPHA_FACTOR_SUN", 26)) {
    /*                          ^                     */
#ifdef GL_GLOBAL_ALPHA_FACTOR_SUN
      *iv_return = GL_GLOBAL_ALPHA_FACTOR_SUN;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_INT_SAMPLER_2D_RECT_EXT", 26)) {
    /*                          ^                     */
#ifdef GL_INT_SAMPLER_2D_RECT_EXT
      *iv_return = GL_INT_SAMPLER_2D_RECT_EXT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_PATH_FILL_COVER_MODE_NV", 26)) {
    /*                          ^                     */
#ifdef GL_PATH_FILL_COVER_MODE_NV
      *iv_return = GL_PATH_FILL_COVER_MODE_NV;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_SAMPLE_ALPHA_TO_ONE_ARB", 26)) {
    /*                          ^                     */
#ifdef GL_SAMPLE_ALPHA_TO_ONE_ARB
      *iv_return = GL_SAMPLE_ALPHA_TO_ONE_ARB;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_SAMPLE_ALPHA_TO_ONE_EXT", 26)) {
    /*                          ^                     */
#ifdef GL_SAMPLE_ALPHA_TO_ONE_EXT
      *iv_return = GL_SAMPLE_ALPHA_TO_ONE_EXT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_TESS_EVALUATION_TEXTURE", 26)) {
    /*                          ^                     */
#ifdef GL_TESS_EVALUATION_TEXTURE
      *iv_return = GL_TESS_EVALUATION_TEXTURE;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case 'M':
    if (memEQ(name, "GL_HISTOGRAM_BLUE_SIZE_EXT", 26)) {
    /*                          ^                     */
#ifdef GL_HISTOGRAM_BLUE_SIZE_EXT
      *iv_return = GL_HISTOGRAM_BLUE_SIZE_EXT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_MAX_FRAGMENT_LIGHTS_EXT", 26)) {
    /*                          ^                     */
#ifdef GL_MAX_FRAGMENT_LIGHTS_EXT
      *iv_return = GL_MAX_FRAGMENT_LIGHTS_EXT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_RECLAIM_MEMORY_HINT_PGI", 26)) {
    /*                          ^                     */
#ifdef GL_RECLAIM_MEMORY_HINT_PGI
      *iv_return = GL_RECLAIM_MEMORY_HINT_PGI;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_UNPACK_IMAGE_HEIGHT_EXT", 26)) {
    /*                          ^                     */
#ifdef GL_UNPACK_IMAGE_HEIGHT_EXT
      *iv_return = GL_UNPACK_IMAGE_HEIGHT_EXT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case 'N':
    if (memEQ(name, "GL_IMAGE_BINDING_LAYER_EXT", 26)) {
    /*                          ^                     */
#ifdef GL_IMAGE_BINDING_LAYER_EXT
      *iv_return = GL_IMAGE_BINDING_LAYER_EXT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_IMAGE_BINDING_LEVEL_EXT", 26)) {
    /*                          ^                     */
#ifdef GL_IMAGE_BINDING_LEVEL_EXT
      *iv_return = GL_IMAGE_BINDING_LEVEL_EXT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_PERFORMANCE_MONITOR_AMD", 26)) {
    /*                          ^                     */
#ifdef GL_PERFORMANCE_MONITOR_AMD
      *iv_return = GL_PERFORMANCE_MONITOR_AMD;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_RGB_EXTENDED_RANGE_SGIX", 26)) {
    /*                          ^                     */
#ifdef GL_RGB_EXTENDED_RANGE_SGIX
      *iv_return = GL_RGB_EXTENDED_RANGE_SGIX;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case 'O':
    if (memEQ(name, "GL_BACK_SECONDARY_COLOR_NV", 26)) {
    /*                          ^                     */
#ifdef GL_BACK_SECONDARY_COLOR_NV
      *iv_return = GL_BACK_SECONDARY_COLOR_NV;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_DEBUG_GROUP_STACK_DEPTH", 26)) {
    /*                          ^                     */
#ifdef GL_DEBUG_GROUP_STACK_DEPTH
      *iv_return = GL_DEBUG_GROUP_STACK_DEPTH;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_POLYGON_OFFSET_BIAS_EXT", 26)) {
    /*                          ^                     */
#ifdef GL_POLYGON_OFFSET_BIAS_EXT
      *iv_return = GL_POLYGON_OFFSET_BIAS_EXT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_PURGED_CONTEXT_RESET_NV", 26)) {
    /*                          ^                     */
#ifdef GL_PURGED_CONTEXT_RESET_NV
      *iv_return = GL_PURGED_CONTEXT_RESET_NV;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_SCREEN_COORDINATES_REND", 26)) {
    /*                          ^                     */
#ifdef GL_SCREEN_COORDINATES_REND
      *iv_return = GL_SCREEN_COORDINATES_REND;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_SMOOTH_POINT_SIZE_RANGE", 26)) {
    /*                          ^                     */
#ifdef GL_SMOOTH_POINT_SIZE_RANGE
      *iv_return = GL_SMOOTH_POINT_SIZE_RANGE;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_TEXTURE_OUTPUT_RGB_ATIX", 26)) {
    /*                          ^                     */
#ifdef GL_TEXTURE_OUTPUT_RGB_ATIX
      *iv_return = GL_TEXTURE_OUTPUT_RGB_ATIX;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case 'P':
    if (memEQ(name, "GL_COLOR_ALPHA_PAIRING_ATI", 26)) {
    /*                          ^                     */
#ifdef GL_COLOR_ALPHA_PAIRING_ATI
      *iv_return = GL_COLOR_ALPHA_PAIRING_ATI;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_PATH_COMPUTED_LENGTH_NV", 26)) {
    /*                          ^                     */
#ifdef GL_PATH_COMPUTED_LENGTH_NV
      *iv_return = GL_PATH_COMPUTED_LENGTH_NV;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_PIXEL_UNPACK_BUFFER_ARB", 26)) {
    /*                          ^                     */
#ifdef GL_PIXEL_UNPACK_BUFFER_ARB
      *iv_return = GL_PIXEL_UNPACK_BUFFER_ARB;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_PIXEL_UNPACK_BUFFER_EXT", 26)) {
    /*                          ^                     */
#ifdef GL_PIXEL_UNPACK_BUFFER_EXT
      *iv_return = GL_PIXEL_UNPACK_BUFFER_EXT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_STENCIL_PASS_DEPTH_FAIL", 26)) {
    /*                          ^                     */
#ifdef GL_STENCIL_PASS_DEPTH_FAIL
      *iv_return = GL_STENCIL_PASS_DEPTH_FAIL;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_STENCIL_PASS_DEPTH_PASS", 26)) {
    /*                          ^                     */
#ifdef GL_STENCIL_PASS_DEPTH_PASS
      *iv_return = GL_STENCIL_PASS_DEPTH_PASS;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_TEXTURE_POINT_MODE_ATIX", 26)) {
    /*                          ^                     */
#ifdef GL_TEXTURE_POINT_MODE_ATIX
      *iv_return = GL_TEXTURE_POINT_MODE_ATIX;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_VIRTUAL_PAGE_SIZE_X_AMD", 26)) {
    /*                          ^                     */
#ifdef GL_VIRTUAL_PAGE_SIZE_X_AMD
      *iv_return = GL_VIRTUAL_PAGE_SIZE_X_AMD;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_VIRTUAL_PAGE_SIZE_X_ARB", 26)) {
    /*                          ^                     */
#ifdef GL_VIRTUAL_PAGE_SIZE_X_ARB
      *iv_return = GL_VIRTUAL_PAGE_SIZE_X_ARB;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_VIRTUAL_PAGE_SIZE_Y_AMD", 26)) {
    /*                          ^                     */
#ifdef GL_VIRTUAL_PAGE_SIZE_Y_AMD
      *iv_return = GL_VIRTUAL_PAGE_SIZE_Y_AMD;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_VIRTUAL_PAGE_SIZE_Y_ARB", 26)) {
    /*                          ^                     */
#ifdef GL_VIRTUAL_PAGE_SIZE_Y_ARB
      *iv_return = GL_VIRTUAL_PAGE_SIZE_Y_ARB;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_VIRTUAL_PAGE_SIZE_Z_AMD", 26)) {
    /*                          ^                     */
#ifdef GL_VIRTUAL_PAGE_SIZE_Z_AMD
      *iv_return = GL_VIRTUAL_PAGE_SIZE_Z_AMD;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_VIRTUAL_PAGE_SIZE_Z_ARB", 26)) {
    /*                          ^                     */
#ifdef GL_VIRTUAL_PAGE_SIZE_Z_ARB
      *iv_return = GL_VIRTUAL_PAGE_SIZE_Z_ARB;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glCoverFillPathInstancedNV", 26)) {
    /*                          ^                     */
#ifdef glCoverFillPathInstancedNV
      *iv_return = glCoverFillPathInstancedNV;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glGetShaderPrecisionFormat", 26)) {
    /*                          ^                     */
#ifdef glGetShaderPrecisionFormat
      *iv_return = glGetShaderPrecisionFormat;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case 'R':
    if (memEQ(name, "GL_ATTRIB_ARRAY_POINTER_NV", 26)) {
    /*                          ^                     */
#ifdef GL_ATTRIB_ARRAY_POINTER_NV
      *iv_return = GL_ATTRIB_ARRAY_POINTER_NV;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_COLOR_ARRAY_POINTER_EXT", 26)) {
    /*                          ^                     */
#ifdef GL_COLOR_ARRAY_POINTER_EXT
      *iv_return = GL_COLOR_ARRAY_POINTER_EXT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_CURRENT_RASTER_DISTANCE", 26)) {
    /*                          ^                     */
#ifdef GL_CURRENT_RASTER_DISTANCE
      *iv_return = GL_CURRENT_RASTER_DISTANCE;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_CURRENT_RASTER_POSITION", 26)) {
    /*                          ^                     */
#ifdef GL_CURRENT_RASTER_POSITION
      *iv_return = GL_CURRENT_RASTER_POSITION;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_FIRST_VERTEX_CONVENTION", 26)) {
    /*                          ^                     */
#ifdef GL_FIRST_VERTEX_CONVENTION
      *iv_return = GL_FIRST_VERTEX_CONVENTION;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_INDEX_ARRAY_POINTER_EXT", 26)) {
    /*                          ^                     */
#ifdef GL_INDEX_ARRAY_POINTER_EXT
      *iv_return = GL_INDEX_ARRAY_POINTER_EXT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_MAX_PROGRAM_ATTRIBS_ARB", 26)) {
    /*                          ^                     */
#ifdef GL_MAX_PROGRAM_ATTRIBS_ARB
      *iv_return = GL_MAX_PROGRAM_ATTRIBS_ARB;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_MAX_PROGRAM_IF_DEPTH_NV", 26)) {
    /*                          ^                     */
#ifdef GL_MAX_PROGRAM_IF_DEPTH_NV
      *iv_return = GL_MAX_PROGRAM_IF_DEPTH_NV;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_NAMED_STRING_LENGTH_ARB", 26)) {
    /*                          ^                     */
#ifdef GL_NAMED_STRING_LENGTH_ARB
      *iv_return = GL_NAMED_STRING_LENGTH_ARB;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_NORMAL_ARRAY_ADDRESS_NV", 26)) {
    /*                          ^                     */
#ifdef GL_NORMAL_ARRAY_ADDRESS_NV
      *iv_return = GL_NORMAL_ARRAY_ADDRESS_NV;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_NORMAL_ARRAY_STRIDE_EXT", 26)) {
    /*                          ^                     */
#ifdef GL_NORMAL_ARRAY_STRIDE_EXT
      *iv_return = GL_NORMAL_ARRAY_STRIDE_EXT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_PERFMON_RESULT_SIZE_AMD", 26)) {
    /*                          ^                     */
#ifdef GL_PERFMON_RESULT_SIZE_AMD
      *iv_return = GL_PERFMON_RESULT_SIZE_AMD;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_SAMPLER_RENDERBUFFER_NV", 26)) {
    /*                          ^                     */
#ifdef GL_SAMPLER_RENDERBUFFER_NV
      *iv_return = GL_SAMPLER_RENDERBUFFER_NV;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_TEXTURE_RENDERBUFFER_NV", 26)) {
    /*                          ^                     */
#ifdef GL_TEXTURE_RENDERBUFFER_NV
      *iv_return = GL_TEXTURE_RENDERBUFFER_NV;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_VERTEX_ARRAY_ADDRESS_NV", 26)) {
    /*                          ^                     */
#ifdef GL_VERTEX_ARRAY_ADDRESS_NV
      *iv_return = GL_VERTEX_ARRAY_ADDRESS_NV;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_VERTEX_ARRAY_OBJECT_AMD", 26)) {
    /*                          ^                     */
#ifdef GL_VERTEX_ARRAY_OBJECT_AMD
      *iv_return = GL_VERTEX_ARRAY_OBJECT_AMD;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_VERTEX_ARRAY_OBJECT_EXT", 26)) {
    /*                          ^                     */
#ifdef GL_VERTEX_ARRAY_OBJECT_EXT
      *iv_return = GL_VERTEX_ARRAY_OBJECT_EXT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_VERTEX_ARRAY_STRIDE_EXT", 26)) {
    /*                          ^                     */
#ifdef GL_VERTEX_ARRAY_STRIDE_EXT
      *iv_return = GL_VERTEX_ARRAY_STRIDE_EXT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_VERTEX_PROGRAM_TWO_SIDE", 26)) {
    /*                          ^                     */
#ifdef GL_VERTEX_PROGRAM_TWO_SIDE
      *iv_return = GL_VERTEX_PROGRAM_TWO_SIDE;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_WEIGHT_ARRAY_STRIDE_ARB", 26)) {
    /*                          ^                     */
#ifdef GL_WEIGHT_ARRAY_STRIDE_ARB
      *iv_return = GL_WEIGHT_ARRAY_STRIDE_ARB;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case 'S':
    if (memEQ(name, "GL_CURRENT_SECONDARY_COLOR", 26)) {
    /*                          ^                     */
#ifdef GL_CURRENT_SECONDARY_COLOR
      *iv_return = GL_CURRENT_SECONDARY_COLOR;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_SYNC_FLUSH_COMMANDS_BIT", 26)) {
    /*                          ^                     */
#ifdef GL_SYNC_FLUSH_COMMANDS_BIT
      *iv_return = GL_SYNC_FLUSH_COMMANDS_BIT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_TEXTURE_SHARED_SIZE_EXT", 26)) {
    /*                          ^                     */
#ifdef GL_TEXTURE_SHARED_SIZE_EXT
      *iv_return = GL_TEXTURE_SHARED_SIZE_EXT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_TEXTURE_SRGB_DECODE_EXT", 26)) {
    /*                          ^                     */
#ifdef GL_TEXTURE_SRGB_DECODE_EXT
      *iv_return = GL_TEXTURE_SRGB_DECODE_EXT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_TRIANGLES_ADJACENCY_ARB", 26)) {
    /*                          ^                     */
#ifdef GL_TRIANGLES_ADJACENCY_ARB
      *iv_return = GL_TRIANGLES_ADJACENCY_ARB;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_TRIANGLES_ADJACENCY_EXT", 26)) {
    /*                          ^                     */
#ifdef GL_TRIANGLES_ADJACENCY_EXT
      *iv_return = GL_TRIANGLES_ADJACENCY_EXT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case 'T':
    if (memEQ(name, "GL_ACTIVE_STENCIL_FACE_EXT", 26)) {
    /*                          ^                     */
#ifdef GL_ACTIVE_STENCIL_FACE_EXT
      *iv_return = GL_ACTIVE_STENCIL_FACE_EXT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_EVAL_VERTEX_ATTRIB10_NV", 26)) {
    /*                          ^                     */
#ifdef GL_EVAL_VERTEX_ATTRIB10_NV
      *iv_return = GL_EVAL_VERTEX_ATTRIB10_NV;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_EVAL_VERTEX_ATTRIB11_NV", 26)) {
    /*                          ^                     */
#ifdef GL_EVAL_VERTEX_ATTRIB11_NV
      *iv_return = GL_EVAL_VERTEX_ATTRIB11_NV;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_EVAL_VERTEX_ATTRIB12_NV", 26)) {
    /*                          ^                     */
#ifdef GL_EVAL_VERTEX_ATTRIB12_NV
      *iv_return = GL_EVAL_VERTEX_ATTRIB12_NV;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_EVAL_VERTEX_ATTRIB13_NV", 26)) {
    /*                          ^                     */
#ifdef GL_EVAL_VERTEX_ATTRIB13_NV
      *iv_return = GL_EVAL_VERTEX_ATTRIB13_NV;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_EVAL_VERTEX_ATTRIB14_NV", 26)) {
    /*                          ^                     */
#ifdef GL_EVAL_VERTEX_ATTRIB14_NV
      *iv_return = GL_EVAL_VERTEX_ATTRIB14_NV;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_EVAL_VERTEX_ATTRIB15_NV", 26)) {
    /*                          ^                     */
#ifdef GL_EVAL_VERTEX_ATTRIB15_NV
      *iv_return = GL_EVAL_VERTEX_ATTRIB15_NV;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_MAX_MAP_TESSELLATION_NV", 26)) {
    /*                          ^                     */
#ifdef GL_MAX_MAP_TESSELLATION_NV
      *iv_return = GL_MAX_MAP_TESSELLATION_NV;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_PATH_INITIAL_END_CAP_NV", 26)) {
    /*                          ^                     */
#ifdef GL_PATH_INITIAL_END_CAP_NV
      *iv_return = GL_PATH_INITIAL_END_CAP_NV;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_PROGRAM_TEMPORARIES_ARB", 26)) {
    /*                          ^                     */
#ifdef GL_PROGRAM_TEMPORARIES_ARB
      *iv_return = GL_PROGRAM_TEMPORARIES_ARB;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_TESSELLATION_FACTOR_AMD", 26)) {
    /*                          ^                     */
#ifdef GL_TESSELLATION_FACTOR_AMD
      *iv_return = GL_TESSELLATION_FACTOR_AMD;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_TESS_CONTROL_PROGRAM_NV", 26)) {
    /*                          ^                     */
#ifdef GL_TESS_CONTROL_PROGRAM_NV
      *iv_return = GL_TESS_CONTROL_PROGRAM_NV;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_TESS_CONTROL_SHADER_BIT", 26)) {
    /*                          ^                     */
#ifdef GL_TESS_CONTROL_SHADER_BIT
      *iv_return = GL_TESS_CONTROL_SHADER_BIT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_TESS_CONTROL_SUBROUTINE", 26)) {
    /*                          ^                     */
#ifdef GL_TESS_CONTROL_SUBROUTINE
      *iv_return = GL_TESS_CONTROL_SUBROUTINE;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_VERTEX_ATTRIB_ARRAY0_NV", 26)) {
    /*                          ^                     */
#ifdef GL_VERTEX_ATTRIB_ARRAY0_NV
      *iv_return = GL_VERTEX_ATTRIB_ARRAY0_NV;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_VERTEX_ATTRIB_ARRAY1_NV", 26)) {
    /*                          ^                     */
#ifdef GL_VERTEX_ATTRIB_ARRAY1_NV
      *iv_return = GL_VERTEX_ATTRIB_ARRAY1_NV;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_VERTEX_ATTRIB_ARRAY2_NV", 26)) {
    /*                          ^                     */
#ifdef GL_VERTEX_ATTRIB_ARRAY2_NV
      *iv_return = GL_VERTEX_ATTRIB_ARRAY2_NV;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_VERTEX_ATTRIB_ARRAY3_NV", 26)) {
    /*                          ^                     */
#ifdef GL_VERTEX_ATTRIB_ARRAY3_NV
      *iv_return = GL_VERTEX_ATTRIB_ARRAY3_NV;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_VERTEX_ATTRIB_ARRAY4_NV", 26)) {
    /*                          ^                     */
#ifdef GL_VERTEX_ATTRIB_ARRAY4_NV
      *iv_return = GL_VERTEX_ATTRIB_ARRAY4_NV;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_VERTEX_ATTRIB_ARRAY5_NV", 26)) {
    /*                          ^                     */
#ifdef GL_VERTEX_ATTRIB_ARRAY5_NV
      *iv_return = GL_VERTEX_ATTRIB_ARRAY5_NV;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_VERTEX_ATTRIB_ARRAY6_NV", 26)) {
    /*                          ^                     */
#ifdef GL_VERTEX_ATTRIB_ARRAY6_NV
      *iv_return = GL_VERTEX_ATTRIB_ARRAY6_NV;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_VERTEX_ATTRIB_ARRAY7_NV", 26)) {
    /*                          ^                     */
#ifdef GL_VERTEX_ATTRIB_ARRAY7_NV
      *iv_return = GL_VERTEX_ATTRIB_ARRAY7_NV;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_VERTEX_ATTRIB_ARRAY8_NV", 26)) {
    /*                          ^                     */
#ifdef GL_VERTEX_ATTRIB_ARRAY8_NV
      *iv_return = GL_VERTEX_ATTRIB_ARRAY8_NV;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_VERTEX_ATTRIB_ARRAY9_NV", 26)) {
    /*                          ^                     */
#ifdef GL_VERTEX_ATTRIB_ARRAY9_NV
      *iv_return = GL_VERTEX_ATTRIB_ARRAY9_NV;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_VERTEX_STATE_PROGRAM_NV", 26)) {
    /*                          ^                     */
#ifdef GL_VERTEX_STATE_PROGRAM_NV
      *iv_return = GL_VERTEX_STATE_PROGRAM_NV;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case 'U':
    if (memEQ(name, "GL_MAX_TEXTURE_BUFFER_SIZE", 26)) {
    /*                          ^                     */
#ifdef GL_MAX_TEXTURE_BUFFER_SIZE
      *iv_return = GL_MAX_TEXTURE_BUFFER_SIZE;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_MAX_TEXTURE_IMAGE_UNITS", 26)) {
    /*                          ^                     */
#ifdef GL_MAX_TEXTURE_IMAGE_UNITS
      *iv_return = GL_MAX_TEXTURE_IMAGE_UNITS;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_MAX_TEXTURE_STACK_DEPTH", 26)) {
    /*                          ^                     */
#ifdef GL_MAX_TEXTURE_STACK_DEPTH
      *iv_return = GL_MAX_TEXTURE_STACK_DEPTH;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_OBJECT_BUFFER_USAGE_ATI", 26)) {
    /*                          ^                     */
#ifdef GL_OBJECT_BUFFER_USAGE_ATI
      *iv_return = GL_OBJECT_BUFFER_USAGE_ATI;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case 'V':
    if (memEQ(name, "GL_DEBUG_SEVERITY_HIGH_AMD", 26)) {
    /*                          ^                     */
#ifdef GL_DEBUG_SEVERITY_HIGH_AMD
      *iv_return = GL_DEBUG_SEVERITY_HIGH_AMD;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_DEBUG_SEVERITY_HIGH_ARB", 26)) {
    /*                          ^                     */
#ifdef GL_DEBUG_SEVERITY_HIGH_ARB
      *iv_return = GL_DEBUG_SEVERITY_HIGH_ARB;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_INTERLEAVED_ATTRIBS_EXT", 26)) {
    /*                          ^                     */
#ifdef GL_INTERLEAVED_ATTRIBS_EXT
      *iv_return = GL_INTERLEAVED_ATTRIBS_EXT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_TEXTURE_VIEW_NUM_LAYERS", 26)) {
    /*                          ^                     */
#ifdef GL_TEXTURE_VIEW_NUM_LAYERS
      *iv_return = GL_TEXTURE_VIEW_NUM_LAYERS;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_TEXTURE_VIEW_NUM_LEVELS", 26)) {
    /*                          ^                     */
#ifdef GL_TEXTURE_VIEW_NUM_LEVELS
      *iv_return = GL_TEXTURE_VIEW_NUM_LEVELS;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case 'W':
    if (memEQ(name, "GL_COMPUTE_WORK_GROUP_SIZE", 26)) {
    /*                          ^                     */
#ifdef GL_COMPUTE_WORK_GROUP_SIZE
      *iv_return = GL_COMPUTE_WORK_GROUP_SIZE;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_MODELVIEW_PROJECTION_NV", 26)) {
    /*                          ^                     */
#ifdef GL_MODELVIEW_PROJECTION_NV
      *iv_return = GL_MODELVIEW_PROJECTION_NV;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case 'X':
    if (memEQ(name, "GL_PROXY_TEXTURE_RECTANGLE", 26)) {
    /*                          ^                     */
#ifdef GL_PROXY_TEXTURE_RECTANGLE
      *iv_return = GL_PROXY_TEXTURE_RECTANGLE;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case 'Y':
    if (memEQ(name, "GLEW_GREMEDY_string_marker", 26)) {
    /*                          ^                     */
#ifdef GLEW_GREMEDY_string_marker
      *iv_return = GLEW_GREMEDY_string_marker;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_INTENSITY16_SIGNED_SGIX", 26)) {
    /*                          ^                     */
#ifdef GL_INTENSITY16_SIGNED_SGIX
      *iv_return = GL_INTENSITY16_SIGNED_SGIX;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_INTENSITY_FLOAT16_APPLE", 26)) {
    /*                          ^                     */
#ifdef GL_INTENSITY_FLOAT16_APPLE
      *iv_return = GL_INTENSITY_FLOAT16_APPLE;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_INTENSITY_FLOAT32_APPLE", 26)) {
    /*                          ^                     */
#ifdef GL_INTENSITY_FLOAT32_APPLE
      *iv_return = GL_INTENSITY_FLOAT32_APPLE;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case '_':
    if (memEQ(name, "GL_ARB_post_depth_coverage", 26)) {
    /*                          ^                     */
#ifdef GL_ARB_post_depth_coverage
      *iv_return = GL_ARB_post_depth_coverage;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_BINORMAL_ARRAY_TYPE_EXT", 26)) {
    /*                          ^                     */
#ifdef GL_BINORMAL_ARRAY_TYPE_EXT
      *iv_return = GL_BINORMAL_ARRAY_TYPE_EXT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_EXT_draw_range_elements", 26)) {
    /*                          ^                     */
#ifdef GL_EXT_draw_range_elements
      *iv_return = GL_EXT_draw_range_elements;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_EXT_post_depth_coverage", 26)) {
    /*                          ^                     */
#ifdef GL_EXT_post_depth_coverage
      *iv_return = GL_EXT_post_depth_coverage;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_FEEDBACK_BUFFER_POINTER", 26)) {
    /*                          ^                     */
#ifdef GL_FEEDBACK_BUFFER_POINTER
      *iv_return = GL_FEEDBACK_BUFFER_POINTER;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_FONT_HAS_KERNING_BIT_NV", 26)) {
    /*                          ^                     */
#ifdef GL_FONT_HAS_KERNING_BIT_NV
      *iv_return = GL_FONT_HAS_KERNING_BIT_NV;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_GEOMETRY_INPUT_TYPE_ARB", 26)) {
    /*                          ^                     */
#ifdef GL_GEOMETRY_INPUT_TYPE_ARB
      *iv_return = GL_GEOMETRY_INPUT_TYPE_ARB;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_GEOMETRY_INPUT_TYPE_EXT", 26)) {
    /*                          ^                     */
#ifdef GL_GEOMETRY_INPUT_TYPE_EXT
      *iv_return = GL_GEOMETRY_INPUT_TYPE_EXT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_MODULATE_SIGNED_ADD_ATI", 26)) {
    /*                          ^                     */
#ifdef GL_MODULATE_SIGNED_ADD_ATI
      *iv_return = GL_MODULATE_SIGNED_ADD_ATI;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_QUERY_BY_REGION_NO_WAIT", 26)) {
    /*                          ^                     */
#ifdef GL_QUERY_BY_REGION_NO_WAIT
      *iv_return = GL_QUERY_BY_REGION_NO_WAIT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_QUERY_BY_REGION_WAIT_NV", 26)) {
    /*                          ^                     */
#ifdef GL_QUERY_BY_REGION_WAIT_NV
      *iv_return = GL_QUERY_BY_REGION_WAIT_NV;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_RESAMPLE_REPLICATE_SGIX", 26)) {
    /*                          ^                     */
#ifdef GL_RESAMPLE_REPLICATE_SGIX
      *iv_return = GL_RESAMPLE_REPLICATE_SGIX;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_RESAMPLE_ZERO_FILL_SGIX", 26)) {
    /*                          ^                     */
#ifdef GL_RESAMPLE_ZERO_FILL_SGIX
      *iv_return = GL_RESAMPLE_ZERO_FILL_SGIX;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_SEPARATE_SPECULAR_COLOR", 26)) {
    /*                          ^                     */
#ifdef GL_SEPARATE_SPECULAR_COLOR
      *iv_return = GL_SEPARATE_SPECULAR_COLOR;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_STANDARD_FONT_FORMAT_NV", 26)) {
    /*                          ^                     */
#ifdef GL_STANDARD_FONT_FORMAT_NV
      *iv_return = GL_STANDARD_FONT_FORMAT_NV;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_UNSIGNED_BYTE_2_3_3_REV", 26)) {
    /*                          ^                     */
#ifdef GL_UNSIGNED_BYTE_2_3_3_REV
      *iv_return = GL_UNSIGNED_BYTE_2_3_3_REV;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_UNSIGNED_BYTE_3_3_2_EXT", 26)) {
    /*                          ^                     */
#ifdef GL_UNSIGNED_BYTE_3_3_2_EXT
      *iv_return = GL_UNSIGNED_BYTE_3_3_2_EXT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_UNSIGNED_INT64_VEC2_ARB", 26)) {
    /*                          ^                     */
#ifdef GL_UNSIGNED_INT64_VEC2_ARB
      *iv_return = GL_UNSIGNED_INT64_VEC2_ARB;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_UNSIGNED_INT64_VEC3_ARB", 26)) {
    /*                          ^                     */
#ifdef GL_UNSIGNED_INT64_VEC3_ARB
      *iv_return = GL_UNSIGNED_INT64_VEC3_ARB;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_UNSIGNED_INT64_VEC4_ARB", 26)) {
    /*                          ^                     */
#ifdef GL_UNSIGNED_INT64_VEC4_ARB
      *iv_return = GL_UNSIGNED_INT64_VEC4_ARB;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_UNSIGNED_INT_10_10_10_2", 26)) {
    /*                          ^                     */
#ifdef GL_UNSIGNED_INT_10_10_10_2
      *iv_return = GL_UNSIGNED_INT_10_10_10_2;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_UNSIGNED_INT_IMAGE_CUBE", 26)) {
    /*                          ^                     */
#ifdef GL_UNSIGNED_INT_IMAGE_CUBE
      *iv_return = GL_UNSIGNED_INT_IMAGE_CUBE;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_UNSIGNED_INT_SAMPLER_1D", 26)) {
    /*                          ^                     */
#ifdef GL_UNSIGNED_INT_SAMPLER_1D
      *iv_return = GL_UNSIGNED_INT_SAMPLER_1D;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_UNSIGNED_INT_SAMPLER_2D", 26)) {
    /*                          ^                     */
#ifdef GL_UNSIGNED_INT_SAMPLER_2D
      *iv_return = GL_UNSIGNED_INT_SAMPLER_2D;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_UNSIGNED_INT_SAMPLER_3D", 26)) {
    /*                          ^                     */
#ifdef GL_UNSIGNED_INT_SAMPLER_3D
      *iv_return = GL_UNSIGNED_INT_SAMPLER_3D;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_UNSIGNED_NORMALIZED_ARB", 26)) {
    /*                          ^                     */
#ifdef GL_UNSIGNED_NORMALIZED_ARB
      *iv_return = GL_UNSIGNED_NORMALIZED_ARB;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_UNSIGNED_SHORT_8_8_MESA", 26)) {
    /*                          ^                     */
#ifdef GL_UNSIGNED_SHORT_8_8_MESA
      *iv_return = GL_UNSIGNED_SHORT_8_8_MESA;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case 'a':
    if (memEQ(name, "GLEW_ARB_seamless_cube_map", 26)) {
    /*                          ^                     */
#ifdef GLEW_ARB_seamless_cube_map
      *iv_return = GLEW_ARB_seamless_cube_map;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GLEW_ARB_shader_group_vote", 26)) {
    /*                          ^                     */
#ifdef GLEW_ARB_shader_group_vote
      *iv_return = GLEW_ARB_shader_group_vote;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GLEW_ARB_shader_image_size", 26)) {
    /*                          ^                     */
#ifdef GLEW_ARB_shader_image_size
      *iv_return = GLEW_ARB_shader_image_size;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GLEW_ARB_shader_subroutine", 26)) {
    /*                          ^                     */
#ifdef GLEW_ARB_shader_subroutine
      *iv_return = GLEW_ARB_shader_subroutine;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GLEW_EXT_fragment_lighting", 26)) {
    /*                          ^                     */
#ifdef GLEW_EXT_fragment_lighting
      *iv_return = GLEW_EXT_fragment_lighting;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GLEW_SUN_read_video_pixels", 26)) {
    /*                          ^                     */
#ifdef GLEW_SUN_read_video_pixels
      *iv_return = GLEW_SUN_read_video_pixels;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glGetColorTableParameterfv", 26)) {
    /*                          ^                     */
#ifdef glGetColorTableParameterfv
      *iv_return = glGetColorTableParameterfv;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glGetColorTableParameteriv", 26)) {
    /*                          ^                     */
#ifdef glGetColorTableParameteriv
      *iv_return = glGetColorTableParameteriv;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glMultiTexParameterIuivEXT", 26)) {
    /*                          ^                     */
#ifdef glMultiTexParameterIuivEXT
      *iv_return = glMultiTexParameterIuivEXT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glVertexArrayAttribBinding", 26)) {
    /*                          ^                     */
#ifdef glVertexArrayAttribBinding
      *iv_return = glVertexArrayAttribBinding;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glVertexArrayAttribIFormat", 26)) {
    /*                          ^                     */
#ifdef glVertexArrayAttribIFormat
      *iv_return = glVertexArrayAttribIFormat;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glVertexArrayAttribLFormat", 26)) {
    /*                          ^                     */
#ifdef glVertexArrayAttribLFormat
      *iv_return = glVertexArrayAttribLFormat;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glVertexArrayElementBuffer", 26)) {
    /*                          ^                     */
#ifdef glVertexArrayElementBuffer
      *iv_return = glVertexArrayElementBuffer;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glVertexArrayVertexBuffers", 26)) {
    /*                          ^                     */
#ifdef glVertexArrayVertexBuffers
      *iv_return = glVertexArrayVertexBuffers;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case 'b':
    if (memEQ(name, "glGetQueryObjectui64vANGLE", 26)) {
    /*                          ^                     */
#ifdef glGetQueryObjectui64vANGLE
      *iv_return = glGetQueryObjectui64vANGLE;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case 'c':
    if (memEQ(name, "GL_ARB_direct_state_access", 26)) {
    /*                          ^                     */
#ifdef GL_ARB_direct_state_access
      *iv_return = GL_ARB_direct_state_access;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_EXT_direct_state_access", 26)) {
    /*                          ^                     */
#ifdef GL_EXT_direct_state_access
      *iv_return = GL_EXT_direct_state_access;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_NV_explicit_multisample", 26)) {
    /*                          ^                     */
#ifdef GL_NV_explicit_multisample
      *iv_return = GL_NV_explicit_multisample;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glCreateSyncFromCLeventARB", 26)) {
    /*                          ^                     */
#ifdef glCreateSyncFromCLeventARB
      *iv_return = glCreateSyncFromCLeventARB;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case 'd':
    if (memEQ(name, "GLEW_NV_conditional_render", 26)) {
    /*                          ^                     */
#ifdef GLEW_NV_conditional_render
      *iv_return = GLEW_NV_conditional_render;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GLEW_NV_shader_buffer_load", 26)) {
    /*                          ^                     */
#ifdef GLEW_NV_shader_buffer_load
      *iv_return = GLEW_NV_shader_buffer_load;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_AMD_blend_minmax_factor", 26)) {
    /*                          ^                     */
#ifdef GL_AMD_blend_minmax_factor
      *iv_return = GL_AMD_blend_minmax_factor;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_ARB_blend_func_extended", 26)) {
    /*                          ^                     */
#ifdef GL_ARB_blend_func_extended
      *iv_return = GL_ARB_blend_func_extended;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_EXT_blend_func_separate", 26)) {
    /*                          ^                     */
#ifdef GL_EXT_blend_func_separate
      *iv_return = GL_EXT_blend_func_separate;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_NV_packed_depth_stencil", 26)) {
    /*                          ^                     */
#ifdef GL_NV_packed_depth_stencil
      *iv_return = GL_NV_packed_depth_stencil;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glClearNamedFramebufferuiv", 26)) {
    /*                          ^                     */
#ifdef glClearNamedFramebufferuiv
      *iv_return = glClearNamedFramebufferuiv;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case 'e':
    if (memEQ(name, "GLEW_ARB_stencil_texturing", 26)) {
    /*                          ^                     */
#ifdef GLEW_ARB_stencil_texturing
      *iv_return = GLEW_ARB_stencil_texturing;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GLEW_EXT_stencil_clear_tag", 26)) {
    /*                          ^                     */
#ifdef GLEW_EXT_stencil_clear_tag
      *iv_return = GLEW_EXT_stencil_clear_tag;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GLEW_REGAL_extension_query", 26)) {
    /*                          ^                     */
#ifdef GLEW_REGAL_extension_query
      *iv_return = GLEW_REGAL_extension_query;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GLEW_SGIX_texture_lod_bias", 26)) {
    /*                          ^                     */
#ifdef GLEW_SGIX_texture_lod_bias
      *iv_return = GLEW_SGIX_texture_lod_bias;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_AMD_vertex_shader_layer", 26)) {
    /*                          ^                     */
#ifdef GL_AMD_vertex_shader_layer
      *iv_return = GL_AMD_vertex_shader_layer;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_ARB_shader_bit_encoding", 26)) {
    /*                          ^                     */
#ifdef GL_ARB_shader_bit_encoding
      *iv_return = GL_ARB_shader_bit_encoding;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_ARB_tessellation_shader", 26)) {
    /*                          ^                     */
#ifdef GL_ARB_tessellation_shader
      *iv_return = GL_ARB_tessellation_shader;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_ARB_vertex_array_object", 26)) {
    /*                          ^                     */
#ifdef GL_ARB_vertex_array_object
      *iv_return = GL_ARB_vertex_array_object;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_ARB_vertex_attrib_64bit", 26)) {
    /*                          ^                     */
#ifdef GL_ARB_vertex_attrib_64bit
      *iv_return = GL_ARB_vertex_attrib_64bit;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_ATI_vertex_array_object", 26)) {
    /*                          ^                     */
#ifdef GL_ATI_vertex_array_object
      *iv_return = GL_ATI_vertex_array_object;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_EXT_vertex_attrib_64bit", 26)) {
    /*                          ^                     */
#ifdef GL_EXT_vertex_attrib_64bit
      *iv_return = GL_EXT_vertex_attrib_64bit;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_REND_screen_coordinates", 26)) {
    /*                          ^                     */
#ifdef GL_REND_screen_coordinates
      *iv_return = GL_REND_screen_coordinates;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_SGIX_pixel_texture_bits", 26)) {
    /*                          ^                     */
#ifdef GL_SGIX_pixel_texture_bits
      *iv_return = GL_SGIX_pixel_texture_bits;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glColorTableParameterfvSGI", 26)) {
    /*                          ^                     */
#ifdef glColorTableParameterfvSGI
      *iv_return = glColorTableParameterfvSGI;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glColorTableParameterivSGI", 26)) {
    /*                          ^                     */
#ifdef glColorTableParameterivSGI
      *iv_return = glColorTableParameterivSGI;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glFramebufferDrawBufferEXT", 26)) {
    /*                          ^                     */
#ifdef glFramebufferDrawBufferEXT
      *iv_return = glFramebufferDrawBufferEXT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glFramebufferReadBufferEXT", 26)) {
    /*                          ^                     */
#ifdef glFramebufferReadBufferEXT
      *iv_return = glFramebufferReadBufferEXT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glGenerateTextureMipmapEXT", 26)) {
    /*                          ^                     */
#ifdef glGenerateTextureMipmapEXT
      *iv_return = glGenerateTextureMipmapEXT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glGetFirstPerfQueryIdINTEL", 26)) {
    /*                          ^                     */
#ifdef glGetFirstPerfQueryIdINTEL
      *iv_return = glGetFirstPerfQueryIdINTEL;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glGetTextureParameterfvEXT", 26)) {
    /*                          ^                     */
#ifdef glGetTextureParameterfvEXT
      *iv_return = glGetTextureParameterfvEXT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glGetTextureParameterivEXT", 26)) {
    /*                          ^                     */
#ifdef glGetTextureParameterivEXT
      *iv_return = glGetTextureParameterivEXT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glInvalidateSubFramebuffer", 26)) {
    /*                          ^                     */
#ifdef glInvalidateSubFramebuffer
      *iv_return = glInvalidateSubFramebuffer;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glNamedRenderbufferStorage", 26)) {
    /*                          ^                     */
#ifdef glNamedRenderbufferStorage
      *iv_return = glNamedRenderbufferStorage;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case 'g':
    if (memEQ(name, "glTexturePageCommitmentEXT", 26)) {
    /*                          ^                     */
#ifdef glTexturePageCommitmentEXT
      *iv_return = glTexturePageCommitmentEXT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glVDPAUUnregisterSurfaceNV", 26)) {
    /*                          ^                     */
#ifdef glVDPAUUnregisterSurfaceNV
      *iv_return = glVDPAUUnregisterSurfaceNV;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case 'h':
    if (memEQ(name, "GLEW_NV_light_max_exponent", 26)) {
    /*                          ^                     */
#ifdef GLEW_NV_light_max_exponent
      *iv_return = GLEW_NV_light_max_exponent;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case 'i':
    if (memEQ(name, "GLEW_NV_register_combiners", 26)) {
    /*                          ^                     */
#ifdef GLEW_NV_register_combiners
      *iv_return = GLEW_NV_register_combiners;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_AMD_multi_draw_indirect", 26)) {
    /*                          ^                     */
#ifdef GL_AMD_multi_draw_indirect
      *iv_return = GL_AMD_multi_draw_indirect;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_ARB_multi_draw_indirect", 26)) {
    /*                          ^                     */
#ifdef GL_ARB_multi_draw_indirect
      *iv_return = GL_ARB_multi_draw_indirect;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glBeginConditionalRenderNV", 26)) {
    /*                          ^                     */
#ifdef glBeginConditionalRenderNV
      *iv_return = glBeginConditionalRenderNV;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glBindMaterialParameterEXT", 26)) {
    /*                          ^                     */
#ifdef glBindMaterialParameterEXT
      *iv_return = glBindMaterialParameterEXT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glFragmentLightModelfvSGIX", 26)) {
    /*                          ^                     */
#ifdef glFragmentLightModelfvSGIX
      *iv_return = glFragmentLightModelfvSGIX;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glFragmentLightModelivSGIX", 26)) {
    /*                          ^                     */
#ifdef glFragmentLightModelivSGIX
      *iv_return = glFragmentLightModelivSGIX;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glPathStencilDepthOffsetNV", 26)) {
    /*                          ^                     */
#ifdef glPathStencilDepthOffsetNV
      *iv_return = glPathStencilDepthOffsetNV;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case 'l':
    if (memEQ(name, "GLEW_ARB_half_float_vertex", 26)) {
    /*                          ^                     */
#ifdef GLEW_ARB_half_float_vertex
      *iv_return = GLEW_ARB_half_float_vertex;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GLEW_EXT_multi_draw_arrays", 26)) {
    /*                          ^                     */
#ifdef GLEW_EXT_multi_draw_arrays
      *iv_return = GLEW_EXT_multi_draw_arrays;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_ARB_pixel_buffer_object", 26)) {
    /*                          ^                     */
#ifdef GL_ARB_pixel_buffer_object
      *iv_return = GL_ARB_pixel_buffer_object;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_EXT_pixel_buffer_object", 26)) {
    /*                          ^                     */
#ifdef GL_EXT_pixel_buffer_object
      *iv_return = GL_EXT_pixel_buffer_object;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glDeleteOcclusionQueriesNV", 26)) {
    /*                          ^                     */
#ifdef glDeleteOcclusionQueriesNV
      *iv_return = glDeleteOcclusionQueriesNV;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glGetnConvolutionFilterARB", 26)) {
    /*                          ^                     */
#ifdef glGetnConvolutionFilterARB
      *iv_return = glGetnConvolutionFilterARB;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case 'n':
    if (memEQ(name, "GLEW_EXT_window_rectangles", 26)) {
    /*                          ^                     */
#ifdef GLEW_EXT_window_rectangles
      *iv_return = GLEW_EXT_window_rectangles;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GLEW_NV_transform_feedback", 26)) {
    /*                          ^                     */
#ifdef GLEW_NV_transform_feedback
      *iv_return = GLEW_NV_transform_feedback;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_SGIX_blend_alpha_minmax", 26)) {
    /*                          ^                     */
#ifdef GL_SGIX_blend_alpha_minmax
      *iv_return = GL_SGIX_blend_alpha_minmax;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glCreateTransformFeedbacks", 26)) {
    /*                          ^                     */
#ifdef glCreateTransformFeedbacks
      *iv_return = glCreateTransformFeedbacks;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glDeleteTransformFeedbacks", 26)) {
    /*                          ^                     */
#ifdef glDeleteTransformFeedbacks
      *iv_return = glDeleteTransformFeedbacks;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glDrawElementsInstancedARB", 26)) {
    /*                          ^                     */
#ifdef glDrawElementsInstancedARB
      *iv_return = glDrawElementsInstancedARB;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glDrawElementsInstancedEXT", 26)) {
    /*                          ^                     */
#ifdef glDrawElementsInstancedEXT
      *iv_return = glDrawElementsInstancedEXT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glGetFragmentMaterialfvEXT", 26)) {
    /*                          ^                     */
#ifdef glGetFragmentMaterialfvEXT
      *iv_return = glGetFragmentMaterialfvEXT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glGetFragmentMaterialivEXT", 26)) {
    /*                          ^                     */
#ifdef glGetFragmentMaterialivEXT
      *iv_return = glGetFragmentMaterialivEXT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glIsImageHandleResidentARB", 26)) {
    /*                          ^                     */
#ifdef glIsImageHandleResidentARB
      *iv_return = glIsImageHandleResidentARB;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case 'o':
    if (memEQ(name, "GL_AMD_performance_monitor", 26)) {
    /*                          ^                     */
#ifdef GL_AMD_performance_monitor
      *iv_return = GL_AMD_performance_monitor;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glConvolutionParameterfEXT", 26)) {
    /*                          ^                     */
#ifdef glConvolutionParameterfEXT
      *iv_return = glConvolutionParameterfEXT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glConvolutionParameteriEXT", 26)) {
    /*                          ^                     */
#ifdef glConvolutionParameteriEXT
      *iv_return = glConvolutionParameteriEXT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glFragmentColorMaterialEXT", 26)) {
    /*                          ^                     */
#ifdef glFragmentColorMaterialEXT
      *iv_return = glFragmentColorMaterialEXT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glViewportPositionWScaleNV", 26)) {
    /*                          ^                     */
#ifdef glViewportPositionWScaleNV
      *iv_return = glViewportPositionWScaleNV;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case 'p':
    if (memEQ(name, "GLEW_ATI_map_object_buffer", 26)) {
    /*                          ^                     */
#ifdef GLEW_ATI_map_object_buffer
      *iv_return = GLEW_ATI_map_object_buffer;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GLEW_EXT_depth_bounds_test", 26)) {
    /*                          ^                     */
#ifdef GLEW_EXT_depth_bounds_test
      *iv_return = GLEW_EXT_depth_bounds_test;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GLEW_INTEL_parallel_arrays", 26)) {
    /*                          ^                     */
#ifdef GLEW_INTEL_parallel_arrays
      *iv_return = GLEW_INTEL_parallel_arrays;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glGetTexBumpParameterfvATI", 26)) {
    /*                          ^                     */
#ifdef glGetTexBumpParameterfvATI
      *iv_return = glGetTexBumpParameterfvATI;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glGetTexBumpParameterivATI", 26)) {
    /*                          ^                     */
#ifdef glGetTexBumpParameterivATI
      *iv_return = glGetTexBumpParameterivATI;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case 'r':
    if (memEQ(name, "GLEW_ARB_vertex_array_bgra", 26)) {
    /*                          ^                     */
#ifdef GLEW_ARB_vertex_array_bgra
      *iv_return = GLEW_ARB_vertex_array_bgra;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GLEW_EXT_vertex_array_bgra", 26)) {
    /*                          ^                     */
#ifdef GLEW_EXT_vertex_array_bgra
      *iv_return = GLEW_EXT_vertex_array_bgra;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_ARB_clear_buffer_object", 26)) {
    /*                          ^                     */
#ifdef GL_ARB_clear_buffer_object
      *iv_return = GL_ARB_clear_buffer_object;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_ARB_indirect_parameters", 26)) {
    /*                          ^                     */
#ifdef GL_ARB_indirect_parameters
      *iv_return = GL_ARB_indirect_parameters;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_INTEL_performance_query", 26)) {
    /*                          ^                     */
#ifdef GL_INTEL_performance_query
      *iv_return = GL_INTEL_performance_query;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_NV_texture_env_combine4", 26)) {
    /*                          ^                     */
#ifdef GL_NV_texture_env_combine4
      *iv_return = GL_NV_texture_env_combine4;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glCopyTextureSubImage1DEXT", 26)) {
    /*                          ^                     */
#ifdef glCopyTextureSubImage1DEXT
      *iv_return = glCopyTextureSubImage1DEXT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glCopyTextureSubImage2DEXT", 26)) {
    /*                          ^                     */
#ifdef glCopyTextureSubImage2DEXT
      *iv_return = glCopyTextureSubImage2DEXT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glCopyTextureSubImage3DEXT", 26)) {
    /*                          ^                     */
#ifdef glCopyTextureSubImage3DEXT
      *iv_return = glCopyTextureSubImage3DEXT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glDisableVertexArrayAttrib", 26)) {
    /*                          ^                     */
#ifdef glDisableVertexArrayAttrib
      *iv_return = glDisableVertexArrayAttrib;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glDisableVertexAttribAPPLE", 26)) {
    /*                          ^                     */
#ifdef glDisableVertexAttribAPPLE
      *iv_return = glDisableVertexAttribAPPLE;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glDisableVertexAttribArray", 26)) {
    /*                          ^                     */
#ifdef glDisableVertexAttribArray
      *iv_return = glDisableVertexAttribArray;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glGetNamedProgramStringEXT", 26)) {
    /*                          ^                     */
#ifdef glGetNamedProgramStringEXT
      *iv_return = glGetNamedProgramStringEXT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glVertexAttribDivisorANGLE", 26)) {
    /*                          ^                     */
#ifdef glVertexAttribDivisorANGLE
      *iv_return = glVertexAttribDivisorANGLE;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case 's':
    if (memEQ(name, "GLEW_APPLE_specular_vector", 26)) {
    /*                          ^                     */
#ifdef GLEW_APPLE_specular_vector
      *iv_return = GLEW_APPLE_specular_vector;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_AMD_transform_feedback4", 26)) {
    /*                          ^                     */
#ifdef GL_AMD_transform_feedback4
      *iv_return = GL_AMD_transform_feedback4;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_ARB_transform_feedback2", 26)) {
    /*                          ^                     */
#ifdef GL_ARB_transform_feedback2
      *iv_return = GL_ARB_transform_feedback2;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_ARB_transform_feedback3", 26)) {
    /*                          ^                     */
#ifdef GL_ARB_transform_feedback3
      *iv_return = GL_ARB_transform_feedback3;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_NV_clip_space_w_scaling", 26)) {
    /*                          ^                     */
#ifdef GL_NV_clip_space_w_scaling
      *iv_return = GL_NV_clip_space_w_scaling;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_NV_multisample_coverage", 26)) {
    /*                          ^                     */
#ifdef GL_NV_multisample_coverage
      *iv_return = GL_NV_multisample_coverage;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glBeginTransformFeedbackNV", 26)) {
    /*                          ^                     */
#ifdef glBeginTransformFeedbackNV
      *iv_return = glBeginTransformFeedbackNV;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glDrawArraysInstancedANGLE", 26)) {
    /*                          ^                     */
#ifdef glDrawArraysInstancedANGLE
      *iv_return = glDrawArraysInstancedANGLE;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glGetCompressedTexImageARB", 26)) {
    /*                          ^                     */
#ifdef glGetCompressedTexImageARB
      *iv_return = glGetCompressedTexImageARB;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glPauseTransformFeedbackNV", 26)) {
    /*                          ^                     */
#ifdef glPauseTransformFeedbackNV
      *iv_return = glPauseTransformFeedbackNV;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case 't':
    if (memEQ(name, "GLEW_INTEL_texture_scissor", 26)) {
    /*                          ^                     */
#ifdef GLEW_INTEL_texture_scissor
      *iv_return = GLEW_INTEL_texture_scissor;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GLEW_NV_depth_buffer_float", 26)) {
    /*                          ^                     */
#ifdef GLEW_NV_depth_buffer_float
      *iv_return = GLEW_NV_depth_buffer_float;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GLEW_NV_vertex_array_range", 26)) {
    /*                          ^                     */
#ifdef GLEW_NV_vertex_array_range
      *iv_return = GLEW_NV_vertex_array_range;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_SGIS_texture_edge_clamp", 26)) {
    /*                          ^                     */
#ifdef GL_SGIS_texture_edge_clamp
      *iv_return = GL_SGIS_texture_edge_clamp;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_SGIX_texture_scale_bias", 26)) {
    /*                          ^                     */
#ifdef GL_SGIX_texture_scale_bias
      *iv_return = GL_SGIX_texture_scale_bias;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glBlendEquationSeparateEXT", 26)) {
    /*                          ^                     */
#ifdef glBlendEquationSeparateEXT
      *iv_return = glBlendEquationSeparateEXT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case 'u':
    if (memEQ(name, "GL_ARB_texture_compression", 26)) {
    /*                          ^                     */
#ifdef GL_ARB_texture_compression
      *iv_return = GL_ARB_texture_compression;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_ARB_texture_env_combine", 26)) {
    /*                          ^                     */
#ifdef GL_ARB_texture_env_combine
      *iv_return = GL_ARB_texture_env_combine;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_ARB_texture_multisample", 26)) {
    /*                          ^                     */
#ifdef GL_ARB_texture_multisample
      *iv_return = GL_ARB_texture_multisample;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_ATI_texture_mirror_once", 26)) {
    /*                          ^                     */
#ifdef GL_ATI_texture_mirror_once
      *iv_return = GL_ATI_texture_mirror_once;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_EXT_texture_env_combine", 26)) {
    /*                          ^                     */
#ifdef GL_EXT_texture_env_combine
      *iv_return = GL_EXT_texture_env_combine;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_EXT_texture_sRGB_decode", 26)) {
    /*                          ^                     */
#ifdef GL_EXT_texture_sRGB_decode
      *iv_return = GL_EXT_texture_sRGB_decode;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_SGI_texture_color_table", 26)) {
    /*                          ^                     */
#ifdef GL_SGI_texture_color_table
      *iv_return = GL_SGI_texture_color_table;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glGetNamedBufferSubDataEXT", 26)) {
    /*                          ^                     */
#ifdef glGetNamedBufferSubDataEXT
      *iv_return = glGetNamedBufferSubDataEXT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glGetQueryBufferObjecti64v", 26)) {
    /*                          ^                     */
#ifdef glGetQueryBufferObjecti64v
      *iv_return = glGetQueryBufferObjecti64v;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case 'v':
    if (memEQ(name, "glProgramEnvParameter4dARB", 26)) {
    /*                          ^                     */
#ifdef glProgramEnvParameter4dARB
      *iv_return = glProgramEnvParameter4dARB;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glProgramEnvParameter4fARB", 26)) {
    /*                          ^                     */
#ifdef glProgramEnvParameter4fARB
      *iv_return = glProgramEnvParameter4fARB;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glProgramEnvParameterI4iNV", 26)) {
    /*                          ^                     */
#ifdef glProgramEnvParameterI4iNV
      *iv_return = glProgramEnvParameterI4iNV;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case 'x':
    if (memEQ(name, "GLEW_ARB_texture_query_lod", 26)) {
    /*                          ^                     */
#ifdef GLEW_ARB_texture_query_lod
      *iv_return = GLEW_ARB_texture_query_lod;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GLEW_ARB_texture_rectangle", 26)) {
    /*                          ^                     */
#ifdef GLEW_ARB_texture_rectangle
      *iv_return = GLEW_ARB_texture_rectangle;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GLEW_EXT_texture_rectangle", 26)) {
    /*                          ^                     */
#ifdef GLEW_EXT_texture_rectangle
      *iv_return = GLEW_EXT_texture_rectangle;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_APPLE_aux_depth_stencil", 26)) {
    /*                          ^                     */
#ifdef GL_APPLE_aux_depth_stencil
      *iv_return = GL_APPLE_aux_depth_stencil;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_EXT_index_array_formats", 26)) {
    /*                          ^                     */
#ifdef GL_EXT_index_array_formats
      *iv_return = GL_EXT_index_array_formats;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case 'y':
    if (memEQ(name, "GL_AMD_query_buffer_object", 26)) {
    /*                          ^                     */
#ifdef GL_AMD_query_buffer_object
      *iv_return = GL_AMD_query_buffer_object;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_ARB_query_buffer_object", 26)) {
    /*                          ^                     */
#ifdef GL_ARB_query_buffer_object
      *iv_return = GL_ARB_query_buffer_object;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  }
  return PERL_constant_NOTFOUND;
}

static int
constant_27 (pTHX_ const char *name, IV *iv_return) {
  /* When generated this function returned values for the list of names given
     here.  However, subsequent manual editing may have added or removed some.
     GLEW_AMD_conservative_depth GLEW_AMD_draw_buffers_blend
     GLEW_ANGLE_framebuffer_blit GLEW_ANGLE_instanced_arrays
     GLEW_APPLE_object_purgeable GLEW_ARB_color_buffer_float
     GLEW_ARB_conservative_depth GLEW_ARB_depth_buffer_float
     GLEW_ARB_derivative_control GLEW_ARB_draw_buffers_blend
     GLEW_ARB_framebuffer_object GLEW_ARB_get_program_binary
     GLEW_ARB_invalidate_subdata GLEW_ARB_shader_texture_lod
     GLEW_ARB_texture_rgb10_a2ui GLEW_ATIX_texture_env_route
     GLEW_ATI_shader_texture_lod GLEW_EXT_framebuffer_object
     GLEW_EXT_raster_multisample GLEW_EXT_shader_integer_mix
     GLEW_EXT_texture_edge_clamp GLEW_EXT_transform_feedback
     GLEW_IBM_vertex_array_lists GLEW_INTEL_framebuffer_CMAA
     GLEW_NVX_conditional_render GLEW_NV_conservative_raster
     GLEW_NV_copy_depth_to_color GLEW_NV_register_combiners2
     GLEW_NV_shader_atomic_float GLEW_NV_shader_atomic_int64
     GLEW_NV_shader_thread_group GLEW_NV_texture_multisample
     GLEW_NV_transform_feedback2 GLEW_NV_vertex_array_range2
     GLEW_SGIS_point_line_texgen GLEW_SGIX_tag_sample_buffer
     GL_ALIASED_LINE_WIDTH_RANGE GL_ALIASED_POINT_SIZE_RANGE
     GL_AMD_depth_clamp_separate GL_AMD_interleaved_elements
     GL_APPLE_flush_buffer_range GL_APPLE_vertex_array_range
     GL_ARB_internalformat_query GL_ARB_map_buffer_alignment
     GL_ARB_shading_language_100 GL_ARB_sparse_texture_clamp
     GL_ARB_texture_border_clamp GL_ARB_texture_buffer_range
     GL_ARB_texture_env_crossbar GL_ARB_texture_query_levels
     GL_ARB_vertex_buffer_object GL_ARRAY_BUFFER_BINDING_ARB
     GL_ATI_text_fragment_shader GL_ATI_texture_env_combine3
     GL_BLEND_EQUATION_ALPHA_EXT GL_BUFFER_IMMUTABLE_STORAGE
     GL_BUMP_ROT_MATRIX_SIZE_ATI GL_CLAMP_FRAGMENT_COLOR_ARB
     GL_COLOR_MATERIAL_PARAMETER GL_COLOR_MATRIX_STACK_DEPTH
     GL_COLOR_TABLE_RED_SIZE_EXT GL_COLOR_TABLE_RED_SIZE_SGI
     GL_COMPARE_R_TO_TEXTURE_ARB GL_COMPRESSED_INTENSITY_ARB
     GL_COMPRESSED_LUMINANCE_ARB GL_COMPRESSED_RED_RGTC1_EXT
     GL_COMPRESSED_RGB_FXT1_3DFX GL_CONSERVE_MEMORY_HINT_PGI
     GL_CONTEXT_CORE_PROFILE_BIT GL_CONTEXT_RELEASE_BEHAVIOR
     GL_CONVOLUTION_BORDER_COLOR GL_CONVOLUTION_FILTER_SCALE
     GL_COPY_READ_BUFFER_BINDING GL_CURRENT_MATRIX_INDEX_ARB
     GL_DEBUG_CATEGORY_OTHER_AMD GL_DEBUG_OUTPUT_SYNCHRONOUS
     GL_DEBUG_SOURCE_APPLICATION GL_DEBUG_SOURCE_THIRD_PARTY
     GL_DEPTH_STENCIL_ATTACHMENT GL_DEPTH_STENCIL_TO_BGRA_NV
     GL_DEPTH_STENCIL_TO_RGBA_NV GL_DISPATCH_INDIRECT_BUFFER
     GL_DISTANCE_ATTENUATION_EXT GL_DRAW_ELEMENTS_COMMAND_NV
     GL_DRAW_FRAMEBUFFER_BINDING GL_DRAW_INDIRECT_ADDRESS_NV
     GL_DRAW_INDIRECT_UNIFIED_NV GL_DSDT8_MAG8_INTENSITY8_NV
     GL_EDGE_FLAG_ARRAY_LIST_IBM GL_ELEMENT_ARRAY_ADDRESS_NV
     GL_ELEMENT_ARRAY_BUFFER_ARB GL_ELEMENT_ARRAY_TYPE_APPLE
     GL_ELEMENT_ARRAY_UNIFIED_NV GL_EXT_packed_depth_stencil
     GL_EXT_polygon_offset_clamp GL_EXT_texture_mirror_clamp
     GL_FOG_COORDINATE_ARRAY_EXT GL_FOG_SPECULAR_TEXTURE_WIN
     GL_FONT_GLYPHS_AVAILABLE_NV GL_FONT_UNITS_PER_EM_BIT_NV
     GL_FONT_X_MAX_BOUNDS_BIT_NV GL_FONT_X_MIN_BOUNDS_BIT_NV
     GL_FONT_Y_MAX_BOUNDS_BIT_NV GL_FONT_Y_MIN_BOUNDS_BIT_NV
     GL_FRAMEBUFFER_COMPLETE_EXT GL_GEOMETRY_OUTPUT_TYPE_ARB
     GL_GEOMETRY_OUTPUT_TYPE_EXT GL_GET_TEXTURE_IMAGE_FORMAT
     GL_GLYPH_HAS_KERNING_BIT_NV GL_GREMEDY_frame_terminator
     GL_GUILTY_CONTEXT_RESET_ARB GL_HISTOGRAM_ALPHA_SIZE_EXT
     GL_HISTOGRAM_GREEN_SIZE_EXT GL_HISTOGRAM_LUMINANCE_SIZE
     GL_IMAGE_2D_MULTISAMPLE_EXT GL_IMAGE_BINDING_ACCESS_EXT
     GL_IMAGE_BINDING_FORMAT_EXT GL_IMAGE_CUBE_MAP_ARRAY_EXT
     GL_INTERNALFORMAT_BLUE_SIZE GL_INTERNALFORMAT_BLUE_TYPE
     GL_INTERNALFORMAT_PREFERRED GL_INTERNALFORMAT_SUPPORTED
     GL_INT_IMAGE_2D_MULTISAMPLE GL_INT_IMAGE_CUBE_MAP_ARRAY
     GL_INT_SAMPLER_1D_ARRAY_EXT GL_INT_SAMPLER_2D_ARRAY_EXT
     GL_LIGHT_MODEL_LOCAL_VIEWER GL_LINE_STRIP_ADJACENCY_ARB
     GL_LINE_STRIP_ADJACENCY_EXT GL_LOCAL_CONSTANT_VALUE_EXT
     GL_MAP1_VERTEX_ATTRIB0_4_NV GL_MAP1_VERTEX_ATTRIB1_4_NV
     GL_MAP1_VERTEX_ATTRIB2_4_NV GL_MAP1_VERTEX_ATTRIB3_4_NV
     GL_MAP1_VERTEX_ATTRIB4_4_NV GL_MAP1_VERTEX_ATTRIB5_4_NV
     GL_MAP1_VERTEX_ATTRIB6_4_NV GL_MAP1_VERTEX_ATTRIB7_4_NV
     GL_MAP1_VERTEX_ATTRIB8_4_NV GL_MAP1_VERTEX_ATTRIB9_4_NV
     GL_MAP2_VERTEX_ATTRIB0_4_NV GL_MAP2_VERTEX_ATTRIB1_4_NV
     GL_MAP2_VERTEX_ATTRIB2_4_NV GL_MAP2_VERTEX_ATTRIB3_4_NV
     GL_MAP2_VERTEX_ATTRIB4_4_NV GL_MAP2_VERTEX_ATTRIB5_4_NV
     GL_MAP2_VERTEX_ATTRIB6_4_NV GL_MAP2_VERTEX_ATTRIB7_4_NV
     GL_MAP2_VERTEX_ATTRIB8_4_NV GL_MAP2_VERTEX_ATTRIB9_4_NV
     GL_MAP_INVALIDATE_RANGE_BIT GL_MAX_ARRAY_TEXTURE_LAYERS
     GL_MAX_ASYNC_HISTOGRAM_SGIX GL_MAX_ASYNC_TEX_IMAGE_SGIX
     GL_MAX_DEBUG_MESSAGE_LENGTH GL_MAX_ELEMENTS_INDICES_EXT
     GL_MAX_GENERAL_COMBINERS_NV GL_MAX_NUM_ACTIVE_VARIABLES
     GL_MAX_PALETTE_MATRICES_ARB GL_MAX_PROGRAM_MATRICES_ARB
     GL_MAX_PROGRAM_TEXEL_OFFSET GL_MAX_SAMPLE_MASK_WORDS_NV
     GL_MAX_TEXTURE_LOD_BIAS_EXT GL_MAX_VERTEX_ATTRIB_STRIDE
     GL_MIN_MAP_BUFFER_ALIGNMENT GL_MIN_PROGRAM_TEXEL_OFFSET
     GL_MIN_SAMPLE_SHADING_VALUE GL_MIRROR_CLAMP_TO_EDGE_ATI
     GL_MIRROR_CLAMP_TO_EDGE_EXT GL_MODULATE_SIGNED_ADD_ATIX
     GL_NORMAL_ARRAY_POINTER_EXT GL_NUM_GENERAL_COMBINERS_NV
     GL_NVX_linked_gpu_multicast GL_NV_depth_range_unclamped
     GL_NV_shader_atomic_float64 GL_NV_shader_thread_shuffle
     GL_NV_stereo_view_rendering GL_NV_tessellation_program5
     GL_NV_texture_expand_normal GL_OBJECT_DELETE_STATUS_ARB
     GL_OFFSET_TEXTURE_MATRIX_NV GL_ONE_MINUS_CONSTANT_ALPHA
     GL_ONE_MINUS_CONSTANT_COLOR GL_PATH_COVER_DEPTH_FUNC_NV
     GL_PATH_DASH_ARRAY_COUNT_NV GL_PATH_GEN_COLOR_FORMAT_NV
     GL_PATH_INITIAL_DASH_CAP_NV GL_PATH_TERMINAL_END_CAP_NV
     GL_PIXEL_BUFFER_BARRIER_BIT GL_PIXEL_COUNT_AVAILABLE_NV
     GL_POLYGON_OFFSET_CLAMP_EXT GL_PRIMITIVES_GENERATED_EXT
     GL_PRIMITIVES_SUBMITTED_ARB GL_PROGRAM_ERROR_STRING_ARB
     GL_PROGRAM_FORMAT_ASCII_ARB GL_PROGRAM_INSTRUCTIONS_ARB
     GL_PROGRAM_PIPELINE_BINDING GL_QUERY_ALL_EVENT_BITS_AMD
     GL_QUERY_BUFFER_BARRIER_BIT GL_QUERY_BUFFER_BINDING_AMD
     GL_QUERY_COUNTER_BITS_ANGLE GL_QUERY_RESULT_NO_WAIT_AMD
     GL_R1UI_T2F_C4F_N3F_V3F_SUN GL_READ_FRAMEBUFFER_BINDING
     GL_READ_PIXEL_DATA_RANGE_NV GL_RELATIVE_ROUNDED_RECT_NV
     GL_RENDERBUFFER_BINDING_EXT GL_RENDERBUFFER_SAMPLES_EXT
     GL_RGBA_EXTENDED_RANGE_SGIX GL_SAMPLE_ALPHA_TO_COVERAGE
     GL_SAMPLE_ALPHA_TO_MASK_EXT GL_SAMPLE_ALPHA_TO_ONE_SGIS
     GL_SELECTION_BUFFER_POINTER GL_SGIX_vertex_preclip_hint
     GL_SHADING_LANGUAGE_VERSION GL_SMOOTH_CUBIC_CURVE_TO_NV
     GL_STREAM_RASTERIZATION_AMD GL_STRICT_LIGHTING_HINT_PGI
     GL_TANGENT_ARRAY_STRIDE_EXT GL_TEXTURE_BINDING_1D_ARRAY
     GL_TEXTURE_BINDING_2D_ARRAY GL_TEXTURE_BINDING_CUBE_MAP
     GL_TEXTURE_BORDER_VALUES_NV GL_TEXTURE_COLOR_SAMPLES_NV
     GL_TEXTURE_COMPARE_FUNC_ARB GL_TEXTURE_COMPARE_MODE_ARB
     GL_TEXTURE_COMPRESSION_HINT GL_TEXTURE_COORD_ARRAY_SIZE
     GL_TEXTURE_COORD_ARRAY_TYPE GL_TEXTURE_IMMUTABLE_FORMAT
     GL_TEXTURE_IMMUTABLE_LEVELS GL_TEXTURE_MAX_CLAMP_R_SGIX
     GL_TEXTURE_MAX_CLAMP_S_SGIX GL_TEXTURE_MAX_CLAMP_T_SGIX
     GL_TEXTURE_STENCIL_SIZE_EXT GL_TEXTURE_SWIZZLE_RGBA_EXT
     GL_TEXT_FRAGMENT_SHADER_ATI GL_TRANSPOSE_TEXTURE_MATRIX
     GL_TRIANGLE_STRIP_ADJACENCY GL_UNIFORM_BUFFER_LENGTH_NV
     GL_UNSIGNED_INT_5_9_9_9_REV GL_UNSIGNED_INT_8_8_8_8_EXT
     GL_UNSIGNED_INT_8_8_8_8_REV GL_UNSIGNED_SHORT_5_6_5_REV
     GL_UNSIGNED_SHORT_8_8_APPLE GL_VARIANT_ARRAY_STRIDE_EXT
     GL_VERTEX_ARRAY_POINTER_EXT GL_VERTEX_ARRAY_RANGE_APPLE
     GL_VERTEX_ATTRIB_ARRAY10_NV GL_VERTEX_ATTRIB_ARRAY11_NV
     GL_VERTEX_ATTRIB_ARRAY12_NV GL_VERTEX_ATTRIB_ARRAY13_NV
     GL_VERTEX_ATTRIB_ARRAY14_NV GL_VERTEX_ATTRIB_ARRAY15_NV
     GL_VERTEX_ATTRIB_ARRAY_LONG GL_VERTEX_ATTRIB_ARRAY_SIZE
     GL_VERTEX_ATTRIB_ARRAY_TYPE GL_VERTEX_ATTRIB_MAP1_APPLE
     GL_VERTEX_ATTRIB_MAP2_APPLE GL_VERTEX_PRECLIP_HINT_SGIX
     GL_VERTEX_SHADER_LOCALS_EXT GL_VIEW_CLASS_S3TC_DXT1_RGB
     GL_VIEW_COMPATIBILITY_CLASS GL_WEIGHT_ARRAY_POINTER_ARB
     GL_Z4Y12Z4CB12Z4CR12_444_NV glBeginConditionalRenderNVX
     glBeginTransformFeedbackEXT glBlendEquationSeparateiARB
     glCheckFramebufferStatusEXT glConvolutionParameterfvEXT
     glConvolutionParameterivEXT glCopyMultiTexSubImage1DEXT
     glCopyMultiTexSubImage2DEXT glCopyMultiTexSubImage3DEXT
     glCoverageModulationTableNV glFragmentColorMaterialSGIX
     glFramebufferDrawBuffersEXT glFramebufferTextureFaceARB
     glFramebufferTextureFaceEXT glGenerateMultiTexMipmapEXT
     glGetActiveUniformBlockName glGetBufferParameterui64vNV
     glGetCompressedTextureImage glGetConvolutionParameterfv
     glGetConvolutionParameteriv glGetFragmentMaterialfvSGIX
     glGetFragmentMaterialivSGIX glGetFramebufferParameteriv
     glGetGraphicsResetStatusARB glGetLocalConstantFloatvEXT
     glGetMapAttribParameterfvNV glGetMapAttribParameterivNV
     glGetMultiTexParameterfvEXT glGetMultiTexParameterivEXT
     glGetNamedBufferParameteriv glGetNamedBufferPointervEXT
     glGetObjectParameterivAPPLE glGetPerfMonitorCountersAMD
     glGetPerfQueryIdByNameINTEL glGetProgramPipelineInfoLog
     glGetQueryBufferObjectui64v glGetTextureParameterIivEXT
     glGetTextureSamplerHandleNV glGetTransformFeedbacki64_v
     glGetVertexArrayIndexed64iv glGetVertexArrayIntegervEXT
     glGetVertexArrayPointervEXT glGetVertexAttribPointervNV
     glGetVideoCaptureStreamdvNV glGetVideoCaptureStreamfvNV
     glGetVideoCaptureStreamivNV glGetnCompressedTexImageARB
     glIsTextureHandleResidentNV glLGPUNamedBufferSubDataNVX
     glMakeImageHandleResidentNV glMakeNamedBufferResidentNV
     glMatrixLoadTranspose3x3fNV glMatrixMultTranspose3x3fNV
     glMultiDrawElementsIndirect glNamedCopyBufferSubDataEXT
     glProgramEnvParameter4dvARB glProgramEnvParameter4fvARB
     glProgramEnvParameterI4ivNV glProgramEnvParameterI4uiNV
     glProgramNamedParameter4dNV glProgramNamedParameter4fNV
     glProgramUniformMatrix2x3dv glProgramUniformMatrix2x3fv
     glProgramUniformMatrix2x4dv glProgramUniformMatrix2x4fv
     glProgramUniformMatrix3x2dv glProgramUniformMatrix3x2fv
     glProgramUniformMatrix3x4dv glProgramUniformMatrix3x4fv
     glProgramUniformMatrix4x2dv glProgramUniformMatrix4x2fv
     glProgramUniformMatrix4x3dv glProgramUniformMatrix4x3fv
     glQueryObjectParameteruiAMD glReplacementCodePointerSUN
     glRequestResidentProgramsNV glResumeTransformFeedbackNV
     glShaderStorageBlockBinding glTransformFeedbackVaryings
     glVertexArrayBindingDivisor glVertexArrayColorOffsetEXT
     glVertexArrayIndexOffsetEXT glVertexAttribParameteriAMD */
  /* Offset 21 gives the best switch position.  */
  switch (name[21]) {
  case '0':
    if (memEQ(name, "GLEW_ARB_texture_rgb10_a2ui", 27)) {
    /*                                    ^            */
#ifdef GLEW_ARB_texture_rgb10_a2ui
      *iv_return = GLEW_ARB_texture_rgb10_a2ui;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_MAP1_VERTEX_ATTRIB0_4_NV", 27)) {
    /*                                    ^            */
#ifdef GL_MAP1_VERTEX_ATTRIB0_4_NV
      *iv_return = GL_MAP1_VERTEX_ATTRIB0_4_NV;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_MAP2_VERTEX_ATTRIB0_4_NV", 27)) {
    /*                                    ^            */
#ifdef GL_MAP2_VERTEX_ATTRIB0_4_NV
      *iv_return = GL_MAP2_VERTEX_ATTRIB0_4_NV;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case '1':
    if (memEQ(name, "GL_COMPRESSED_RGB_FXT1_3DFX", 27)) {
    /*                                    ^            */
#ifdef GL_COMPRESSED_RGB_FXT1_3DFX
      *iv_return = GL_COMPRESSED_RGB_FXT1_3DFX;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_MAP1_VERTEX_ATTRIB1_4_NV", 27)) {
    /*                                    ^            */
#ifdef GL_MAP1_VERTEX_ATTRIB1_4_NV
      *iv_return = GL_MAP1_VERTEX_ATTRIB1_4_NV;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_MAP2_VERTEX_ATTRIB1_4_NV", 27)) {
    /*                                    ^            */
#ifdef GL_MAP2_VERTEX_ATTRIB1_4_NV
      *iv_return = GL_MAP2_VERTEX_ATTRIB1_4_NV;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case '2':
    if (memEQ(name, "GL_MAP1_VERTEX_ATTRIB2_4_NV", 27)) {
    /*                                    ^            */
#ifdef GL_MAP1_VERTEX_ATTRIB2_4_NV
      *iv_return = GL_MAP1_VERTEX_ATTRIB2_4_NV;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_MAP2_VERTEX_ATTRIB2_4_NV", 27)) {
    /*                                    ^            */
#ifdef GL_MAP2_VERTEX_ATTRIB2_4_NV
      *iv_return = GL_MAP2_VERTEX_ATTRIB2_4_NV;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case '3':
    if (memEQ(name, "GL_MAP1_VERTEX_ATTRIB3_4_NV", 27)) {
    /*                                    ^            */
#ifdef GL_MAP1_VERTEX_ATTRIB3_4_NV
      *iv_return = GL_MAP1_VERTEX_ATTRIB3_4_NV;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_MAP2_VERTEX_ATTRIB3_4_NV", 27)) {
    /*                                    ^            */
#ifdef GL_MAP2_VERTEX_ATTRIB3_4_NV
      *iv_return = GL_MAP2_VERTEX_ATTRIB3_4_NV;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_R1UI_T2F_C4F_N3F_V3F_SUN", 27)) {
    /*                                    ^            */
#ifdef GL_R1UI_T2F_C4F_N3F_V3F_SUN
      *iv_return = GL_R1UI_T2F_C4F_N3F_V3F_SUN;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glMatrixLoadTranspose3x3fNV", 27)) {
    /*                                    ^            */
#ifdef glMatrixLoadTranspose3x3fNV
      *iv_return = glMatrixLoadTranspose3x3fNV;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glMatrixMultTranspose3x3fNV", 27)) {
    /*                                    ^            */
#ifdef glMatrixMultTranspose3x3fNV
      *iv_return = glMatrixMultTranspose3x3fNV;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case '4':
    if (memEQ(name, "GL_MAP1_VERTEX_ATTRIB4_4_NV", 27)) {
    /*                                    ^            */
#ifdef GL_MAP1_VERTEX_ATTRIB4_4_NV
      *iv_return = GL_MAP1_VERTEX_ATTRIB4_4_NV;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_MAP2_VERTEX_ATTRIB4_4_NV", 27)) {
    /*                                    ^            */
#ifdef GL_MAP2_VERTEX_ATTRIB4_4_NV
      *iv_return = GL_MAP2_VERTEX_ATTRIB4_4_NV;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_Z4Y12Z4CB12Z4CR12_444_NV", 27)) {
    /*                                    ^            */
#ifdef GL_Z4Y12Z4CB12Z4CR12_444_NV
      *iv_return = GL_Z4Y12Z4CB12Z4CR12_444_NV;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glProgramEnvParameter4dvARB", 27)) {
    /*                                    ^            */
#ifdef glProgramEnvParameter4dvARB
      *iv_return = glProgramEnvParameter4dvARB;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glProgramEnvParameter4fvARB", 27)) {
    /*                                    ^            */
#ifdef glProgramEnvParameter4fvARB
      *iv_return = glProgramEnvParameter4fvARB;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case '5':
    if (memEQ(name, "GL_MAP1_VERTEX_ATTRIB5_4_NV", 27)) {
    /*                                    ^            */
#ifdef GL_MAP1_VERTEX_ATTRIB5_4_NV
      *iv_return = GL_MAP1_VERTEX_ATTRIB5_4_NV;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_MAP2_VERTEX_ATTRIB5_4_NV", 27)) {
    /*                                    ^            */
#ifdef GL_MAP2_VERTEX_ATTRIB5_4_NV
      *iv_return = GL_MAP2_VERTEX_ATTRIB5_4_NV;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case '6':
    if (memEQ(name, "GL_MAP1_VERTEX_ATTRIB6_4_NV", 27)) {
    /*                                    ^            */
#ifdef GL_MAP1_VERTEX_ATTRIB6_4_NV
      *iv_return = GL_MAP1_VERTEX_ATTRIB6_4_NV;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_MAP2_VERTEX_ATTRIB6_4_NV", 27)) {
    /*                                    ^            */
#ifdef GL_MAP2_VERTEX_ATTRIB6_4_NV
      *iv_return = GL_MAP2_VERTEX_ATTRIB6_4_NV;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case '7':
    if (memEQ(name, "GL_MAP1_VERTEX_ATTRIB7_4_NV", 27)) {
    /*                                    ^            */
#ifdef GL_MAP1_VERTEX_ATTRIB7_4_NV
      *iv_return = GL_MAP1_VERTEX_ATTRIB7_4_NV;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_MAP2_VERTEX_ATTRIB7_4_NV", 27)) {
    /*                                    ^            */
#ifdef GL_MAP2_VERTEX_ATTRIB7_4_NV
      *iv_return = GL_MAP2_VERTEX_ATTRIB7_4_NV;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case '8':
    if (memEQ(name, "GL_MAP1_VERTEX_ATTRIB8_4_NV", 27)) {
    /*                                    ^            */
#ifdef GL_MAP1_VERTEX_ATTRIB8_4_NV
      *iv_return = GL_MAP1_VERTEX_ATTRIB8_4_NV;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_MAP2_VERTEX_ATTRIB8_4_NV", 27)) {
    /*                                    ^            */
#ifdef GL_MAP2_VERTEX_ATTRIB8_4_NV
      *iv_return = GL_MAP2_VERTEX_ATTRIB8_4_NV;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case '9':
    if (memEQ(name, "GL_MAP1_VERTEX_ATTRIB9_4_NV", 27)) {
    /*                                    ^            */
#ifdef GL_MAP1_VERTEX_ATTRIB9_4_NV
      *iv_return = GL_MAP1_VERTEX_ATTRIB9_4_NV;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_MAP2_VERTEX_ATTRIB9_4_NV", 27)) {
    /*                                    ^            */
#ifdef GL_MAP2_VERTEX_ATTRIB9_4_NV
      *iv_return = GL_MAP2_VERTEX_ATTRIB9_4_NV;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case 'A':
    if (memEQ(name, "GL_COLOR_MATERIAL_PARAMETER", 27)) {
    /*                                    ^            */
#ifdef GL_COLOR_MATERIAL_PARAMETER
      *iv_return = GL_COLOR_MATERIAL_PARAMETER;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_DRAW_ELEMENTS_COMMAND_NV", 27)) {
    /*                                    ^            */
#ifdef GL_DRAW_ELEMENTS_COMMAND_NV
      *iv_return = GL_DRAW_ELEMENTS_COMMAND_NV;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_FOG_COORDINATE_ARRAY_EXT", 27)) {
    /*                                    ^            */
#ifdef GL_FOG_COORDINATE_ARRAY_EXT
      *iv_return = GL_FOG_COORDINATE_ARRAY_EXT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_IMAGE_BINDING_FORMAT_EXT", 27)) {
    /*                                    ^            */
#ifdef GL_IMAGE_BINDING_FORMAT_EXT
      *iv_return = GL_IMAGE_BINDING_FORMAT_EXT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_IMAGE_CUBE_MAP_ARRAY_EXT", 27)) {
    /*                                    ^            */
#ifdef GL_IMAGE_CUBE_MAP_ARRAY_EXT
      *iv_return = GL_IMAGE_CUBE_MAP_ARRAY_EXT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_INT_SAMPLER_1D_ARRAY_EXT", 27)) {
    /*                                    ^            */
#ifdef GL_INT_SAMPLER_1D_ARRAY_EXT
      *iv_return = GL_INT_SAMPLER_1D_ARRAY_EXT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_INT_SAMPLER_2D_ARRAY_EXT", 27)) {
    /*                                    ^            */
#ifdef GL_INT_SAMPLER_2D_ARRAY_EXT
      *iv_return = GL_INT_SAMPLER_2D_ARRAY_EXT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_MAX_TEXTURE_LOD_BIAS_EXT", 27)) {
    /*                                    ^            */
#ifdef GL_MAX_TEXTURE_LOD_BIAS_EXT
      *iv_return = GL_MAX_TEXTURE_LOD_BIAS_EXT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_TRIANGLE_STRIP_ADJACENCY", 27)) {
    /*                                    ^            */
#ifdef GL_TRIANGLE_STRIP_ADJACENCY
      *iv_return = GL_TRIANGLE_STRIP_ADJACENCY;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case 'B':
    if (memEQ(name, "GL_DISPATCH_INDIRECT_BUFFER", 27)) {
    /*                                    ^            */
#ifdef GL_DISPATCH_INDIRECT_BUFFER
      *iv_return = GL_DISPATCH_INDIRECT_BUFFER;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_FONT_GLYPHS_AVAILABLE_NV", 27)) {
    /*                                    ^            */
#ifdef GL_FONT_GLYPHS_AVAILABLE_NV
      *iv_return = GL_FONT_GLYPHS_AVAILABLE_NV;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_FONT_UNITS_PER_EM_BIT_NV", 27)) {
    /*                                    ^            */
#ifdef GL_FONT_UNITS_PER_EM_BIT_NV
      *iv_return = GL_FONT_UNITS_PER_EM_BIT_NV;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_FONT_X_MAX_BOUNDS_BIT_NV", 27)) {
    /*                                    ^            */
#ifdef GL_FONT_X_MAX_BOUNDS_BIT_NV
      *iv_return = GL_FONT_X_MAX_BOUNDS_BIT_NV;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_FONT_X_MIN_BOUNDS_BIT_NV", 27)) {
    /*                                    ^            */
#ifdef GL_FONT_X_MIN_BOUNDS_BIT_NV
      *iv_return = GL_FONT_X_MIN_BOUNDS_BIT_NV;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_FONT_Y_MAX_BOUNDS_BIT_NV", 27)) {
    /*                                    ^            */
#ifdef GL_FONT_Y_MAX_BOUNDS_BIT_NV
      *iv_return = GL_FONT_Y_MAX_BOUNDS_BIT_NV;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_FONT_Y_MIN_BOUNDS_BIT_NV", 27)) {
    /*                                    ^            */
#ifdef GL_FONT_Y_MIN_BOUNDS_BIT_NV
      *iv_return = GL_FONT_Y_MIN_BOUNDS_BIT_NV;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_GLYPH_HAS_KERNING_BIT_NV", 27)) {
    /*                                    ^            */
#ifdef GL_GLYPH_HAS_KERNING_BIT_NV
      *iv_return = GL_GLYPH_HAS_KERNING_BIT_NV;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_PIXEL_COUNT_AVAILABLE_NV", 27)) {
    /*                                    ^            */
#ifdef GL_PIXEL_COUNT_AVAILABLE_NV
      *iv_return = GL_PIXEL_COUNT_AVAILABLE_NV;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_TEXTURE_BINDING_CUBE_MAP", 27)) {
    /*                                    ^            */
#ifdef GL_TEXTURE_BINDING_CUBE_MAP
      *iv_return = GL_TEXTURE_BINDING_CUBE_MAP;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_TEXTURE_SWIZZLE_RGBA_EXT", 27)) {
    /*                                    ^            */
#ifdef GL_TEXTURE_SWIZZLE_RGBA_EXT
      *iv_return = GL_TEXTURE_SWIZZLE_RGBA_EXT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case 'C':
    if (memEQ(name, "GL_COMPRESSED_LUMINANCE_ARB", 27)) {
    /*                                    ^            */
#ifdef GL_COMPRESSED_LUMINANCE_ARB
      *iv_return = GL_COMPRESSED_LUMINANCE_ARB;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_COMPRESSED_RED_RGTC1_EXT", 27)) {
    /*                                    ^            */
#ifdef GL_COMPRESSED_RED_RGTC1_EXT
      *iv_return = GL_COMPRESSED_RED_RGTC1_EXT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_DEBUG_SOURCE_APPLICATION", 27)) {
    /*                                    ^            */
#ifdef GL_DEBUG_SOURCE_APPLICATION
      *iv_return = GL_DEBUG_SOURCE_APPLICATION;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_DEPTH_STENCIL_ATTACHMENT", 27)) {
    /*                                    ^            */
#ifdef GL_DEPTH_STENCIL_ATTACHMENT
      *iv_return = GL_DEPTH_STENCIL_ATTACHMENT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_LINE_STRIP_ADJACENCY_ARB", 27)) {
    /*                                    ^            */
#ifdef GL_LINE_STRIP_ADJACENCY_ARB
      *iv_return = GL_LINE_STRIP_ADJACENCY_ARB;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_LINE_STRIP_ADJACENCY_EXT", 27)) {
    /*                                    ^            */
#ifdef GL_LINE_STRIP_ADJACENCY_EXT
      *iv_return = GL_LINE_STRIP_ADJACENCY_EXT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_PATH_INITIAL_DASH_CAP_NV", 27)) {
    /*                                    ^            */
#ifdef GL_PATH_INITIAL_DASH_CAP_NV
      *iv_return = GL_PATH_INITIAL_DASH_CAP_NV;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_PATH_TERMINAL_END_CAP_NV", 27)) {
    /*                                    ^            */
#ifdef GL_PATH_TERMINAL_END_CAP_NV
      *iv_return = GL_PATH_TERMINAL_END_CAP_NV;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case 'D':
    if (memEQ(name, "GL_MODULATE_SIGNED_ADD_ATIX", 27)) {
    /*                                    ^            */
#ifdef GL_MODULATE_SIGNED_ADD_ATIX
      *iv_return = GL_MODULATE_SIGNED_ADD_ATIX;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_TANGENT_ARRAY_STRIDE_EXT", 27)) {
    /*                                    ^            */
#ifdef GL_TANGENT_ARRAY_STRIDE_EXT
      *iv_return = GL_TANGENT_ARRAY_STRIDE_EXT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_TEXTURE_COMPARE_MODE_ARB", 27)) {
    /*                                    ^            */
#ifdef GL_TEXTURE_COMPARE_MODE_ARB
      *iv_return = GL_TEXTURE_COMPARE_MODE_ARB;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_VARIANT_ARRAY_STRIDE_EXT", 27)) {
    /*                                    ^            */
#ifdef GL_VARIANT_ARRAY_STRIDE_EXT
      *iv_return = GL_VARIANT_ARRAY_STRIDE_EXT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case 'E':
    if (memEQ(name, "GL_CURRENT_MATRIX_INDEX_ARB", 27)) {
    /*                                    ^            */
#ifdef GL_CURRENT_MATRIX_INDEX_ARB
      *iv_return = GL_CURRENT_MATRIX_INDEX_ARB;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_DEBUG_CATEGORY_OTHER_AMD", 27)) {
    /*                                    ^            */
#ifdef GL_DEBUG_CATEGORY_OTHER_AMD
      *iv_return = GL_DEBUG_CATEGORY_OTHER_AMD;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_DRAW_INDIRECT_ADDRESS_NV", 27)) {
    /*                                    ^            */
#ifdef GL_DRAW_INDIRECT_ADDRESS_NV
      *iv_return = GL_DRAW_INDIRECT_ADDRESS_NV;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_ELEMENT_ARRAY_ADDRESS_NV", 27)) {
    /*                                    ^            */
#ifdef GL_ELEMENT_ARRAY_ADDRESS_NV
      *iv_return = GL_ELEMENT_ARRAY_ADDRESS_NV;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_ELEMENT_ARRAY_BUFFER_ARB", 27)) {
    /*                                    ^            */
#ifdef GL_ELEMENT_ARRAY_BUFFER_ARB
      *iv_return = GL_ELEMENT_ARRAY_BUFFER_ARB;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_GUILTY_CONTEXT_RESET_ARB", 27)) {
    /*                                    ^            */
#ifdef GL_GUILTY_CONTEXT_RESET_ARB
      *iv_return = GL_GUILTY_CONTEXT_RESET_ARB;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_HISTOGRAM_LUMINANCE_SIZE", 27)) {
    /*                                    ^            */
#ifdef GL_HISTOGRAM_LUMINANCE_SIZE
      *iv_return = GL_HISTOGRAM_LUMINANCE_SIZE;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_INTERNALFORMAT_BLUE_SIZE", 27)) {
    /*                                    ^            */
#ifdef GL_INTERNALFORMAT_BLUE_SIZE
      *iv_return = GL_INTERNALFORMAT_BLUE_SIZE;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_INTERNALFORMAT_BLUE_TYPE", 27)) {
    /*                                    ^            */
#ifdef GL_INTERNALFORMAT_BLUE_TYPE
      *iv_return = GL_INTERNALFORMAT_BLUE_TYPE;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_MAX_ASYNC_TEX_IMAGE_SGIX", 27)) {
    /*                                    ^            */
#ifdef GL_MAX_ASYNC_TEX_IMAGE_SGIX
      *iv_return = GL_MAX_ASYNC_TEX_IMAGE_SGIX;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_MAX_ELEMENTS_INDICES_EXT", 27)) {
    /*                                    ^            */
#ifdef GL_MAX_ELEMENTS_INDICES_EXT
      *iv_return = GL_MAX_ELEMENTS_INDICES_EXT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_MAX_GENERAL_COMBINERS_NV", 27)) {
    /*                                    ^            */
#ifdef GL_MAX_GENERAL_COMBINERS_NV
      *iv_return = GL_MAX_GENERAL_COMBINERS_NV;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_MAX_PALETTE_MATRICES_ARB", 27)) {
    /*                                    ^            */
#ifdef GL_MAX_PALETTE_MATRICES_ARB
      *iv_return = GL_MAX_PALETTE_MATRICES_ARB;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_MAX_PROGRAM_MATRICES_ARB", 27)) {
    /*                                    ^            */
#ifdef GL_MAX_PROGRAM_MATRICES_ARB
      *iv_return = GL_MAX_PROGRAM_MATRICES_ARB;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_NORMAL_ARRAY_POINTER_EXT", 27)) {
    /*                                    ^            */
#ifdef GL_NORMAL_ARRAY_POINTER_EXT
      *iv_return = GL_NORMAL_ARRAY_POINTER_EXT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_NUM_GENERAL_COMBINERS_NV", 27)) {
    /*                                    ^            */
#ifdef GL_NUM_GENERAL_COMBINERS_NV
      *iv_return = GL_NUM_GENERAL_COMBINERS_NV;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_PIXEL_BUFFER_BARRIER_BIT", 27)) {
    /*                                    ^            */
#ifdef GL_PIXEL_BUFFER_BARRIER_BIT
      *iv_return = GL_PIXEL_BUFFER_BARRIER_BIT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_PRIMITIVES_GENERATED_EXT", 27)) {
    /*                                    ^            */
#ifdef GL_PRIMITIVES_GENERATED_EXT
      *iv_return = GL_PRIMITIVES_GENERATED_EXT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_PRIMITIVES_SUBMITTED_ARB", 27)) {
    /*                                    ^            */
#ifdef GL_PRIMITIVES_SUBMITTED_ARB
      *iv_return = GL_PRIMITIVES_SUBMITTED_ARB;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_QUERY_BUFFER_BARRIER_BIT", 27)) {
    /*                                    ^            */
#ifdef GL_QUERY_BUFFER_BARRIER_BIT
      *iv_return = GL_QUERY_BUFFER_BARRIER_BIT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_RELATIVE_ROUNDED_RECT_NV", 27)) {
    /*                                    ^            */
#ifdef GL_RELATIVE_ROUNDED_RECT_NV
      *iv_return = GL_RELATIVE_ROUNDED_RECT_NV;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_RENDERBUFFER_SAMPLES_EXT", 27)) {
    /*                                    ^            */
#ifdef GL_RENDERBUFFER_SAMPLES_EXT
      *iv_return = GL_RENDERBUFFER_SAMPLES_EXT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_RGBA_EXTENDED_RANGE_SGIX", 27)) {
    /*                                    ^            */
#ifdef GL_RGBA_EXTENDED_RANGE_SGIX
      *iv_return = GL_RGBA_EXTENDED_RANGE_SGIX;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_SAMPLE_ALPHA_TO_ONE_SGIS", 27)) {
    /*                                    ^            */
#ifdef GL_SAMPLE_ALPHA_TO_ONE_SGIS
      *iv_return = GL_SAMPLE_ALPHA_TO_ONE_SGIS;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_SHADING_LANGUAGE_VERSION", 27)) {
    /*                                    ^            */
#ifdef GL_SHADING_LANGUAGE_VERSION
      *iv_return = GL_SHADING_LANGUAGE_VERSION;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_TEXT_FRAGMENT_SHADER_ATI", 27)) {
    /*                                    ^            */
#ifdef GL_TEXT_FRAGMENT_SHADER_ATI
      *iv_return = GL_TEXT_FRAGMENT_SHADER_ATI;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_VERTEX_ARRAY_POINTER_EXT", 27)) {
    /*                                    ^            */
#ifdef GL_VERTEX_ARRAY_POINTER_EXT
      *iv_return = GL_VERTEX_ARRAY_POINTER_EXT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_WEIGHT_ARRAY_POINTER_ARB", 27)) {
    /*                                    ^            */
#ifdef GL_WEIGHT_ARRAY_POINTER_ARB
      *iv_return = GL_WEIGHT_ARRAY_POINTER_ARB;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case 'F':
    if (memEQ(name, "GL_GET_TEXTURE_IMAGE_FORMAT", 27)) {
    /*                                    ^            */
#ifdef GL_GET_TEXTURE_IMAGE_FORMAT
      *iv_return = GL_GET_TEXTURE_IMAGE_FORMAT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_INTERNALFORMAT_PREFERRED", 27)) {
    /*                                    ^            */
#ifdef GL_INTERNALFORMAT_PREFERRED
      *iv_return = GL_INTERNALFORMAT_PREFERRED;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_TEXTURE_IMMUTABLE_FORMAT", 27)) {
    /*                                    ^            */
#ifdef GL_TEXTURE_IMMUTABLE_FORMAT
      *iv_return = GL_TEXTURE_IMMUTABLE_FORMAT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case 'G':
    if (memEQ(name, "GL_DEPTH_STENCIL_TO_BGRA_NV", 27)) {
    /*                                    ^            */
#ifdef GL_DEPTH_STENCIL_TO_BGRA_NV
      *iv_return = GL_DEPTH_STENCIL_TO_BGRA_NV;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_DEPTH_STENCIL_TO_RGBA_NV", 27)) {
    /*                                    ^            */
#ifdef GL_DEPTH_STENCIL_TO_RGBA_NV
      *iv_return = GL_DEPTH_STENCIL_TO_RGBA_NV;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_MAP_INVALIDATE_RANGE_BIT", 27)) {
    /*                                    ^            */
#ifdef GL_MAP_INVALIDATE_RANGE_BIT
      *iv_return = GL_MAP_INVALIDATE_RANGE_BIT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_MIN_MAP_BUFFER_ALIGNMENT", 27)) {
    /*                                    ^            */
#ifdef GL_MIN_MAP_BUFFER_ALIGNMENT
      *iv_return = GL_MIN_MAP_BUFFER_ALIGNMENT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_MIRROR_CLAMP_TO_EDGE_ATI", 27)) {
    /*                                    ^            */
#ifdef GL_MIRROR_CLAMP_TO_EDGE_ATI
      *iv_return = GL_MIRROR_CLAMP_TO_EDGE_ATI;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_MIRROR_CLAMP_TO_EDGE_EXT", 27)) {
    /*                                    ^            */
#ifdef GL_MIRROR_CLAMP_TO_EDGE_EXT
      *iv_return = GL_MIRROR_CLAMP_TO_EDGE_EXT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_UNIFORM_BUFFER_LENGTH_NV", 27)) {
    /*                                    ^            */
#ifdef GL_UNIFORM_BUFFER_LENGTH_NV
      *iv_return = GL_UNIFORM_BUFFER_LENGTH_NV;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case 'H':
    if (memEQ(name, "GL_BLEND_EQUATION_ALPHA_EXT", 27)) {
    /*                                    ^            */
#ifdef GL_BLEND_EQUATION_ALPHA_EXT
      *iv_return = GL_BLEND_EQUATION_ALPHA_EXT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_CONTEXT_RELEASE_BEHAVIOR", 27)) {
    /*                                    ^            */
#ifdef GL_CONTEXT_RELEASE_BEHAVIOR
      *iv_return = GL_CONTEXT_RELEASE_BEHAVIOR;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case 'I':
    if (memEQ(name, "GL_COPY_READ_BUFFER_BINDING", 27)) {
    /*                                    ^            */
#ifdef GL_COPY_READ_BUFFER_BINDING
      *iv_return = GL_COPY_READ_BUFFER_BINDING;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_DRAW_FRAMEBUFFER_BINDING", 27)) {
    /*                                    ^            */
#ifdef GL_DRAW_FRAMEBUFFER_BINDING
      *iv_return = GL_DRAW_FRAMEBUFFER_BINDING;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_DRAW_INDIRECT_UNIFIED_NV", 27)) {
    /*                                    ^            */
#ifdef GL_DRAW_INDIRECT_UNIFIED_NV
      *iv_return = GL_DRAW_INDIRECT_UNIFIED_NV;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_ELEMENT_ARRAY_UNIFIED_NV", 27)) {
    /*                                    ^            */
#ifdef GL_ELEMENT_ARRAY_UNIFIED_NV
      *iv_return = GL_ELEMENT_ARRAY_UNIFIED_NV;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_MAX_NUM_ACTIVE_VARIABLES", 27)) {
    /*                                    ^            */
#ifdef GL_MAX_NUM_ACTIVE_VARIABLES
      *iv_return = GL_MAX_NUM_ACTIVE_VARIABLES;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_PROGRAM_FORMAT_ASCII_ARB", 27)) {
    /*                                    ^            */
#ifdef GL_PROGRAM_FORMAT_ASCII_ARB
      *iv_return = GL_PROGRAM_FORMAT_ASCII_ARB;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_PROGRAM_PIPELINE_BINDING", 27)) {
    /*                                    ^            */
#ifdef GL_PROGRAM_PIPELINE_BINDING
      *iv_return = GL_PROGRAM_PIPELINE_BINDING;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_QUERY_RESULT_NO_WAIT_AMD", 27)) {
    /*                                    ^            */
#ifdef GL_QUERY_RESULT_NO_WAIT_AMD
      *iv_return = GL_QUERY_RESULT_NO_WAIT_AMD;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_READ_FRAMEBUFFER_BINDING", 27)) {
    /*                                    ^            */
#ifdef GL_READ_FRAMEBUFFER_BINDING
      *iv_return = GL_READ_FRAMEBUFFER_BINDING;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glGetTextureParameterIivEXT", 27)) {
    /*                                    ^            */
#ifdef glGetTextureParameterIivEXT
      *iv_return = glGetTextureParameterIivEXT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glProgramEnvParameterI4ivNV", 27)) {
    /*                                    ^            */
#ifdef glProgramEnvParameterI4ivNV
      *iv_return = glProgramEnvParameterI4ivNV;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glProgramEnvParameterI4uiNV", 27)) {
    /*                                    ^            */
#ifdef glProgramEnvParameterI4uiNV
      *iv_return = glProgramEnvParameterI4uiNV;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case 'L':
    if (memEQ(name, "GL_CONTEXT_CORE_PROFILE_BIT", 27)) {
    /*                                    ^            */
#ifdef GL_CONTEXT_CORE_PROFILE_BIT
      *iv_return = GL_CONTEXT_CORE_PROFILE_BIT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_IMAGE_2D_MULTISAMPLE_EXT", 27)) {
    /*                                    ^            */
#ifdef GL_IMAGE_2D_MULTISAMPLE_EXT
      *iv_return = GL_IMAGE_2D_MULTISAMPLE_EXT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_MAX_ARRAY_TEXTURE_LAYERS", 27)) {
    /*                                    ^            */
#ifdef GL_MAX_ARRAY_TEXTURE_LAYERS
      *iv_return = GL_MAX_ARRAY_TEXTURE_LAYERS;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_MAX_DEBUG_MESSAGE_LENGTH", 27)) {
    /*                                    ^            */
#ifdef GL_MAX_DEBUG_MESSAGE_LENGTH
      *iv_return = GL_MAX_DEBUG_MESSAGE_LENGTH;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_TEXTURE_COLOR_SAMPLES_NV", 27)) {
    /*                                    ^            */
#ifdef GL_TEXTURE_COLOR_SAMPLES_NV
      *iv_return = GL_TEXTURE_COLOR_SAMPLES_NV;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_TEXTURE_IMMUTABLE_LEVELS", 27)) {
    /*                                    ^            */
#ifdef GL_TEXTURE_IMMUTABLE_LEVELS
      *iv_return = GL_TEXTURE_IMMUTABLE_LEVELS;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_VERTEX_SHADER_LOCALS_EXT", 27)) {
    /*                                    ^            */
#ifdef GL_VERTEX_SHADER_LOCALS_EXT
      *iv_return = GL_VERTEX_SHADER_LOCALS_EXT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case 'M':
    if (memEQ(name, "GL_MAX_ASYNC_HISTOGRAM_SGIX", 27)) {
    /*                                    ^            */
#ifdef GL_MAX_ASYNC_HISTOGRAM_SGIX
      *iv_return = GL_MAX_ASYNC_HISTOGRAM_SGIX;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_PATH_GEN_COLOR_FORMAT_NV", 27)) {
    /*                                    ^            */
#ifdef GL_PATH_GEN_COLOR_FORMAT_NV
      *iv_return = GL_PATH_GEN_COLOR_FORMAT_NV;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_POLYGON_OFFSET_CLAMP_EXT", 27)) {
    /*                                    ^            */
#ifdef GL_POLYGON_OFFSET_CLAMP_EXT
      *iv_return = GL_POLYGON_OFFSET_CLAMP_EXT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_TRANSPOSE_TEXTURE_MATRIX", 27)) {
    /*                                    ^            */
#ifdef GL_TRANSPOSE_TEXTURE_MATRIX
      *iv_return = GL_TRANSPOSE_TEXTURE_MATRIX;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case 'N':
    if (memEQ(name, "GL_ARRAY_BUFFER_BINDING_ARB", 27)) {
    /*                                    ^            */
#ifdef GL_ARRAY_BUFFER_BINDING_ARB
      *iv_return = GL_ARRAY_BUFFER_BINDING_ARB;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_CONSERVE_MEMORY_HINT_PGI", 27)) {
    /*                                    ^            */
#ifdef GL_CONSERVE_MEMORY_HINT_PGI
      *iv_return = GL_CONSERVE_MEMORY_HINT_PGI;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_PROGRAM_ERROR_STRING_ARB", 27)) {
    /*                                    ^            */
#ifdef GL_PROGRAM_ERROR_STRING_ARB
      *iv_return = GL_PROGRAM_ERROR_STRING_ARB;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_PROGRAM_INSTRUCTIONS_ARB", 27)) {
    /*                                    ^            */
#ifdef GL_PROGRAM_INSTRUCTIONS_ARB
      *iv_return = GL_PROGRAM_INSTRUCTIONS_ARB;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_QUERY_BUFFER_BINDING_AMD", 27)) {
    /*                                    ^            */
#ifdef GL_QUERY_BUFFER_BINDING_AMD
      *iv_return = GL_QUERY_BUFFER_BINDING_AMD;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_READ_PIXEL_DATA_RANGE_NV", 27)) {
    /*                                    ^            */
#ifdef GL_READ_PIXEL_DATA_RANGE_NV
      *iv_return = GL_READ_PIXEL_DATA_RANGE_NV;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_RENDERBUFFER_BINDING_EXT", 27)) {
    /*                                    ^            */
#ifdef GL_RENDERBUFFER_BINDING_EXT
      *iv_return = GL_RENDERBUFFER_BINDING_EXT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_STRICT_LIGHTING_HINT_PGI", 27)) {
    /*                                    ^            */
#ifdef GL_STRICT_LIGHTING_HINT_PGI
      *iv_return = GL_STRICT_LIGHTING_HINT_PGI;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_TEXTURE_COMPARE_FUNC_ARB", 27)) {
    /*                                    ^            */
#ifdef GL_TEXTURE_COMPARE_FUNC_ARB
      *iv_return = GL_TEXTURE_COMPARE_FUNC_ARB;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_TEXTURE_COMPRESSION_HINT", 27)) {
    /*                                    ^            */
#ifdef GL_TEXTURE_COMPRESSION_HINT
      *iv_return = GL_TEXTURE_COMPRESSION_HINT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case 'O':
    if (memEQ(name, "GL_CLAMP_FRAGMENT_COLOR_ARB", 27)) {
    /*                                    ^            */
#ifdef GL_CLAMP_FRAGMENT_COLOR_ARB
      *iv_return = GL_CLAMP_FRAGMENT_COLOR_ARB;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_DISTANCE_ATTENUATION_EXT", 27)) {
    /*                                    ^            */
#ifdef GL_DISTANCE_ATTENUATION_EXT
      *iv_return = GL_DISTANCE_ATTENUATION_EXT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_MAX_PROGRAM_TEXEL_OFFSET", 27)) {
    /*                                    ^            */
#ifdef GL_MAX_PROGRAM_TEXEL_OFFSET
      *iv_return = GL_MAX_PROGRAM_TEXEL_OFFSET;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_MIN_PROGRAM_TEXEL_OFFSET", 27)) {
    /*                                    ^            */
#ifdef GL_MIN_PROGRAM_TEXEL_OFFSET
      *iv_return = GL_MIN_PROGRAM_TEXEL_OFFSET;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_SELECTION_BUFFER_POINTER", 27)) {
    /*                                    ^            */
#ifdef GL_SELECTION_BUFFER_POINTER
      *iv_return = GL_SELECTION_BUFFER_POINTER;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_STREAM_RASTERIZATION_AMD", 27)) {
    /*                                    ^            */
#ifdef GL_STREAM_RASTERIZATION_AMD
      *iv_return = GL_STREAM_RASTERIZATION_AMD;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case 'P':
    if (memEQ(name, "GL_GEOMETRY_OUTPUT_TYPE_ARB", 27)) {
    /*                                    ^            */
#ifdef GL_GEOMETRY_OUTPUT_TYPE_ARB
      *iv_return = GL_GEOMETRY_OUTPUT_TYPE_ARB;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_GEOMETRY_OUTPUT_TYPE_EXT", 27)) {
    /*                                    ^            */
#ifdef GL_GEOMETRY_OUTPUT_TYPE_EXT
      *iv_return = GL_GEOMETRY_OUTPUT_TYPE_EXT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_INTERNALFORMAT_SUPPORTED", 27)) {
    /*                                    ^            */
#ifdef GL_INTERNALFORMAT_SUPPORTED
      *iv_return = GL_INTERNALFORMAT_SUPPORTED;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case 'R':
    if (memEQ(name, "GL_COMPARE_R_TO_TEXTURE_ARB", 27)) {
    /*                                    ^            */
#ifdef GL_COMPARE_R_TO_TEXTURE_ARB
      *iv_return = GL_COMPARE_R_TO_TEXTURE_ARB;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_DEBUG_OUTPUT_SYNCHRONOUS", 27)) {
    /*                                    ^            */
#ifdef GL_DEBUG_OUTPUT_SYNCHRONOUS
      *iv_return = GL_DEBUG_OUTPUT_SYNCHRONOUS;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_FOG_SPECULAR_TEXTURE_WIN", 27)) {
    /*                                    ^            */
#ifdef GL_FOG_SPECULAR_TEXTURE_WIN
      *iv_return = GL_FOG_SPECULAR_TEXTURE_WIN;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_MAX_SAMPLE_MASK_WORDS_NV", 27)) {
    /*                                    ^            */
#ifdef GL_MAX_SAMPLE_MASK_WORDS_NV
      *iv_return = GL_MAX_SAMPLE_MASK_WORDS_NV;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_OFFSET_TEXTURE_MATRIX_NV", 27)) {
    /*                                    ^            */
#ifdef GL_OFFSET_TEXTURE_MATRIX_NV
      *iv_return = GL_OFFSET_TEXTURE_MATRIX_NV;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_TEXTURE_MAX_CLAMP_R_SGIX", 27)) {
    /*                                    ^            */
#ifdef GL_TEXTURE_MAX_CLAMP_R_SGIX
      *iv_return = GL_TEXTURE_MAX_CLAMP_R_SGIX;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case 'S':
    if (memEQ(name, "GL_EDGE_FLAG_ARRAY_LIST_IBM", 27)) {
    /*                                    ^            */
#ifdef GL_EDGE_FLAG_ARRAY_LIST_IBM
      *iv_return = GL_EDGE_FLAG_ARRAY_LIST_IBM;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_IMAGE_BINDING_ACCESS_EXT", 27)) {
    /*                                    ^            */
#ifdef GL_IMAGE_BINDING_ACCESS_EXT
      *iv_return = GL_IMAGE_BINDING_ACCESS_EXT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_INT_IMAGE_2D_MULTISAMPLE", 27)) {
    /*                                    ^            */
#ifdef GL_INT_IMAGE_2D_MULTISAMPLE
      *iv_return = GL_INT_IMAGE_2D_MULTISAMPLE;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_MAX_VERTEX_ATTRIB_STRIDE", 27)) {
    /*                                    ^            */
#ifdef GL_MAX_VERTEX_ATTRIB_STRIDE
      *iv_return = GL_MAX_VERTEX_ATTRIB_STRIDE;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_SAMPLE_ALPHA_TO_MASK_EXT", 27)) {
    /*                                    ^            */
#ifdef GL_SAMPLE_ALPHA_TO_MASK_EXT
      *iv_return = GL_SAMPLE_ALPHA_TO_MASK_EXT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_TEXTURE_MAX_CLAMP_S_SGIX", 27)) {
    /*                                    ^            */
#ifdef GL_TEXTURE_MAX_CLAMP_S_SGIX
      *iv_return = GL_TEXTURE_MAX_CLAMP_S_SGIX;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case 'T':
    if (memEQ(name, "GL_BUFFER_IMMUTABLE_STORAGE", 27)) {
    /*                                    ^            */
#ifdef GL_BUFFER_IMMUTABLE_STORAGE
      *iv_return = GL_BUFFER_IMMUTABLE_STORAGE;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_COMPRESSED_INTENSITY_ARB", 27)) {
    /*                                    ^            */
#ifdef GL_COMPRESSED_INTENSITY_ARB
      *iv_return = GL_COMPRESSED_INTENSITY_ARB;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_DSDT8_MAG8_INTENSITY8_NV", 27)) {
    /*                                    ^            */
#ifdef GL_DSDT8_MAG8_INTENSITY8_NV
      *iv_return = GL_DSDT8_MAG8_INTENSITY8_NV;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_FRAMEBUFFER_COMPLETE_EXT", 27)) {
    /*                                    ^            */
#ifdef GL_FRAMEBUFFER_COMPLETE_EXT
      *iv_return = GL_FRAMEBUFFER_COMPLETE_EXT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_QUERY_ALL_EVENT_BITS_AMD", 27)) {
    /*                                    ^            */
#ifdef GL_QUERY_ALL_EVENT_BITS_AMD
      *iv_return = GL_QUERY_ALL_EVENT_BITS_AMD;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_TEXTURE_MAX_CLAMP_T_SGIX", 27)) {
    /*                                    ^            */
#ifdef GL_TEXTURE_MAX_CLAMP_T_SGIX
      *iv_return = GL_TEXTURE_MAX_CLAMP_T_SGIX;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_VERTEX_PRECLIP_HINT_SGIX", 27)) {
    /*                                    ^            */
#ifdef GL_VERTEX_PRECLIP_HINT_SGIX
      *iv_return = GL_VERTEX_PRECLIP_HINT_SGIX;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_VIEW_CLASS_S3TC_DXT1_RGB", 27)) {
    /*                                    ^            */
#ifdef GL_VIEW_CLASS_S3TC_DXT1_RGB
      *iv_return = GL_VIEW_CLASS_S3TC_DXT1_RGB;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case 'U':
    if (memEQ(name, "GL_LOCAL_CONSTANT_VALUE_EXT", 27)) {
    /*                                    ^            */
#ifdef GL_LOCAL_CONSTANT_VALUE_EXT
      *iv_return = GL_LOCAL_CONSTANT_VALUE_EXT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_OBJECT_DELETE_STATUS_ARB", 27)) {
    /*                                    ^            */
#ifdef GL_OBJECT_DELETE_STATUS_ARB
      *iv_return = GL_OBJECT_DELETE_STATUS_ARB;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_PATH_COVER_DEPTH_FUNC_NV", 27)) {
    /*                                    ^            */
#ifdef GL_PATH_COVER_DEPTH_FUNC_NV
      *iv_return = GL_PATH_COVER_DEPTH_FUNC_NV;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_PATH_DASH_ARRAY_COUNT_NV", 27)) {
    /*                                    ^            */
#ifdef GL_PATH_DASH_ARRAY_COUNT_NV
      *iv_return = GL_PATH_DASH_ARRAY_COUNT_NV;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_TEXTURE_BORDER_VALUES_NV", 27)) {
    /*                                    ^            */
#ifdef GL_TEXTURE_BORDER_VALUES_NV
      *iv_return = GL_TEXTURE_BORDER_VALUES_NV;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case 'V':
    if (memEQ(name, "GL_LIGHT_MODEL_LOCAL_VIEWER", 27)) {
    /*                                    ^            */
#ifdef GL_LIGHT_MODEL_LOCAL_VIEWER
      *iv_return = GL_LIGHT_MODEL_LOCAL_VIEWER;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_SAMPLE_ALPHA_TO_COVERAGE", 27)) {
    /*                                    ^            */
#ifdef GL_SAMPLE_ALPHA_TO_COVERAGE
      *iv_return = GL_SAMPLE_ALPHA_TO_COVERAGE;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case 'Y':
    if (memEQ(name, "GL_TEXTURE_COORD_ARRAY_SIZE", 27)) {
    /*                                    ^            */
#ifdef GL_TEXTURE_COORD_ARRAY_SIZE
      *iv_return = GL_TEXTURE_COORD_ARRAY_SIZE;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_TEXTURE_COORD_ARRAY_TYPE", 27)) {
    /*                                    ^            */
#ifdef GL_TEXTURE_COORD_ARRAY_TYPE
      *iv_return = GL_TEXTURE_COORD_ARRAY_TYPE;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_VERTEX_ATTRIB_ARRAY10_NV", 27)) {
    /*                                    ^            */
#ifdef GL_VERTEX_ATTRIB_ARRAY10_NV
      *iv_return = GL_VERTEX_ATTRIB_ARRAY10_NV;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_VERTEX_ATTRIB_ARRAY11_NV", 27)) {
    /*                                    ^            */
#ifdef GL_VERTEX_ATTRIB_ARRAY11_NV
      *iv_return = GL_VERTEX_ATTRIB_ARRAY11_NV;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_VERTEX_ATTRIB_ARRAY12_NV", 27)) {
    /*                                    ^            */
#ifdef GL_VERTEX_ATTRIB_ARRAY12_NV
      *iv_return = GL_VERTEX_ATTRIB_ARRAY12_NV;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_VERTEX_ATTRIB_ARRAY13_NV", 27)) {
    /*                                    ^            */
#ifdef GL_VERTEX_ATTRIB_ARRAY13_NV
      *iv_return = GL_VERTEX_ATTRIB_ARRAY13_NV;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_VERTEX_ATTRIB_ARRAY14_NV", 27)) {
    /*                                    ^            */
#ifdef GL_VERTEX_ATTRIB_ARRAY14_NV
      *iv_return = GL_VERTEX_ATTRIB_ARRAY14_NV;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_VERTEX_ATTRIB_ARRAY15_NV", 27)) {
    /*                                    ^            */
#ifdef GL_VERTEX_ATTRIB_ARRAY15_NV
      *iv_return = GL_VERTEX_ATTRIB_ARRAY15_NV;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_VERTEX_ATTRIB_ARRAY_LONG", 27)) {
    /*                                    ^            */
#ifdef GL_VERTEX_ATTRIB_ARRAY_LONG
      *iv_return = GL_VERTEX_ATTRIB_ARRAY_LONG;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_VERTEX_ATTRIB_ARRAY_SIZE", 27)) {
    /*                                    ^            */
#ifdef GL_VERTEX_ATTRIB_ARRAY_SIZE
      *iv_return = GL_VERTEX_ATTRIB_ARRAY_SIZE;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_VERTEX_ATTRIB_ARRAY_TYPE", 27)) {
    /*                                    ^            */
#ifdef GL_VERTEX_ATTRIB_ARRAY_TYPE
      *iv_return = GL_VERTEX_ATTRIB_ARRAY_TYPE;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case 'Z':
    if (memEQ(name, "GL_BUMP_ROT_MATRIX_SIZE_ATI", 27)) {
    /*                                    ^            */
#ifdef GL_BUMP_ROT_MATRIX_SIZE_ATI
      *iv_return = GL_BUMP_ROT_MATRIX_SIZE_ATI;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_COLOR_TABLE_RED_SIZE_EXT", 27)) {
    /*                                    ^            */
#ifdef GL_COLOR_TABLE_RED_SIZE_EXT
      *iv_return = GL_COLOR_TABLE_RED_SIZE_EXT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_COLOR_TABLE_RED_SIZE_SGI", 27)) {
    /*                                    ^            */
#ifdef GL_COLOR_TABLE_RED_SIZE_SGI
      *iv_return = GL_COLOR_TABLE_RED_SIZE_SGI;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_HISTOGRAM_ALPHA_SIZE_EXT", 27)) {
    /*                                    ^            */
#ifdef GL_HISTOGRAM_ALPHA_SIZE_EXT
      *iv_return = GL_HISTOGRAM_ALPHA_SIZE_EXT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_HISTOGRAM_GREEN_SIZE_EXT", 27)) {
    /*                                    ^            */
#ifdef GL_HISTOGRAM_GREEN_SIZE_EXT
      *iv_return = GL_HISTOGRAM_GREEN_SIZE_EXT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_TEXTURE_STENCIL_SIZE_EXT", 27)) {
    /*                                    ^            */
#ifdef GL_TEXTURE_STENCIL_SIZE_EXT
      *iv_return = GL_TEXTURE_STENCIL_SIZE_EXT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case '_':
    if (memEQ(name, "GLEW_AMD_conservative_depth", 27)) {
    /*                                    ^            */
#ifdef GLEW_AMD_conservative_depth
      *iv_return = GLEW_AMD_conservative_depth;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GLEW_AMD_draw_buffers_blend", 27)) {
    /*                                    ^            */
#ifdef GLEW_AMD_draw_buffers_blend
      *iv_return = GLEW_AMD_draw_buffers_blend;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GLEW_ARB_color_buffer_float", 27)) {
    /*                                    ^            */
#ifdef GLEW_ARB_color_buffer_float
      *iv_return = GLEW_ARB_color_buffer_float;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GLEW_ARB_conservative_depth", 27)) {
    /*                                    ^            */
#ifdef GLEW_ARB_conservative_depth
      *iv_return = GLEW_ARB_conservative_depth;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GLEW_ARB_depth_buffer_float", 27)) {
    /*                                    ^            */
#ifdef GLEW_ARB_depth_buffer_float
      *iv_return = GLEW_ARB_depth_buffer_float;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GLEW_ARB_draw_buffers_blend", 27)) {
    /*                                    ^            */
#ifdef GLEW_ARB_draw_buffers_blend
      *iv_return = GLEW_ARB_draw_buffers_blend;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GLEW_ATIX_texture_env_route", 27)) {
    /*                                    ^            */
#ifdef GLEW_ATIX_texture_env_route
      *iv_return = GLEW_ATIX_texture_env_route;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GLEW_EXT_texture_edge_clamp", 27)) {
    /*                                    ^            */
#ifdef GLEW_EXT_texture_edge_clamp
      *iv_return = GLEW_EXT_texture_edge_clamp;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GLEW_IBM_vertex_array_lists", 27)) {
    /*                                    ^            */
#ifdef GLEW_IBM_vertex_array_lists
      *iv_return = GLEW_IBM_vertex_array_lists;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GLEW_NV_copy_depth_to_color", 27)) {
    /*                                    ^            */
#ifdef GLEW_NV_copy_depth_to_color
      *iv_return = GLEW_NV_copy_depth_to_color;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GLEW_NV_shader_atomic_float", 27)) {
    /*                                    ^            */
#ifdef GLEW_NV_shader_atomic_float
      *iv_return = GLEW_NV_shader_atomic_float;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GLEW_NV_shader_atomic_int64", 27)) {
    /*                                    ^            */
#ifdef GLEW_NV_shader_atomic_int64
      *iv_return = GLEW_NV_shader_atomic_int64;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GLEW_NV_shader_thread_group", 27)) {
    /*                                    ^            */
#ifdef GLEW_NV_shader_thread_group
      *iv_return = GLEW_NV_shader_thread_group;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_ALIASED_LINE_WIDTH_RANGE", 27)) {
    /*                                    ^            */
#ifdef GL_ALIASED_LINE_WIDTH_RANGE
      *iv_return = GL_ALIASED_LINE_WIDTH_RANGE;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_ALIASED_POINT_SIZE_RANGE", 27)) {
    /*                                    ^            */
#ifdef GL_ALIASED_POINT_SIZE_RANGE
      *iv_return = GL_ALIASED_POINT_SIZE_RANGE;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_APPLE_flush_buffer_range", 27)) {
    /*                                    ^            */
#ifdef GL_APPLE_flush_buffer_range
      *iv_return = GL_APPLE_flush_buffer_range;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_APPLE_vertex_array_range", 27)) {
    /*                                    ^            */
#ifdef GL_APPLE_vertex_array_range
      *iv_return = GL_APPLE_vertex_array_range;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_ARB_internalformat_query", 27)) {
    /*                                    ^            */
#ifdef GL_ARB_internalformat_query
      *iv_return = GL_ARB_internalformat_query;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_ARB_sparse_texture_clamp", 27)) {
    /*                                    ^            */
#ifdef GL_ARB_sparse_texture_clamp
      *iv_return = GL_ARB_sparse_texture_clamp;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_ARB_texture_border_clamp", 27)) {
    /*                                    ^            */
#ifdef GL_ARB_texture_border_clamp
      *iv_return = GL_ARB_texture_border_clamp;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_ARB_texture_buffer_range", 27)) {
    /*                                    ^            */
#ifdef GL_ARB_texture_buffer_range
      *iv_return = GL_ARB_texture_buffer_range;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_COLOR_MATRIX_STACK_DEPTH", 27)) {
    /*                                    ^            */
#ifdef GL_COLOR_MATRIX_STACK_DEPTH
      *iv_return = GL_COLOR_MATRIX_STACK_DEPTH;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_CONVOLUTION_BORDER_COLOR", 27)) {
    /*                                    ^            */
#ifdef GL_CONVOLUTION_BORDER_COLOR
      *iv_return = GL_CONVOLUTION_BORDER_COLOR;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_CONVOLUTION_FILTER_SCALE", 27)) {
    /*                                    ^            */
#ifdef GL_CONVOLUTION_FILTER_SCALE
      *iv_return = GL_CONVOLUTION_FILTER_SCALE;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_DEBUG_SOURCE_THIRD_PARTY", 27)) {
    /*                                    ^            */
#ifdef GL_DEBUG_SOURCE_THIRD_PARTY
      *iv_return = GL_DEBUG_SOURCE_THIRD_PARTY;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_ELEMENT_ARRAY_TYPE_APPLE", 27)) {
    /*                                    ^            */
#ifdef GL_ELEMENT_ARRAY_TYPE_APPLE
      *iv_return = GL_ELEMENT_ARRAY_TYPE_APPLE;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_EXT_polygon_offset_clamp", 27)) {
    /*                                    ^            */
#ifdef GL_EXT_polygon_offset_clamp
      *iv_return = GL_EXT_polygon_offset_clamp;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_EXT_texture_mirror_clamp", 27)) {
    /*                                    ^            */
#ifdef GL_EXT_texture_mirror_clamp
      *iv_return = GL_EXT_texture_mirror_clamp;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_INT_IMAGE_CUBE_MAP_ARRAY", 27)) {
    /*                                    ^            */
#ifdef GL_INT_IMAGE_CUBE_MAP_ARRAY
      *iv_return = GL_INT_IMAGE_CUBE_MAP_ARRAY;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_MIN_SAMPLE_SHADING_VALUE", 27)) {
    /*                                    ^            */
#ifdef GL_MIN_SAMPLE_SHADING_VALUE
      *iv_return = GL_MIN_SAMPLE_SHADING_VALUE;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_ONE_MINUS_CONSTANT_ALPHA", 27)) {
    /*                                    ^            */
#ifdef GL_ONE_MINUS_CONSTANT_ALPHA
      *iv_return = GL_ONE_MINUS_CONSTANT_ALPHA;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_ONE_MINUS_CONSTANT_COLOR", 27)) {
    /*                                    ^            */
#ifdef GL_ONE_MINUS_CONSTANT_COLOR
      *iv_return = GL_ONE_MINUS_CONSTANT_COLOR;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_QUERY_COUNTER_BITS_ANGLE", 27)) {
    /*                                    ^            */
#ifdef GL_QUERY_COUNTER_BITS_ANGLE
      *iv_return = GL_QUERY_COUNTER_BITS_ANGLE;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_SMOOTH_CUBIC_CURVE_TO_NV", 27)) {
    /*                                    ^            */
#ifdef GL_SMOOTH_CUBIC_CURVE_TO_NV
      *iv_return = GL_SMOOTH_CUBIC_CURVE_TO_NV;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_TEXTURE_BINDING_1D_ARRAY", 27)) {
    /*                                    ^            */
#ifdef GL_TEXTURE_BINDING_1D_ARRAY
      *iv_return = GL_TEXTURE_BINDING_1D_ARRAY;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_TEXTURE_BINDING_2D_ARRAY", 27)) {
    /*                                    ^            */
#ifdef GL_TEXTURE_BINDING_2D_ARRAY
      *iv_return = GL_TEXTURE_BINDING_2D_ARRAY;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_UNSIGNED_INT_5_9_9_9_REV", 27)) {
    /*                                    ^            */
#ifdef GL_UNSIGNED_INT_5_9_9_9_REV
      *iv_return = GL_UNSIGNED_INT_5_9_9_9_REV;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_UNSIGNED_INT_8_8_8_8_EXT", 27)) {
    /*                                    ^            */
#ifdef GL_UNSIGNED_INT_8_8_8_8_EXT
      *iv_return = GL_UNSIGNED_INT_8_8_8_8_EXT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_UNSIGNED_INT_8_8_8_8_REV", 27)) {
    /*                                    ^            */
#ifdef GL_UNSIGNED_INT_8_8_8_8_REV
      *iv_return = GL_UNSIGNED_INT_8_8_8_8_REV;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_UNSIGNED_SHORT_5_6_5_REV", 27)) {
    /*                                    ^            */
#ifdef GL_UNSIGNED_SHORT_5_6_5_REV
      *iv_return = GL_UNSIGNED_SHORT_5_6_5_REV;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_UNSIGNED_SHORT_8_8_APPLE", 27)) {
    /*                                    ^            */
#ifdef GL_UNSIGNED_SHORT_8_8_APPLE
      *iv_return = GL_UNSIGNED_SHORT_8_8_APPLE;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_VERTEX_ARRAY_RANGE_APPLE", 27)) {
    /*                                    ^            */
#ifdef GL_VERTEX_ARRAY_RANGE_APPLE
      *iv_return = GL_VERTEX_ARRAY_RANGE_APPLE;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_VERTEX_ATTRIB_MAP1_APPLE", 27)) {
    /*                                    ^            */
#ifdef GL_VERTEX_ATTRIB_MAP1_APPLE
      *iv_return = GL_VERTEX_ATTRIB_MAP1_APPLE;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_VERTEX_ATTRIB_MAP2_APPLE", 27)) {
    /*                                    ^            */
#ifdef GL_VERTEX_ATTRIB_MAP2_APPLE
      *iv_return = GL_VERTEX_ATTRIB_MAP2_APPLE;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_VIEW_COMPATIBILITY_CLASS", 27)) {
    /*                                    ^            */
#ifdef GL_VIEW_COMPATIBILITY_CLASS
      *iv_return = GL_VIEW_COMPATIBILITY_CLASS;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case 'a':
    if (memEQ(name, "GLEW_ANGLE_instanced_arrays", 27)) {
    /*                                    ^            */
#ifdef GLEW_ANGLE_instanced_arrays
      *iv_return = GLEW_ANGLE_instanced_arrays;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glBeginTransformFeedbackEXT", 27)) {
    /*                                    ^            */
#ifdef glBeginTransformFeedbackEXT
      *iv_return = glBeginTransformFeedbackEXT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glCoverageModulationTableNV", 27)) {
    /*                                    ^            */
#ifdef glCoverageModulationTableNV
      *iv_return = glCoverageModulationTableNV;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glFragmentColorMaterialSGIX", 27)) {
    /*                                    ^            */
#ifdef glFragmentColorMaterialSGIX
      *iv_return = glFragmentColorMaterialSGIX;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glFramebufferTextureFaceARB", 27)) {
    /*                                    ^            */
#ifdef glFramebufferTextureFaceARB
      *iv_return = glFramebufferTextureFaceARB;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glFramebufferTextureFaceEXT", 27)) {
    /*                                    ^            */
#ifdef glFramebufferTextureFaceEXT
      *iv_return = glFramebufferTextureFaceEXT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glGetLocalConstantFloatvEXT", 27)) {
    /*                                    ^            */
#ifdef glGetLocalConstantFloatvEXT
      *iv_return = glGetLocalConstantFloatvEXT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glGetVideoCaptureStreamdvNV", 27)) {
    /*                                    ^            */
#ifdef glGetVideoCaptureStreamdvNV
      *iv_return = glGetVideoCaptureStreamdvNV;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glGetVideoCaptureStreamfvNV", 27)) {
    /*                                    ^            */
#ifdef glGetVideoCaptureStreamfvNV
      *iv_return = glGetVideoCaptureStreamfvNV;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glGetVideoCaptureStreamivNV", 27)) {
    /*                                    ^            */
#ifdef glGetVideoCaptureStreamivNV
      *iv_return = glGetVideoCaptureStreamivNV;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glGetnCompressedTexImageARB", 27)) {
    /*                                    ^            */
#ifdef glGetnCompressedTexImageARB
      *iv_return = glGetnCompressedTexImageARB;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glLGPUNamedBufferSubDataNVX", 27)) {
    /*                                    ^            */
#ifdef glLGPUNamedBufferSubDataNVX
      *iv_return = glLGPUNamedBufferSubDataNVX;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glNamedCopyBufferSubDataEXT", 27)) {
    /*                                    ^            */
#ifdef glNamedCopyBufferSubDataEXT
      *iv_return = glNamedCopyBufferSubDataEXT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case 'b':
    if (memEQ(name, "GLEW_ARB_get_program_binary", 27)) {
    /*                                    ^            */
#ifdef GLEW_ARB_get_program_binary
      *iv_return = GLEW_ARB_get_program_binary;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GLEW_SGIX_tag_sample_buffer", 27)) {
    /*                                    ^            */
#ifdef GLEW_SGIX_tag_sample_buffer
      *iv_return = GLEW_SGIX_tag_sample_buffer;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glResumeTransformFeedbackNV", 27)) {
    /*                                    ^            */
#ifdef glResumeTransformFeedbackNV
      *iv_return = glResumeTransformFeedbackNV;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case 'c':
    if (memEQ(name, "glGetActiveUniformBlockName", 27)) {
    /*                                    ^            */
#ifdef glGetActiveUniformBlockName
      *iv_return = glGetActiveUniformBlockName;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case 'd':
    if (memEQ(name, "GLEW_NV_transform_feedback2", 27)) {
    /*                                    ^            */
#ifdef GLEW_NV_transform_feedback2
      *iv_return = GLEW_NV_transform_feedback2;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_NV_stereo_view_rendering", 27)) {
    /*                                    ^            */
#ifdef GL_NV_stereo_view_rendering
      *iv_return = GL_NV_stereo_view_rendering;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glBeginConditionalRenderNVX", 27)) {
    /*                                    ^            */
#ifdef glBeginConditionalRenderNVX
      *iv_return = glBeginConditionalRenderNVX;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glIsTextureHandleResidentNV", 27)) {
    /*                                    ^            */
#ifdef glIsTextureHandleResidentNV
      *iv_return = glIsTextureHandleResidentNV;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glMakeImageHandleResidentNV", 27)) {
    /*                                    ^            */
#ifdef glMakeImageHandleResidentNV
      *iv_return = glMakeImageHandleResidentNV;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glMakeNamedBufferResidentNV", 27)) {
    /*                                    ^            */
#ifdef glMakeNamedBufferResidentNV
      *iv_return = glMakeNamedBufferResidentNV;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glMultiDrawElementsIndirect", 27)) {
    /*                                    ^            */
#ifdef glMultiDrawElementsIndirect
      *iv_return = glMultiDrawElementsIndirect;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case 'e':
    if (memEQ(name, "GLEW_EXT_shader_integer_mix", 27)) {
    /*                                    ^            */
#ifdef GLEW_EXT_shader_integer_mix
      *iv_return = GLEW_EXT_shader_integer_mix;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GLEW_EXT_transform_feedback", 27)) {
    /*                                    ^            */
#ifdef GLEW_EXT_transform_feedback
      *iv_return = GLEW_EXT_transform_feedback;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_AMD_interleaved_elements", 27)) {
    /*                                    ^            */
#ifdef GL_AMD_interleaved_elements
      *iv_return = GL_AMD_interleaved_elements;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glCopyMultiTexSubImage1DEXT", 27)) {
    /*                                    ^            */
#ifdef glCopyMultiTexSubImage1DEXT
      *iv_return = glCopyMultiTexSubImage1DEXT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glCopyMultiTexSubImage2DEXT", 27)) {
    /*                                    ^            */
#ifdef glCopyMultiTexSubImage2DEXT
      *iv_return = glCopyMultiTexSubImage2DEXT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glCopyMultiTexSubImage3DEXT", 27)) {
    /*                                    ^            */
#ifdef glCopyMultiTexSubImage3DEXT
      *iv_return = glCopyMultiTexSubImage3DEXT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glFramebufferDrawBuffersEXT", 27)) {
    /*                                    ^            */
#ifdef glFramebufferDrawBuffersEXT
      *iv_return = glFramebufferDrawBuffersEXT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glGetCompressedTextureImage", 27)) {
    /*                                    ^            */
#ifdef glGetCompressedTextureImage
      *iv_return = glGetCompressedTextureImage;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glGetConvolutionParameterfv", 27)) {
    /*                                    ^            */
#ifdef glGetConvolutionParameterfv
      *iv_return = glGetConvolutionParameterfv;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glGetConvolutionParameteriv", 27)) {
    /*                                    ^            */
#ifdef glGetConvolutionParameteriv
      *iv_return = glGetConvolutionParameteriv;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glGetFramebufferParameteriv", 27)) {
    /*                                    ^            */
#ifdef glGetFramebufferParameteriv
      *iv_return = glGetFramebufferParameteriv;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glGetMapAttribParameterfvNV", 27)) {
    /*                                    ^            */
#ifdef glGetMapAttribParameterfvNV
      *iv_return = glGetMapAttribParameterfvNV;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glGetMapAttribParameterivNV", 27)) {
    /*                                    ^            */
#ifdef glGetMapAttribParameterivNV
      *iv_return = glGetMapAttribParameterivNV;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glGetNamedBufferParameteriv", 27)) {
    /*                                    ^            */
#ifdef glGetNamedBufferParameteriv
      *iv_return = glGetNamedBufferParameteriv;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glGetNamedBufferPointervEXT", 27)) {
    /*                                    ^            */
#ifdef glGetNamedBufferPointervEXT
      *iv_return = glGetNamedBufferPointervEXT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glGetPerfMonitorCountersAMD", 27)) {
    /*                                    ^            */
#ifdef glGetPerfMonitorCountersAMD
      *iv_return = glGetPerfMonitorCountersAMD;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glGetPerfQueryIdByNameINTEL", 27)) {
    /*                                    ^            */
#ifdef glGetPerfQueryIdByNameINTEL
      *iv_return = glGetPerfQueryIdByNameINTEL;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glGetVertexArrayIndexed64iv", 27)) {
    /*                                    ^            */
#ifdef glGetVertexArrayIndexed64iv
      *iv_return = glGetVertexArrayIndexed64iv;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glGetVertexArrayIntegervEXT", 27)) {
    /*                                    ^            */
#ifdef glGetVertexArrayIntegervEXT
      *iv_return = glGetVertexArrayIntegervEXT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glGetVertexArrayPointervEXT", 27)) {
    /*                                    ^            */
#ifdef glGetVertexArrayPointervEXT
      *iv_return = glGetVertexArrayPointervEXT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glProgramNamedParameter4dNV", 27)) {
    /*                                    ^            */
#ifdef glProgramNamedParameter4dNV
      *iv_return = glProgramNamedParameter4dNV;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glProgramNamedParameter4fNV", 27)) {
    /*                                    ^            */
#ifdef glProgramNamedParameter4fNV
      *iv_return = glProgramNamedParameter4fNV;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glVertexAttribParameteriAMD", 27)) {
    /*                                    ^            */
#ifdef glVertexAttribParameteriAMD
      *iv_return = glVertexAttribParameteriAMD;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case 'f':
    if (memEQ(name, "glGetFragmentMaterialfvSGIX", 27)) {
    /*                                    ^            */
#ifdef glGetFragmentMaterialfvSGIX
      *iv_return = glGetFragmentMaterialfvSGIX;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case 'g':
    if (memEQ(name, "GLEW_APPLE_object_purgeable", 27)) {
    /*                                    ^            */
#ifdef GLEW_APPLE_object_purgeable
      *iv_return = GLEW_APPLE_object_purgeable;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_ARB_map_buffer_alignment", 27)) {
    /*                                    ^            */
#ifdef GL_ARB_map_buffer_alignment
      *iv_return = GL_ARB_map_buffer_alignment;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_ARB_shading_language_100", 27)) {
    /*                                    ^            */
#ifdef GL_ARB_shading_language_100
      *iv_return = GL_ARB_shading_language_100;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case 'h':
    if (memEQ(name, "GL_NV_shader_thread_shuffle", 27)) {
    /*                                    ^            */
#ifdef GL_NV_shader_thread_shuffle
      *iv_return = GL_NV_shader_thread_shuffle;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case 'i':
    if (memEQ(name, "GLEW_NV_register_combiners2", 27)) {
    /*                                    ^            */
#ifdef GLEW_NV_register_combiners2
      *iv_return = GLEW_NV_register_combiners2;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_GREMEDY_frame_terminator", 27)) {
    /*                                    ^            */
#ifdef GL_GREMEDY_frame_terminator
      *iv_return = GL_GREMEDY_frame_terminator;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glGetBufferParameterui64vNV", 27)) {
    /*                                    ^            */
#ifdef glGetBufferParameterui64vNV
      *iv_return = glGetBufferParameterui64vNV;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glGetFragmentMaterialivSGIX", 27)) {
    /*                                    ^            */
#ifdef glGetFragmentMaterialivSGIX
      *iv_return = glGetFragmentMaterialivSGIX;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glShaderStorageBlockBinding", 27)) {
    /*                                    ^            */
#ifdef glShaderStorageBlockBinding
      *iv_return = glShaderStorageBlockBinding;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glVertexArrayBindingDivisor", 27)) {
    /*                                    ^            */
#ifdef glVertexArrayBindingDivisor
      *iv_return = glVertexArrayBindingDivisor;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case 'k':
    if (memEQ(name, "glGetTransformFeedbacki64_v", 27)) {
    /*                                    ^            */
#ifdef glGetTransformFeedbacki64_v
      *iv_return = glGetTransformFeedbacki64_v;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case 'l':
    if (memEQ(name, "GL_ARB_texture_query_levels", 27)) {
    /*                                    ^            */
#ifdef GL_ARB_texture_query_levels
      *iv_return = GL_ARB_texture_query_levels;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_NV_depth_range_unclamped", 27)) {
    /*                                    ^            */
#ifdef GL_NV_depth_range_unclamped
      *iv_return = GL_NV_depth_range_unclamped;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_NV_shader_atomic_float64", 27)) {
    /*                                    ^            */
#ifdef GL_NV_shader_atomic_float64
      *iv_return = GL_NV_shader_atomic_float64;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case 'm':
    if (memEQ(name, "GL_ATI_texture_env_combine3", 27)) {
    /*                                    ^            */
#ifdef GL_ATI_texture_env_combine3
      *iv_return = GL_ATI_texture_env_combine3;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glGenerateMultiTexMipmapEXT", 27)) {
    /*                                    ^            */
#ifdef glGenerateMultiTexMipmapEXT
      *iv_return = glGenerateMultiTexMipmapEXT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case 'n':
    if (memEQ(name, "GL_NV_texture_expand_normal", 27)) {
    /*                                    ^            */
#ifdef GL_NV_texture_expand_normal
      *iv_return = GL_NV_texture_expand_normal;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glGetProgramPipelineInfoLog", 27)) {
    /*                                    ^            */
#ifdef glGetProgramPipelineInfoLog
      *iv_return = glGetProgramPipelineInfoLog;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glGetTextureSamplerHandleNV", 27)) {
    /*                                    ^            */
#ifdef glGetTextureSamplerHandleNV
      *iv_return = glGetTextureSamplerHandleNV;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case 'o':
    if (memEQ(name, "GLEW_ARB_derivative_control", 27)) {
    /*                                    ^            */
#ifdef GLEW_ARB_derivative_control
      *iv_return = GLEW_ARB_derivative_control;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GLEW_ARB_framebuffer_object", 27)) {
    /*                                    ^            */
#ifdef GLEW_ARB_framebuffer_object
      *iv_return = GLEW_ARB_framebuffer_object;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GLEW_EXT_framebuffer_object", 27)) {
    /*                                    ^            */
#ifdef GLEW_EXT_framebuffer_object
      *iv_return = GLEW_EXT_framebuffer_object;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_ARB_texture_env_crossbar", 27)) {
    /*                                    ^            */
#ifdef GL_ARB_texture_env_crossbar
      *iv_return = GL_ARB_texture_env_crossbar;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_ARB_vertex_buffer_object", 27)) {
    /*                                    ^            */
#ifdef GL_ARB_vertex_buffer_object
      *iv_return = GL_ARB_vertex_buffer_object;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_NV_tessellation_program5", 27)) {
    /*                                    ^            */
#ifdef GL_NV_tessellation_program5
      *iv_return = GL_NV_tessellation_program5;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case 'p':
    if (memEQ(name, "GL_AMD_depth_clamp_separate", 27)) {
    /*                                    ^            */
#ifdef GL_AMD_depth_clamp_separate
      *iv_return = GL_AMD_depth_clamp_separate;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_SGIX_vertex_preclip_hint", 27)) {
    /*                                    ^            */
#ifdef GL_SGIX_vertex_preclip_hint
      *iv_return = GL_SGIX_vertex_preclip_hint;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case 'r':
    if (memEQ(name, "GLEW_ANGLE_framebuffer_blit", 27)) {
    /*                                    ^            */
#ifdef GLEW_ANGLE_framebuffer_blit
      *iv_return = GLEW_ANGLE_framebuffer_blit;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GLEW_ARB_shader_texture_lod", 27)) {
    /*                                    ^            */
#ifdef GLEW_ARB_shader_texture_lod
      *iv_return = GLEW_ARB_shader_texture_lod;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GLEW_ATI_shader_texture_lod", 27)) {
    /*                                    ^            */
#ifdef GLEW_ATI_shader_texture_lod
      *iv_return = GLEW_ATI_shader_texture_lod;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GLEW_INTEL_framebuffer_CMAA", 27)) {
    /*                                    ^            */
#ifdef GLEW_INTEL_framebuffer_CMAA
      *iv_return = GLEW_INTEL_framebuffer_CMAA;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GLEW_NVX_conditional_render", 27)) {
    /*                                    ^            */
#ifdef GLEW_NVX_conditional_render
      *iv_return = GLEW_NVX_conditional_render;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GLEW_NV_conservative_raster", 27)) {
    /*                                    ^            */
#ifdef GLEW_NV_conservative_raster
      *iv_return = GLEW_NV_conservative_raster;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GLEW_NV_vertex_array_range2", 27)) {
    /*                                    ^            */
#ifdef GLEW_NV_vertex_array_range2
      *iv_return = GLEW_NV_vertex_array_range2;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glConvolutionParameterfvEXT", 27)) {
    /*                                    ^            */
#ifdef glConvolutionParameterfvEXT
      *iv_return = glConvolutionParameterfvEXT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glConvolutionParameterivEXT", 27)) {
    /*                                    ^            */
#ifdef glConvolutionParameterivEXT
      *iv_return = glConvolutionParameterivEXT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glGetMultiTexParameterfvEXT", 27)) {
    /*                                    ^            */
#ifdef glGetMultiTexParameterfvEXT
      *iv_return = glGetMultiTexParameterfvEXT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glGetMultiTexParameterivEXT", 27)) {
    /*                                    ^            */
#ifdef glGetMultiTexParameterivEXT
      *iv_return = glGetMultiTexParameterivEXT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glQueryObjectParameteruiAMD", 27)) {
    /*                                    ^            */
#ifdef glQueryObjectParameteruiAMD
      *iv_return = glQueryObjectParameteruiAMD;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glRequestResidentProgramsNV", 27)) {
    /*                                    ^            */
#ifdef glRequestResidentProgramsNV
      *iv_return = glRequestResidentProgramsNV;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glTransformFeedbackVaryings", 27)) {
    /*                                    ^            */
#ifdef glTransformFeedbackVaryings
      *iv_return = glTransformFeedbackVaryings;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case 's':
    if (memEQ(name, "GLEW_EXT_raster_multisample", 27)) {
    /*                                    ^            */
#ifdef GLEW_EXT_raster_multisample
      *iv_return = GLEW_EXT_raster_multisample;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GLEW_NV_texture_multisample", 27)) {
    /*                                    ^            */
#ifdef GLEW_NV_texture_multisample
      *iv_return = GLEW_NV_texture_multisample;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_ATI_text_fragment_shader", 27)) {
    /*                                    ^            */
#ifdef GL_ATI_text_fragment_shader
      *iv_return = GL_ATI_text_fragment_shader;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glVertexArrayColorOffsetEXT", 27)) {
    /*                                    ^            */
#ifdef glVertexArrayColorOffsetEXT
      *iv_return = glVertexArrayColorOffsetEXT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glVertexArrayIndexOffsetEXT", 27)) {
    /*                                    ^            */
#ifdef glVertexArrayIndexOffsetEXT
      *iv_return = glVertexArrayIndexOffsetEXT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case 't':
    if (memEQ(name, "GLEW_SGIS_point_line_texgen", 27)) {
    /*                                    ^            */
#ifdef GLEW_SGIS_point_line_texgen
      *iv_return = GLEW_SGIS_point_line_texgen;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_EXT_packed_depth_stencil", 27)) {
    /*                                    ^            */
#ifdef GL_EXT_packed_depth_stencil
      *iv_return = GL_EXT_packed_depth_stencil;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_NVX_linked_gpu_multicast", 27)) {
    /*                                    ^            */
#ifdef GL_NVX_linked_gpu_multicast
      *iv_return = GL_NVX_linked_gpu_multicast;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glBlendEquationSeparateiARB", 27)) {
    /*                                    ^            */
#ifdef glBlendEquationSeparateiARB
      *iv_return = glBlendEquationSeparateiARB;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glCheckFramebufferStatusEXT", 27)) {
    /*                                    ^            */
#ifdef glCheckFramebufferStatusEXT
      *iv_return = glCheckFramebufferStatusEXT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glGetGraphicsResetStatusARB", 27)) {
    /*                                    ^            */
#ifdef glGetGraphicsResetStatusARB
      *iv_return = glGetGraphicsResetStatusARB;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glGetQueryBufferObjectui64v", 27)) {
    /*                                    ^            */
#ifdef glGetQueryBufferObjectui64v
      *iv_return = glGetQueryBufferObjectui64v;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glGetVertexAttribPointervNV", 27)) {
    /*                                    ^            */
#ifdef glGetVertexAttribPointervNV
      *iv_return = glGetVertexAttribPointervNV;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glReplacementCodePointerSUN", 27)) {
    /*                                    ^            */
#ifdef glReplacementCodePointerSUN
      *iv_return = glReplacementCodePointerSUN;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case 'u':
    if (memEQ(name, "GLEW_ARB_invalidate_subdata", 27)) {
    /*                                    ^            */
#ifdef GLEW_ARB_invalidate_subdata
      *iv_return = GLEW_ARB_invalidate_subdata;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case 'v':
    if (memEQ(name, "glGetObjectParameterivAPPLE", 27)) {
    /*                                    ^            */
#ifdef glGetObjectParameterivAPPLE
      *iv_return = glGetObjectParameterivAPPLE;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case 'x':
    if (memEQ(name, "glProgramUniformMatrix2x3dv", 27)) {
    /*                                    ^            */
#ifdef glProgramUniformMatrix2x3dv
      *iv_return = glProgramUniformMatrix2x3dv;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glProgramUniformMatrix2x3fv", 27)) {
    /*                                    ^            */
#ifdef glProgramUniformMatrix2x3fv
      *iv_return = glProgramUniformMatrix2x3fv;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glProgramUniformMatrix2x4dv", 27)) {
    /*                                    ^            */
#ifdef glProgramUniformMatrix2x4dv
      *iv_return = glProgramUniformMatrix2x4dv;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glProgramUniformMatrix2x4fv", 27)) {
    /*                                    ^            */
#ifdef glProgramUniformMatrix2x4fv
      *iv_return = glProgramUniformMatrix2x4fv;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glProgramUniformMatrix3x2dv", 27)) {
    /*                                    ^            */
#ifdef glProgramUniformMatrix3x2dv
      *iv_return = glProgramUniformMatrix3x2dv;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glProgramUniformMatrix3x2fv", 27)) {
    /*                                    ^            */
#ifdef glProgramUniformMatrix3x2fv
      *iv_return = glProgramUniformMatrix3x2fv;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glProgramUniformMatrix3x4dv", 27)) {
    /*                                    ^            */
#ifdef glProgramUniformMatrix3x4dv
      *iv_return = glProgramUniformMatrix3x4dv;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glProgramUniformMatrix3x4fv", 27)) {
    /*                                    ^            */
#ifdef glProgramUniformMatrix3x4fv
      *iv_return = glProgramUniformMatrix3x4fv;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glProgramUniformMatrix4x2dv", 27)) {
    /*                                    ^            */
#ifdef glProgramUniformMatrix4x2dv
      *iv_return = glProgramUniformMatrix4x2dv;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glProgramUniformMatrix4x2fv", 27)) {
    /*                                    ^            */
#ifdef glProgramUniformMatrix4x2fv
      *iv_return = glProgramUniformMatrix4x2fv;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glProgramUniformMatrix4x3dv", 27)) {
    /*                                    ^            */
#ifdef glProgramUniformMatrix4x3dv
      *iv_return = glProgramUniformMatrix4x3dv;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glProgramUniformMatrix4x3fv", 27)) {
    /*                                    ^            */
#ifdef glProgramUniformMatrix4x3fv
      *iv_return = glProgramUniformMatrix4x3fv;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  }
  return PERL_constant_NOTFOUND;
}

static int
constant_28 (pTHX_ const char *name, IV *iv_return) {
  /* When generated this function returned values for the list of names given
     here.  However, subsequent manual editing may have added or removed some.
     GLEW_AMD_blend_minmax_factor GLEW_AMD_multi_draw_indirect
     GLEW_AMD_performance_monitor GLEW_AMD_query_buffer_object
     GLEW_AMD_transform_feedback4 GLEW_AMD_vertex_shader_layer
     GLEW_APPLE_aux_depth_stencil GLEW_ARB_ES3_1_compatibility
     GLEW_ARB_ES3_2_compatibility GLEW_ARB_blend_func_extended
     GLEW_ARB_clear_buffer_object GLEW_ARB_direct_state_access
     GLEW_ARB_indirect_parameters GLEW_ARB_multi_draw_indirect
     GLEW_ARB_pixel_buffer_object GLEW_ARB_post_depth_coverage
     GLEW_ARB_query_buffer_object GLEW_ARB_shader_bit_encoding
     GLEW_ARB_tessellation_shader GLEW_ARB_texture_compression
     GLEW_ARB_texture_env_combine GLEW_ARB_texture_multisample
     GLEW_ARB_transform_feedback2 GLEW_ARB_transform_feedback3
     GLEW_ARB_vertex_array_object GLEW_ARB_vertex_attrib_64bit
     GLEW_ATI_texture_mirror_once GLEW_ATI_vertex_array_object
     GLEW_EXT_blend_func_separate GLEW_EXT_direct_state_access
     GLEW_EXT_draw_range_elements GLEW_EXT_index_array_formats
     GLEW_EXT_pixel_buffer_object GLEW_EXT_post_depth_coverage
     GLEW_EXT_texture_env_combine GLEW_EXT_texture_sRGB_decode
     GLEW_EXT_vertex_attrib_64bit GLEW_INTEL_performance_query
     GLEW_NV_clip_space_w_scaling GLEW_NV_explicit_multisample
     GLEW_NV_multisample_coverage GLEW_NV_packed_depth_stencil
     GLEW_NV_texture_env_combine4 GLEW_REND_screen_coordinates
     GLEW_SGIS_texture_edge_clamp GLEW_SGIX_blend_alpha_minmax
     GLEW_SGIX_pixel_texture_bits GLEW_SGIX_texture_scale_bias
     GLEW_SGI_texture_color_table GL_ACTIVE_UNIFORM_MAX_LENGTH
     GL_ALPHA_EXTENDED_RANGE_SGIX GL_AMD_occlusion_query_event
     GL_AMD_shader_stencil_export GL_AMD_shader_trinary_minmax
     GL_APPLE_vertex_array_object GL_ARB_get_texture_sub_image
     GL_ARB_internalformat_query2 GL_ARB_shader_stencil_export
     GL_ARB_texture_buffer_object GL_ARB_texture_filter_minmax
     GL_ARB_uniform_buffer_object GL_ARB_vertex_attrib_binding
     GL_ATIX_texture_env_combine3 GL_BINORMAL_ARRAY_STRIDE_EXT
     GL_BUFFER_UPDATE_BARRIER_BIT GL_CLIENT_ACTIVE_TEXTURE_ARB
     GL_CLIENT_ATTRIB_STACK_DEPTH GL_COLOR_TABLE_BLUE_SIZE_EXT
     GL_COLOR_TABLE_BLUE_SIZE_SGI GL_COMPRESSED_RGBA8_ETC2_EAC
     GL_COMPRESSED_RGBA_FXT1_3DFX GL_COMPRESSED_SIGNED_R11_EAC
     GL_COMPRESSED_SLUMINANCE_EXT GL_COMPRESSED_SRGB_ALPHA_EXT
     GL_COPY_WRITE_BUFFER_BINDING GL_CURRENT_RASTER_NORMAL_EXT
     GL_CURRENT_VERTEX_ATTRIB_ARB GL_CURRENT_VERTEX_WEIGHT_EXT
     GL_DEBUG_CALLBACK_USER_PARAM GL_DEBUG_LOGGED_MESSAGES_AMD
     GL_DEBUG_LOGGED_MESSAGES_ARB GL_DEBUG_SEVERITY_MEDIUM_AMD
     GL_DEBUG_SEVERITY_MEDIUM_ARB GL_DOT_PRODUCT_TEXTURE_1D_NV
     GL_DOT_PRODUCT_TEXTURE_2D_NV GL_DOT_PRODUCT_TEXTURE_3D_NV
     GL_EDGE_FLAG_ARRAY_COUNT_EXT GL_EDGE_FLAG_ARRAY_LENGTH_NV
     GL_ELEMENT_ARRAY_BARRIER_BIT GL_ELEMENT_ARRAY_POINTER_ATI
     GL_EXT_compiled_vertex_array GL_EXT_texture_buffer_object
     GL_EXT_texture_filter_minmax GL_EYE_DISTANCE_TO_LINE_SGIS
     GL_FOG_COORDINATE_ARRAY_TYPE GL_FOG_COORDINATE_SOURCE_EXT
     GL_FOG_COORD_ARRAY_LENGTH_NV GL_FRAMEBUFFER_DEFAULT_WIDTH
     GL_FUNC_REVERSE_SUBTRACT_EXT GL_GENERATE_MIPMAP_HINT_SGIS
     GL_GEOMETRY_VERTICES_OUT_ARB GL_GEOMETRY_VERTICES_OUT_EXT
     GL_IBM_multimode_draw_arrays GL_IMAGE_BINDING_LAYERED_EXT
     GL_IMAGE_COMPATIBILITY_CLASS GL_INTERNALFORMAT_ALPHA_SIZE
     GL_INTERNALFORMAT_ALPHA_TYPE GL_INTERNALFORMAT_DEPTH_SIZE
     GL_INTERNALFORMAT_DEPTH_TYPE GL_INTERNALFORMAT_GREEN_SIZE
     GL_INTERNALFORMAT_GREEN_TYPE GL_KHR_context_flush_control
     GL_LIGHT_MODEL_COLOR_CONTROL GL_LOSE_CONTEXT_ON_RESET_ARB
     GL_LUMINANCE16_ALPHA16_SNORM GL_MAP1_VERTEX_ATTRIB10_4_NV
     GL_MAP1_VERTEX_ATTRIB11_4_NV GL_MAP1_VERTEX_ATTRIB12_4_NV
     GL_MAP1_VERTEX_ATTRIB13_4_NV GL_MAP1_VERTEX_ATTRIB14_4_NV
     GL_MAP1_VERTEX_ATTRIB15_4_NV GL_MAP2_VERTEX_ATTRIB10_4_NV
     GL_MAP2_VERTEX_ATTRIB11_4_NV GL_MAP2_VERTEX_ATTRIB12_4_NV
     GL_MAP2_VERTEX_ATTRIB13_4_NV GL_MAP2_VERTEX_ATTRIB14_4_NV
     GL_MAP2_VERTEX_ATTRIB15_4_NV GL_MAP_INVALIDATE_BUFFER_BIT
     GL_MAT_COLOR_INDEXES_BIT_PGI GL_MAX_COLOR_ATTACHMENTS_EXT
     GL_MAX_COLOR_TEXTURE_SAMPLES GL_MAX_CONVOLUTION_WIDTH_EXT
     GL_MAX_CUBE_MAP_TEXTURE_SIZE GL_MAX_DEBUG_LOGGED_MESSAGES
     GL_MAX_DEPTH_TEXTURE_SAMPLES GL_MAX_ELEMENTS_VERTICES_EXT
     GL_MAX_MODELVIEW_STACK_DEPTH GL_MAX_PROGRAM_CALL_DEPTH_NV
     GL_MAX_PROGRAM_LOOP_COUNT_NV GL_MAX_PROGRAM_LOOP_DEPTH_NV
     GL_MAX_RENDERBUFFER_SIZE_EXT GL_MAX_TESS_PATCH_COMPONENTS
     GL_MAX_VERTEX_IMAGE_UNIFORMS GL_MAX_VERTEX_UNIFORM_BLOCKS
     GL_MAX_WINDOW_RECTANGLES_EXT GL_NO_RESET_NOTIFICATION_ARB
     GL_NUM_SHADER_BINARY_FORMATS GL_NUM_WINDOW_RECTANGLES_EXT
     GL_NV_shader_atomic_counters GL_NV_vertex_program2_option
     GL_OBJECT_COMPILE_STATUS_ARB GL_OFFSET_HILO_TEXTURE_2D_NV
     GL_OFFSET_TEXTURE_2D_BIAS_NV GL_OUTPUT_TEXTURE_COORD0_EXT
     GL_OUTPUT_TEXTURE_COORD1_EXT GL_OUTPUT_TEXTURE_COORD2_EXT
     GL_OUTPUT_TEXTURE_COORD3_EXT GL_OUTPUT_TEXTURE_COORD4_EXT
     GL_OUTPUT_TEXTURE_COORD5_EXT GL_OUTPUT_TEXTURE_COORD6_EXT
     GL_OUTPUT_TEXTURE_COORD7_EXT GL_OUTPUT_TEXTURE_COORD8_EXT
     GL_OUTPUT_TEXTURE_COORD9_EXT GL_PATCH_DEFAULT_INNER_LEVEL
     GL_PATCH_DEFAULT_OUTER_LEVEL GL_PATH_DASH_OFFSET_RESET_NV
     GL_PATH_FILL_BOUNDING_BOX_NV GL_PATH_STROKE_COVER_MODE_NV
     GL_PATH_TERMINAL_DASH_CAP_NV GL_PIXEL_PACK_BUFFER_BINDING
     GL_POINT_FADE_THRESHOLD_SIZE GL_POINT_SPRITE_COORD_ORIGIN
     GL_POLYGON_OFFSET_COMMAND_NV GL_POLYGON_OFFSET_FACTOR_EXT
     GL_POST_CONVOLUTION_RED_BIAS GL_PREVIOUS_TEXTURE_INPUT_NV
     GL_PROGRAM_ERROR_POSITION_NV GL_QUERY_RESULT_AVAILABLE_NV
     GL_REGAL_ES1_0_compatibility GL_REGAL_ES1_1_compatibility
     GL_RELATIVE_ROUNDED_RECT2_NV GL_RELATIVE_ROUNDED_RECT4_NV
     GL_RELATIVE_ROUNDED_RECT8_NV GL_RENDERBUFFER_RED_SIZE_EXT
     GL_RENDERBUFFER_STENCIL_SIZE GL_RGB16_EXTENDED_RANGE_SGIX
     GL_SAMPLE_ALPHA_TO_MASK_SGIS GL_SAMPLE_COVERAGE_VALUE_ARB
     GL_SCALED_RESOLVE_NICEST_EXT GL_SECONDARY_COLOR_ARRAY_EXT
     GL_SGIS_texture_border_clamp GL_SGIX_convolution_accuracy
     GL_SGIX_texture_multi_buffer GL_SIGNED_LUMINANCE_ALPHA_NV
     GL_STENCIL_BACK_OP_VALUE_AMD GL_STENCIL_TEST_TWO_SIDE_EXT
     GL_STRICT_DEPTHFUNC_HINT_PGI GL_TANGENT_ARRAY_POINTER_EXT
     GL_TEXTURE_BINDING_RECTANGLE GL_TEXTURE_BUFFER_FORMAT_ARB
     GL_TEXTURE_BUFFER_FORMAT_EXT GL_TEXTURE_CUBE_MAP_SEAMLESS
     GL_TEXTURE_FETCH_BARRIER_BIT GL_TEXTURE_MATERIAL_FACE_EXT
     GL_TEXTURE_OUTPUT_ALPHA_ATIX GL_TEXTURE_POINT_SPRITE_ATIX
     GL_TRACK_MATRIX_TRANSFORM_NV GL_TRANSFORM_FEEDBACK_ACTIVE
     GL_TRANSFORM_FEEDBACK_BUFFER GL_TRANSFORM_FEEDBACK_PAUSED
     GL_UNIFORM_BLOCK_NAME_LENGTH GL_UNIFORM_BUFFER_ADDRESS_NV
     GL_UNIFORM_BUFFER_UNIFIED_NV GL_UNKNOWN_CONTEXT_RESET_ARB
     GL_UNPACK_CONSTANT_DATA_SUNX GL_UNSIGNED_INT_IMAGE_1D_EXT
     GL_UNSIGNED_INT_IMAGE_2D_EXT GL_UNSIGNED_INT_IMAGE_3D_EXT
     GL_UNSIGNED_INT_IMAGE_BUFFER GL_UNSIGNED_INT_S8_S8_8_8_NV
     GL_UNSIGNED_INT_SAMPLER_CUBE GL_VARIANT_ARRAY_POINTER_EXT
     GL_VERTEX_PROGRAM_BINDING_NV GL_VERTEX_PROGRAM_POINT_SIZE
     GL_VERTEX_SHADER_BINDING_EXT GL_VERTEX_SUBROUTINE_UNIFORM
     GL_VIEW_CLASS_S3TC_DXT1_RGBA GL_VIEW_CLASS_S3TC_DXT3_RGBA
     GL_VIEW_CLASS_S3TC_DXT5_RGBA GL_WINDOW_RECTANGLE_MODE_EXT
     GL_WRITE_PIXEL_DATA_RANGE_NV glClearNamedBufferSubDataEXT
     glColor4fNormal3fVertex3fSUN glCombinerStageParameterfvNV
     glCompressedTexSubImage1DARB glCompressedTexSubImage2DARB
     glCompressedTexSubImage3DARB glCopyConvolutionFilter1DEXT
     glCopyConvolutionFilter2DEXT glCoverStrokePathInstancedNV
     glDeleteTransformFeedbacksNV glDrawElementsInstancedANGLE
     glDrawRangeElementArrayAPPLE glEnableVertexArrayAttribEXT
     glEnableVertexAttribArrayARB glFlushVertexArrayRangeAPPLE
     glFramebufferRenderbufferEXT glFramebufferTextureLayerARB
     glFramebufferTextureLayerEXT glGetHistogramParameterfvEXT
     glGetHistogramParameterivEXT glGetMultiTexParameterIivEXT
     glGetProgramResourceLocation glGetRenderbufferParameteriv
     glGetTextureLevelParameterfv glGetTextureLevelParameteriv
     glGetTextureParameterIuivEXT glGetTextureSamplerHandleARB
     glGetVariantArrayObjectfvATI glGetVariantArrayObjectivATI
     glGetVertexAttribPointervARB glImageTransformParameterfHP
     glImageTransformParameteriHP glIsTextureHandleResidentARB
     glIsVertexAttribEnabledAPPLE glMakeImageHandleResidentARB
     glMultiDrawArraysIndirectAMD glMultiDrawElementArrayAPPLE
     glMulticastBlitFramebufferNV glNamedFramebufferDrawBuffer
     glNamedFramebufferParameteri glNamedFramebufferReadBuffer
     glNamedFramebufferTextureEXT glProgramEnvParameterI4uivNV
     glProgramEnvParameters4fvEXT glProgramEnvParametersI4ivNV
     glProgramLocalParameter4dARB glProgramLocalParameter4fARB
     glProgramLocalParameterI4iNV glProgramNamedParameter4dvNV
     glProgramNamedParameter4fvNV glProgramUniformHandleui64NV
     glProgramUniformMatrix2fvEXT glProgramUniformMatrix3fvEXT
     glProgramUniformMatrix4fvEXT glPushClientAttribDefaultEXT
     glStencilFillPathInstancedNV glStencilThenCoverFillPathNV
     glTransformFeedbackAttribsNV glVertexArrayNormalOffsetEXT
     glVertexArrayParameteriAPPLE glVertexArrayVertexOffsetEXT
     glVertexAttribArrayObjectATI */
  /* Offset 22 gives the best switch position.  */
  switch (name[22]) {
  case '0':
    if (memEQ(name, "GL_MAP1_VERTEX_ATTRIB10_4_NV", 28)) {
    /*                                     ^            */
#ifdef GL_MAP1_VERTEX_ATTRIB10_4_NV
      *iv_return = GL_MAP1_VERTEX_ATTRIB10_4_NV;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_MAP2_VERTEX_ATTRIB10_4_NV", 28)) {
    /*                                     ^            */
#ifdef GL_MAP2_VERTEX_ATTRIB10_4_NV
      *iv_return = GL_MAP2_VERTEX_ATTRIB10_4_NV;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case '1':
    if (memEQ(name, "GL_COMPRESSED_RGBA_FXT1_3DFX", 28)) {
    /*                                     ^            */
#ifdef GL_COMPRESSED_RGBA_FXT1_3DFX
      *iv_return = GL_COMPRESSED_RGBA_FXT1_3DFX;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_COMPRESSED_SIGNED_R11_EAC", 28)) {
    /*                                     ^            */
#ifdef GL_COMPRESSED_SIGNED_R11_EAC
      *iv_return = GL_COMPRESSED_SIGNED_R11_EAC;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_MAP1_VERTEX_ATTRIB11_4_NV", 28)) {
    /*                                     ^            */
#ifdef GL_MAP1_VERTEX_ATTRIB11_4_NV
      *iv_return = GL_MAP1_VERTEX_ATTRIB11_4_NV;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_MAP2_VERTEX_ATTRIB11_4_NV", 28)) {
    /*                                     ^            */
#ifdef GL_MAP2_VERTEX_ATTRIB11_4_NV
      *iv_return = GL_MAP2_VERTEX_ATTRIB11_4_NV;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_UNSIGNED_INT_IMAGE_1D_EXT", 28)) {
    /*                                     ^            */
#ifdef GL_UNSIGNED_INT_IMAGE_1D_EXT
      *iv_return = GL_UNSIGNED_INT_IMAGE_1D_EXT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_VIEW_CLASS_S3TC_DXT1_RGBA", 28)) {
    /*                                     ^            */
#ifdef GL_VIEW_CLASS_S3TC_DXT1_RGBA
      *iv_return = GL_VIEW_CLASS_S3TC_DXT1_RGBA;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case '2':
    if (memEQ(name, "GL_MAP1_VERTEX_ATTRIB12_4_NV", 28)) {
    /*                                     ^            */
#ifdef GL_MAP1_VERTEX_ATTRIB12_4_NV
      *iv_return = GL_MAP1_VERTEX_ATTRIB12_4_NV;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_MAP2_VERTEX_ATTRIB12_4_NV", 28)) {
    /*                                     ^            */
#ifdef GL_MAP2_VERTEX_ATTRIB12_4_NV
      *iv_return = GL_MAP2_VERTEX_ATTRIB12_4_NV;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_UNSIGNED_INT_IMAGE_2D_EXT", 28)) {
    /*                                     ^            */
#ifdef GL_UNSIGNED_INT_IMAGE_2D_EXT
      *iv_return = GL_UNSIGNED_INT_IMAGE_2D_EXT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glProgramUniformMatrix2fvEXT", 28)) {
    /*                                     ^            */
#ifdef glProgramUniformMatrix2fvEXT
      *iv_return = glProgramUniformMatrix2fvEXT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case '3':
    if (memEQ(name, "GL_MAP1_VERTEX_ATTRIB13_4_NV", 28)) {
    /*                                     ^            */
#ifdef GL_MAP1_VERTEX_ATTRIB13_4_NV
      *iv_return = GL_MAP1_VERTEX_ATTRIB13_4_NV;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_MAP2_VERTEX_ATTRIB13_4_NV", 28)) {
    /*                                     ^            */
#ifdef GL_MAP2_VERTEX_ATTRIB13_4_NV
      *iv_return = GL_MAP2_VERTEX_ATTRIB13_4_NV;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_UNSIGNED_INT_IMAGE_3D_EXT", 28)) {
    /*                                     ^            */
#ifdef GL_UNSIGNED_INT_IMAGE_3D_EXT
      *iv_return = GL_UNSIGNED_INT_IMAGE_3D_EXT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_VIEW_CLASS_S3TC_DXT3_RGBA", 28)) {
    /*                                     ^            */
#ifdef GL_VIEW_CLASS_S3TC_DXT3_RGBA
      *iv_return = GL_VIEW_CLASS_S3TC_DXT3_RGBA;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glProgramUniformMatrix3fvEXT", 28)) {
    /*                                     ^            */
#ifdef glProgramUniformMatrix3fvEXT
      *iv_return = glProgramUniformMatrix3fvEXT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case '4':
    if (memEQ(name, "GL_MAP1_VERTEX_ATTRIB14_4_NV", 28)) {
    /*                                     ^            */
#ifdef GL_MAP1_VERTEX_ATTRIB14_4_NV
      *iv_return = GL_MAP1_VERTEX_ATTRIB14_4_NV;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_MAP2_VERTEX_ATTRIB14_4_NV", 28)) {
    /*                                     ^            */
#ifdef GL_MAP2_VERTEX_ATTRIB14_4_NV
      *iv_return = GL_MAP2_VERTEX_ATTRIB14_4_NV;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glProgramEnvParameterI4uivNV", 28)) {
    /*                                     ^            */
#ifdef glProgramEnvParameterI4uivNV
      *iv_return = glProgramEnvParameterI4uivNV;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glProgramEnvParameters4fvEXT", 28)) {
    /*                                     ^            */
#ifdef glProgramEnvParameters4fvEXT
      *iv_return = glProgramEnvParameters4fvEXT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glProgramUniformMatrix4fvEXT", 28)) {
    /*                                     ^            */
#ifdef glProgramUniformMatrix4fvEXT
      *iv_return = glProgramUniformMatrix4fvEXT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case '5':
    if (memEQ(name, "GL_MAP1_VERTEX_ATTRIB15_4_NV", 28)) {
    /*                                     ^            */
#ifdef GL_MAP1_VERTEX_ATTRIB15_4_NV
      *iv_return = GL_MAP1_VERTEX_ATTRIB15_4_NV;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_MAP2_VERTEX_ATTRIB15_4_NV", 28)) {
    /*                                     ^            */
#ifdef GL_MAP2_VERTEX_ATTRIB15_4_NV
      *iv_return = GL_MAP2_VERTEX_ATTRIB15_4_NV;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_VIEW_CLASS_S3TC_DXT5_RGBA", 28)) {
    /*                                     ^            */
#ifdef GL_VIEW_CLASS_S3TC_DXT5_RGBA
      *iv_return = GL_VIEW_CLASS_S3TC_DXT5_RGBA;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case '8':
    if (memEQ(name, "GL_UNSIGNED_INT_S8_S8_8_8_NV", 28)) {
    /*                                     ^            */
#ifdef GL_UNSIGNED_INT_S8_S8_8_8_NV
      *iv_return = GL_UNSIGNED_INT_S8_S8_8_8_NV;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case 'A':
    if (memEQ(name, "GL_CURRENT_RASTER_NORMAL_EXT", 28)) {
    /*                                     ^            */
#ifdef GL_CURRENT_RASTER_NORMAL_EXT
      *iv_return = GL_CURRENT_RASTER_NORMAL_EXT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_INTERNALFORMAT_ALPHA_SIZE", 28)) {
    /*                                     ^            */
#ifdef GL_INTERNALFORMAT_ALPHA_SIZE
      *iv_return = GL_INTERNALFORMAT_ALPHA_SIZE;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_INTERNALFORMAT_ALPHA_TYPE", 28)) {
    /*                                     ^            */
#ifdef GL_INTERNALFORMAT_ALPHA_TYPE
      *iv_return = GL_INTERNALFORMAT_ALPHA_TYPE;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_MAX_COLOR_TEXTURE_SAMPLES", 28)) {
    /*                                     ^            */
#ifdef GL_MAX_COLOR_TEXTURE_SAMPLES
      *iv_return = GL_MAX_COLOR_TEXTURE_SAMPLES;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_MAX_DEPTH_TEXTURE_SAMPLES", 28)) {
    /*                                     ^            */
#ifdef GL_MAX_DEPTH_TEXTURE_SAMPLES
      *iv_return = GL_MAX_DEPTH_TEXTURE_SAMPLES;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_POLYGON_OFFSET_COMMAND_NV", 28)) {
    /*                                     ^            */
#ifdef GL_POLYGON_OFFSET_COMMAND_NV
      *iv_return = GL_POLYGON_OFFSET_COMMAND_NV;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_SECONDARY_COLOR_ARRAY_EXT", 28)) {
    /*                                     ^            */
#ifdef GL_SECONDARY_COLOR_ARRAY_EXT
      *iv_return = GL_SECONDARY_COLOR_ARRAY_EXT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_TEXTURE_BUFFER_FORMAT_ARB", 28)) {
    /*                                     ^            */
#ifdef GL_TEXTURE_BUFFER_FORMAT_ARB
      *iv_return = GL_TEXTURE_BUFFER_FORMAT_ARB;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_TEXTURE_BUFFER_FORMAT_EXT", 28)) {
    /*                                     ^            */
#ifdef GL_TEXTURE_BUFFER_FORMAT_EXT
      *iv_return = GL_TEXTURE_BUFFER_FORMAT_EXT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_TEXTURE_CUBE_MAP_SEAMLESS", 28)) {
    /*                                     ^            */
#ifdef GL_TEXTURE_CUBE_MAP_SEAMLESS
      *iv_return = GL_TEXTURE_CUBE_MAP_SEAMLESS;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_TEXTURE_OUTPUT_ALPHA_ATIX", 28)) {
    /*                                     ^            */
#ifdef GL_TEXTURE_OUTPUT_ALPHA_ATIX
      *iv_return = GL_TEXTURE_OUTPUT_ALPHA_ATIX;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_TRANSFORM_FEEDBACK_ACTIVE", 28)) {
    /*                                     ^            */
#ifdef GL_TRANSFORM_FEEDBACK_ACTIVE
      *iv_return = GL_TRANSFORM_FEEDBACK_ACTIVE;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_UNPACK_CONSTANT_DATA_SUNX", 28)) {
    /*                                     ^            */
#ifdef GL_UNPACK_CONSTANT_DATA_SUNX
      *iv_return = GL_UNPACK_CONSTANT_DATA_SUNX;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case 'B':
    if (memEQ(name, "GL_MAX_VERTEX_UNIFORM_BLOCKS", 28)) {
    /*                                     ^            */
#ifdef GL_MAX_VERTEX_UNIFORM_BLOCKS
      *iv_return = GL_MAX_VERTEX_UNIFORM_BLOCKS;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_PATH_FILL_BOUNDING_BOX_NV", 28)) {
    /*                                     ^            */
#ifdef GL_PATH_FILL_BOUNDING_BOX_NV
      *iv_return = GL_PATH_FILL_BOUNDING_BOX_NV;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_QUERY_RESULT_AVAILABLE_NV", 28)) {
    /*                                     ^            */
#ifdef GL_QUERY_RESULT_AVAILABLE_NV
      *iv_return = GL_QUERY_RESULT_AVAILABLE_NV;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_TRANSFORM_FEEDBACK_BUFFER", 28)) {
    /*                                     ^            */
#ifdef GL_TRANSFORM_FEEDBACK_BUFFER
      *iv_return = GL_TRANSFORM_FEEDBACK_BUFFER;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_UNSIGNED_INT_IMAGE_BUFFER", 28)) {
    /*                                     ^            */
#ifdef GL_UNSIGNED_INT_IMAGE_BUFFER
      *iv_return = GL_UNSIGNED_INT_IMAGE_BUFFER;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glNamedFramebufferDrawBuffer", 28)) {
    /*                                     ^            */
#ifdef glNamedFramebufferDrawBuffer
      *iv_return = glNamedFramebufferDrawBuffer;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glNamedFramebufferReadBuffer", 28)) {
    /*                                     ^            */
#ifdef glNamedFramebufferReadBuffer
      *iv_return = glNamedFramebufferReadBuffer;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case 'C':
    if (memEQ(name, "GL_COMPRESSED_RGBA8_ETC2_EAC", 28)) {
    /*                                     ^            */
#ifdef GL_COMPRESSED_RGBA8_ETC2_EAC
      *iv_return = GL_COMPRESSED_RGBA8_ETC2_EAC;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_COMPRESSED_SLUMINANCE_EXT", 28)) {
    /*                                     ^            */
#ifdef GL_COMPRESSED_SLUMINANCE_EXT
      *iv_return = GL_COMPRESSED_SLUMINANCE_EXT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_FOG_COORDINATE_SOURCE_EXT", 28)) {
    /*                                     ^            */
#ifdef GL_FOG_COORDINATE_SOURCE_EXT
      *iv_return = GL_FOG_COORDINATE_SOURCE_EXT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_FUNC_REVERSE_SUBTRACT_EXT", 28)) {
    /*                                     ^            */
#ifdef GL_FUNC_REVERSE_SUBTRACT_EXT
      *iv_return = GL_FUNC_REVERSE_SUBTRACT_EXT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_PATH_TERMINAL_DASH_CAP_NV", 28)) {
    /*                                     ^            */
#ifdef GL_PATH_TERMINAL_DASH_CAP_NV
      *iv_return = GL_PATH_TERMINAL_DASH_CAP_NV;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_RELATIVE_ROUNDED_RECT2_NV", 28)) {
    /*                                     ^            */
#ifdef GL_RELATIVE_ROUNDED_RECT2_NV
      *iv_return = GL_RELATIVE_ROUNDED_RECT2_NV;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_RELATIVE_ROUNDED_RECT4_NV", 28)) {
    /*                                     ^            */
#ifdef GL_RELATIVE_ROUNDED_RECT4_NV
      *iv_return = GL_RELATIVE_ROUNDED_RECT4_NV;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_RELATIVE_ROUNDED_RECT8_NV", 28)) {
    /*                                     ^            */
#ifdef GL_RELATIVE_ROUNDED_RECT8_NV
      *iv_return = GL_RELATIVE_ROUNDED_RECT8_NV;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_TEXTURE_MATERIAL_FACE_EXT", 28)) {
    /*                                     ^            */
#ifdef GL_TEXTURE_MATERIAL_FACE_EXT
      *iv_return = GL_TEXTURE_MATERIAL_FACE_EXT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case 'D':
    if (memEQ(name, "GL_BINORMAL_ARRAY_STRIDE_EXT", 28)) {
    /*                                     ^            */
#ifdef GL_BINORMAL_ARRAY_STRIDE_EXT
      *iv_return = GL_BINORMAL_ARRAY_STRIDE_EXT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_OUTPUT_TEXTURE_COORD0_EXT", 28)) {
    /*                                     ^            */
#ifdef GL_OUTPUT_TEXTURE_COORD0_EXT
      *iv_return = GL_OUTPUT_TEXTURE_COORD0_EXT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_OUTPUT_TEXTURE_COORD1_EXT", 28)) {
    /*                                     ^            */
#ifdef GL_OUTPUT_TEXTURE_COORD1_EXT
      *iv_return = GL_OUTPUT_TEXTURE_COORD1_EXT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_OUTPUT_TEXTURE_COORD2_EXT", 28)) {
    /*                                     ^            */
#ifdef GL_OUTPUT_TEXTURE_COORD2_EXT
      *iv_return = GL_OUTPUT_TEXTURE_COORD2_EXT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_OUTPUT_TEXTURE_COORD3_EXT", 28)) {
    /*                                     ^            */
#ifdef GL_OUTPUT_TEXTURE_COORD3_EXT
      *iv_return = GL_OUTPUT_TEXTURE_COORD3_EXT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_OUTPUT_TEXTURE_COORD4_EXT", 28)) {
    /*                                     ^            */
#ifdef GL_OUTPUT_TEXTURE_COORD4_EXT
      *iv_return = GL_OUTPUT_TEXTURE_COORD4_EXT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_OUTPUT_TEXTURE_COORD5_EXT", 28)) {
    /*                                     ^            */
#ifdef GL_OUTPUT_TEXTURE_COORD5_EXT
      *iv_return = GL_OUTPUT_TEXTURE_COORD5_EXT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_OUTPUT_TEXTURE_COORD6_EXT", 28)) {
    /*                                     ^            */
#ifdef GL_OUTPUT_TEXTURE_COORD6_EXT
      *iv_return = GL_OUTPUT_TEXTURE_COORD6_EXT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_OUTPUT_TEXTURE_COORD7_EXT", 28)) {
    /*                                     ^            */
#ifdef GL_OUTPUT_TEXTURE_COORD7_EXT
      *iv_return = GL_OUTPUT_TEXTURE_COORD7_EXT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_OUTPUT_TEXTURE_COORD8_EXT", 28)) {
    /*                                     ^            */
#ifdef GL_OUTPUT_TEXTURE_COORD8_EXT
      *iv_return = GL_OUTPUT_TEXTURE_COORD8_EXT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_OUTPUT_TEXTURE_COORD9_EXT", 28)) {
    /*                                     ^            */
#ifdef GL_OUTPUT_TEXTURE_COORD9_EXT
      *iv_return = GL_OUTPUT_TEXTURE_COORD9_EXT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_POINT_FADE_THRESHOLD_SIZE", 28)) {
    /*                                     ^            */
#ifdef GL_POINT_FADE_THRESHOLD_SIZE
      *iv_return = GL_POINT_FADE_THRESHOLD_SIZE;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_POST_CONVOLUTION_RED_BIAS", 28)) {
    /*                                     ^            */
#ifdef GL_POST_CONVOLUTION_RED_BIAS
      *iv_return = GL_POST_CONVOLUTION_RED_BIAS;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_STENCIL_TEST_TWO_SIDE_EXT", 28)) {
    /*                                     ^            */
#ifdef GL_STENCIL_TEST_TWO_SIDE_EXT
      *iv_return = GL_STENCIL_TEST_TWO_SIDE_EXT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_WINDOW_RECTANGLE_MODE_EXT", 28)) {
    /*                                     ^            */
#ifdef GL_WINDOW_RECTANGLE_MODE_EXT
      *iv_return = GL_WINDOW_RECTANGLE_MODE_EXT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case 'E':
    if (memEQ(name, "GL_ALPHA_EXTENDED_RANGE_SGIX", 28)) {
    /*                                     ^            */
#ifdef GL_ALPHA_EXTENDED_RANGE_SGIX
      *iv_return = GL_ALPHA_EXTENDED_RANGE_SGIX;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_BUFFER_UPDATE_BARRIER_BIT", 28)) {
    /*                                     ^            */
#ifdef GL_BUFFER_UPDATE_BARRIER_BIT
      *iv_return = GL_BUFFER_UPDATE_BARRIER_BIT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_DEBUG_LOGGED_MESSAGES_AMD", 28)) {
    /*                                     ^            */
#ifdef GL_DEBUG_LOGGED_MESSAGES_AMD
      *iv_return = GL_DEBUG_LOGGED_MESSAGES_AMD;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_DEBUG_LOGGED_MESSAGES_ARB", 28)) {
    /*                                     ^            */
#ifdef GL_DEBUG_LOGGED_MESSAGES_ARB
      *iv_return = GL_DEBUG_LOGGED_MESSAGES_ARB;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_ELEMENT_ARRAY_BARRIER_BIT", 28)) {
    /*                                     ^            */
#ifdef GL_ELEMENT_ARRAY_BARRIER_BIT
      *iv_return = GL_ELEMENT_ARRAY_BARRIER_BIT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_ELEMENT_ARRAY_POINTER_ATI", 28)) {
    /*                                     ^            */
#ifdef GL_ELEMENT_ARRAY_POINTER_ATI
      *iv_return = GL_ELEMENT_ARRAY_POINTER_ATI;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_EYE_DISTANCE_TO_LINE_SGIS", 28)) {
    /*                                     ^            */
#ifdef GL_EYE_DISTANCE_TO_LINE_SGIS
      *iv_return = GL_EYE_DISTANCE_TO_LINE_SGIS;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_IMAGE_BINDING_LAYERED_EXT", 28)) {
    /*                                     ^            */
#ifdef GL_IMAGE_BINDING_LAYERED_EXT
      *iv_return = GL_IMAGE_BINDING_LAYERED_EXT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_LOSE_CONTEXT_ON_RESET_ARB", 28)) {
    /*                                     ^            */
#ifdef GL_LOSE_CONTEXT_ON_RESET_ARB
      *iv_return = GL_LOSE_CONTEXT_ON_RESET_ARB;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_MAP_INVALIDATE_BUFFER_BIT", 28)) {
    /*                                     ^            */
#ifdef GL_MAP_INVALIDATE_BUFFER_BIT
      *iv_return = GL_MAP_INVALIDATE_BUFFER_BIT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_MAX_CUBE_MAP_TEXTURE_SIZE", 28)) {
    /*                                     ^            */
#ifdef GL_MAX_CUBE_MAP_TEXTURE_SIZE
      *iv_return = GL_MAX_CUBE_MAP_TEXTURE_SIZE;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_MAX_ELEMENTS_VERTICES_EXT", 28)) {
    /*                                     ^            */
#ifdef GL_MAX_ELEMENTS_VERTICES_EXT
      *iv_return = GL_MAX_ELEMENTS_VERTICES_EXT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_MAX_WINDOW_RECTANGLES_EXT", 28)) {
    /*                                     ^            */
#ifdef GL_MAX_WINDOW_RECTANGLES_EXT
      *iv_return = GL_MAX_WINDOW_RECTANGLES_EXT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_NUM_WINDOW_RECTANGLES_EXT", 28)) {
    /*                                     ^            */
#ifdef GL_NUM_WINDOW_RECTANGLES_EXT
      *iv_return = GL_NUM_WINDOW_RECTANGLES_EXT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_RGB16_EXTENDED_RANGE_SGIX", 28)) {
    /*                                     ^            */
#ifdef GL_RGB16_EXTENDED_RANGE_SGIX
      *iv_return = GL_RGB16_EXTENDED_RANGE_SGIX;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_TANGENT_ARRAY_POINTER_EXT", 28)) {
    /*                                     ^            */
#ifdef GL_TANGENT_ARRAY_POINTER_EXT
      *iv_return = GL_TANGENT_ARRAY_POINTER_EXT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_TEXTURE_FETCH_BARRIER_BIT", 28)) {
    /*                                     ^            */
#ifdef GL_TEXTURE_FETCH_BARRIER_BIT
      *iv_return = GL_TEXTURE_FETCH_BARRIER_BIT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_TEXTURE_POINT_SPRITE_ATIX", 28)) {
    /*                                     ^            */
#ifdef GL_TEXTURE_POINT_SPRITE_ATIX
      *iv_return = GL_TEXTURE_POINT_SPRITE_ATIX;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_UNIFORM_BUFFER_ADDRESS_NV", 28)) {
    /*                                     ^            */
#ifdef GL_UNIFORM_BUFFER_ADDRESS_NV
      *iv_return = GL_UNIFORM_BUFFER_ADDRESS_NV;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_UNKNOWN_CONTEXT_RESET_ARB", 28)) {
    /*                                     ^            */
#ifdef GL_UNKNOWN_CONTEXT_RESET_ARB
      *iv_return = GL_UNKNOWN_CONTEXT_RESET_ARB;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_VARIANT_ARRAY_POINTER_EXT", 28)) {
    /*                                     ^            */
#ifdef GL_VARIANT_ARRAY_POINTER_EXT
      *iv_return = GL_VARIANT_ARRAY_POINTER_EXT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case 'G':
    if (memEQ(name, "GL_EDGE_FLAG_ARRAY_LENGTH_NV", 28)) {
    /*                                     ^            */
#ifdef GL_EDGE_FLAG_ARRAY_LENGTH_NV
      *iv_return = GL_EDGE_FLAG_ARRAY_LENGTH_NV;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_FOG_COORD_ARRAY_LENGTH_NV", 28)) {
    /*                                     ^            */
#ifdef GL_FOG_COORD_ARRAY_LENGTH_NV
      *iv_return = GL_FOG_COORD_ARRAY_LENGTH_NV;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case 'H':
    if (memEQ(name, "GL_COMPRESSED_SRGB_ALPHA_EXT", 28)) {
    /*                                     ^            */
#ifdef GL_COMPRESSED_SRGB_ALPHA_EXT
      *iv_return = GL_COMPRESSED_SRGB_ALPHA_EXT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_CURRENT_VERTEX_WEIGHT_EXT", 28)) {
    /*                                     ^            */
#ifdef GL_CURRENT_VERTEX_WEIGHT_EXT
      *iv_return = GL_CURRENT_VERTEX_WEIGHT_EXT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_INTERNALFORMAT_DEPTH_SIZE", 28)) {
    /*                                     ^            */
#ifdef GL_INTERNALFORMAT_DEPTH_SIZE
      *iv_return = GL_INTERNALFORMAT_DEPTH_SIZE;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_INTERNALFORMAT_DEPTH_TYPE", 28)) {
    /*                                     ^            */
#ifdef GL_INTERNALFORMAT_DEPTH_TYPE
      *iv_return = GL_INTERNALFORMAT_DEPTH_TYPE;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case 'I':
    if (memEQ(name, "GL_COPY_WRITE_BUFFER_BINDING", 28)) {
    /*                                     ^            */
#ifdef GL_COPY_WRITE_BUFFER_BINDING
      *iv_return = GL_COPY_WRITE_BUFFER_BINDING;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_CURRENT_VERTEX_ATTRIB_ARB", 28)) {
    /*                                     ^            */
#ifdef GL_CURRENT_VERTEX_ATTRIB_ARB
      *iv_return = GL_CURRENT_VERTEX_ATTRIB_ARB;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_MAT_COLOR_INDEXES_BIT_PGI", 28)) {
    /*                                     ^            */
#ifdef GL_MAT_COLOR_INDEXES_BIT_PGI
      *iv_return = GL_MAT_COLOR_INDEXES_BIT_PGI;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_MAX_VERTEX_IMAGE_UNIFORMS", 28)) {
    /*                                     ^            */
#ifdef GL_MAX_VERTEX_IMAGE_UNIFORMS
      *iv_return = GL_MAX_VERTEX_IMAGE_UNIFORMS;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_OFFSET_TEXTURE_2D_BIAS_NV", 28)) {
    /*                                     ^            */
#ifdef GL_OFFSET_TEXTURE_2D_BIAS_NV
      *iv_return = GL_OFFSET_TEXTURE_2D_BIAS_NV;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_PIXEL_PACK_BUFFER_BINDING", 28)) {
    /*                                     ^            */
#ifdef GL_PIXEL_PACK_BUFFER_BINDING
      *iv_return = GL_PIXEL_PACK_BUFFER_BINDING;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_PROGRAM_ERROR_POSITION_NV", 28)) {
    /*                                     ^            */
#ifdef GL_PROGRAM_ERROR_POSITION_NV
      *iv_return = GL_PROGRAM_ERROR_POSITION_NV;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_UNIFORM_BUFFER_UNIFIED_NV", 28)) {
    /*                                     ^            */
#ifdef GL_UNIFORM_BUFFER_UNIFIED_NV
      *iv_return = GL_UNIFORM_BUFFER_UNIFIED_NV;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_VERTEX_PROGRAM_BINDING_NV", 28)) {
    /*                                     ^            */
#ifdef GL_VERTEX_PROGRAM_BINDING_NV
      *iv_return = GL_VERTEX_PROGRAM_BINDING_NV;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glGetMultiTexParameterIivEXT", 28)) {
    /*                                     ^            */
#ifdef glGetMultiTexParameterIivEXT
      *iv_return = glGetMultiTexParameterIivEXT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glProgramEnvParametersI4ivNV", 28)) {
    /*                                     ^            */
#ifdef glProgramEnvParametersI4ivNV
      *iv_return = glProgramEnvParametersI4ivNV;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case 'K':
    if (memEQ(name, "GL_SAMPLE_ALPHA_TO_MASK_SGIS", 28)) {
    /*                                     ^            */
#ifdef GL_SAMPLE_ALPHA_TO_MASK_SGIS
      *iv_return = GL_SAMPLE_ALPHA_TO_MASK_SGIS;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case 'L':
    if (memEQ(name, "GL_ACTIVE_UNIFORM_MAX_LENGTH", 28)) {
    /*                                     ^            */
#ifdef GL_ACTIVE_UNIFORM_MAX_LENGTH
      *iv_return = GL_ACTIVE_UNIFORM_MAX_LENGTH;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_RENDERBUFFER_STENCIL_SIZE", 28)) {
    /*                                     ^            */
#ifdef GL_RENDERBUFFER_STENCIL_SIZE
      *iv_return = GL_RENDERBUFFER_STENCIL_SIZE;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_UNIFORM_BLOCK_NAME_LENGTH", 28)) {
    /*                                     ^            */
#ifdef GL_UNIFORM_BLOCK_NAME_LENGTH
      *iv_return = GL_UNIFORM_BLOCK_NAME_LENGTH;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case 'N':
    if (memEQ(name, "GL_EDGE_FLAG_ARRAY_COUNT_EXT", 28)) {
    /*                                     ^            */
#ifdef GL_EDGE_FLAG_ARRAY_COUNT_EXT
      *iv_return = GL_EDGE_FLAG_ARRAY_COUNT_EXT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_INTERNALFORMAT_GREEN_SIZE", 28)) {
    /*                                     ^            */
#ifdef GL_INTERNALFORMAT_GREEN_SIZE
      *iv_return = GL_INTERNALFORMAT_GREEN_SIZE;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_INTERNALFORMAT_GREEN_TYPE", 28)) {
    /*                                     ^            */
#ifdef GL_INTERNALFORMAT_GREEN_TYPE
      *iv_return = GL_INTERNALFORMAT_GREEN_TYPE;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_STRICT_DEPTHFUNC_HINT_PGI", 28)) {
    /*                                     ^            */
#ifdef GL_STRICT_DEPTHFUNC_HINT_PGI
      *iv_return = GL_STRICT_DEPTHFUNC_HINT_PGI;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_VERTEX_SHADER_BINDING_EXT", 28)) {
    /*                                     ^            */
#ifdef GL_VERTEX_SHADER_BINDING_EXT
      *iv_return = GL_VERTEX_SHADER_BINDING_EXT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_VERTEX_SUBROUTINE_UNIFORM", 28)) {
    /*                                     ^            */
#ifdef GL_VERTEX_SUBROUTINE_UNIFORM
      *iv_return = GL_VERTEX_SUBROUTINE_UNIFORM;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_WRITE_PIXEL_DATA_RANGE_NV", 28)) {
    /*                                     ^            */
#ifdef GL_WRITE_PIXEL_DATA_RANGE_NV
      *iv_return = GL_WRITE_PIXEL_DATA_RANGE_NV;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case 'O':
    if (memEQ(name, "GL_LIGHT_MODEL_COLOR_CONTROL", 28)) {
    /*                                     ^            */
#ifdef GL_LIGHT_MODEL_COLOR_CONTROL
      *iv_return = GL_LIGHT_MODEL_COLOR_CONTROL;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_MAX_TESS_PATCH_COMPONENTS", 28)) {
    /*                                     ^            */
#ifdef GL_MAX_TESS_PATCH_COMPONENTS
      *iv_return = GL_MAX_TESS_PATCH_COMPONENTS;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_NO_RESET_NOTIFICATION_ARB", 28)) {
    /*                                     ^            */
#ifdef GL_NO_RESET_NOTIFICATION_ARB
      *iv_return = GL_NO_RESET_NOTIFICATION_ARB;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_NUM_SHADER_BINARY_FORMATS", 28)) {
    /*                                     ^            */
#ifdef GL_NUM_SHADER_BINARY_FORMATS
      *iv_return = GL_NUM_SHADER_BINARY_FORMATS;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_PATH_STROKE_COVER_MODE_NV", 28)) {
    /*                                     ^            */
#ifdef GL_PATH_STROKE_COVER_MODE_NV
      *iv_return = GL_PATH_STROKE_COVER_MODE_NV;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_POINT_SPRITE_COORD_ORIGIN", 28)) {
    /*                                     ^            */
#ifdef GL_POINT_SPRITE_COORD_ORIGIN
      *iv_return = GL_POINT_SPRITE_COORD_ORIGIN;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_POLYGON_OFFSET_FACTOR_EXT", 28)) {
    /*                                     ^            */
#ifdef GL_POLYGON_OFFSET_FACTOR_EXT
      *iv_return = GL_POLYGON_OFFSET_FACTOR_EXT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_TRACK_MATRIX_TRANSFORM_NV", 28)) {
    /*                                     ^            */
#ifdef GL_TRACK_MATRIX_TRANSFORM_NV
      *iv_return = GL_TRACK_MATRIX_TRANSFORM_NV;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case 'P':
    if (memEQ(name, "GL_MAX_PROGRAM_CALL_DEPTH_NV", 28)) {
    /*                                     ^            */
#ifdef GL_MAX_PROGRAM_CALL_DEPTH_NV
      *iv_return = GL_MAX_PROGRAM_CALL_DEPTH_NV;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_MAX_PROGRAM_LOOP_DEPTH_NV", 28)) {
    /*                                     ^            */
#ifdef GL_MAX_PROGRAM_LOOP_DEPTH_NV
      *iv_return = GL_MAX_PROGRAM_LOOP_DEPTH_NV;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_PREVIOUS_TEXTURE_INPUT_NV", 28)) {
    /*                                     ^            */
#ifdef GL_PREVIOUS_TEXTURE_INPUT_NV
      *iv_return = GL_PREVIOUS_TEXTURE_INPUT_NV;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_SIGNED_LUMINANCE_ALPHA_NV", 28)) {
    /*                                     ^            */
#ifdef GL_SIGNED_LUMINANCE_ALPHA_NV
      *iv_return = GL_SIGNED_LUMINANCE_ALPHA_NV;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_TRANSFORM_FEEDBACK_PAUSED", 28)) {
    /*                                     ^            */
#ifdef GL_TRANSFORM_FEEDBACK_PAUSED
      *iv_return = GL_TRANSFORM_FEEDBACK_PAUSED;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glStencilThenCoverFillPathNV", 28)) {
    /*                                     ^            */
#ifdef glStencilThenCoverFillPathNV
      *iv_return = glStencilThenCoverFillPathNV;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case 'R':
    if (memEQ(name, "GL_CLIENT_ACTIVE_TEXTURE_ARB", 28)) {
    /*                                     ^            */
#ifdef GL_CLIENT_ACTIVE_TEXTURE_ARB
      *iv_return = GL_CLIENT_ACTIVE_TEXTURE_ARB;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_UNSIGNED_INT_SAMPLER_CUBE", 28)) {
    /*                                     ^            */
#ifdef GL_UNSIGNED_INT_SAMPLER_CUBE
      *iv_return = GL_UNSIGNED_INT_SAMPLER_CUBE;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case 'S':
    if (memEQ(name, "GL_MAX_DEBUG_LOGGED_MESSAGES", 28)) {
    /*                                     ^            */
#ifdef GL_MAX_DEBUG_LOGGED_MESSAGES
      *iv_return = GL_MAX_DEBUG_LOGGED_MESSAGES;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_PATH_DASH_OFFSET_RESET_NV", 28)) {
    /*                                     ^            */
#ifdef GL_PATH_DASH_OFFSET_RESET_NV
      *iv_return = GL_PATH_DASH_OFFSET_RESET_NV;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_SCALED_RESOLVE_NICEST_EXT", 28)) {
    /*                                     ^            */
#ifdef GL_SCALED_RESOLVE_NICEST_EXT
      *iv_return = GL_SCALED_RESOLVE_NICEST_EXT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case 'T':
    if (memEQ(name, "GL_GENERATE_MIPMAP_HINT_SGIS", 28)) {
    /*                                     ^            */
#ifdef GL_GENERATE_MIPMAP_HINT_SGIS
      *iv_return = GL_GENERATE_MIPMAP_HINT_SGIS;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_MAX_COLOR_ATTACHMENTS_EXT", 28)) {
    /*                                     ^            */
#ifdef GL_MAX_COLOR_ATTACHMENTS_EXT
      *iv_return = GL_MAX_COLOR_ATTACHMENTS_EXT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_MAX_CONVOLUTION_WIDTH_EXT", 28)) {
    /*                                     ^            */
#ifdef GL_MAX_CONVOLUTION_WIDTH_EXT
      *iv_return = GL_MAX_CONVOLUTION_WIDTH_EXT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_TEXTURE_BINDING_RECTANGLE", 28)) {
    /*                                     ^            */
#ifdef GL_TEXTURE_BINDING_RECTANGLE
      *iv_return = GL_TEXTURE_BINDING_RECTANGLE;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_VERTEX_PROGRAM_POINT_SIZE", 28)) {
    /*                                     ^            */
#ifdef GL_VERTEX_PROGRAM_POINT_SIZE
      *iv_return = GL_VERTEX_PROGRAM_POINT_SIZE;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case 'U':
    if (memEQ(name, "GL_DEBUG_SEVERITY_MEDIUM_AMD", 28)) {
    /*                                     ^            */
#ifdef GL_DEBUG_SEVERITY_MEDIUM_AMD
      *iv_return = GL_DEBUG_SEVERITY_MEDIUM_AMD;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_DEBUG_SEVERITY_MEDIUM_ARB", 28)) {
    /*                                     ^            */
#ifdef GL_DEBUG_SEVERITY_MEDIUM_ARB
      *iv_return = GL_DEBUG_SEVERITY_MEDIUM_ARB;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_GEOMETRY_VERTICES_OUT_ARB", 28)) {
    /*                                     ^            */
#ifdef GL_GEOMETRY_VERTICES_OUT_ARB
      *iv_return = GL_GEOMETRY_VERTICES_OUT_ARB;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_GEOMETRY_VERTICES_OUT_EXT", 28)) {
    /*                                     ^            */
#ifdef GL_GEOMETRY_VERTICES_OUT_EXT
      *iv_return = GL_GEOMETRY_VERTICES_OUT_EXT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_MAX_PROGRAM_LOOP_COUNT_NV", 28)) {
    /*                                     ^            */
#ifdef GL_MAX_PROGRAM_LOOP_COUNT_NV
      *iv_return = GL_MAX_PROGRAM_LOOP_COUNT_NV;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_OBJECT_COMPILE_STATUS_ARB", 28)) {
    /*                                     ^            */
#ifdef GL_OBJECT_COMPILE_STATUS_ARB
      *iv_return = GL_OBJECT_COMPILE_STATUS_ARB;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_SAMPLE_COVERAGE_VALUE_ARB", 28)) {
    /*                                     ^            */
#ifdef GL_SAMPLE_COVERAGE_VALUE_ARB
      *iv_return = GL_SAMPLE_COVERAGE_VALUE_ARB;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_STENCIL_BACK_OP_VALUE_AMD", 28)) {
    /*                                     ^            */
#ifdef GL_STENCIL_BACK_OP_VALUE_AMD
      *iv_return = GL_STENCIL_BACK_OP_VALUE_AMD;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case 'Y':
    if (memEQ(name, "GL_FOG_COORDINATE_ARRAY_TYPE", 28)) {
    /*                                     ^            */
#ifdef GL_FOG_COORDINATE_ARRAY_TYPE
      *iv_return = GL_FOG_COORDINATE_ARRAY_TYPE;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case 'Z':
    if (memEQ(name, "GL_COLOR_TABLE_BLUE_SIZE_EXT", 28)) {
    /*                                     ^            */
#ifdef GL_COLOR_TABLE_BLUE_SIZE_EXT
      *iv_return = GL_COLOR_TABLE_BLUE_SIZE_EXT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_COLOR_TABLE_BLUE_SIZE_SGI", 28)) {
    /*                                     ^            */
#ifdef GL_COLOR_TABLE_BLUE_SIZE_SGI
      *iv_return = GL_COLOR_TABLE_BLUE_SIZE_SGI;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_MAX_RENDERBUFFER_SIZE_EXT", 28)) {
    /*                                     ^            */
#ifdef GL_MAX_RENDERBUFFER_SIZE_EXT
      *iv_return = GL_MAX_RENDERBUFFER_SIZE_EXT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_RENDERBUFFER_RED_SIZE_EXT", 28)) {
    /*                                     ^            */
#ifdef GL_RENDERBUFFER_RED_SIZE_EXT
      *iv_return = GL_RENDERBUFFER_RED_SIZE_EXT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case '_':
    if (memEQ(name, "GLEW_AMD_vertex_shader_layer", 28)) {
    /*                                     ^            */
#ifdef GLEW_AMD_vertex_shader_layer
      *iv_return = GLEW_AMD_vertex_shader_layer;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GLEW_ARB_vertex_attrib_64bit", 28)) {
    /*                                     ^            */
#ifdef GLEW_ARB_vertex_attrib_64bit
      *iv_return = GLEW_ARB_vertex_attrib_64bit;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GLEW_EXT_vertex_attrib_64bit", 28)) {
    /*                                     ^            */
#ifdef GLEW_EXT_vertex_attrib_64bit
      *iv_return = GLEW_EXT_vertex_attrib_64bit;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GLEW_INTEL_performance_query", 28)) {
    /*                                     ^            */
#ifdef GLEW_INTEL_performance_query
      *iv_return = GLEW_INTEL_performance_query;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GLEW_SGIS_texture_edge_clamp", 28)) {
    /*                                     ^            */
#ifdef GLEW_SGIS_texture_edge_clamp
      *iv_return = GLEW_SGIS_texture_edge_clamp;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GLEW_SGI_texture_color_table", 28)) {
    /*                                     ^            */
#ifdef GLEW_SGI_texture_color_table
      *iv_return = GLEW_SGI_texture_color_table;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_AMD_occlusion_query_event", 28)) {
    /*                                     ^            */
#ifdef GL_AMD_occlusion_query_event
      *iv_return = GL_AMD_occlusion_query_event;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_ARB_get_texture_sub_image", 28)) {
    /*                                     ^            */
#ifdef GL_ARB_get_texture_sub_image
      *iv_return = GL_ARB_get_texture_sub_image;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_CLIENT_ATTRIB_STACK_DEPTH", 28)) {
    /*                                     ^            */
#ifdef GL_CLIENT_ATTRIB_STACK_DEPTH
      *iv_return = GL_CLIENT_ATTRIB_STACK_DEPTH;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_DEBUG_CALLBACK_USER_PARAM", 28)) {
    /*                                     ^            */
#ifdef GL_DEBUG_CALLBACK_USER_PARAM
      *iv_return = GL_DEBUG_CALLBACK_USER_PARAM;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_DOT_PRODUCT_TEXTURE_1D_NV", 28)) {
    /*                                     ^            */
#ifdef GL_DOT_PRODUCT_TEXTURE_1D_NV
      *iv_return = GL_DOT_PRODUCT_TEXTURE_1D_NV;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_DOT_PRODUCT_TEXTURE_2D_NV", 28)) {
    /*                                     ^            */
#ifdef GL_DOT_PRODUCT_TEXTURE_2D_NV
      *iv_return = GL_DOT_PRODUCT_TEXTURE_2D_NV;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_DOT_PRODUCT_TEXTURE_3D_NV", 28)) {
    /*                                     ^            */
#ifdef GL_DOT_PRODUCT_TEXTURE_3D_NV
      *iv_return = GL_DOT_PRODUCT_TEXTURE_3D_NV;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_EXT_compiled_vertex_array", 28)) {
    /*                                     ^            */
#ifdef GL_EXT_compiled_vertex_array
      *iv_return = GL_EXT_compiled_vertex_array;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_FRAMEBUFFER_DEFAULT_WIDTH", 28)) {
    /*                                     ^            */
#ifdef GL_FRAMEBUFFER_DEFAULT_WIDTH
      *iv_return = GL_FRAMEBUFFER_DEFAULT_WIDTH;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_IMAGE_COMPATIBILITY_CLASS", 28)) {
    /*                                     ^            */
#ifdef GL_IMAGE_COMPATIBILITY_CLASS
      *iv_return = GL_IMAGE_COMPATIBILITY_CLASS;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_LUMINANCE16_ALPHA16_SNORM", 28)) {
    /*                                     ^            */
#ifdef GL_LUMINANCE16_ALPHA16_SNORM
      *iv_return = GL_LUMINANCE16_ALPHA16_SNORM;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_MAX_MODELVIEW_STACK_DEPTH", 28)) {
    /*                                     ^            */
#ifdef GL_MAX_MODELVIEW_STACK_DEPTH
      *iv_return = GL_MAX_MODELVIEW_STACK_DEPTH;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_OFFSET_HILO_TEXTURE_2D_NV", 28)) {
    /*                                     ^            */
#ifdef GL_OFFSET_HILO_TEXTURE_2D_NV
      *iv_return = GL_OFFSET_HILO_TEXTURE_2D_NV;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_PATCH_DEFAULT_INNER_LEVEL", 28)) {
    /*                                     ^            */
#ifdef GL_PATCH_DEFAULT_INNER_LEVEL
      *iv_return = GL_PATCH_DEFAULT_INNER_LEVEL;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_PATCH_DEFAULT_OUTER_LEVEL", 28)) {
    /*                                     ^            */
#ifdef GL_PATCH_DEFAULT_OUTER_LEVEL
      *iv_return = GL_PATCH_DEFAULT_OUTER_LEVEL;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_SGIS_texture_border_clamp", 28)) {
    /*                                     ^            */
#ifdef GL_SGIS_texture_border_clamp
      *iv_return = GL_SGIS_texture_border_clamp;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case 'a':
    if (memEQ(name, "GLEW_ARB_direct_state_access", 28)) {
    /*                                     ^            */
#ifdef GLEW_ARB_direct_state_access
      *iv_return = GLEW_ARB_direct_state_access;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GLEW_EXT_direct_state_access", 28)) {
    /*                                     ^            */
#ifdef GLEW_EXT_direct_state_access
      *iv_return = GLEW_EXT_direct_state_access;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_IBM_multimode_draw_arrays", 28)) {
    /*                                     ^            */
#ifdef GL_IBM_multimode_draw_arrays
      *iv_return = GL_IBM_multimode_draw_arrays;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glClearNamedBufferSubDataEXT", 28)) {
    /*                                     ^            */
#ifdef glClearNamedBufferSubDataEXT
      *iv_return = glClearNamedBufferSubDataEXT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glDeleteTransformFeedbacksNV", 28)) {
    /*                                     ^            */
#ifdef glDeleteTransformFeedbacksNV
      *iv_return = glDeleteTransformFeedbacksNV;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case 'b':
    if (memEQ(name, "GLEW_ARB_ES3_1_compatibility", 28)) {
    /*                                     ^            */
#ifdef GLEW_ARB_ES3_1_compatibility
      *iv_return = GLEW_ARB_ES3_1_compatibility;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GLEW_ARB_ES3_2_compatibility", 28)) {
    /*                                     ^            */
#ifdef GLEW_ARB_ES3_2_compatibility
      *iv_return = GLEW_ARB_ES3_2_compatibility;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_REGAL_ES1_0_compatibility", 28)) {
    /*                                     ^            */
#ifdef GL_REGAL_ES1_0_compatibility
      *iv_return = GL_REGAL_ES1_0_compatibility;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_REGAL_ES1_1_compatibility", 28)) {
    /*                                     ^            */
#ifdef GL_REGAL_ES1_1_compatibility
      *iv_return = GL_REGAL_ES1_1_compatibility;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_SGIX_texture_multi_buffer", 28)) {
    /*                                     ^            */
#ifdef GL_SGIX_texture_multi_buffer
      *iv_return = GL_SGIX_texture_multi_buffer;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case 'c':
    if (memEQ(name, "GLEW_ARB_shader_bit_encoding", 28)) {
    /*                                     ^            */
#ifdef GLEW_ARB_shader_bit_encoding
      *iv_return = GLEW_ARB_shader_bit_encoding;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GLEW_NV_clip_space_w_scaling", 28)) {
    /*                                     ^            */
#ifdef GLEW_NV_clip_space_w_scaling
      *iv_return = GLEW_NV_clip_space_w_scaling;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_SGIX_convolution_accuracy", 28)) {
    /*                                     ^            */
#ifdef GL_SGIX_convolution_accuracy
      *iv_return = GL_SGIX_convolution_accuracy;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glGetProgramResourceLocation", 28)) {
    /*                                     ^            */
#ifdef glGetProgramResourceLocation
      *iv_return = glGetProgramResourceLocation;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case 'd':
    if (memEQ(name, "GLEW_AMD_multi_draw_indirect", 28)) {
    /*                                     ^            */
#ifdef GLEW_AMD_multi_draw_indirect
      *iv_return = GLEW_AMD_multi_draw_indirect;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GLEW_AMD_transform_feedback4", 28)) {
    /*                                     ^            */
#ifdef GLEW_AMD_transform_feedback4
      *iv_return = GLEW_AMD_transform_feedback4;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GLEW_ARB_multi_draw_indirect", 28)) {
    /*                                     ^            */
#ifdef GLEW_ARB_multi_draw_indirect
      *iv_return = GLEW_ARB_multi_draw_indirect;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GLEW_ARB_transform_feedback2", 28)) {
    /*                                     ^            */
#ifdef GLEW_ARB_transform_feedback2
      *iv_return = GLEW_ARB_transform_feedback2;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GLEW_ARB_transform_feedback3", 28)) {
    /*                                     ^            */
#ifdef GLEW_ARB_transform_feedback3
      *iv_return = GLEW_ARB_transform_feedback3;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GLEW_EXT_texture_sRGB_decode", 28)) {
    /*                                     ^            */
#ifdef GLEW_EXT_texture_sRGB_decode
      *iv_return = GLEW_EXT_texture_sRGB_decode;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glDrawElementsInstancedANGLE", 28)) {
    /*                                     ^            */
#ifdef glDrawElementsInstancedANGLE
      *iv_return = glDrawElementsInstancedANGLE;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glGetTextureSamplerHandleARB", 28)) {
    /*                                     ^            */
#ifdef glGetTextureSamplerHandleARB
      *iv_return = glGetTextureSamplerHandleARB;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glIsVertexAttribEnabledAPPLE", 28)) {
    /*                                     ^            */
#ifdef glIsVertexAttribEnabledAPPLE
      *iv_return = glIsVertexAttribEnabledAPPLE;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case 'e':
    if (memEQ(name, "GLEW_ARB_texture_compression", 28)) {
    /*                                     ^            */
#ifdef GLEW_ARB_texture_compression
      *iv_return = GLEW_ARB_texture_compression;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GLEW_EXT_draw_range_elements", 28)) {
    /*                                     ^            */
#ifdef GLEW_EXT_draw_range_elements
      *iv_return = GLEW_EXT_draw_range_elements;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GLEW_SGIX_pixel_texture_bits", 28)) {
    /*                                     ^            */
#ifdef GLEW_SGIX_pixel_texture_bits
      *iv_return = GLEW_SGIX_pixel_texture_bits;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GLEW_SGIX_texture_scale_bias", 28)) {
    /*                                     ^            */
#ifdef GLEW_SGIX_texture_scale_bias
      *iv_return = GLEW_SGIX_texture_scale_bias;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_AMD_shader_stencil_export", 28)) {
    /*                                     ^            */
#ifdef GL_AMD_shader_stencil_export
      *iv_return = GL_AMD_shader_stencil_export;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_ARB_shader_stencil_export", 28)) {
    /*                                     ^            */
#ifdef GL_ARB_shader_stencil_export
      *iv_return = GL_ARB_shader_stencil_export;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glCombinerStageParameterfvNV", 28)) {
    /*                                     ^            */
#ifdef glCombinerStageParameterfvNV
      *iv_return = glCombinerStageParameterfvNV;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glCompressedTexSubImage1DARB", 28)) {
    /*                                     ^            */
#ifdef glCompressedTexSubImage1DARB
      *iv_return = glCompressedTexSubImage1DARB;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glCompressedTexSubImage2DARB", 28)) {
    /*                                     ^            */
#ifdef glCompressedTexSubImage2DARB
      *iv_return = glCompressedTexSubImage2DARB;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glCompressedTexSubImage3DARB", 28)) {
    /*                                     ^            */
#ifdef glCompressedTexSubImage3DARB
      *iv_return = glCompressedTexSubImage3DARB;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glFlushVertexArrayRangeAPPLE", 28)) {
    /*                                     ^            */
#ifdef glFlushVertexArrayRangeAPPLE
      *iv_return = glFlushVertexArrayRangeAPPLE;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glGetRenderbufferParameteriv", 28)) {
    /*                                     ^            */
#ifdef glGetRenderbufferParameteriv
      *iv_return = glGetRenderbufferParameteriv;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glGetTextureLevelParameterfv", 28)) {
    /*                                     ^            */
#ifdef glGetTextureLevelParameterfv
      *iv_return = glGetTextureLevelParameterfv;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glGetTextureLevelParameteriv", 28)) {
    /*                                     ^            */
#ifdef glGetTextureLevelParameteriv
      *iv_return = glGetTextureLevelParameteriv;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glGetVertexAttribPointervARB", 28)) {
    /*                                     ^            */
#ifdef glGetVertexAttribPointervARB
      *iv_return = glGetVertexAttribPointervARB;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glIsTextureHandleResidentARB", 28)) {
    /*                                     ^            */
#ifdef glIsTextureHandleResidentARB
      *iv_return = glIsTextureHandleResidentARB;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glMakeImageHandleResidentARB", 28)) {
    /*                                     ^            */
#ifdef glMakeImageHandleResidentARB
      *iv_return = glMakeImageHandleResidentARB;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glMultiDrawArraysIndirectAMD", 28)) {
    /*                                     ^            */
#ifdef glMultiDrawArraysIndirectAMD
      *iv_return = glMultiDrawArraysIndirectAMD;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glVertexAttribArrayObjectATI", 28)) {
    /*                                     ^            */
#ifdef glVertexAttribArrayObjectATI
      *iv_return = glVertexAttribArrayObjectATI;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case 'f':
    if (memEQ(name, "GLEW_AMD_blend_minmax_factor", 28)) {
    /*                                     ^            */
#ifdef GLEW_AMD_blend_minmax_factor
      *iv_return = GLEW_AMD_blend_minmax_factor;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glFramebufferRenderbufferEXT", 28)) {
    /*                                     ^            */
#ifdef glFramebufferRenderbufferEXT
      *iv_return = glFramebufferRenderbufferEXT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glMulticastBlitFramebufferNV", 28)) {
    /*                                     ^            */
#ifdef glMulticastBlitFramebufferNV
      *iv_return = glMulticastBlitFramebufferNV;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case 'i':
    if (memEQ(name, "GLEW_REND_screen_coordinates", 28)) {
    /*                                     ^            */
#ifdef GLEW_REND_screen_coordinates
      *iv_return = GLEW_REND_screen_coordinates;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_ARB_vertex_attrib_binding", 28)) {
    /*                                     ^            */
#ifdef GL_ARB_vertex_attrib_binding
      *iv_return = GL_ARB_vertex_attrib_binding;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glVertexArrayParameteriAPPLE", 28)) {
    /*                                     ^            */
#ifdef glVertexArrayParameteriAPPLE
      *iv_return = glVertexArrayParameteriAPPLE;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case 'm':
    if (memEQ(name, "GLEW_ARB_indirect_parameters", 28)) {
    /*                                     ^            */
#ifdef GLEW_ARB_indirect_parameters
      *iv_return = GLEW_ARB_indirect_parameters;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GLEW_NV_texture_env_combine4", 28)) {
    /*                                     ^            */
#ifdef GLEW_NV_texture_env_combine4
      *iv_return = GLEW_NV_texture_env_combine4;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GLEW_SGIX_blend_alpha_minmax", 28)) {
    /*                                     ^            */
#ifdef GLEW_SGIX_blend_alpha_minmax
      *iv_return = GLEW_SGIX_blend_alpha_minmax;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_AMD_shader_trinary_minmax", 28)) {
    /*                                     ^            */
#ifdef GL_AMD_shader_trinary_minmax
      *iv_return = GL_AMD_shader_trinary_minmax;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_ARB_texture_filter_minmax", 28)) {
    /*                                     ^            */
#ifdef GL_ARB_texture_filter_minmax
      *iv_return = GL_ARB_texture_filter_minmax;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_ATIX_texture_env_combine3", 28)) {
    /*                                     ^            */
#ifdef GL_ATIX_texture_env_combine3
      *iv_return = GL_ATIX_texture_env_combine3;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_EXT_texture_filter_minmax", 28)) {
    /*                                     ^            */
#ifdef GL_EXT_texture_filter_minmax
      *iv_return = GL_EXT_texture_filter_minmax;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glNamedFramebufferParameteri", 28)) {
    /*                                     ^            */
#ifdef glNamedFramebufferParameteri
      *iv_return = glNamedFramebufferParameteri;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case 'n':
    if (memEQ(name, "glCoverStrokePathInstancedNV", 28)) {
    /*                                     ^            */
#ifdef glCoverStrokePathInstancedNV
      *iv_return = glCoverStrokePathInstancedNV;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glStencilFillPathInstancedNV", 28)) {
    /*                                     ^            */
#ifdef glStencilFillPathInstancedNV
      *iv_return = glStencilFillPathInstancedNV;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case 'o':
    if (memEQ(name, "GLEW_AMD_performance_monitor", 28)) {
    /*                                     ^            */
#ifdef GLEW_AMD_performance_monitor
      *iv_return = GLEW_AMD_performance_monitor;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GLEW_AMD_query_buffer_object", 28)) {
    /*                                     ^            */
#ifdef GLEW_AMD_query_buffer_object
      *iv_return = GLEW_AMD_query_buffer_object;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GLEW_ARB_clear_buffer_object", 28)) {
    /*                                     ^            */
#ifdef GLEW_ARB_clear_buffer_object
      *iv_return = GLEW_ARB_clear_buffer_object;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GLEW_ARB_pixel_buffer_object", 28)) {
    /*                                     ^            */
#ifdef GLEW_ARB_pixel_buffer_object
      *iv_return = GLEW_ARB_pixel_buffer_object;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GLEW_ARB_query_buffer_object", 28)) {
    /*                                     ^            */
#ifdef GLEW_ARB_query_buffer_object
      *iv_return = GLEW_ARB_query_buffer_object;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GLEW_ARB_texture_env_combine", 28)) {
    /*                                     ^            */
#ifdef GLEW_ARB_texture_env_combine
      *iv_return = GLEW_ARB_texture_env_combine;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GLEW_ARB_vertex_array_object", 28)) {
    /*                                     ^            */
#ifdef GLEW_ARB_vertex_array_object
      *iv_return = GLEW_ARB_vertex_array_object;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GLEW_ATI_vertex_array_object", 28)) {
    /*                                     ^            */
#ifdef GLEW_ATI_vertex_array_object
      *iv_return = GLEW_ATI_vertex_array_object;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GLEW_EXT_index_array_formats", 28)) {
    /*                                     ^            */
#ifdef GLEW_EXT_index_array_formats
      *iv_return = GLEW_EXT_index_array_formats;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GLEW_EXT_pixel_buffer_object", 28)) {
    /*                                     ^            */
#ifdef GLEW_EXT_pixel_buffer_object
      *iv_return = GLEW_EXT_pixel_buffer_object;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GLEW_EXT_texture_env_combine", 28)) {
    /*                                     ^            */
#ifdef GLEW_EXT_texture_env_combine
      *iv_return = GLEW_EXT_texture_env_combine;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_APPLE_vertex_array_object", 28)) {
    /*                                     ^            */
#ifdef GL_APPLE_vertex_array_object
      *iv_return = GL_APPLE_vertex_array_object;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_ARB_texture_buffer_object", 28)) {
    /*                                     ^            */
#ifdef GL_ARB_texture_buffer_object
      *iv_return = GL_ARB_texture_buffer_object;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_ARB_uniform_buffer_object", 28)) {
    /*                                     ^            */
#ifdef GL_ARB_uniform_buffer_object
      *iv_return = GL_ARB_uniform_buffer_object;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_EXT_texture_buffer_object", 28)) {
    /*                                     ^            */
#ifdef GL_EXT_texture_buffer_object
      *iv_return = GL_EXT_texture_buffer_object;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_KHR_context_flush_control", 28)) {
    /*                                     ^            */
#ifdef GL_KHR_context_flush_control
      *iv_return = GL_KHR_context_flush_control;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_NV_vertex_program2_option", 28)) {
    /*                                     ^            */
#ifdef GL_NV_vertex_program2_option
      *iv_return = GL_NV_vertex_program2_option;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case 'p':
    if (memEQ(name, "GLEW_EXT_blend_func_separate", 28)) {
    /*                                     ^            */
#ifdef GLEW_EXT_blend_func_separate
      *iv_return = GLEW_EXT_blend_func_separate;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case 'q':
    if (memEQ(name, "GL_ARB_internalformat_query2", 28)) {
    /*                                     ^            */
#ifdef GL_ARB_internalformat_query2
      *iv_return = GL_ARB_internalformat_query2;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case 'r':
    if (memEQ(name, "GLEW_ATI_texture_mirror_once", 28)) {
    /*                                     ^            */
#ifdef GLEW_ATI_texture_mirror_once
      *iv_return = GLEW_ATI_texture_mirror_once;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glCopyConvolutionFilter1DEXT", 28)) {
    /*                                     ^            */
#ifdef glCopyConvolutionFilter1DEXT
      *iv_return = glCopyConvolutionFilter1DEXT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glCopyConvolutionFilter2DEXT", 28)) {
    /*                                     ^            */
#ifdef glCopyConvolutionFilter2DEXT
      *iv_return = glCopyConvolutionFilter2DEXT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glEnableVertexArrayAttribEXT", 28)) {
    /*                                     ^            */
#ifdef glEnableVertexArrayAttribEXT
      *iv_return = glEnableVertexArrayAttribEXT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glEnableVertexAttribArrayARB", 28)) {
    /*                                     ^            */
#ifdef glEnableVertexAttribArrayARB
      *iv_return = glEnableVertexAttribArrayARB;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glGetHistogramParameterfvEXT", 28)) {
    /*                                     ^            */
#ifdef glGetHistogramParameterfvEXT
      *iv_return = glGetHistogramParameterfvEXT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glGetHistogramParameterivEXT", 28)) {
    /*                                     ^            */
#ifdef glGetHistogramParameterivEXT
      *iv_return = glGetHistogramParameterivEXT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glProgramLocalParameter4dARB", 28)) {
    /*                                     ^            */
#ifdef glProgramLocalParameter4dARB
      *iv_return = glProgramLocalParameter4dARB;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glProgramLocalParameter4fARB", 28)) {
    /*                                     ^            */
#ifdef glProgramLocalParameter4fARB
      *iv_return = glProgramLocalParameter4fARB;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glProgramLocalParameterI4iNV", 28)) {
    /*                                     ^            */
#ifdef glProgramLocalParameterI4iNV
      *iv_return = glProgramLocalParameterI4iNV;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glProgramNamedParameter4dvNV", 28)) {
    /*                                     ^            */
#ifdef glProgramNamedParameter4dvNV
      *iv_return = glProgramNamedParameter4dvNV;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glProgramNamedParameter4fvNV", 28)) {
    /*                                     ^            */
#ifdef glProgramNamedParameter4fvNV
      *iv_return = glProgramNamedParameter4fvNV;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glTransformFeedbackAttribsNV", 28)) {
    /*                                     ^            */
#ifdef glTransformFeedbackAttribsNV
      *iv_return = glTransformFeedbackAttribsNV;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case 's':
    if (memEQ(name, "GLEW_ARB_tessellation_shader", 28)) {
    /*                                     ^            */
#ifdef GLEW_ARB_tessellation_shader
      *iv_return = GLEW_ARB_tessellation_shader;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GLEW_ARB_texture_multisample", 28)) {
    /*                                     ^            */
#ifdef GLEW_ARB_texture_multisample
      *iv_return = GLEW_ARB_texture_multisample;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GLEW_NV_explicit_multisample", 28)) {
    /*                                     ^            */
#ifdef GLEW_NV_explicit_multisample
      *iv_return = GLEW_NV_explicit_multisample;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glVertexArrayNormalOffsetEXT", 28)) {
    /*                                     ^            */
#ifdef glVertexArrayNormalOffsetEXT
      *iv_return = glVertexArrayNormalOffsetEXT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glVertexArrayVertexOffsetEXT", 28)) {
    /*                                     ^            */
#ifdef glVertexArrayVertexOffsetEXT
      *iv_return = glVertexArrayVertexOffsetEXT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case 't':
    if (memEQ(name, "GLEW_APPLE_aux_depth_stencil", 28)) {
    /*                                     ^            */
#ifdef GLEW_APPLE_aux_depth_stencil
      *iv_return = GLEW_APPLE_aux_depth_stencil;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GLEW_ARB_blend_func_extended", 28)) {
    /*                                     ^            */
#ifdef GLEW_ARB_blend_func_extended
      *iv_return = GLEW_ARB_blend_func_extended;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GLEW_NV_packed_depth_stencil", 28)) {
    /*                                     ^            */
#ifdef GLEW_NV_packed_depth_stencil
      *iv_return = GLEW_NV_packed_depth_stencil;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glGetVariantArrayObjectfvATI", 28)) {
    /*                                     ^            */
#ifdef glGetVariantArrayObjectfvATI
      *iv_return = glGetVariantArrayObjectfvATI;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glGetVariantArrayObjectivATI", 28)) {
    /*                                     ^            */
#ifdef glGetVariantArrayObjectivATI
      *iv_return = glGetVariantArrayObjectivATI;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glImageTransformParameterfHP", 28)) {
    /*                                     ^            */
#ifdef glImageTransformParameterfHP
      *iv_return = glImageTransformParameterfHP;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glImageTransformParameteriHP", 28)) {
    /*                                     ^            */
#ifdef glImageTransformParameteriHP
      *iv_return = glImageTransformParameteriHP;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case 'u':
    if (memEQ(name, "GL_NV_shader_atomic_counters", 28)) {
    /*                                     ^            */
#ifdef GL_NV_shader_atomic_counters
      *iv_return = GL_NV_shader_atomic_counters;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glGetTextureParameterIuivEXT", 28)) {
    /*                                     ^            */
#ifdef glGetTextureParameterIuivEXT
      *iv_return = glGetTextureParameterIuivEXT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glNamedFramebufferTextureEXT", 28)) {
    /*                                     ^            */
#ifdef glNamedFramebufferTextureEXT
      *iv_return = glNamedFramebufferTextureEXT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glProgramUniformHandleui64NV", 28)) {
    /*                                     ^            */
#ifdef glProgramUniformHandleui64NV
      *iv_return = glProgramUniformHandleui64NV;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glPushClientAttribDefaultEXT", 28)) {
    /*                                     ^            */
#ifdef glPushClientAttribDefaultEXT
      *iv_return = glPushClientAttribDefaultEXT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case 'v':
    if (memEQ(name, "GLEW_ARB_post_depth_coverage", 28)) {
    /*                                     ^            */
#ifdef GLEW_ARB_post_depth_coverage
      *iv_return = GLEW_ARB_post_depth_coverage;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GLEW_EXT_post_depth_coverage", 28)) {
    /*                                     ^            */
#ifdef GLEW_EXT_post_depth_coverage
      *iv_return = GLEW_EXT_post_depth_coverage;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GLEW_NV_multisample_coverage", 28)) {
    /*                                     ^            */
#ifdef GLEW_NV_multisample_coverage
      *iv_return = GLEW_NV_multisample_coverage;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case 'x':
    if (memEQ(name, "glColor4fNormal3fVertex3fSUN", 28)) {
    /*                                     ^            */
#ifdef glColor4fNormal3fVertex3fSUN
      *iv_return = glColor4fNormal3fVertex3fSUN;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case 'y':
    if (memEQ(name, "glDrawRangeElementArrayAPPLE", 28)) {
    /*                                     ^            */
#ifdef glDrawRangeElementArrayAPPLE
      *iv_return = glDrawRangeElementArrayAPPLE;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glFramebufferTextureLayerARB", 28)) {
    /*                                     ^            */
#ifdef glFramebufferTextureLayerARB
      *iv_return = glFramebufferTextureLayerARB;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glFramebufferTextureLayerEXT", 28)) {
    /*                                     ^            */
#ifdef glFramebufferTextureLayerEXT
      *iv_return = glFramebufferTextureLayerEXT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glMultiDrawElementArrayAPPLE", 28)) {
    /*                                     ^            */
#ifdef glMultiDrawElementArrayAPPLE
      *iv_return = glMultiDrawElementArrayAPPLE;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  }
  return PERL_constant_NOTFOUND;
}

static int
constant_29 (pTHX_ const char *name, IV *iv_return) {
  /* When generated this function returned values for the list of names given
     here.  However, subsequent manual editing may have added or removed some.
     GLEW_AMD_depth_clamp_separate GLEW_AMD_interleaved_elements
     GLEW_APPLE_flush_buffer_range GLEW_APPLE_vertex_array_range
     GLEW_ARB_internalformat_query GLEW_ARB_map_buffer_alignment
     GLEW_ARB_shading_language_100 GLEW_ARB_sparse_texture_clamp
     GLEW_ARB_texture_border_clamp GLEW_ARB_texture_buffer_range
     GLEW_ARB_texture_env_crossbar GLEW_ARB_texture_query_levels
     GLEW_ARB_vertex_buffer_object GLEW_ATI_text_fragment_shader
     GLEW_ATI_texture_env_combine3 GLEW_ERROR_GL_VERSION_10_ONLY
     GLEW_EXT_packed_depth_stencil GLEW_EXT_polygon_offset_clamp
     GLEW_EXT_texture_mirror_clamp GLEW_GREMEDY_frame_terminator
     GLEW_NVX_linked_gpu_multicast GLEW_NV_depth_range_unclamped
     GLEW_NV_shader_atomic_float64 GLEW_NV_shader_thread_shuffle
     GLEW_NV_stereo_view_rendering GLEW_NV_tessellation_program5
     GLEW_NV_texture_expand_normal GLEW_SGIX_vertex_preclip_hint
     GL_ACTIVE_SUBROUTINE_UNIFORMS GL_ARB_shader_atomic_counters
     GL_ARB_shader_draw_parameters GL_ARB_texture_cube_map_array
     GL_ATOMIC_COUNTER_BARRIER_BIT GL_ATOMIC_COUNTER_BUFFER_SIZE
     GL_BINORMAL_ARRAY_POINTER_EXT GL_BLEND_ADVANCED_COHERENT_NV
     GL_BLEND_PREMULTIPLIED_SRC_NV GL_CIRCULAR_TANGENT_ARC_TO_NV
     GL_COLOR_ARRAY_BUFFER_BINDING GL_COLOR_TABLE_ALPHA_SIZE_EXT
     GL_COLOR_TABLE_ALPHA_SIZE_SGI GL_COLOR_TABLE_GREEN_SIZE_EXT
     GL_COLOR_TABLE_GREEN_SIZE_SGI GL_COLOR_TABLE_INTENSITY_SIZE
     GL_COLOR_TABLE_LUMINANCE_SIZE GL_COMBINER_AB_DOT_PRODUCT_NV
     GL_COMBINER_CD_DOT_PRODUCT_NV GL_COMPRESSED_LUMINANCE_ALPHA
     GL_COMPRESSED_RGBA_BPTC_UNORM GL_COMPRESSED_SIGNED_RG11_EAC
     GL_COMPRESSED_SIGNED_RG_RGTC2 GL_COMPRESSED_TEXTURE_FORMATS
     GL_COMPUTE_SUBROUTINE_UNIFORM GL_CURRENT_FOG_COORDINATE_EXT
     GL_CURRENT_PALETTE_MATRIX_ARB GL_DEBUG_SOURCE_WINDOW_SYSTEM
     GL_DEBUG_TYPE_PERFORMANCE_ARB GL_DEBUG_TYPE_PORTABILITY_ARB
     GL_DEPENDENT_AR_TEXTURE_2D_NV GL_DEPENDENT_GB_TEXTURE_2D_NV
     GL_DEPTH_BUFFER_FLOAT_MODE_NV GL_DEPTH_STENCIL_TEXTURE_MODE
     GL_DUP_LAST_CUBIC_CURVE_TO_NV GL_EDGE_FLAG_ARRAY_ADDRESS_NV
     GL_EDGE_FLAG_ARRAY_STRIDE_EXT GL_ELEMENT_ADDRESS_COMMAND_NV
     GL_EXT_gpu_program_parameters GL_EXT_shared_texture_palette
     GL_EXT_texture_perturb_normal GL_EYE_DISTANCE_TO_POINT_SGIS
     GL_FLOAT_CLEAR_COLOR_VALUE_NV GL_FOG_COORD_ARRAY_ADDRESS_NV
     GL_FONT_TARGET_UNAVAILABLE_NV GL_FORMAT_SUBSAMPLE_24_24_OML
     GL_FRAGMENT_COVERAGE_COLOR_NV GL_FRAMEBUFFER_DEFAULT_HEIGHT
     GL_FRAMEBUFFER_DEFAULT_LAYERS GL_IMAGE_2D_MULTISAMPLE_ARRAY
     GL_INDEX_ARRAY_BUFFER_BINDING GL_INNOCENT_CONTEXT_RESET_ARB
     GL_INTERNALFORMAT_SHARED_SIZE GL_INT_SAMPLER_2D_MULTISAMPLE
     GL_INT_SAMPLER_CUBE_MAP_ARRAY GL_LAST_VERTEX_CONVENTION_EXT
     GL_MAX_ASYNC_DRAW_PIXELS_SGIX GL_MAX_ASYNC_READ_PIXELS_SGIX
     GL_MAX_COMPUTE_IMAGE_UNIFORMS GL_MAX_COMPUTE_UNIFORM_BLOCKS
     GL_MAX_CONVOLUTION_HEIGHT_EXT GL_MAX_PROGRAM_PARAMETERS_ARB
     GL_MAX_PROJECTION_STACK_DEPTH GL_MAX_RATIONAL_EVAL_ORDER_NV
     GL_MAX_RECTANGLE_TEXTURE_SIZE GL_MAX_TEXTURE_IMAGE_UNITS_NV
     GL_MAX_VARYING_COMPONENTS_EXT GL_MAX_VERTEX_ATOMIC_COUNTERS
     GL_MAX_VERTEX_ATTRIB_BINDINGS GL_MAX_VERTEX_UNIFORM_VECTORS
     GL_MIRROR_CLAMP_TO_BORDER_EXT GL_MODELVIEW0_STACK_DEPTH_EXT
     GL_MODELVIEW1_STACK_DEPTH_EXT GL_MULTISAMPLE_FILTER_HINT_NV
     GL_NATIVE_GRAPHICS_HANDLE_PGI GL_NUM_COMPATIBLE_SUBROUTINES
     GL_NUM_FRAGMENT_CONSTANTS_ATI GL_NUM_FRAGMENT_REGISTERS_ATI
     GL_NUM_INSTRUCTIONS_TOTAL_ATI GL_NUM_PROGRAM_BINARY_FORMATS
     GL_NUM_VIRTUAL_PAGE_SIZES_ARB GL_NV_blend_equation_advanced
     GL_NV_fragment_program_option GL_NV_multisample_filter_hint
     GL_NV_parameter_buffer_object GL_NV_texture_compression_vtc
     GL_OBJECT_ACTIVE_UNIFORMS_ARB GL_OBJECT_INFO_LOG_LENGTH_ARB
     GL_OBJECT_VALIDATE_STATUS_ARB GL_OFFSET_TEXTURE_2D_SCALE_NV
     GL_OUTPUT_TEXTURE_COORD10_EXT GL_OUTPUT_TEXTURE_COORD11_EXT
     GL_OUTPUT_TEXTURE_COORD12_EXT GL_OUTPUT_TEXTURE_COORD13_EXT
     GL_OUTPUT_TEXTURE_COORD14_EXT GL_OUTPUT_TEXTURE_COORD15_EXT
     GL_OUTPUT_TEXTURE_COORD16_EXT GL_OUTPUT_TEXTURE_COORD17_EXT
     GL_OUTPUT_TEXTURE_COORD18_EXT GL_OUTPUT_TEXTURE_COORD19_EXT
     GL_OUTPUT_TEXTURE_COORD20_EXT GL_OUTPUT_TEXTURE_COORD21_EXT
     GL_OUTPUT_TEXTURE_COORD22_EXT GL_OUTPUT_TEXTURE_COORD23_EXT
     GL_OUTPUT_TEXTURE_COORD24_EXT GL_OUTPUT_TEXTURE_COORD25_EXT
     GL_OUTPUT_TEXTURE_COORD26_EXT GL_OUTPUT_TEXTURE_COORD27_EXT
     GL_OUTPUT_TEXTURE_COORD28_EXT GL_OUTPUT_TEXTURE_COORD29_EXT
     GL_OUTPUT_TEXTURE_COORD30_EXT GL_OUTPUT_TEXTURE_COORD31_EXT
     GL_PACK_COMPRESSED_BLOCK_SIZE GL_PATH_STENCIL_VALUE_MASK_NV
     GL_POINT_DISTANCE_ATTENUATION GL_POST_COLOR_MATRIX_RED_BIAS
     GL_POST_CONVOLUTION_BLUE_BIAS GL_POST_CONVOLUTION_RED_SCALE
     GL_PRIMITIVE_BOUNDING_BOX_ARB GL_PRIMITIVE_RESTART_INDEX_NV
     GL_PROGRAM_ERROR_POSITION_ARB GL_PROGRAM_NATIVE_ATTRIBS_ARB
     GL_PROXY_TEXTURE_1D_ARRAY_EXT GL_PROXY_TEXTURE_2D_ARRAY_EXT
     GL_PROXY_TEXTURE_CUBE_MAP_ARB GL_PROXY_TEXTURE_CUBE_MAP_EXT
     GL_PROXY_TEXTURE_RECTANGLE_NV GL_QUERY_BY_REGION_NO_WAIT_NV
     GL_QUERY_RESULT_AVAILABLE_ARB GL_RELATIVE_CONIC_CURVE_TO_NV
     GL_RELATIVE_CUBIC_CURVE_TO_NV GL_RENDERBUFFER_BLUE_SIZE_EXT
     GL_RENDERBUFFER_SAMPLES_ANGLE GL_REPLACEMENT_CODE_ARRAY_SUN
     GL_RGBA16_EXTENDED_RANGE_SGIX GL_RGBA_SIGNED_COMPONENTS_EXT
     GL_SAMPLER_2D_RECT_SHADOW_ARB GL_SAMPLER_CUBE_MAP_ARRAY_ARB
     GL_SAMPLE_COVERAGE_INVERT_ARB GL_SCALED_RESOLVE_FASTEST_EXT
     GL_SECONDARY_COLOR_ARRAY_SIZE GL_SECONDARY_COLOR_ARRAY_TYPE
     GL_SECONDARY_INTERPOLATOR_ATI GL_SHADER_STORAGE_BARRIER_BIT
     GL_SHADER_STORAGE_BUFFER_SIZE GL_SHARED_TEXTURE_PALETTE_EXT
     GL_SYNC_CL_EVENT_COMPLETE_ARB GL_SYNC_GPU_COMMANDS_COMPLETE
     GL_TESS_EVALUATION_PROGRAM_NV GL_TESS_EVALUATION_SHADER_BIT
     GL_TESS_EVALUATION_SUBROUTINE GL_TEXTURE_BINDING_BUFFER_ARB
     GL_TEXTURE_BINDING_BUFFER_EXT GL_TEXTURE_CONSTANT_DATA_SUNX
     GL_TEXTURE_COORD_ARRAY_STRIDE GL_TEXTURE_CUBE_MAP_ARRAY_ARB
     GL_TEXTURE_FILTER_CONTROL_EXT GL_TEXTURE_INTENSITY_SIZE_EXT
     GL_TEXTURE_INTENSITY_TYPE_ARB GL_TEXTURE_LUMINANCE_SIZE_EXT
     GL_TEXTURE_LUMINANCE_TYPE_ARB GL_TEXTURE_MAX_ANISOTROPY_EXT
     GL_TEXTURE_RANGE_LENGTH_APPLE GL_TEXTURE_REDUCTION_MODE_ARB
     GL_TEXTURE_REDUCTION_MODE_EXT GL_TEXTURE_STORAGE_HINT_APPLE
     GL_TEXTURE_UPDATE_BARRIER_BIT GL_TRANSFORM_FEEDBACK_BINDING
     GL_TRANSFORM_FEEDBACK_VARYING GL_TRANSPOSE_COLOR_MATRIX_ARB
     GL_TRANSPOSE_MODELVIEW_MATRIX GL_UNIFORM_ADDRESS_COMMAND_NV
     GL_UNIFORM_BUFFER_BINDING_EXT GL_UNSIGNED_INT_IMAGE_2D_RECT
     GL_UNSIGNED_SHORT_1_5_5_5_REV GL_UNSIGNED_SHORT_4_4_4_4_EXT
     GL_UNSIGNED_SHORT_4_4_4_4_REV GL_UNSIGNED_SHORT_5_5_5_1_EXT
     GL_VERTEX_ARRAY_BINDING_APPLE GL_VERTEX_ATTRIB_ARRAY_STRIDE
     GL_VERTEX_CONSISTENT_HINT_PGI GL_VERTEX_ELEMENT_SWIZZLE_AMD
     GL_VERTEX_PROGRAM_TWO_SIDE_NV GL_VERTEX_SHADER_VARIANTS_EXT
     glBindFragDataLocationIndexed glBindTextureUnitParameterEXT
     glBlendFuncSeparateIndexedAMD glCheckNamedFramebufferStatus
     glClientActiveVertexStreamATI glColor4fNormal3fVertex3fvSUN
     glCompressedTextureImage1DEXT glCompressedTextureImage2DEXT
     glCompressedTextureImage3DEXT glCompressedTextureSubImage1D
     glCompressedTextureSubImage2D glCompressedTextureSubImage3D
     glDisableVertexArrayAttribEXT glDisableVertexAttribArrayARB
     glDispatchComputeGroupSizeARB glDrawCommandsStatesAddressNV
     glDrawRangeElementsBaseVertex glDrawTransformFeedbackStream
     glEnableClientStateIndexedEXT glEnableVariantClientStateEXT
     glFlushMappedBufferRangeAPPLE glFlushMappedNamedBufferRange
     glGetColorTableParameterfvEXT glGetColorTableParameterfvSGI
     glGetColorTableParameterivEXT glGetColorTableParameterivSGI
     glGetInternalformatSampleivNV glGetLocalConstantBooleanvEXT
     glGetLocalConstantIntegervEXT glGetMultiTexParameterIuivEXT
     glGetNamedBufferParameteri64v glGetProgramEnvParameterdvARB
     glGetProgramEnvParameterfvARB glGetTransformFeedbackVarying
     glGetVertexArrayIntegeri_vEXT glGetVertexArrayPointeri_vEXT
     glImageTransformParameterfvHP glImageTransformParameterivHP
     glMakeTextureHandleResidentNV glMaxShaderCompilerThreadsARB
     glMultiDrawElementsBaseVertex glMulticastCopyImageSubDataNV
     glMulticastGetQueryObjectivNV glNamedFramebufferDrawBuffers
     glNamedRenderbufferStorageEXT glPathMemoryGlyphIndexArrayNV
     glPixelTransformParameterfEXT glPixelTransformParameteriEXT
     glProgramBufferParametersfvNV glProgramEnvParametersI4uivNV
     glProgramLocalParameter4dvARB glProgramLocalParameter4fvARB
     glProgramLocalParameterI4ivNV glProgramLocalParameterI4uiNV
     glProgramUniformHandleui64ARB glProgramUniformHandleui64vNV
     glTextureImage2DMultisampleNV glTextureImage3DMultisampleNV
     glTextureStorage2DMultisample glTextureStorage3DMultisample
     glTransformFeedbackBufferBase glTransformFeedbackVaryingsNV
     glVDPAURegisterVideoSurfaceNV */
  /* Offset 24 gives the best switch position.  */
  switch (name[24]) {
  case '0':
    if (memEQ(name, "GL_OUTPUT_TEXTURE_COORD10_EXT", 29)) {
    /*                                       ^           */
#ifdef GL_OUTPUT_TEXTURE_COORD10_EXT
      *iv_return = GL_OUTPUT_TEXTURE_COORD10_EXT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_OUTPUT_TEXTURE_COORD20_EXT", 29)) {
    /*                                       ^           */
#ifdef GL_OUTPUT_TEXTURE_COORD20_EXT
      *iv_return = GL_OUTPUT_TEXTURE_COORD20_EXT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_OUTPUT_TEXTURE_COORD30_EXT", 29)) {
    /*                                       ^           */
#ifdef GL_OUTPUT_TEXTURE_COORD30_EXT
      *iv_return = GL_OUTPUT_TEXTURE_COORD30_EXT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case '1':
    if (memEQ(name, "GL_COMPRESSED_SIGNED_RG11_EAC", 29)) {
    /*                                       ^           */
#ifdef GL_COMPRESSED_SIGNED_RG11_EAC
      *iv_return = GL_COMPRESSED_SIGNED_RG11_EAC;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_OUTPUT_TEXTURE_COORD11_EXT", 29)) {
    /*                                       ^           */
#ifdef GL_OUTPUT_TEXTURE_COORD11_EXT
      *iv_return = GL_OUTPUT_TEXTURE_COORD11_EXT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_OUTPUT_TEXTURE_COORD21_EXT", 29)) {
    /*                                       ^           */
#ifdef GL_OUTPUT_TEXTURE_COORD21_EXT
      *iv_return = GL_OUTPUT_TEXTURE_COORD21_EXT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_OUTPUT_TEXTURE_COORD31_EXT", 29)) {
    /*                                       ^           */
#ifdef GL_OUTPUT_TEXTURE_COORD31_EXT
      *iv_return = GL_OUTPUT_TEXTURE_COORD31_EXT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_UNSIGNED_SHORT_5_5_5_1_EXT", 29)) {
    /*                                       ^           */
#ifdef GL_UNSIGNED_SHORT_5_5_5_1_EXT
      *iv_return = GL_UNSIGNED_SHORT_5_5_5_1_EXT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glCompressedTextureImage1DEXT", 29)) {
    /*                                       ^           */
#ifdef glCompressedTextureImage1DEXT
      *iv_return = glCompressedTextureImage1DEXT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case '2':
    if (memEQ(name, "GL_DEPENDENT_AR_TEXTURE_2D_NV", 29)) {
    /*                                       ^           */
#ifdef GL_DEPENDENT_AR_TEXTURE_2D_NV
      *iv_return = GL_DEPENDENT_AR_TEXTURE_2D_NV;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_DEPENDENT_GB_TEXTURE_2D_NV", 29)) {
    /*                                       ^           */
#ifdef GL_DEPENDENT_GB_TEXTURE_2D_NV
      *iv_return = GL_DEPENDENT_GB_TEXTURE_2D_NV;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_OUTPUT_TEXTURE_COORD12_EXT", 29)) {
    /*                                       ^           */
#ifdef GL_OUTPUT_TEXTURE_COORD12_EXT
      *iv_return = GL_OUTPUT_TEXTURE_COORD12_EXT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_OUTPUT_TEXTURE_COORD22_EXT", 29)) {
    /*                                       ^           */
#ifdef GL_OUTPUT_TEXTURE_COORD22_EXT
      *iv_return = GL_OUTPUT_TEXTURE_COORD22_EXT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glCompressedTextureImage2DEXT", 29)) {
    /*                                       ^           */
#ifdef glCompressedTextureImage2DEXT
      *iv_return = glCompressedTextureImage2DEXT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case '3':
    if (memEQ(name, "GL_OUTPUT_TEXTURE_COORD13_EXT", 29)) {
    /*                                       ^           */
#ifdef GL_OUTPUT_TEXTURE_COORD13_EXT
      *iv_return = GL_OUTPUT_TEXTURE_COORD13_EXT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_OUTPUT_TEXTURE_COORD23_EXT", 29)) {
    /*                                       ^           */
#ifdef GL_OUTPUT_TEXTURE_COORD23_EXT
      *iv_return = GL_OUTPUT_TEXTURE_COORD23_EXT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glCompressedTextureImage3DEXT", 29)) {
    /*                                       ^           */
#ifdef glCompressedTextureImage3DEXT
      *iv_return = glCompressedTextureImage3DEXT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case '4':
    if (memEQ(name, "GL_FORMAT_SUBSAMPLE_24_24_OML", 29)) {
    /*                                       ^           */
#ifdef GL_FORMAT_SUBSAMPLE_24_24_OML
      *iv_return = GL_FORMAT_SUBSAMPLE_24_24_OML;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_OUTPUT_TEXTURE_COORD14_EXT", 29)) {
    /*                                       ^           */
#ifdef GL_OUTPUT_TEXTURE_COORD14_EXT
      *iv_return = GL_OUTPUT_TEXTURE_COORD14_EXT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_OUTPUT_TEXTURE_COORD24_EXT", 29)) {
    /*                                       ^           */
#ifdef GL_OUTPUT_TEXTURE_COORD24_EXT
      *iv_return = GL_OUTPUT_TEXTURE_COORD24_EXT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_UNSIGNED_SHORT_4_4_4_4_EXT", 29)) {
    /*                                       ^           */
#ifdef GL_UNSIGNED_SHORT_4_4_4_4_EXT
      *iv_return = GL_UNSIGNED_SHORT_4_4_4_4_EXT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_UNSIGNED_SHORT_4_4_4_4_REV", 29)) {
    /*                                       ^           */
#ifdef GL_UNSIGNED_SHORT_4_4_4_4_REV
      *iv_return = GL_UNSIGNED_SHORT_4_4_4_4_REV;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glProgramLocalParameterI4ivNV", 29)) {
    /*                                       ^           */
#ifdef glProgramLocalParameterI4ivNV
      *iv_return = glProgramLocalParameterI4ivNV;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glProgramLocalParameterI4uiNV", 29)) {
    /*                                       ^           */
#ifdef glProgramLocalParameterI4uiNV
      *iv_return = glProgramLocalParameterI4uiNV;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case '5':
    if (memEQ(name, "GL_OUTPUT_TEXTURE_COORD15_EXT", 29)) {
    /*                                       ^           */
#ifdef GL_OUTPUT_TEXTURE_COORD15_EXT
      *iv_return = GL_OUTPUT_TEXTURE_COORD15_EXT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_OUTPUT_TEXTURE_COORD25_EXT", 29)) {
    /*                                       ^           */
#ifdef GL_OUTPUT_TEXTURE_COORD25_EXT
      *iv_return = GL_OUTPUT_TEXTURE_COORD25_EXT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_UNSIGNED_SHORT_1_5_5_5_REV", 29)) {
    /*                                       ^           */
#ifdef GL_UNSIGNED_SHORT_1_5_5_5_REV
      *iv_return = GL_UNSIGNED_SHORT_1_5_5_5_REV;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case '6':
    if (memEQ(name, "GL_OUTPUT_TEXTURE_COORD16_EXT", 29)) {
    /*                                       ^           */
#ifdef GL_OUTPUT_TEXTURE_COORD16_EXT
      *iv_return = GL_OUTPUT_TEXTURE_COORD16_EXT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_OUTPUT_TEXTURE_COORD26_EXT", 29)) {
    /*                                       ^           */
#ifdef GL_OUTPUT_TEXTURE_COORD26_EXT
      *iv_return = GL_OUTPUT_TEXTURE_COORD26_EXT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glProgramUniformHandleui64ARB", 29)) {
    /*                                       ^           */
#ifdef glProgramUniformHandleui64ARB
      *iv_return = glProgramUniformHandleui64ARB;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glProgramUniformHandleui64vNV", 29)) {
    /*                                       ^           */
#ifdef glProgramUniformHandleui64vNV
      *iv_return = glProgramUniformHandleui64vNV;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case '7':
    if (memEQ(name, "GL_OUTPUT_TEXTURE_COORD17_EXT", 29)) {
    /*                                       ^           */
#ifdef GL_OUTPUT_TEXTURE_COORD17_EXT
      *iv_return = GL_OUTPUT_TEXTURE_COORD17_EXT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_OUTPUT_TEXTURE_COORD27_EXT", 29)) {
    /*                                       ^           */
#ifdef GL_OUTPUT_TEXTURE_COORD27_EXT
      *iv_return = GL_OUTPUT_TEXTURE_COORD27_EXT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case '8':
    if (memEQ(name, "GL_OUTPUT_TEXTURE_COORD18_EXT", 29)) {
    /*                                       ^           */
#ifdef GL_OUTPUT_TEXTURE_COORD18_EXT
      *iv_return = GL_OUTPUT_TEXTURE_COORD18_EXT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_OUTPUT_TEXTURE_COORD28_EXT", 29)) {
    /*                                       ^           */
#ifdef GL_OUTPUT_TEXTURE_COORD28_EXT
      *iv_return = GL_OUTPUT_TEXTURE_COORD28_EXT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case '9':
    if (memEQ(name, "GL_OUTPUT_TEXTURE_COORD19_EXT", 29)) {
    /*                                       ^           */
#ifdef GL_OUTPUT_TEXTURE_COORD19_EXT
      *iv_return = GL_OUTPUT_TEXTURE_COORD19_EXT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_OUTPUT_TEXTURE_COORD29_EXT", 29)) {
    /*                                       ^           */
#ifdef GL_OUTPUT_TEXTURE_COORD29_EXT
      *iv_return = GL_OUTPUT_TEXTURE_COORD29_EXT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case 'A':
    if (memEQ(name, "GL_COMPRESSED_LUMINANCE_ALPHA", 29)) {
    /*                                       ^           */
#ifdef GL_COMPRESSED_LUMINANCE_ALPHA
      *iv_return = GL_COMPRESSED_LUMINANCE_ALPHA;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_FRAMEBUFFER_DEFAULT_LAYERS", 29)) {
    /*                                       ^           */
#ifdef GL_FRAMEBUFFER_DEFAULT_LAYERS
      *iv_return = GL_FRAMEBUFFER_DEFAULT_LAYERS;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_IMAGE_2D_MULTISAMPLE_ARRAY", 29)) {
    /*                                       ^           */
#ifdef GL_IMAGE_2D_MULTISAMPLE_ARRAY
      *iv_return = GL_IMAGE_2D_MULTISAMPLE_ARRAY;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_INT_SAMPLER_2D_MULTISAMPLE", 29)) {
    /*                                       ^           */
#ifdef GL_INT_SAMPLER_2D_MULTISAMPLE
      *iv_return = GL_INT_SAMPLER_2D_MULTISAMPLE;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_INT_SAMPLER_CUBE_MAP_ARRAY", 29)) {
    /*                                       ^           */
#ifdef GL_INT_SAMPLER_CUBE_MAP_ARRAY
      *iv_return = GL_INT_SAMPLER_CUBE_MAP_ARRAY;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_POINT_DISTANCE_ATTENUATION", 29)) {
    /*                                       ^           */
#ifdef GL_POINT_DISTANCE_ATTENUATION
      *iv_return = GL_POINT_DISTANCE_ATTENUATION;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_RENDERBUFFER_SAMPLES_ANGLE", 29)) {
    /*                                       ^           */
#ifdef GL_RENDERBUFFER_SAMPLES_ANGLE
      *iv_return = GL_RENDERBUFFER_SAMPLES_ANGLE;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_TESS_EVALUATION_PROGRAM_NV", 29)) {
    /*                                       ^           */
#ifdef GL_TESS_EVALUATION_PROGRAM_NV
      *iv_return = GL_TESS_EVALUATION_PROGRAM_NV;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_TEXTURE_RANGE_LENGTH_APPLE", 29)) {
    /*                                       ^           */
#ifdef GL_TEXTURE_RANGE_LENGTH_APPLE
      *iv_return = GL_TEXTURE_RANGE_LENGTH_APPLE;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_TEXTURE_STORAGE_HINT_APPLE", 29)) {
    /*                                       ^           */
#ifdef GL_TEXTURE_STORAGE_HINT_APPLE
      *iv_return = GL_TEXTURE_STORAGE_HINT_APPLE;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_TRANSPOSE_MODELVIEW_MATRIX", 29)) {
    /*                                       ^           */
#ifdef GL_TRANSPOSE_MODELVIEW_MATRIX
      *iv_return = GL_TRANSPOSE_MODELVIEW_MATRIX;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_VERTEX_ARRAY_BINDING_APPLE", 29)) {
    /*                                       ^           */
#ifdef GL_VERTEX_ARRAY_BINDING_APPLE
      *iv_return = GL_VERTEX_ARRAY_BINDING_APPLE;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glFlushMappedBufferRangeAPPLE", 29)) {
    /*                                       ^           */
#ifdef glFlushMappedBufferRangeAPPLE
      *iv_return = glFlushMappedBufferRangeAPPLE;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case 'C':
    if (memEQ(name, "GL_COMBINER_AB_DOT_PRODUCT_NV", 29)) {
    /*                                       ^           */
#ifdef GL_COMBINER_AB_DOT_PRODUCT_NV
      *iv_return = GL_COMBINER_AB_DOT_PRODUCT_NV;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_COMBINER_CD_DOT_PRODUCT_NV", 29)) {
    /*                                       ^           */
#ifdef GL_COMBINER_CD_DOT_PRODUCT_NV
      *iv_return = GL_COMBINER_CD_DOT_PRODUCT_NV;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_MAX_VERTEX_UNIFORM_VECTORS", 29)) {
    /*                                       ^           */
#ifdef GL_MAX_VERTEX_UNIFORM_VECTORS
      *iv_return = GL_MAX_VERTEX_UNIFORM_VECTORS;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case 'D':
    if (memEQ(name, "GL_DEPTH_BUFFER_FLOAT_MODE_NV", 29)) {
    /*                                       ^           */
#ifdef GL_DEPTH_BUFFER_FLOAT_MODE_NV
      *iv_return = GL_DEPTH_BUFFER_FLOAT_MODE_NV;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_MAX_PROJECTION_STACK_DEPTH", 29)) {
    /*                                       ^           */
#ifdef GL_MAX_PROJECTION_STACK_DEPTH
      *iv_return = GL_MAX_PROJECTION_STACK_DEPTH;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_MAX_VERTEX_ATTRIB_BINDINGS", 29)) {
    /*                                       ^           */
#ifdef GL_MAX_VERTEX_ATTRIB_BINDINGS
      *iv_return = GL_MAX_VERTEX_ATTRIB_BINDINGS;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_VERTEX_PROGRAM_TWO_SIDE_NV", 29)) {
    /*                                       ^           */
#ifdef GL_VERTEX_PROGRAM_TWO_SIDE_NV
      *iv_return = GL_VERTEX_PROGRAM_TWO_SIDE_NV;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case 'E':
    if (memEQ(name, "GL_COLOR_TABLE_ALPHA_SIZE_EXT", 29)) {
    /*                                       ^           */
#ifdef GL_COLOR_TABLE_ALPHA_SIZE_EXT
      *iv_return = GL_COLOR_TABLE_ALPHA_SIZE_EXT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_COLOR_TABLE_ALPHA_SIZE_SGI", 29)) {
    /*                                       ^           */
#ifdef GL_COLOR_TABLE_ALPHA_SIZE_SGI
      *iv_return = GL_COLOR_TABLE_ALPHA_SIZE_SGI;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_COLOR_TABLE_GREEN_SIZE_EXT", 29)) {
    /*                                       ^           */
#ifdef GL_COLOR_TABLE_GREEN_SIZE_EXT
      *iv_return = GL_COLOR_TABLE_GREEN_SIZE_EXT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_COLOR_TABLE_GREEN_SIZE_SGI", 29)) {
    /*                                       ^           */
#ifdef GL_COLOR_TABLE_GREEN_SIZE_SGI
      *iv_return = GL_COLOR_TABLE_GREEN_SIZE_SGI;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_CURRENT_FOG_COORDINATE_EXT", 29)) {
    /*                                       ^           */
#ifdef GL_CURRENT_FOG_COORDINATE_EXT
      *iv_return = GL_CURRENT_FOG_COORDINATE_EXT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_DEBUG_TYPE_PERFORMANCE_ARB", 29)) {
    /*                                       ^           */
#ifdef GL_DEBUG_TYPE_PERFORMANCE_ARB
      *iv_return = GL_DEBUG_TYPE_PERFORMANCE_ARB;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_EDGE_FLAG_ARRAY_STRIDE_EXT", 29)) {
    /*                                       ^           */
#ifdef GL_EDGE_FLAG_ARRAY_STRIDE_EXT
      *iv_return = GL_EDGE_FLAG_ARRAY_STRIDE_EXT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_FRAMEBUFFER_DEFAULT_HEIGHT", 29)) {
    /*                                       ^           */
#ifdef GL_FRAMEBUFFER_DEFAULT_HEIGHT
      *iv_return = GL_FRAMEBUFFER_DEFAULT_HEIGHT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_MAX_RATIONAL_EVAL_ORDER_NV", 29)) {
    /*                                       ^           */
#ifdef GL_MAX_RATIONAL_EVAL_ORDER_NV
      *iv_return = GL_MAX_RATIONAL_EVAL_ORDER_NV;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_NATIVE_GRAPHICS_HANDLE_PGI", 29)) {
    /*                                       ^           */
#ifdef GL_NATIVE_GRAPHICS_HANDLE_PGI
      *iv_return = GL_NATIVE_GRAPHICS_HANDLE_PGI;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_PRIMITIVE_RESTART_INDEX_NV", 29)) {
    /*                                       ^           */
#ifdef GL_PRIMITIVE_RESTART_INDEX_NV
      *iv_return = GL_PRIMITIVE_RESTART_INDEX_NV;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_QUERY_RESULT_AVAILABLE_ARB", 29)) {
    /*                                       ^           */
#ifdef GL_QUERY_RESULT_AVAILABLE_ARB
      *iv_return = GL_QUERY_RESULT_AVAILABLE_ARB;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_RENDERBUFFER_BLUE_SIZE_EXT", 29)) {
    /*                                       ^           */
#ifdef GL_RENDERBUFFER_BLUE_SIZE_EXT
      *iv_return = GL_RENDERBUFFER_BLUE_SIZE_EXT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_SHARED_TEXTURE_PALETTE_EXT", 29)) {
    /*                                       ^           */
#ifdef GL_SHARED_TEXTURE_PALETTE_EXT
      *iv_return = GL_SHARED_TEXTURE_PALETTE_EXT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_SYNC_CL_EVENT_COMPLETE_ARB", 29)) {
    /*                                       ^           */
#ifdef GL_SYNC_CL_EVENT_COMPLETE_ARB
      *iv_return = GL_SYNC_CL_EVENT_COMPLETE_ARB;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_TEXTURE_INTENSITY_SIZE_EXT", 29)) {
    /*                                       ^           */
#ifdef GL_TEXTURE_INTENSITY_SIZE_EXT
      *iv_return = GL_TEXTURE_INTENSITY_SIZE_EXT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_TEXTURE_INTENSITY_TYPE_ARB", 29)) {
    /*                                       ^           */
#ifdef GL_TEXTURE_INTENSITY_TYPE_ARB
      *iv_return = GL_TEXTURE_INTENSITY_TYPE_ARB;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_TEXTURE_LUMINANCE_SIZE_EXT", 29)) {
    /*                                       ^           */
#ifdef GL_TEXTURE_LUMINANCE_SIZE_EXT
      *iv_return = GL_TEXTURE_LUMINANCE_SIZE_EXT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_TEXTURE_LUMINANCE_TYPE_ARB", 29)) {
    /*                                       ^           */
#ifdef GL_TEXTURE_LUMINANCE_TYPE_ARB
      *iv_return = GL_TEXTURE_LUMINANCE_TYPE_ARB;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_TEXTURE_REDUCTION_MODE_ARB", 29)) {
    /*                                       ^           */
#ifdef GL_TEXTURE_REDUCTION_MODE_ARB
      *iv_return = GL_TEXTURE_REDUCTION_MODE_ARB;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_TEXTURE_REDUCTION_MODE_EXT", 29)) {
    /*                                       ^           */
#ifdef GL_TEXTURE_REDUCTION_MODE_EXT
      *iv_return = GL_TEXTURE_REDUCTION_MODE_EXT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_VERTEX_ELEMENT_SWIZZLE_AMD", 29)) {
    /*                                       ^           */
#ifdef GL_VERTEX_ELEMENT_SWIZZLE_AMD
      *iv_return = GL_VERTEX_ELEMENT_SWIZZLE_AMD;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case 'F':
    if (memEQ(name, "GL_ACTIVE_SUBROUTINE_UNIFORMS", 29)) {
    /*                                       ^           */
#ifdef GL_ACTIVE_SUBROUTINE_UNIFORMS
      *iv_return = GL_ACTIVE_SUBROUTINE_UNIFORMS;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_MAX_COMPUTE_IMAGE_UNIFORMS", 29)) {
    /*                                       ^           */
#ifdef GL_MAX_COMPUTE_IMAGE_UNIFORMS
      *iv_return = GL_MAX_COMPUTE_IMAGE_UNIFORMS;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case 'G':
    if (memEQ(name, "GL_UNIFORM_BUFFER_BINDING_EXT", 29)) {
    /*                                       ^           */
#ifdef GL_UNIFORM_BUFFER_BINDING_EXT
      *iv_return = GL_UNIFORM_BUFFER_BINDING_EXT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case 'H':
    if (memEQ(name, "GL_MODELVIEW0_STACK_DEPTH_EXT", 29)) {
    /*                                       ^           */
#ifdef GL_MODELVIEW0_STACK_DEPTH_EXT
      *iv_return = GL_MODELVIEW0_STACK_DEPTH_EXT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_MODELVIEW1_STACK_DEPTH_EXT", 29)) {
    /*                                       ^           */
#ifdef GL_MODELVIEW1_STACK_DEPTH_EXT
      *iv_return = GL_MODELVIEW1_STACK_DEPTH_EXT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_OBJECT_INFO_LOG_LENGTH_ARB", 29)) {
    /*                                       ^           */
#ifdef GL_OBJECT_INFO_LOG_LENGTH_ARB
      *iv_return = GL_OBJECT_INFO_LOG_LENGTH_ARB;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case 'I':
    if (memEQ(name, "GL_COMPUTE_SUBROUTINE_UNIFORM", 29)) {
    /*                                       ^           */
#ifdef GL_COMPUTE_SUBROUTINE_UNIFORM
      *iv_return = GL_COMPUTE_SUBROUTINE_UNIFORM;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_QUERY_BY_REGION_NO_WAIT_NV", 29)) {
    /*                                       ^           */
#ifdef GL_QUERY_BY_REGION_NO_WAIT_NV
      *iv_return = GL_QUERY_BY_REGION_NO_WAIT_NV;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case 'L':
    if (memEQ(name, "GL_FONT_TARGET_UNAVAILABLE_NV", 29)) {
    /*                                       ^           */
#ifdef GL_FONT_TARGET_UNAVAILABLE_NV
      *iv_return = GL_FONT_TARGET_UNAVAILABLE_NV;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_MAX_COMPUTE_UNIFORM_BLOCKS", 29)) {
    /*                                       ^           */
#ifdef GL_MAX_COMPUTE_UNIFORM_BLOCKS
      *iv_return = GL_MAX_COMPUTE_UNIFORM_BLOCKS;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_NUM_INSTRUCTIONS_TOTAL_ATI", 29)) {
    /*                                       ^           */
#ifdef GL_NUM_INSTRUCTIONS_TOTAL_ATI
      *iv_return = GL_NUM_INSTRUCTIONS_TOTAL_ATI;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_OFFSET_TEXTURE_2D_SCALE_NV", 29)) {
    /*                                       ^           */
#ifdef GL_OFFSET_TEXTURE_2D_SCALE_NV
      *iv_return = GL_OFFSET_TEXTURE_2D_SCALE_NV;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_PROXY_TEXTURE_RECTANGLE_NV", 29)) {
    /*                                       ^           */
#ifdef GL_PROXY_TEXTURE_RECTANGLE_NV
      *iv_return = GL_PROXY_TEXTURE_RECTANGLE_NV;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_TEXTURE_FILTER_CONTROL_EXT", 29)) {
    /*                                       ^           */
#ifdef GL_TEXTURE_FILTER_CONTROL_EXT
      *iv_return = GL_TEXTURE_FILTER_CONTROL_EXT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case 'N':
    if (memEQ(name, "GL_BLEND_ADVANCED_COHERENT_NV", 29)) {
    /*                                       ^           */
#ifdef GL_BLEND_ADVANCED_COHERENT_NV
      *iv_return = GL_BLEND_ADVANCED_COHERENT_NV;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_COLOR_ARRAY_BUFFER_BINDING", 29)) {
    /*                                       ^           */
#ifdef GL_COLOR_ARRAY_BUFFER_BINDING
      *iv_return = GL_COLOR_ARRAY_BUFFER_BINDING;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_ELEMENT_ADDRESS_COMMAND_NV", 29)) {
    /*                                       ^           */
#ifdef GL_ELEMENT_ADDRESS_COMMAND_NV
      *iv_return = GL_ELEMENT_ADDRESS_COMMAND_NV;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_INDEX_ARRAY_BUFFER_BINDING", 29)) {
    /*                                       ^           */
#ifdef GL_INDEX_ARRAY_BUFFER_BINDING
      *iv_return = GL_INDEX_ARRAY_BUFFER_BINDING;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_LAST_VERTEX_CONVENTION_EXT", 29)) {
    /*                                       ^           */
#ifdef GL_LAST_VERTEX_CONVENTION_EXT
      *iv_return = GL_LAST_VERTEX_CONVENTION_EXT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_MAX_VERTEX_ATOMIC_COUNTERS", 29)) {
    /*                                       ^           */
#ifdef GL_MAX_VERTEX_ATOMIC_COUNTERS
      *iv_return = GL_MAX_VERTEX_ATOMIC_COUNTERS;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_MULTISAMPLE_FILTER_HINT_NV", 29)) {
    /*                                       ^           */
#ifdef GL_MULTISAMPLE_FILTER_HINT_NV
      *iv_return = GL_MULTISAMPLE_FILTER_HINT_NV;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_PROGRAM_ERROR_POSITION_ARB", 29)) {
    /*                                       ^           */
#ifdef GL_PROGRAM_ERROR_POSITION_ARB
      *iv_return = GL_PROGRAM_ERROR_POSITION_ARB;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_TRANSFORM_FEEDBACK_BINDING", 29)) {
    /*                                       ^           */
#ifdef GL_TRANSFORM_FEEDBACK_BINDING
      *iv_return = GL_TRANSFORM_FEEDBACK_BINDING;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_UNIFORM_ADDRESS_COMMAND_NV", 29)) {
    /*                                       ^           */
#ifdef GL_UNIFORM_ADDRESS_COMMAND_NV
      *iv_return = GL_UNIFORM_ADDRESS_COMMAND_NV;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case 'O':
    if (memEQ(name, "GL_FRAGMENT_COVERAGE_COLOR_NV", 29)) {
    /*                                       ^           */
#ifdef GL_FRAGMENT_COVERAGE_COLOR_NV
      *iv_return = GL_FRAGMENT_COVERAGE_COLOR_NV;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case 'P':
    if (memEQ(name, "GL_PROXY_TEXTURE_CUBE_MAP_ARB", 29)) {
    /*                                       ^           */
#ifdef GL_PROXY_TEXTURE_CUBE_MAP_ARB
      *iv_return = GL_PROXY_TEXTURE_CUBE_MAP_ARB;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_PROXY_TEXTURE_CUBE_MAP_EXT", 29)) {
    /*                                       ^           */
#ifdef GL_PROXY_TEXTURE_CUBE_MAP_EXT
      *iv_return = GL_PROXY_TEXTURE_CUBE_MAP_EXT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_SYNC_GPU_COMMANDS_COMPLETE", 29)) {
    /*                                       ^           */
#ifdef GL_SYNC_GPU_COMMANDS_COMPLETE
      *iv_return = GL_SYNC_GPU_COMMANDS_COMPLETE;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case 'R':
    if (memEQ(name, "GL_ATOMIC_COUNTER_BARRIER_BIT", 29)) {
    /*                                       ^           */
#ifdef GL_ATOMIC_COUNTER_BARRIER_BIT
      *iv_return = GL_ATOMIC_COUNTER_BARRIER_BIT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_BINORMAL_ARRAY_POINTER_EXT", 29)) {
    /*                                       ^           */
#ifdef GL_BINORMAL_ARRAY_POINTER_EXT
      *iv_return = GL_BINORMAL_ARRAY_POINTER_EXT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_BLEND_PREMULTIPLIED_SRC_NV", 29)) {
    /*                                       ^           */
#ifdef GL_BLEND_PREMULTIPLIED_SRC_NV
      *iv_return = GL_BLEND_PREMULTIPLIED_SRC_NV;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_COMPRESSED_SIGNED_RG_RGTC2", 29)) {
    /*                                       ^           */
#ifdef GL_COMPRESSED_SIGNED_RG_RGTC2
      *iv_return = GL_COMPRESSED_SIGNED_RG_RGTC2;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_COMPRESSED_TEXTURE_FORMATS", 29)) {
    /*                                       ^           */
#ifdef GL_COMPRESSED_TEXTURE_FORMATS
      *iv_return = GL_COMPRESSED_TEXTURE_FORMATS;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_MIRROR_CLAMP_TO_BORDER_EXT", 29)) {
    /*                                       ^           */
#ifdef GL_MIRROR_CLAMP_TO_BORDER_EXT
      *iv_return = GL_MIRROR_CLAMP_TO_BORDER_EXT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_NUM_PROGRAM_BINARY_FORMATS", 29)) {
    /*                                       ^           */
#ifdef GL_NUM_PROGRAM_BINARY_FORMATS
      *iv_return = GL_NUM_PROGRAM_BINARY_FORMATS;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_SECONDARY_INTERPOLATOR_ATI", 29)) {
    /*                                       ^           */
#ifdef GL_SECONDARY_INTERPOLATOR_ATI
      *iv_return = GL_SECONDARY_INTERPOLATOR_ATI;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_SHADER_STORAGE_BARRIER_BIT", 29)) {
    /*                                       ^           */
#ifdef GL_SHADER_STORAGE_BARRIER_BIT
      *iv_return = GL_SHADER_STORAGE_BARRIER_BIT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_TESS_EVALUATION_SHADER_BIT", 29)) {
    /*                                       ^           */
#ifdef GL_TESS_EVALUATION_SHADER_BIT
      *iv_return = GL_TESS_EVALUATION_SHADER_BIT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_TEXTURE_BINDING_BUFFER_ARB", 29)) {
    /*                                       ^           */
#ifdef GL_TEXTURE_BINDING_BUFFER_ARB
      *iv_return = GL_TEXTURE_BINDING_BUFFER_ARB;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_TEXTURE_BINDING_BUFFER_EXT", 29)) {
    /*                                       ^           */
#ifdef GL_TEXTURE_BINDING_BUFFER_EXT
      *iv_return = GL_TEXTURE_BINDING_BUFFER_EXT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_TEXTURE_UPDATE_BARRIER_BIT", 29)) {
    /*                                       ^           */
#ifdef GL_TEXTURE_UPDATE_BARRIER_BIT
      *iv_return = GL_TEXTURE_UPDATE_BARRIER_BIT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_TRANSFORM_FEEDBACK_VARYING", 29)) {
    /*                                       ^           */
#ifdef GL_TRANSFORM_FEEDBACK_VARYING
      *iv_return = GL_TRANSFORM_FEEDBACK_VARYING;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glFlushMappedNamedBufferRange", 29)) {
    /*                                       ^           */
#ifdef glFlushMappedNamedBufferRange
      *iv_return = glFlushMappedNamedBufferRange;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case 'S':
    if (memEQ(name, "GL_EDGE_FLAG_ARRAY_ADDRESS_NV", 29)) {
    /*                                       ^           */
#ifdef GL_EDGE_FLAG_ARRAY_ADDRESS_NV
      *iv_return = GL_EDGE_FLAG_ARRAY_ADDRESS_NV;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_FOG_COORD_ARRAY_ADDRESS_NV", 29)) {
    /*                                       ^           */
#ifdef GL_FOG_COORD_ARRAY_ADDRESS_NV
      *iv_return = GL_FOG_COORD_ARRAY_ADDRESS_NV;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_MAX_PROGRAM_PARAMETERS_ARB", 29)) {
    /*                                       ^           */
#ifdef GL_MAX_PROGRAM_PARAMETERS_ARB
      *iv_return = GL_MAX_PROGRAM_PARAMETERS_ARB;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_MAX_VARYING_COMPONENTS_EXT", 29)) {
    /*                                       ^           */
#ifdef GL_MAX_VARYING_COMPONENTS_EXT
      *iv_return = GL_MAX_VARYING_COMPONENTS_EXT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_NUM_FRAGMENT_CONSTANTS_ATI", 29)) {
    /*                                       ^           */
#ifdef GL_NUM_FRAGMENT_CONSTANTS_ATI
      *iv_return = GL_NUM_FRAGMENT_CONSTANTS_ATI;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_NUM_FRAGMENT_REGISTERS_ATI", 29)) {
    /*                                       ^           */
#ifdef GL_NUM_FRAGMENT_REGISTERS_ATI
      *iv_return = GL_NUM_FRAGMENT_REGISTERS_ATI;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_NUM_VIRTUAL_PAGE_SIZES_ARB", 29)) {
    /*                                       ^           */
#ifdef GL_NUM_VIRTUAL_PAGE_SIZES_ARB
      *iv_return = GL_NUM_VIRTUAL_PAGE_SIZES_ARB;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_OBJECT_ACTIVE_UNIFORMS_ARB", 29)) {
    /*                                       ^           */
#ifdef GL_OBJECT_ACTIVE_UNIFORMS_ARB
      *iv_return = GL_OBJECT_ACTIVE_UNIFORMS_ARB;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_OBJECT_VALIDATE_STATUS_ARB", 29)) {
    /*                                       ^           */
#ifdef GL_OBJECT_VALIDATE_STATUS_ARB
      *iv_return = GL_OBJECT_VALIDATE_STATUS_ARB;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_PATH_STENCIL_VALUE_MASK_NV", 29)) {
    /*                                       ^           */
#ifdef GL_PATH_STENCIL_VALUE_MASK_NV
      *iv_return = GL_PATH_STENCIL_VALUE_MASK_NV;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_POST_CONVOLUTION_RED_SCALE", 29)) {
    /*                                       ^           */
#ifdef GL_POST_CONVOLUTION_RED_SCALE
      *iv_return = GL_POST_CONVOLUTION_RED_SCALE;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_PROGRAM_NATIVE_ATTRIBS_ARB", 29)) {
    /*                                       ^           */
#ifdef GL_PROGRAM_NATIVE_ATTRIBS_ARB
      *iv_return = GL_PROGRAM_NATIVE_ATTRIBS_ARB;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_RGBA_SIGNED_COMPONENTS_EXT", 29)) {
    /*                                       ^           */
#ifdef GL_RGBA_SIGNED_COMPONENTS_EXT
      *iv_return = GL_RGBA_SIGNED_COMPONENTS_EXT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_VERTEX_SHADER_VARIANTS_EXT", 29)) {
    /*                                       ^           */
#ifdef GL_VERTEX_SHADER_VARIANTS_EXT
      *iv_return = GL_VERTEX_SHADER_VARIANTS_EXT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case 'T':
    if (memEQ(name, "GL_CIRCULAR_TANGENT_ARC_TO_NV", 29)) {
    /*                                       ^           */
#ifdef GL_CIRCULAR_TANGENT_ARC_TO_NV
      *iv_return = GL_CIRCULAR_TANGENT_ARC_TO_NV;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_DUP_LAST_CUBIC_CURVE_TO_NV", 29)) {
    /*                                       ^           */
#ifdef GL_DUP_LAST_CUBIC_CURVE_TO_NV
      *iv_return = GL_DUP_LAST_CUBIC_CURVE_TO_NV;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_INNOCENT_CONTEXT_RESET_ARB", 29)) {
    /*                                       ^           */
#ifdef GL_INNOCENT_CONTEXT_RESET_ARB
      *iv_return = GL_INNOCENT_CONTEXT_RESET_ARB;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_MAX_CONVOLUTION_HEIGHT_EXT", 29)) {
    /*                                       ^           */
#ifdef GL_MAX_CONVOLUTION_HEIGHT_EXT
      *iv_return = GL_MAX_CONVOLUTION_HEIGHT_EXT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_MAX_TEXTURE_IMAGE_UNITS_NV", 29)) {
    /*                                       ^           */
#ifdef GL_MAX_TEXTURE_IMAGE_UNITS_NV
      *iv_return = GL_MAX_TEXTURE_IMAGE_UNITS_NV;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_NUM_COMPATIBLE_SUBROUTINES", 29)) {
    /*                                       ^           */
#ifdef GL_NUM_COMPATIBLE_SUBROUTINES
      *iv_return = GL_NUM_COMPATIBLE_SUBROUTINES;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_RELATIVE_CONIC_CURVE_TO_NV", 29)) {
    /*                                       ^           */
#ifdef GL_RELATIVE_CONIC_CURVE_TO_NV
      *iv_return = GL_RELATIVE_CONIC_CURVE_TO_NV;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_RELATIVE_CUBIC_CURVE_TO_NV", 29)) {
    /*                                       ^           */
#ifdef GL_RELATIVE_CUBIC_CURVE_TO_NV
      *iv_return = GL_RELATIVE_CUBIC_CURVE_TO_NV;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_SAMPLE_COVERAGE_INVERT_ARB", 29)) {
    /*                                       ^           */
#ifdef GL_SAMPLE_COVERAGE_INVERT_ARB
      *iv_return = GL_SAMPLE_COVERAGE_INVERT_ARB;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_SCALED_RESOLVE_FASTEST_EXT", 29)) {
    /*                                       ^           */
#ifdef GL_SCALED_RESOLVE_FASTEST_EXT
      *iv_return = GL_SCALED_RESOLVE_FASTEST_EXT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_TEXTURE_COORD_ARRAY_STRIDE", 29)) {
    /*                                       ^           */
#ifdef GL_TEXTURE_COORD_ARRAY_STRIDE
      *iv_return = GL_TEXTURE_COORD_ARRAY_STRIDE;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_VERTEX_ATTRIB_ARRAY_STRIDE", 29)) {
    /*                                       ^           */
#ifdef GL_VERTEX_ATTRIB_ARRAY_STRIDE
      *iv_return = GL_VERTEX_ATTRIB_ARRAY_STRIDE;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_VERTEX_CONSISTENT_HINT_PGI", 29)) {
    /*                                       ^           */
#ifdef GL_VERTEX_CONSISTENT_HINT_PGI
      *iv_return = GL_VERTEX_CONSISTENT_HINT_PGI;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case 'U':
    if (memEQ(name, "GL_COMPRESSED_RGBA_BPTC_UNORM", 29)) {
    /*                                       ^           */
#ifdef GL_COMPRESSED_RGBA_BPTC_UNORM
      *iv_return = GL_COMPRESSED_RGBA_BPTC_UNORM;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_FLOAT_CLEAR_COLOR_VALUE_NV", 29)) {
    /*                                       ^           */
#ifdef GL_FLOAT_CLEAR_COLOR_VALUE_NV
      *iv_return = GL_FLOAT_CLEAR_COLOR_VALUE_NV;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_TESS_EVALUATION_SUBROUTINE", 29)) {
    /*                                       ^           */
#ifdef GL_TESS_EVALUATION_SUBROUTINE
      *iv_return = GL_TESS_EVALUATION_SUBROUTINE;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case 'W':
    if (memEQ(name, "GL_SAMPLER_2D_RECT_SHADOW_ARB", 29)) {
    /*                                       ^           */
#ifdef GL_SAMPLER_2D_RECT_SHADOW_ARB
      *iv_return = GL_SAMPLER_2D_RECT_SHADOW_ARB;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case 'X':
    if (memEQ(name, "GL_CURRENT_PALETTE_MATRIX_ARB", 29)) {
    /*                                       ^           */
#ifdef GL_CURRENT_PALETTE_MATRIX_ARB
      *iv_return = GL_CURRENT_PALETTE_MATRIX_ARB;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_PRIMITIVE_BOUNDING_BOX_ARB", 29)) {
    /*                                       ^           */
#ifdef GL_PRIMITIVE_BOUNDING_BOX_ARB
      *iv_return = GL_PRIMITIVE_BOUNDING_BOX_ARB;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_TRANSPOSE_COLOR_MATRIX_ARB", 29)) {
    /*                                       ^           */
#ifdef GL_TRANSPOSE_COLOR_MATRIX_ARB
      *iv_return = GL_TRANSPOSE_COLOR_MATRIX_ARB;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case 'Y':
    if (memEQ(name, "GL_DEBUG_SOURCE_WINDOW_SYSTEM", 29)) {
    /*                                       ^           */
#ifdef GL_DEBUG_SOURCE_WINDOW_SYSTEM
      *iv_return = GL_DEBUG_SOURCE_WINDOW_SYSTEM;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_DEBUG_TYPE_PORTABILITY_ARB", 29)) {
    /*                                       ^           */
#ifdef GL_DEBUG_TYPE_PORTABILITY_ARB
      *iv_return = GL_DEBUG_TYPE_PORTABILITY_ARB;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_PROXY_TEXTURE_1D_ARRAY_EXT", 29)) {
    /*                                       ^           */
#ifdef GL_PROXY_TEXTURE_1D_ARRAY_EXT
      *iv_return = GL_PROXY_TEXTURE_1D_ARRAY_EXT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_PROXY_TEXTURE_2D_ARRAY_EXT", 29)) {
    /*                                       ^           */
#ifdef GL_PROXY_TEXTURE_2D_ARRAY_EXT
      *iv_return = GL_PROXY_TEXTURE_2D_ARRAY_EXT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_REPLACEMENT_CODE_ARRAY_SUN", 29)) {
    /*                                       ^           */
#ifdef GL_REPLACEMENT_CODE_ARRAY_SUN
      *iv_return = GL_REPLACEMENT_CODE_ARRAY_SUN;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_SAMPLER_CUBE_MAP_ARRAY_ARB", 29)) {
    /*                                       ^           */
#ifdef GL_SAMPLER_CUBE_MAP_ARRAY_ARB
      *iv_return = GL_SAMPLER_CUBE_MAP_ARRAY_ARB;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_TEXTURE_CUBE_MAP_ARRAY_ARB", 29)) {
    /*                                       ^           */
#ifdef GL_TEXTURE_CUBE_MAP_ARRAY_ARB
      *iv_return = GL_TEXTURE_CUBE_MAP_ARRAY_ARB;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_TEXTURE_MAX_ANISOTROPY_EXT", 29)) {
    /*                                       ^           */
#ifdef GL_TEXTURE_MAX_ANISOTROPY_EXT
      *iv_return = GL_TEXTURE_MAX_ANISOTROPY_EXT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case '_':
    if (memEQ(name, "GLEW_ERROR_GL_VERSION_10_ONLY", 29)) {
    /*                                       ^           */
#ifdef GLEW_ERROR_GL_VERSION_10_ONLY
      *iv_return = GLEW_ERROR_GL_VERSION_10_ONLY;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GLEW_SGIX_vertex_preclip_hint", 29)) {
    /*                                       ^           */
#ifdef GLEW_SGIX_vertex_preclip_hint
      *iv_return = GLEW_SGIX_vertex_preclip_hint;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_ATOMIC_COUNTER_BUFFER_SIZE", 29)) {
    /*                                       ^           */
#ifdef GL_ATOMIC_COUNTER_BUFFER_SIZE
      *iv_return = GL_ATOMIC_COUNTER_BUFFER_SIZE;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_COLOR_TABLE_INTENSITY_SIZE", 29)) {
    /*                                       ^           */
#ifdef GL_COLOR_TABLE_INTENSITY_SIZE
      *iv_return = GL_COLOR_TABLE_INTENSITY_SIZE;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_COLOR_TABLE_LUMINANCE_SIZE", 29)) {
    /*                                       ^           */
#ifdef GL_COLOR_TABLE_LUMINANCE_SIZE
      *iv_return = GL_COLOR_TABLE_LUMINANCE_SIZE;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_DEPTH_STENCIL_TEXTURE_MODE", 29)) {
    /*                                       ^           */
#ifdef GL_DEPTH_STENCIL_TEXTURE_MODE
      *iv_return = GL_DEPTH_STENCIL_TEXTURE_MODE;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_EYE_DISTANCE_TO_POINT_SGIS", 29)) {
    /*                                       ^           */
#ifdef GL_EYE_DISTANCE_TO_POINT_SGIS
      *iv_return = GL_EYE_DISTANCE_TO_POINT_SGIS;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_INTERNALFORMAT_SHARED_SIZE", 29)) {
    /*                                       ^           */
#ifdef GL_INTERNALFORMAT_SHARED_SIZE
      *iv_return = GL_INTERNALFORMAT_SHARED_SIZE;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_MAX_ASYNC_DRAW_PIXELS_SGIX", 29)) {
    /*                                       ^           */
#ifdef GL_MAX_ASYNC_DRAW_PIXELS_SGIX
      *iv_return = GL_MAX_ASYNC_DRAW_PIXELS_SGIX;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_MAX_ASYNC_READ_PIXELS_SGIX", 29)) {
    /*                                       ^           */
#ifdef GL_MAX_ASYNC_READ_PIXELS_SGIX
      *iv_return = GL_MAX_ASYNC_READ_PIXELS_SGIX;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_MAX_RECTANGLE_TEXTURE_SIZE", 29)) {
    /*                                       ^           */
#ifdef GL_MAX_RECTANGLE_TEXTURE_SIZE
      *iv_return = GL_MAX_RECTANGLE_TEXTURE_SIZE;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_NV_multisample_filter_hint", 29)) {
    /*                                       ^           */
#ifdef GL_NV_multisample_filter_hint
      *iv_return = GL_NV_multisample_filter_hint;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_PACK_COMPRESSED_BLOCK_SIZE", 29)) {
    /*                                       ^           */
#ifdef GL_PACK_COMPRESSED_BLOCK_SIZE
      *iv_return = GL_PACK_COMPRESSED_BLOCK_SIZE;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_POST_COLOR_MATRIX_RED_BIAS", 29)) {
    /*                                       ^           */
#ifdef GL_POST_COLOR_MATRIX_RED_BIAS
      *iv_return = GL_POST_COLOR_MATRIX_RED_BIAS;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_POST_CONVOLUTION_BLUE_BIAS", 29)) {
    /*                                       ^           */
#ifdef GL_POST_CONVOLUTION_BLUE_BIAS
      *iv_return = GL_POST_CONVOLUTION_BLUE_BIAS;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_RGBA16_EXTENDED_RANGE_SGIX", 29)) {
    /*                                       ^           */
#ifdef GL_RGBA16_EXTENDED_RANGE_SGIX
      *iv_return = GL_RGBA16_EXTENDED_RANGE_SGIX;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_SECONDARY_COLOR_ARRAY_SIZE", 29)) {
    /*                                       ^           */
#ifdef GL_SECONDARY_COLOR_ARRAY_SIZE
      *iv_return = GL_SECONDARY_COLOR_ARRAY_SIZE;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_SECONDARY_COLOR_ARRAY_TYPE", 29)) {
    /*                                       ^           */
#ifdef GL_SECONDARY_COLOR_ARRAY_TYPE
      *iv_return = GL_SECONDARY_COLOR_ARRAY_TYPE;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_SHADER_STORAGE_BUFFER_SIZE", 29)) {
    /*                                       ^           */
#ifdef GL_SHADER_STORAGE_BUFFER_SIZE
      *iv_return = GL_SHADER_STORAGE_BUFFER_SIZE;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_TEXTURE_CONSTANT_DATA_SUNX", 29)) {
    /*                                       ^           */
#ifdef GL_TEXTURE_CONSTANT_DATA_SUNX
      *iv_return = GL_TEXTURE_CONSTANT_DATA_SUNX;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_UNSIGNED_INT_IMAGE_2D_RECT", 29)) {
    /*                                       ^           */
#ifdef GL_UNSIGNED_INT_IMAGE_2D_RECT
      *iv_return = GL_UNSIGNED_INT_IMAGE_2D_RECT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glGetVertexArrayIntegeri_vEXT", 29)) {
    /*                                       ^           */
#ifdef glGetVertexArrayIntegeri_vEXT
      *iv_return = glGetVertexArrayIntegeri_vEXT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glGetVertexArrayPointeri_vEXT", 29)) {
    /*                                       ^           */
#ifdef glGetVertexArrayPointeri_vEXT
      *iv_return = glGetVertexArrayPointeri_vEXT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case 'a':
    if (memEQ(name, "GLEW_AMD_depth_clamp_separate", 29)) {
    /*                                       ^           */
#ifdef GLEW_AMD_depth_clamp_separate
      *iv_return = GLEW_AMD_depth_clamp_separate;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GLEW_NV_depth_range_unclamped", 29)) {
    /*                                       ^           */
#ifdef GLEW_NV_depth_range_unclamped
      *iv_return = GLEW_NV_depth_range_unclamped;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_ARB_texture_cube_map_array", 29)) {
    /*                                       ^           */
#ifdef GL_ARB_texture_cube_map_array
      *iv_return = GL_ARB_texture_cube_map_array;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_NV_blend_equation_advanced", 29)) {
    /*                                       ^           */
#ifdef GL_NV_blend_equation_advanced
      *iv_return = GL_NV_blend_equation_advanced;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glClientActiveVertexStreamATI", 29)) {
    /*                                       ^           */
#ifdef glClientActiveVertexStreamATI
      *iv_return = glClientActiveVertexStreamATI;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glCompressedTextureSubImage1D", 29)) {
    /*                                       ^           */
#ifdef glCompressedTextureSubImage1D
      *iv_return = glCompressedTextureSubImage1D;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glCompressedTextureSubImage2D", 29)) {
    /*                                       ^           */
#ifdef glCompressedTextureSubImage2D
      *iv_return = glCompressedTextureSubImage2D;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glCompressedTextureSubImage3D", 29)) {
    /*                                       ^           */
#ifdef glCompressedTextureSubImage3D
      *iv_return = glCompressedTextureSubImage3D;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glDisableVertexAttribArrayARB", 29)) {
    /*                                       ^           */
#ifdef glDisableVertexAttribArrayARB
      *iv_return = glDisableVertexAttribArrayARB;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glMulticastCopyImageSubDataNV", 29)) {
    /*                                       ^           */
#ifdef glMulticastCopyImageSubDataNV
      *iv_return = glMulticastCopyImageSubDataNV;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glTextureStorage2DMultisample", 29)) {
    /*                                       ^           */
#ifdef glTextureStorage2DMultisample
      *iv_return = glTextureStorage2DMultisample;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glTextureStorage3DMultisample", 29)) {
    /*                                       ^           */
#ifdef glTextureStorage3DMultisample
      *iv_return = glTextureStorage3DMultisample;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glVDPAURegisterVideoSurfaceNV", 29)) {
    /*                                       ^           */
#ifdef glVDPAURegisterVideoSurfaceNV
      *iv_return = glVDPAURegisterVideoSurfaceNV;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case 'b':
    if (memEQ(name, "GLEW_ARB_vertex_buffer_object", 29)) {
    /*                                       ^           */
#ifdef GLEW_ARB_vertex_buffer_object
      *iv_return = GLEW_ARB_vertex_buffer_object;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GLEW_ATI_texture_env_combine3", 29)) {
    /*                                       ^           */
#ifdef GLEW_ATI_texture_env_combine3
      *iv_return = GLEW_ATI_texture_env_combine3;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_NV_parameter_buffer_object", 29)) {
    /*                                       ^           */
#ifdef GL_NV_parameter_buffer_object
      *iv_return = GL_NV_parameter_buffer_object;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case 'c':
    if (memEQ(name, "GLEW_ARB_sparse_texture_clamp", 29)) {
    /*                                       ^           */
#ifdef GLEW_ARB_sparse_texture_clamp
      *iv_return = GLEW_ARB_sparse_texture_clamp;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GLEW_ARB_texture_border_clamp", 29)) {
    /*                                       ^           */
#ifdef GLEW_ARB_texture_border_clamp
      *iv_return = GLEW_ARB_texture_border_clamp;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GLEW_EXT_polygon_offset_clamp", 29)) {
    /*                                       ^           */
#ifdef GLEW_EXT_polygon_offset_clamp
      *iv_return = GLEW_EXT_polygon_offset_clamp;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GLEW_EXT_texture_mirror_clamp", 29)) {
    /*                                       ^           */
#ifdef GLEW_EXT_texture_mirror_clamp
      *iv_return = GLEW_EXT_texture_mirror_clamp;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case 'd':
    if (memEQ(name, "glBindFragDataLocationIndexed", 29)) {
    /*                                       ^           */
#ifdef glBindFragDataLocationIndexed
      *iv_return = glBindFragDataLocationIndexed;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glGetProgramEnvParameterdvARB", 29)) {
    /*                                       ^           */
#ifdef glGetProgramEnvParameterdvARB
      *iv_return = glGetProgramEnvParameterdvARB;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glMaxShaderCompilerThreadsARB", 29)) {
    /*                                       ^           */
#ifdef glMaxShaderCompilerThreadsARB
      *iv_return = glMaxShaderCompilerThreadsARB;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glProgramLocalParameter4dvARB", 29)) {
    /*                                       ^           */
#ifdef glProgramLocalParameter4dvARB
      *iv_return = glProgramLocalParameter4dvARB;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case 'e':
    if (memEQ(name, "GLEW_ARB_shading_language_100", 29)) {
    /*                                       ^           */
#ifdef GLEW_ARB_shading_language_100
      *iv_return = GLEW_ARB_shading_language_100;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GLEW_ARB_texture_query_levels", 29)) {
    /*                                       ^           */
#ifdef GLEW_ARB_texture_query_levels
      *iv_return = GLEW_ARB_texture_query_levels;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GLEW_EXT_packed_depth_stencil", 29)) {
    /*                                       ^           */
#ifdef GLEW_EXT_packed_depth_stencil
      *iv_return = GLEW_EXT_packed_depth_stencil;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GLEW_NV_stereo_view_rendering", 29)) {
    /*                                       ^           */
#ifdef GLEW_NV_stereo_view_rendering
      *iv_return = GLEW_NV_stereo_view_rendering;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_ARB_shader_draw_parameters", 29)) {
    /*                                       ^           */
#ifdef GL_ARB_shader_draw_parameters
      *iv_return = GL_ARB_shader_draw_parameters;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_EXT_gpu_program_parameters", 29)) {
    /*                                       ^           */
#ifdef GL_EXT_gpu_program_parameters
      *iv_return = GL_EXT_gpu_program_parameters;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glBindTextureUnitParameterEXT", 29)) {
    /*                                       ^           */
#ifdef glBindTextureUnitParameterEXT
      *iv_return = glBindTextureUnitParameterEXT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glBlendFuncSeparateIndexedAMD", 29)) {
    /*                                       ^           */
#ifdef glBlendFuncSeparateIndexedAMD
      *iv_return = glBlendFuncSeparateIndexedAMD;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glDrawCommandsStatesAddressNV", 29)) {
    /*                                       ^           */
#ifdef glDrawCommandsStatesAddressNV
      *iv_return = glDrawCommandsStatesAddressNV;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glDrawRangeElementsBaseVertex", 29)) {
    /*                                       ^           */
#ifdef glDrawRangeElementsBaseVertex
      *iv_return = glDrawRangeElementsBaseVertex;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glEnableClientStateIndexedEXT", 29)) {
    /*                                       ^           */
#ifdef glEnableClientStateIndexedEXT
      *iv_return = glEnableClientStateIndexedEXT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glGetInternalformatSampleivNV", 29)) {
    /*                                       ^           */
#ifdef glGetInternalformatSampleivNV
      *iv_return = glGetInternalformatSampleivNV;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glMakeTextureHandleResidentNV", 29)) {
    /*                                       ^           */
#ifdef glMakeTextureHandleResidentNV
      *iv_return = glMakeTextureHandleResidentNV;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glMultiDrawElementsBaseVertex", 29)) {
    /*                                       ^           */
#ifdef glMultiDrawElementsBaseVertex
      *iv_return = glMultiDrawElementsBaseVertex;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case 'f':
    if (memEQ(name, "glColor4fNormal3fVertex3fvSUN", 29)) {
    /*                                       ^           */
#ifdef glColor4fNormal3fVertex3fvSUN
      *iv_return = glColor4fNormal3fVertex3fvSUN;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glGetColorTableParameterfvEXT", 29)) {
    /*                                       ^           */
#ifdef glGetColorTableParameterfvEXT
      *iv_return = glGetColorTableParameterfvEXT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glGetColorTableParameterfvSGI", 29)) {
    /*                                       ^           */
#ifdef glGetColorTableParameterfvSGI
      *iv_return = glGetColorTableParameterfvSGI;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glGetProgramEnvParameterfvARB", 29)) {
    /*                                       ^           */
#ifdef glGetProgramEnvParameterfvARB
      *iv_return = glGetProgramEnvParameterfvARB;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glNamedFramebufferDrawBuffers", 29)) {
    /*                                       ^           */
#ifdef glNamedFramebufferDrawBuffers
      *iv_return = glNamedFramebufferDrawBuffers;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glProgramLocalParameter4fvARB", 29)) {
    /*                                       ^           */
#ifdef glProgramLocalParameter4fvARB
      *iv_return = glProgramLocalParameter4fvARB;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case 'g':
    if (memEQ(name, "GLEW_NV_tessellation_program5", 29)) {
    /*                                       ^           */
#ifdef GLEW_NV_tessellation_program5
      *iv_return = GLEW_NV_tessellation_program5;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glNamedRenderbufferStorageEXT", 29)) {
    /*                                       ^           */
#ifdef glNamedRenderbufferStorageEXT
      *iv_return = glNamedRenderbufferStorageEXT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case 'h':
    if (memEQ(name, "GLEW_ATI_text_fragment_shader", 29)) {
    /*                                       ^           */
#ifdef GLEW_ATI_text_fragment_shader
      *iv_return = GLEW_ATI_text_fragment_shader;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case 'i':
    if (memEQ(name, "GLEW_NVX_linked_gpu_multicast", 29)) {
    /*                                       ^           */
#ifdef GLEW_NVX_linked_gpu_multicast
      *iv_return = GLEW_NVX_linked_gpu_multicast;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glDisableVertexArrayAttribEXT", 29)) {
    /*                                       ^           */
#ifdef glDisableVertexArrayAttribEXT
      *iv_return = glDisableVertexArrayAttribEXT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glGetColorTableParameterivEXT", 29)) {
    /*                                       ^           */
#ifdef glGetColorTableParameterivEXT
      *iv_return = glGetColorTableParameterivEXT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glGetColorTableParameterivSGI", 29)) {
    /*                                       ^           */
#ifdef glGetColorTableParameterivSGI
      *iv_return = glGetColorTableParameterivSGI;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glGetMultiTexParameterIuivEXT", 29)) {
    /*                                       ^           */
#ifdef glGetMultiTexParameterIuivEXT
      *iv_return = glGetMultiTexParameterIuivEXT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case 'l':
    if (memEQ(name, "GL_EXT_shared_texture_palette", 29)) {
    /*                                       ^           */
#ifdef GL_EXT_shared_texture_palette
      *iv_return = GL_EXT_shared_texture_palette;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case 'm':
    if (memEQ(name, "GLEW_AMD_interleaved_elements", 29)) {
    /*                                       ^           */
#ifdef GLEW_AMD_interleaved_elements
      *iv_return = GLEW_AMD_interleaved_elements;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case 'n':
    if (memEQ(name, "GLEW_ARB_map_buffer_alignment", 29)) {
    /*                                       ^           */
#ifdef GLEW_ARB_map_buffer_alignment
      *iv_return = GLEW_ARB_map_buffer_alignment;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GLEW_GREMEDY_frame_terminator", 29)) {
    /*                                       ^           */
#ifdef GLEW_GREMEDY_frame_terminator
      *iv_return = GLEW_GREMEDY_frame_terminator;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_ARB_shader_atomic_counters", 29)) {
    /*                                       ^           */
#ifdef GL_ARB_shader_atomic_counters
      *iv_return = GL_ARB_shader_atomic_counters;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_NV_texture_compression_vtc", 29)) {
    /*                                       ^           */
#ifdef GL_NV_texture_compression_vtc
      *iv_return = GL_NV_texture_compression_vtc;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glGetLocalConstantBooleanvEXT", 29)) {
    /*                                       ^           */
#ifdef glGetLocalConstantBooleanvEXT
      *iv_return = glGetLocalConstantBooleanvEXT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glTransformFeedbackVaryingsNV", 29)) {
    /*                                       ^           */
#ifdef glTransformFeedbackVaryingsNV
      *iv_return = glTransformFeedbackVaryingsNV;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case 'o':
    if (memEQ(name, "GLEW_NV_shader_atomic_float64", 29)) {
    /*                                       ^           */
#ifdef GLEW_NV_shader_atomic_float64
      *iv_return = GLEW_NV_shader_atomic_float64;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GLEW_NV_texture_expand_normal", 29)) {
    /*                                       ^           */
#ifdef GLEW_NV_texture_expand_normal
      *iv_return = GLEW_NV_texture_expand_normal;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_EXT_texture_perturb_normal", 29)) {
    /*                                       ^           */
#ifdef GL_EXT_texture_perturb_normal
      *iv_return = GL_EXT_texture_perturb_normal;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case 'p':
    if (memEQ(name, "GL_NV_fragment_program_option", 29)) {
    /*                                       ^           */
#ifdef GL_NV_fragment_program_option
      *iv_return = GL_NV_fragment_program_option;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glTextureImage2DMultisampleNV", 29)) {
    /*                                       ^           */
#ifdef glTextureImage2DMultisampleNV
      *iv_return = glTextureImage2DMultisampleNV;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glTextureImage3DMultisampleNV", 29)) {
    /*                                       ^           */
#ifdef glTextureImage3DMultisampleNV
      *iv_return = glTextureImage3DMultisampleNV;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case 'q':
    if (memEQ(name, "GLEW_ARB_internalformat_query", 29)) {
    /*                                       ^           */
#ifdef GLEW_ARB_internalformat_query
      *iv_return = GLEW_ARB_internalformat_query;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case 'r':
    if (memEQ(name, "GLEW_APPLE_flush_buffer_range", 29)) {
    /*                                       ^           */
#ifdef GLEW_APPLE_flush_buffer_range
      *iv_return = GLEW_APPLE_flush_buffer_range;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GLEW_APPLE_vertex_array_range", 29)) {
    /*                                       ^           */
#ifdef GLEW_APPLE_vertex_array_range
      *iv_return = GLEW_APPLE_vertex_array_range;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GLEW_ARB_texture_buffer_range", 29)) {
    /*                                       ^           */
#ifdef GLEW_ARB_texture_buffer_range
      *iv_return = GLEW_ARB_texture_buffer_range;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glGetLocalConstantIntegervEXT", 29)) {
    /*                                       ^           */
#ifdef glGetLocalConstantIntegervEXT
      *iv_return = glGetLocalConstantIntegervEXT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glGetNamedBufferParameteri64v", 29)) {
    /*                                       ^           */
#ifdef glGetNamedBufferParameteri64v
      *iv_return = glGetNamedBufferParameteri64v;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glGetTransformFeedbackVarying", 29)) {
    /*                                       ^           */
#ifdef glGetTransformFeedbackVarying
      *iv_return = glGetTransformFeedbackVarying;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glImageTransformParameterfvHP", 29)) {
    /*                                       ^           */
#ifdef glImageTransformParameterfvHP
      *iv_return = glImageTransformParameterfvHP;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glImageTransformParameterivHP", 29)) {
    /*                                       ^           */
#ifdef glImageTransformParameterivHP
      *iv_return = glImageTransformParameterivHP;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glPathMemoryGlyphIndexArrayNV", 29)) {
    /*                                       ^           */
#ifdef glPathMemoryGlyphIndexArrayNV
      *iv_return = glPathMemoryGlyphIndexArrayNV;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glPixelTransformParameterfEXT", 29)) {
    /*                                       ^           */
#ifdef glPixelTransformParameterfEXT
      *iv_return = glPixelTransformParameterfEXT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glPixelTransformParameteriEXT", 29)) {
    /*                                       ^           */
#ifdef glPixelTransformParameteriEXT
      *iv_return = glPixelTransformParameteriEXT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glTransformFeedbackBufferBase", 29)) {
    /*                                       ^           */
#ifdef glTransformFeedbackBufferBase
      *iv_return = glTransformFeedbackBufferBase;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case 's':
    if (memEQ(name, "GLEW_ARB_texture_env_crossbar", 29)) {
    /*                                       ^           */
#ifdef GLEW_ARB_texture_env_crossbar
      *iv_return = GLEW_ARB_texture_env_crossbar;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glProgramBufferParametersfvNV", 29)) {
    /*                                       ^           */
#ifdef glProgramBufferParametersfvNV
      *iv_return = glProgramBufferParametersfvNV;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case 't':
    if (memEQ(name, "glCheckNamedFramebufferStatus", 29)) {
    /*                                       ^           */
#ifdef glCheckNamedFramebufferStatus
      *iv_return = glCheckNamedFramebufferStatus;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glDrawTransformFeedbackStream", 29)) {
    /*                                       ^           */
#ifdef glDrawTransformFeedbackStream
      *iv_return = glDrawTransformFeedbackStream;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glEnableVariantClientStateEXT", 29)) {
    /*                                       ^           */
#ifdef glEnableVariantClientStateEXT
      *iv_return = glEnableVariantClientStateEXT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glMulticastGetQueryObjectivNV", 29)) {
    /*                                       ^           */
#ifdef glMulticastGetQueryObjectivNV
      *iv_return = glMulticastGetQueryObjectivNV;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case 'u':
    if (memEQ(name, "GLEW_NV_shader_thread_shuffle", 29)) {
    /*                                       ^           */
#ifdef GLEW_NV_shader_thread_shuffle
      *iv_return = GLEW_NV_shader_thread_shuffle;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glProgramEnvParametersI4uivNV", 29)) {
    /*                                       ^           */
#ifdef glProgramEnvParametersI4uivNV
      *iv_return = glProgramEnvParametersI4uivNV;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case 'z':
    if (memEQ(name, "glDispatchComputeGroupSizeARB", 29)) {
    /*                                       ^           */
#ifdef glDispatchComputeGroupSizeARB
      *iv_return = glDispatchComputeGroupSizeARB;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  }
  return PERL_constant_NOTFOUND;
}

static int
constant_30 (pTHX_ const char *name, IV *iv_return) {
  /* When generated this function returned values for the list of names given
     here.  However, subsequent manual editing may have added or removed some.
     GLEW_AMD_occlusion_query_event GLEW_AMD_shader_stencil_export
     GLEW_AMD_shader_trinary_minmax GLEW_APPLE_vertex_array_object
     GLEW_ARB_get_texture_sub_image GLEW_ARB_internalformat_query2
     GLEW_ARB_shader_stencil_export GLEW_ARB_texture_buffer_object
     GLEW_ARB_texture_filter_minmax GLEW_ARB_uniform_buffer_object
     GLEW_ARB_vertex_attrib_binding GLEW_ATIX_texture_env_combine3
     GLEW_ERROR_GLX_VERSION_11_ONLY GLEW_EXT_compiled_vertex_array
     GLEW_EXT_texture_buffer_object GLEW_EXT_texture_filter_minmax
     GLEW_IBM_multimode_draw_arrays GLEW_KHR_context_flush_control
     GLEW_NV_shader_atomic_counters GLEW_NV_vertex_program2_option
     GLEW_REGAL_ES1_0_compatibility GLEW_REGAL_ES1_1_compatibility
     GLEW_SGIS_texture_border_clamp GLEW_SGIX_convolution_accuracy
     GLEW_SGIX_texture_multi_buffer GL_ACTIVE_ATTRIBUTE_MAX_LENGTH
     GL_ALPHA16_EXTENDED_RANGE_SGIX GL_ARB_fragment_layer_viewport
     GL_ARB_fragment_program_shadow GL_ARB_parallel_shader_compile
     GL_ARB_program_interface_query GL_ARB_separate_shader_objects
     GL_ARB_shader_image_load_store GL_ARB_texture_mirrored_repeat
     GL_ATI_texture_compression_3dc GL_ATOMIC_COUNTER_BUFFER_INDEX
     GL_ATOMIC_COUNTER_BUFFER_START GL_BLEND_ADVANCED_COHERENT_KHR
     GL_BUFFER_FLUSHING_UNMAP_APPLE GL_COLOR_ARRAY_LIST_STRIDE_IBM
     GL_COMBINER_COMPONENT_USAGE_NV GL_COMPRESSED_SIGNED_RED_RGTC1
     GL_COMPRESSED_SLUMINANCE_ALPHA GL_CONSERVATIVE_RASTER_MODE_NV
     GL_CONVOLUTION_BORDER_MODE_EXT GL_CONVOLUTION_FILTER_BIAS_EXT
     GL_CURRENT_SECONDARY_COLOR_EXT GL_DEBUG_CALLBACK_FUNCTION_ARB
     GL_DEBUG_SEVERITY_NOTIFICATION GL_DEPENDENT_RGB_TEXTURE_3D_NV
     GL_DOT_PRODUCT_PASS_THROUGH_NV GL_DUP_FIRST_CUBIC_CURVE_TO_NV
     GL_EDGE_FLAG_ARRAY_POINTER_EXT GL_ELEMENT_ARRAY_POINTER_APPLE
     GL_EXT_blend_equation_separate GL_EXT_framebuffer_multisample
     GL_EXT_separate_shader_objects GL_EXT_separate_specular_color
     GL_EXT_shader_image_load_store GL_EXT_texture_shared_exponent
     GL_FIRST_VERTEX_CONVENTION_EXT GL_FOG_COORDINATE_ARRAY_STRIDE
     GL_FRAGMENT_COLOR_MATERIAL_EXT GL_FRAGMENT_PROGRAM_BINDING_NV
     GL_FRAGMENT_SUBROUTINE_UNIFORM GL_FRAMEBUFFER_BARRIER_BIT_EXT
     GL_FRAMEBUFFER_DEFAULT_SAMPLES GL_FRAMEBUFFER_UNSUPPORTED_EXT
     GL_GEOMETRY_SHADER_INVOCATIONS GL_GEOMETRY_SUBROUTINE_UNIFORM
     GL_HP_convolution_border_modes GL_IBM_texture_mirrored_repeat
     GL_INDEX_ARRAY_LIST_STRIDE_IBM GL_INTERNALFORMAT_STENCIL_SIZE
     GL_INTERNALFORMAT_STENCIL_TYPE GL_INT_SAMPLER_RENDERBUFFER_NV
     GL_KHR_blend_equation_advanced GL_LOCAL_CONSTANT_DATATYPE_EXT
     GL_LUMINANCE_ALPHA_FLOAT16_ATI GL_LUMINANCE_ALPHA_FLOAT32_ATI
     GL_LUMINANCE_ALPHA_INTEGER_EXT GL_LUMINANCE_ALPHA_SIGNED_SGIX
     GL_MATRIX_INDEX_ARRAY_SIZE_ARB GL_MATRIX_INDEX_ARRAY_TYPE_ARB
     GL_MAX_COMBINED_IMAGE_UNIFORMS GL_MAX_COMBINED_UNIFORM_BLOCKS
     GL_MAX_COMPUTE_ATOMIC_COUNTERS GL_MAX_COMPUTE_WORK_GROUP_SIZE
     GL_MAX_DEBUG_GROUP_STACK_DEPTH GL_MAX_FRAGMENT_IMAGE_UNIFORMS
     GL_MAX_FRAGMENT_UNIFORM_BLOCKS GL_MAX_GEOMETRY_IMAGE_UNIFORMS
     GL_MAX_GEOMETRY_UNIFORM_BLOCKS GL_MAX_PROGRAM_TEMPORARIES_ARB
     GL_MAX_PROGRAM_TEXEL_OFFSET_NV GL_MAX_SPARSE_TEXTURE_SIZE_AMD
     GL_MAX_SPARSE_TEXTURE_SIZE_ARB GL_MAX_TEXTURE_BUFFER_SIZE_ARB
     GL_MAX_TEXTURE_BUFFER_SIZE_EXT GL_MAX_TEXTURE_IMAGE_UNITS_ARB
     GL_MAX_UNIFORM_BUFFER_BINDINGS GL_MIN_PROGRAM_TEXEL_OFFSET_NV
     GL_NORMAL_ARRAY_BUFFER_BINDING GL_NUM_LOOPBACK_COMPONENTS_ATI
     GL_NV_parameter_buffer_object2 GL_OBJECT_ATTACHED_OBJECTS_ARB
     GL_OFFSET_TEXTURE_2D_MATRIX_NV GL_OFFSET_TEXTURE_RECTANGLE_NV
     GL_PACK_COMPRESSED_BLOCK_DEPTH GL_PACK_COMPRESSED_BLOCK_WIDTH
     GL_PATH_OBJECT_BOUNDING_BOX_NV GL_PATH_STROKE_BOUNDING_BOX_NV
     GL_PERFQUERY_COUNTER_RAW_INTEL GL_PERFQUERY_DONOT_FLUSH_INTEL
     GL_PERSPECTIVE_CORRECTION_HINT GL_PIXEL_UNPACK_BUFFER_BINDING
     GL_PN_TRIANGLES_POINT_MODE_ATI GL_POINT_SPRITE_CULL_CLIP_ATIX
     GL_POINT_SPRITE_CULL_MODE_ATIX GL_POST_COLOR_MATRIX_BLUE_BIAS
     GL_POST_COLOR_MATRIX_RED_SCALE GL_POST_CONVOLUTION_ALPHA_BIAS
     GL_POST_CONVOLUTION_BLUE_SCALE GL_POST_CONVOLUTION_GREEN_BIAS
     GL_PROGRAM_PIPELINE_OBJECT_EXT GL_PROXY_TEXTURE_RECTANGLE_ARB
     GL_PROXY_TEXTURE_RECTANGLE_EXT GL_REFERENCED_BY_VERTEX_SHADER
     GL_RELATIVE_LARGE_CW_ARC_TO_NV GL_RELATIVE_SMALL_CW_ARC_TO_NV
     GL_RENDERBUFFER_ALPHA_SIZE_EXT GL_RENDERBUFFER_DEPTH_SIZE_EXT
     GL_RENDERBUFFER_GREEN_SIZE_EXT GL_RESET_NOTIFICATION_STRATEGY
     GL_SAMPLER_1D_ARRAY_SHADOW_EXT GL_SAMPLER_2D_ARRAY_SHADOW_EXT
     GL_SEPARATE_SPECULAR_COLOR_EXT GL_SHADER_STORAGE_BUFFER_START
     GL_SIGNED_LUMINANCE8_ALPHA8_NV GL_SPARSE_BUFFER_PAGE_SIZE_ARB
     GL_STENCIL_CLEAR_TAG_VALUE_EXT GL_TEXTURE_COORD_ARRAY_POINTER
     GL_TEXTURE_COVERAGE_SAMPLES_NV GL_TEXTURE_CUBE_MAP_NEGATIVE_X
     GL_TEXTURE_CUBE_MAP_NEGATIVE_Y GL_TEXTURE_CUBE_MAP_NEGATIVE_Z
     GL_TEXTURE_CUBE_MAP_POSITIVE_X GL_TEXTURE_CUBE_MAP_POSITIVE_Y
     GL_TEXTURE_CUBE_MAP_POSITIVE_Z GL_TEXTURE_FLOAT_COMPONENTS_NV
     GL_TEXTURE_MEMORY_LAYOUT_INTEL GL_TEXTURE_RANGE_POINTER_APPLE
     GL_TRANSFORM_FEEDBACK_VARYINGS GL_TRANSPOSE_PROJECTION_MATRIX
     GL_UNPACK_CLIENT_STORAGE_APPLE GL_UNSIGNED_INT_10_10_10_2_EXT
     GL_UNSIGNED_INT_2_10_10_10_REV GL_UNSIGNED_INT_ATOMIC_COUNTER
     GL_UNSIGNED_INT_IMAGE_1D_ARRAY GL_UNSIGNED_INT_IMAGE_2D_ARRAY
     GL_UNSIGNED_INT_IMAGE_CUBE_EXT GL_UNSIGNED_INT_SAMPLER_1D_EXT
     GL_UNSIGNED_INT_SAMPLER_2D_EXT GL_UNSIGNED_INT_SAMPLER_3D_EXT
     GL_UNSIGNED_INT_SAMPLER_BUFFER GL_UNSIGNED_SHORT_8_8_REV_MESA
     GL_VERTEX_ARRAY_BUFFER_BINDING GL_VERTEX_ARRAY_RANGE_VALID_NV
     GL_VERTEX_ATTRIB_ARRAY_DIVISOR GL_VERTEX_ATTRIB_ARRAY_ENABLED
     GL_VERTEX_ATTRIB_ARRAY_INTEGER GL_VERTEX_ATTRIB_ARRAY_POINTER
     GL_VERTEX_PROGRAM_TWO_SIDE_ARB GL_VERTEX_SHADER_OPTIMIZED_EXT
     GL_VIRTUAL_PAGE_SIZE_INDEX_ARB GL_WEIGHT_ARRAY_BUFFER_BINDING
     glCompressedMultiTexImage1DEXT glCompressedMultiTexImage2DEXT
     glCompressedMultiTexImage3DEXT glDisableClientStateIndexedEXT
     glDisableVariantClientStateEXT glGetActiveSubroutineUniformiv
     glGetCompressedTextureImageEXT glGetCompressedTextureSubImage
     glGetConvolutionParameterfvEXT glGetConvolutionParameterivEXT
     glGetCoverageModulationTableNV glGetFramebufferParameterivEXT
     glGetNamedBufferParameterivEXT glGetPerfMonitorCounterDataAMD
     glGetPerfMonitorCounterInfoAMD glGetPerfMonitorGroupStringAMD
     glGetProgramNamedParameterdvNV glGetProgramNamedParameterfvNV
     glGetSubroutineUniformLocation glGetTexParameterPointervAPPLE
     glMakeImageHandleNonResidentNV glMakeNamedBufferNonResidentNV
     glMakeTextureHandleResidentARB glMultiDrawElementsIndirectAMD
     glMulticastCopyBufferSubDataNV glMulticastGetQueryObjectuivNV
     glNamedFramebufferRenderbuffer glNamedFramebufferTexture1DEXT
     glNamedFramebufferTexture2DEXT glNamedFramebufferTexture3DEXT
     glNamedFramebufferTextureLayer glPixelTransformParameterfvEXT
     glPixelTransformParameterivEXT glProgramBufferParametersIivNV
     glProgramLocalParameterI4uivNV glProgramLocalParameters4fvEXT
     glProgramLocalParametersI4ivNV glProgramUniformHandleui64vARB
     glProgramUniformMatrix2x3fvEXT glProgramUniformMatrix2x4fvEXT
     glProgramUniformMatrix3x2fvEXT glProgramUniformMatrix3x4fvEXT
     glProgramUniformMatrix4x2fvEXT glProgramUniformMatrix4x3fvEXT
     glReplacementCodeuiVertex3fSUN glSecondaryColorPointerListIBM
     glSelectPerfMonitorCountersAMD glSetFragmentShaderConstantATI
     glStencilStrokePathInstancedNV glStencilThenCoverStrokePathNV
     glTexCoord2fColor3fVertex3fSUN glTransformFeedbackBufferRange
     glTransformFeedbackVaryingsEXT glVDPAURegisterOutputSurfaceNV
     glVertexArrayEdgeFlagOffsetEXT glVertexArrayFogCoordOffsetEXT
     glVertexArrayTexCoordOffsetEXT */
  /* Offset 18 gives the best switch position.  */
  switch (name[18]) {
  case '1':
    if (memEQ(name, "GL_UNSIGNED_INT_2_10_10_10_REV", 30)) {
    /*                                 ^                  */
#ifdef GL_UNSIGNED_INT_2_10_10_10_REV
      *iv_return = GL_UNSIGNED_INT_2_10_10_10_REV;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case '2':
    if (memEQ(name, "GL_OFFSET_TEXTURE_2D_MATRIX_NV", 30)) {
    /*                                 ^                  */
#ifdef GL_OFFSET_TEXTURE_2D_MATRIX_NV
      *iv_return = GL_OFFSET_TEXTURE_2D_MATRIX_NV;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case '8':
    if (memEQ(name, "GL_UNSIGNED_SHORT_8_8_REV_MESA", 30)) {
    /*                                 ^                  */
#ifdef GL_UNSIGNED_SHORT_8_8_REV_MESA
      *iv_return = GL_UNSIGNED_SHORT_8_8_REV_MESA;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case 'A':
    if (memEQ(name, "GL_FOG_COORDINATE_ARRAY_STRIDE", 30)) {
    /*                                 ^                  */
#ifdef GL_FOG_COORDINATE_ARRAY_STRIDE
      *iv_return = GL_FOG_COORDINATE_ARRAY_STRIDE;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_FRAMEBUFFER_DEFAULT_SAMPLES", 30)) {
    /*                                 ^                  */
#ifdef GL_FRAMEBUFFER_DEFAULT_SAMPLES
      *iv_return = GL_FRAMEBUFFER_DEFAULT_SAMPLES;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_MAX_COMBINED_IMAGE_UNIFORMS", 30)) {
    /*                                 ^                  */
#ifdef GL_MAX_COMBINED_IMAGE_UNIFORMS
      *iv_return = GL_MAX_COMBINED_IMAGE_UNIFORMS;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_MAX_FRAGMENT_IMAGE_UNIFORMS", 30)) {
    /*                                 ^                  */
#ifdef GL_MAX_FRAGMENT_IMAGE_UNIFORMS
      *iv_return = GL_MAX_FRAGMENT_IMAGE_UNIFORMS;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_MAX_GEOMETRY_IMAGE_UNIFORMS", 30)) {
    /*                                 ^                  */
#ifdef GL_MAX_GEOMETRY_IMAGE_UNIFORMS
      *iv_return = GL_MAX_GEOMETRY_IMAGE_UNIFORMS;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_SEPARATE_SPECULAR_COLOR_EXT", 30)) {
    /*                                 ^                  */
#ifdef GL_SEPARATE_SPECULAR_COLOR_EXT
      *iv_return = GL_SEPARATE_SPECULAR_COLOR_EXT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_SPARSE_BUFFER_PAGE_SIZE_ARB", 30)) {
    /*                                 ^                  */
#ifdef GL_SPARSE_BUFFER_PAGE_SIZE_ARB
      *iv_return = GL_SPARSE_BUFFER_PAGE_SIZE_ARB;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_STENCIL_CLEAR_TAG_VALUE_EXT", 30)) {
    /*                                 ^                  */
#ifdef GL_STENCIL_CLEAR_TAG_VALUE_EXT
      *iv_return = GL_STENCIL_CLEAR_TAG_VALUE_EXT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_TRANSFORM_FEEDBACK_VARYINGS", 30)) {
    /*                                 ^                  */
#ifdef GL_TRANSFORM_FEEDBACK_VARYINGS
      *iv_return = GL_TRANSFORM_FEEDBACK_VARYINGS;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_UNSIGNED_INT_IMAGE_1D_ARRAY", 30)) {
    /*                                 ^                  */
#ifdef GL_UNSIGNED_INT_IMAGE_1D_ARRAY
      *iv_return = GL_UNSIGNED_INT_IMAGE_1D_ARRAY;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_UNSIGNED_INT_IMAGE_2D_ARRAY", 30)) {
    /*                                 ^                  */
#ifdef GL_UNSIGNED_INT_IMAGE_2D_ARRAY
      *iv_return = GL_UNSIGNED_INT_IMAGE_2D_ARRAY;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_UNSIGNED_INT_IMAGE_CUBE_EXT", 30)) {
    /*                                 ^                  */
#ifdef GL_UNSIGNED_INT_IMAGE_CUBE_EXT
      *iv_return = GL_UNSIGNED_INT_IMAGE_CUBE_EXT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case 'B':
    if (memEQ(name, "GL_ATOMIC_COUNTER_BUFFER_INDEX", 30)) {
    /*                                 ^                  */
#ifdef GL_ATOMIC_COUNTER_BUFFER_INDEX
      *iv_return = GL_ATOMIC_COUNTER_BUFFER_INDEX;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_ATOMIC_COUNTER_BUFFER_START", 30)) {
    /*                                 ^                  */
#ifdef GL_ATOMIC_COUNTER_BUFFER_START
      *iv_return = GL_ATOMIC_COUNTER_BUFFER_START;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_SHADER_STORAGE_BUFFER_START", 30)) {
    /*                                 ^                  */
#ifdef GL_SHADER_STORAGE_BUFFER_START
      *iv_return = GL_SHADER_STORAGE_BUFFER_START;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case 'C':
    if (memEQ(name, "GL_BLEND_ADVANCED_COHERENT_KHR", 30)) {
    /*                                 ^                  */
#ifdef GL_BLEND_ADVANCED_COHERENT_KHR
      *iv_return = GL_BLEND_ADVANCED_COHERENT_KHR;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_RELATIVE_LARGE_CW_ARC_TO_NV", 30)) {
    /*                                 ^                  */
#ifdef GL_RELATIVE_LARGE_CW_ARC_TO_NV
      *iv_return = GL_RELATIVE_LARGE_CW_ARC_TO_NV;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_RELATIVE_SMALL_CW_ARC_TO_NV", 30)) {
    /*                                 ^                  */
#ifdef GL_RELATIVE_SMALL_CW_ARC_TO_NV
      *iv_return = GL_RELATIVE_SMALL_CW_ARC_TO_NV;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_TRANSPOSE_PROJECTION_MATRIX", 30)) {
    /*                                 ^                  */
#ifdef GL_TRANSPOSE_PROJECTION_MATRIX
      *iv_return = GL_TRANSPOSE_PROJECTION_MATRIX;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case 'D':
    if (memEQ(name, "GL_ALPHA16_EXTENDED_RANGE_SGIX", 30)) {
    /*                                 ^                  */
#ifdef GL_ALPHA16_EXTENDED_RANGE_SGIX
      *iv_return = GL_ALPHA16_EXTENDED_RANGE_SGIX;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_CONVOLUTION_BORDER_MODE_EXT", 30)) {
    /*                                 ^                  */
#ifdef GL_CONVOLUTION_BORDER_MODE_EXT
      *iv_return = GL_CONVOLUTION_BORDER_MODE_EXT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_INT_SAMPLER_RENDERBUFFER_NV", 30)) {
    /*                                 ^                  */
#ifdef GL_INT_SAMPLER_RENDERBUFFER_NV
      *iv_return = GL_INT_SAMPLER_RENDERBUFFER_NV;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_LOCAL_CONSTANT_DATATYPE_EXT", 30)) {
    /*                                 ^                  */
#ifdef GL_LOCAL_CONSTANT_DATATYPE_EXT
      *iv_return = GL_LOCAL_CONSTANT_DATATYPE_EXT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case 'E':
    if (memEQ(name, "GL_ACTIVE_ATTRIBUTE_MAX_LENGTH", 30)) {
    /*                                 ^                  */
#ifdef GL_ACTIVE_ATTRIBUTE_MAX_LENGTH
      *iv_return = GL_ACTIVE_ATTRIBUTE_MAX_LENGTH;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_COMBINER_COMPONENT_USAGE_NV", 30)) {
    /*                                 ^                  */
#ifdef GL_COMBINER_COMPONENT_USAGE_NV
      *iv_return = GL_COMBINER_COMPONENT_USAGE_NV;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_COMPRESSED_SIGNED_RED_RGTC1", 30)) {
    /*                                 ^                  */
#ifdef GL_COMPRESSED_SIGNED_RED_RGTC1
      *iv_return = GL_COMPRESSED_SIGNED_RED_RGTC1;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_DEPENDENT_RGB_TEXTURE_3D_NV", 30)) {
    /*                                 ^                  */
#ifdef GL_DEPENDENT_RGB_TEXTURE_3D_NV
      *iv_return = GL_DEPENDENT_RGB_TEXTURE_3D_NV;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_MAX_PROGRAM_TEXEL_OFFSET_NV", 30)) {
    /*                                 ^                  */
#ifdef GL_MAX_PROGRAM_TEXEL_OFFSET_NV
      *iv_return = GL_MAX_PROGRAM_TEXEL_OFFSET_NV;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_MIN_PROGRAM_TEXEL_OFFSET_NV", 30)) {
    /*                                 ^                  */
#ifdef GL_MIN_PROGRAM_TEXEL_OFFSET_NV
      *iv_return = GL_MIN_PROGRAM_TEXEL_OFFSET_NV;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_PERFQUERY_COUNTER_RAW_INTEL", 30)) {
    /*                                 ^                  */
#ifdef GL_PERFQUERY_COUNTER_RAW_INTEL
      *iv_return = GL_PERFQUERY_COUNTER_RAW_INTEL;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_PROGRAM_PIPELINE_OBJECT_EXT", 30)) {
    /*                                 ^                  */
#ifdef GL_PROGRAM_PIPELINE_OBJECT_EXT
      *iv_return = GL_PROGRAM_PIPELINE_OBJECT_EXT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_PROXY_TEXTURE_RECTANGLE_ARB", 30)) {
    /*                                 ^                  */
#ifdef GL_PROXY_TEXTURE_RECTANGLE_ARB
      *iv_return = GL_PROXY_TEXTURE_RECTANGLE_ARB;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_PROXY_TEXTURE_RECTANGLE_EXT", 30)) {
    /*                                 ^                  */
#ifdef GL_PROXY_TEXTURE_RECTANGLE_EXT
      *iv_return = GL_PROXY_TEXTURE_RECTANGLE_EXT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_REFERENCED_BY_VERTEX_SHADER", 30)) {
    /*                                 ^                  */
#ifdef GL_REFERENCED_BY_VERTEX_SHADER
      *iv_return = GL_REFERENCED_BY_VERTEX_SHADER;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_RENDERBUFFER_GREEN_SIZE_EXT", 30)) {
    /*                                 ^                  */
#ifdef GL_RENDERBUFFER_GREEN_SIZE_EXT
      *iv_return = GL_RENDERBUFFER_GREEN_SIZE_EXT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_SIGNED_LUMINANCE8_ALPHA8_NV", 30)) {
    /*                                 ^                  */
#ifdef GL_SIGNED_LUMINANCE8_ALPHA8_NV
      *iv_return = GL_SIGNED_LUMINANCE8_ALPHA8_NV;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_TEXTURE_COVERAGE_SAMPLES_NV", 30)) {
    /*                                 ^                  */
#ifdef GL_TEXTURE_COVERAGE_SAMPLES_NV
      *iv_return = GL_TEXTURE_COVERAGE_SAMPLES_NV;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case 'F':
    if (memEQ(name, "GL_DEBUG_CALLBACK_FUNCTION_ARB", 30)) {
    /*                                 ^                  */
#ifdef GL_DEBUG_CALLBACK_FUNCTION_ARB
      *iv_return = GL_DEBUG_CALLBACK_FUNCTION_ARB;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_MAX_TEXTURE_BUFFER_SIZE_ARB", 30)) {
    /*                                 ^                  */
#ifdef GL_MAX_TEXTURE_BUFFER_SIZE_ARB
      *iv_return = GL_MAX_TEXTURE_BUFFER_SIZE_ARB;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_MAX_TEXTURE_BUFFER_SIZE_EXT", 30)) {
    /*                                 ^                  */
#ifdef GL_MAX_TEXTURE_BUFFER_SIZE_EXT
      *iv_return = GL_MAX_TEXTURE_BUFFER_SIZE_EXT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_MAX_UNIFORM_BUFFER_BINDINGS", 30)) {
    /*                                 ^                  */
#ifdef GL_MAX_UNIFORM_BUFFER_BINDINGS
      *iv_return = GL_MAX_UNIFORM_BUFFER_BINDINGS;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_NORMAL_ARRAY_BUFFER_BINDING", 30)) {
    /*                                 ^                  */
#ifdef GL_NORMAL_ARRAY_BUFFER_BINDING
      *iv_return = GL_NORMAL_ARRAY_BUFFER_BINDING;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_PIXEL_UNPACK_BUFFER_BINDING", 30)) {
    /*                                 ^                  */
#ifdef GL_PIXEL_UNPACK_BUFFER_BINDING
      *iv_return = GL_PIXEL_UNPACK_BUFFER_BINDING;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_VERTEX_ARRAY_BUFFER_BINDING", 30)) {
    /*                                 ^                  */
#ifdef GL_VERTEX_ARRAY_BUFFER_BINDING
      *iv_return = GL_VERTEX_ARRAY_BUFFER_BINDING;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_WEIGHT_ARRAY_BUFFER_BINDING", 30)) {
    /*                                 ^                  */
#ifdef GL_WEIGHT_ARRAY_BUFFER_BINDING
      *iv_return = GL_WEIGHT_ARRAY_BUFFER_BINDING;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case 'G':
    if (memEQ(name, "GL_MAX_TEXTURE_IMAGE_UNITS_ARB", 30)) {
    /*                                 ^                  */
#ifdef GL_MAX_TEXTURE_IMAGE_UNITS_ARB
      *iv_return = GL_MAX_TEXTURE_IMAGE_UNITS_ARB;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case 'I':
    if (memEQ(name, "GL_COMPRESSED_SLUMINANCE_ALPHA", 30)) {
    /*                                 ^                  */
#ifdef GL_COMPRESSED_SLUMINANCE_ALPHA
      *iv_return = GL_COMPRESSED_SLUMINANCE_ALPHA;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_MAX_COMBINED_UNIFORM_BLOCKS", 30)) {
    /*                                 ^                  */
#ifdef GL_MAX_COMBINED_UNIFORM_BLOCKS
      *iv_return = GL_MAX_COMBINED_UNIFORM_BLOCKS;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_MAX_FRAGMENT_UNIFORM_BLOCKS", 30)) {
    /*                                 ^                  */
#ifdef GL_MAX_FRAGMENT_UNIFORM_BLOCKS
      *iv_return = GL_MAX_FRAGMENT_UNIFORM_BLOCKS;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_MAX_GEOMETRY_UNIFORM_BLOCKS", 30)) {
    /*                                 ^                  */
#ifdef GL_MAX_GEOMETRY_UNIFORM_BLOCKS
      *iv_return = GL_MAX_GEOMETRY_UNIFORM_BLOCKS;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_PN_TRIANGLES_POINT_MODE_ATI", 30)) {
    /*                                 ^                  */
#ifdef GL_PN_TRIANGLES_POINT_MODE_ATI
      *iv_return = GL_PN_TRIANGLES_POINT_MODE_ATI;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_POST_COLOR_MATRIX_BLUE_BIAS", 30)) {
    /*                                 ^                  */
#ifdef GL_POST_COLOR_MATRIX_BLUE_BIAS
      *iv_return = GL_POST_COLOR_MATRIX_BLUE_BIAS;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_POST_COLOR_MATRIX_RED_SCALE", 30)) {
    /*                                 ^                  */
#ifdef GL_POST_COLOR_MATRIX_RED_SCALE
      *iv_return = GL_POST_COLOR_MATRIX_RED_SCALE;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_RESET_NOTIFICATION_STRATEGY", 30)) {
    /*                                 ^                  */
#ifdef GL_RESET_NOTIFICATION_STRATEGY
      *iv_return = GL_RESET_NOTIFICATION_STRATEGY;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case 'K':
    if (memEQ(name, "GL_MAX_COMPUTE_WORK_GROUP_SIZE", 30)) {
    /*                                 ^                  */
#ifdef GL_MAX_COMPUTE_WORK_GROUP_SIZE
      *iv_return = GL_MAX_COMPUTE_WORK_GROUP_SIZE;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case 'L':
    if (memEQ(name, "GL_POINT_SPRITE_CULL_CLIP_ATIX", 30)) {
    /*                                 ^                  */
#ifdef GL_POINT_SPRITE_CULL_CLIP_ATIX
      *iv_return = GL_POINT_SPRITE_CULL_CLIP_ATIX;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_POINT_SPRITE_CULL_MODE_ATIX", 30)) {
    /*                                 ^                  */
#ifdef GL_POINT_SPRITE_CULL_MODE_ATIX
      *iv_return = GL_POINT_SPRITE_CULL_MODE_ATIX;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_TEXTURE_MEMORY_LAYOUT_INTEL", 30)) {
    /*                                 ^                  */
#ifdef GL_TEXTURE_MEMORY_LAYOUT_INTEL
      *iv_return = GL_TEXTURE_MEMORY_LAYOUT_INTEL;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case 'M':
    if (memEQ(name, "GL_FRAGMENT_COLOR_MATERIAL_EXT", 30)) {
    /*                                 ^                  */
#ifdef GL_FRAGMENT_COLOR_MATERIAL_EXT
      *iv_return = GL_FRAGMENT_COLOR_MATERIAL_EXT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_FRAGMENT_PROGRAM_BINDING_NV", 30)) {
    /*                                 ^                  */
#ifdef GL_FRAGMENT_PROGRAM_BINDING_NV
      *iv_return = GL_FRAGMENT_PROGRAM_BINDING_NV;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_MAX_COMPUTE_ATOMIC_COUNTERS", 30)) {
    /*                                 ^                  */
#ifdef GL_MAX_COMPUTE_ATOMIC_COUNTERS
      *iv_return = GL_MAX_COMPUTE_ATOMIC_COUNTERS;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_NUM_LOOPBACK_COMPONENTS_ATI", 30)) {
    /*                                 ^                  */
#ifdef GL_NUM_LOOPBACK_COMPONENTS_ATI
      *iv_return = GL_NUM_LOOPBACK_COMPONENTS_ATI;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_UNSIGNED_INT_SAMPLER_1D_EXT", 30)) {
    /*                                 ^                  */
#ifdef GL_UNSIGNED_INT_SAMPLER_1D_EXT
      *iv_return = GL_UNSIGNED_INT_SAMPLER_1D_EXT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_UNSIGNED_INT_SAMPLER_2D_EXT", 30)) {
    /*                                 ^                  */
#ifdef GL_UNSIGNED_INT_SAMPLER_2D_EXT
      *iv_return = GL_UNSIGNED_INT_SAMPLER_2D_EXT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_UNSIGNED_INT_SAMPLER_3D_EXT", 30)) {
    /*                                 ^                  */
#ifdef GL_UNSIGNED_INT_SAMPLER_3D_EXT
      *iv_return = GL_UNSIGNED_INT_SAMPLER_3D_EXT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_UNSIGNED_INT_SAMPLER_BUFFER", 30)) {
    /*                                 ^                  */
#ifdef GL_UNSIGNED_INT_SAMPLER_BUFFER
      *iv_return = GL_UNSIGNED_INT_SAMPLER_BUFFER;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case 'N':
    if (memEQ(name, "GL_DEBUG_SEVERITY_NOTIFICATION", 30)) {
    /*                                 ^                  */
#ifdef GL_DEBUG_SEVERITY_NOTIFICATION
      *iv_return = GL_DEBUG_SEVERITY_NOTIFICATION;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_FIRST_VERTEX_CONVENTION_EXT", 30)) {
    /*                                 ^                  */
#ifdef GL_FIRST_VERTEX_CONVENTION_EXT
      *iv_return = GL_FIRST_VERTEX_CONVENTION_EXT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_PATH_OBJECT_BOUNDING_BOX_NV", 30)) {
    /*                                 ^                  */
#ifdef GL_PATH_OBJECT_BOUNDING_BOX_NV
      *iv_return = GL_PATH_OBJECT_BOUNDING_BOX_NV;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_PATH_STROKE_BOUNDING_BOX_NV", 30)) {
    /*                                 ^                  */
#ifdef GL_PATH_STROKE_BOUNDING_BOX_NV
      *iv_return = GL_PATH_STROKE_BOUNDING_BOX_NV;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_POST_CONVOLUTION_ALPHA_BIAS", 30)) {
    /*                                 ^                  */
#ifdef GL_POST_CONVOLUTION_ALPHA_BIAS
      *iv_return = GL_POST_CONVOLUTION_ALPHA_BIAS;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_POST_CONVOLUTION_BLUE_SCALE", 30)) {
    /*                                 ^                  */
#ifdef GL_POST_CONVOLUTION_BLUE_SCALE
      *iv_return = GL_POST_CONVOLUTION_BLUE_SCALE;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_POST_CONVOLUTION_GREEN_BIAS", 30)) {
    /*                                 ^                  */
#ifdef GL_POST_CONVOLUTION_GREEN_BIAS
      *iv_return = GL_POST_CONVOLUTION_GREEN_BIAS;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_VERTEX_ARRAY_RANGE_VALID_NV", 30)) {
    /*                                 ^                  */
#ifdef GL_VERTEX_ARRAY_RANGE_VALID_NV
      *iv_return = GL_VERTEX_ARRAY_RANGE_VALID_NV;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case 'O':
    if (memEQ(name, "GL_ELEMENT_ARRAY_POINTER_APPLE", 30)) {
    /*                                 ^                  */
#ifdef GL_ELEMENT_ARRAY_POINTER_APPLE
      *iv_return = GL_ELEMENT_ARRAY_POINTER_APPLE;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_TEXTURE_FLOAT_COMPONENTS_NV", 30)) {
    /*                                 ^                  */
#ifdef GL_TEXTURE_FLOAT_COMPONENTS_NV
      *iv_return = GL_TEXTURE_FLOAT_COMPONENTS_NV;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_TEXTURE_RANGE_POINTER_APPLE", 30)) {
    /*                                 ^                  */
#ifdef GL_TEXTURE_RANGE_POINTER_APPLE
      *iv_return = GL_TEXTURE_RANGE_POINTER_APPLE;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_UNSIGNED_INT_ATOMIC_COUNTER", 30)) {
    /*                                 ^                  */
#ifdef GL_UNSIGNED_INT_ATOMIC_COUNTER
      *iv_return = GL_UNSIGNED_INT_ATOMIC_COUNTER;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case 'P':
    if (memEQ(name, "GL_MAX_PROGRAM_TEMPORARIES_ARB", 30)) {
    /*                                 ^                  */
#ifdef GL_MAX_PROGRAM_TEMPORARIES_ARB
      *iv_return = GL_MAX_PROGRAM_TEMPORARIES_ARB;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_RENDERBUFFER_ALPHA_SIZE_EXT", 30)) {
    /*                                 ^                  */
#ifdef GL_RENDERBUFFER_ALPHA_SIZE_EXT
      *iv_return = GL_RENDERBUFFER_ALPHA_SIZE_EXT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_RENDERBUFFER_DEPTH_SIZE_EXT", 30)) {
    /*                                 ^                  */
#ifdef GL_RENDERBUFFER_DEPTH_SIZE_EXT
      *iv_return = GL_RENDERBUFFER_DEPTH_SIZE_EXT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_TEXTURE_CUBE_MAP_NEGATIVE_X", 30)) {
    /*                                 ^                  */
#ifdef GL_TEXTURE_CUBE_MAP_NEGATIVE_X
      *iv_return = GL_TEXTURE_CUBE_MAP_NEGATIVE_X;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_TEXTURE_CUBE_MAP_NEGATIVE_Y", 30)) {
    /*                                 ^                  */
#ifdef GL_TEXTURE_CUBE_MAP_NEGATIVE_Y
      *iv_return = GL_TEXTURE_CUBE_MAP_NEGATIVE_Y;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_TEXTURE_CUBE_MAP_NEGATIVE_Z", 30)) {
    /*                                 ^                  */
#ifdef GL_TEXTURE_CUBE_MAP_NEGATIVE_Z
      *iv_return = GL_TEXTURE_CUBE_MAP_NEGATIVE_Z;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_TEXTURE_CUBE_MAP_POSITIVE_X", 30)) {
    /*                                 ^                  */
#ifdef GL_TEXTURE_CUBE_MAP_POSITIVE_X
      *iv_return = GL_TEXTURE_CUBE_MAP_POSITIVE_X;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_TEXTURE_CUBE_MAP_POSITIVE_Y", 30)) {
    /*                                 ^                  */
#ifdef GL_TEXTURE_CUBE_MAP_POSITIVE_Y
      *iv_return = GL_TEXTURE_CUBE_MAP_POSITIVE_Y;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_TEXTURE_CUBE_MAP_POSITIVE_Z", 30)) {
    /*                                 ^                  */
#ifdef GL_TEXTURE_CUBE_MAP_POSITIVE_Z
      *iv_return = GL_TEXTURE_CUBE_MAP_POSITIVE_Z;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_VERTEX_SHADER_OPTIMIZED_EXT", 30)) {
    /*                                 ^                  */
#ifdef GL_VERTEX_SHADER_OPTIMIZED_EXT
      *iv_return = GL_VERTEX_SHADER_OPTIMIZED_EXT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case 'R':
    if (memEQ(name, "GL_CURRENT_SECONDARY_COLOR_EXT", 30)) {
    /*                                 ^                  */
#ifdef GL_CURRENT_SECONDARY_COLOR_EXT
      *iv_return = GL_CURRENT_SECONDARY_COLOR_EXT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_FRAMEBUFFER_BARRIER_BIT_EXT", 30)) {
    /*                                 ^                  */
#ifdef GL_FRAMEBUFFER_BARRIER_BIT_EXT
      *iv_return = GL_FRAMEBUFFER_BARRIER_BIT_EXT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_MATRIX_INDEX_ARRAY_SIZE_ARB", 30)) {
    /*                                 ^                  */
#ifdef GL_MATRIX_INDEX_ARRAY_SIZE_ARB
      *iv_return = GL_MATRIX_INDEX_ARRAY_SIZE_ARB;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_MATRIX_INDEX_ARRAY_TYPE_ARB", 30)) {
    /*                                 ^                  */
#ifdef GL_MATRIX_INDEX_ARRAY_TYPE_ARB
      *iv_return = GL_MATRIX_INDEX_ARRAY_TYPE_ARB;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_OFFSET_TEXTURE_RECTANGLE_NV", 30)) {
    /*                                 ^                  */
#ifdef GL_OFFSET_TEXTURE_RECTANGLE_NV
      *iv_return = GL_OFFSET_TEXTURE_RECTANGLE_NV;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_PERSPECTIVE_CORRECTION_HINT", 30)) {
    /*                                 ^                  */
#ifdef GL_PERSPECTIVE_CORRECTION_HINT
      *iv_return = GL_PERSPECTIVE_CORRECTION_HINT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_TEXTURE_COORD_ARRAY_POINTER", 30)) {
    /*                                 ^                  */
#ifdef GL_TEXTURE_COORD_ARRAY_POINTER
      *iv_return = GL_TEXTURE_COORD_ARRAY_POINTER;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_VERTEX_ATTRIB_ARRAY_DIVISOR", 30)) {
    /*                                 ^                  */
#ifdef GL_VERTEX_ATTRIB_ARRAY_DIVISOR
      *iv_return = GL_VERTEX_ATTRIB_ARRAY_DIVISOR;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_VERTEX_ATTRIB_ARRAY_ENABLED", 30)) {
    /*                                 ^                  */
#ifdef GL_VERTEX_ATTRIB_ARRAY_ENABLED
      *iv_return = GL_VERTEX_ATTRIB_ARRAY_ENABLED;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_VERTEX_ATTRIB_ARRAY_INTEGER", 30)) {
    /*                                 ^                  */
#ifdef GL_VERTEX_ATTRIB_ARRAY_INTEGER
      *iv_return = GL_VERTEX_ATTRIB_ARRAY_INTEGER;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_VERTEX_ATTRIB_ARRAY_POINTER", 30)) {
    /*                                 ^                  */
#ifdef GL_VERTEX_ATTRIB_ARRAY_POINTER
      *iv_return = GL_VERTEX_ATTRIB_ARRAY_POINTER;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glNamedFramebufferRenderbuffer", 30)) {
    /*                                 ^                  */
#ifdef glNamedFramebufferRenderbuffer
      *iv_return = glNamedFramebufferRenderbuffer;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case 'S':
    if (memEQ(name, "GLEW_ERROR_GLX_VERSION_11_ONLY", 30)) {
    /*                                 ^                  */
#ifdef GLEW_ERROR_GLX_VERSION_11_ONLY
      *iv_return = GLEW_ERROR_GLX_VERSION_11_ONLY;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_CONSERVATIVE_RASTER_MODE_NV", 30)) {
    /*                                 ^                  */
#ifdef GL_CONSERVATIVE_RASTER_MODE_NV
      *iv_return = GL_CONSERVATIVE_RASTER_MODE_NV;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_DOT_PRODUCT_PASS_THROUGH_NV", 30)) {
    /*                                 ^                  */
#ifdef GL_DOT_PRODUCT_PASS_THROUGH_NV
      *iv_return = GL_DOT_PRODUCT_PASS_THROUGH_NV;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_INTERNALFORMAT_STENCIL_SIZE", 30)) {
    /*                                 ^                  */
#ifdef GL_INTERNALFORMAT_STENCIL_SIZE
      *iv_return = GL_INTERNALFORMAT_STENCIL_SIZE;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_INTERNALFORMAT_STENCIL_TYPE", 30)) {
    /*                                 ^                  */
#ifdef GL_INTERNALFORMAT_STENCIL_TYPE
      *iv_return = GL_INTERNALFORMAT_STENCIL_TYPE;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glStencilThenCoverStrokePathNV", 30)) {
    /*                                 ^                  */
#ifdef glStencilThenCoverStrokePathNV
      *iv_return = glStencilThenCoverStrokePathNV;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case 'T':
    if (memEQ(name, "GL_COLOR_ARRAY_LIST_STRIDE_IBM", 30)) {
    /*                                 ^                  */
#ifdef GL_COLOR_ARRAY_LIST_STRIDE_IBM
      *iv_return = GL_COLOR_ARRAY_LIST_STRIDE_IBM;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_CONVOLUTION_FILTER_BIAS_EXT", 30)) {
    /*                                 ^                  */
#ifdef GL_CONVOLUTION_FILTER_BIAS_EXT
      *iv_return = GL_CONVOLUTION_FILTER_BIAS_EXT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_FRAGMENT_SUBROUTINE_UNIFORM", 30)) {
    /*                                 ^                  */
#ifdef GL_FRAGMENT_SUBROUTINE_UNIFORM
      *iv_return = GL_FRAGMENT_SUBROUTINE_UNIFORM;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_GEOMETRY_SUBROUTINE_UNIFORM", 30)) {
    /*                                 ^                  */
#ifdef GL_GEOMETRY_SUBROUTINE_UNIFORM
      *iv_return = GL_GEOMETRY_SUBROUTINE_UNIFORM;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_INDEX_ARRAY_LIST_STRIDE_IBM", 30)) {
    /*                                 ^                  */
#ifdef GL_INDEX_ARRAY_LIST_STRIDE_IBM
      *iv_return = GL_INDEX_ARRAY_LIST_STRIDE_IBM;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_UNPACK_CLIENT_STORAGE_APPLE", 30)) {
    /*                                 ^                  */
#ifdef GL_UNPACK_CLIENT_STORAGE_APPLE
      *iv_return = GL_UNPACK_CLIENT_STORAGE_APPLE;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_VERTEX_PROGRAM_TWO_SIDE_ARB", 30)) {
    /*                                 ^                  */
#ifdef GL_VERTEX_PROGRAM_TWO_SIDE_ARB
      *iv_return = GL_VERTEX_PROGRAM_TWO_SIDE_ARB;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glNamedFramebufferTexture1DEXT", 30)) {
    /*                                 ^                  */
#ifdef glNamedFramebufferTexture1DEXT
      *iv_return = glNamedFramebufferTexture1DEXT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glNamedFramebufferTexture2DEXT", 30)) {
    /*                                 ^                  */
#ifdef glNamedFramebufferTexture2DEXT
      *iv_return = glNamedFramebufferTexture2DEXT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glNamedFramebufferTexture3DEXT", 30)) {
    /*                                 ^                  */
#ifdef glNamedFramebufferTexture3DEXT
      *iv_return = glNamedFramebufferTexture3DEXT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glNamedFramebufferTextureLayer", 30)) {
    /*                                 ^                  */
#ifdef glNamedFramebufferTextureLayer
      *iv_return = glNamedFramebufferTextureLayer;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case 'U':
    if (memEQ(name, "GL_FRAMEBUFFER_UNSUPPORTED_EXT", 30)) {
    /*                                 ^                  */
#ifdef GL_FRAMEBUFFER_UNSUPPORTED_EXT
      *iv_return = GL_FRAMEBUFFER_UNSUPPORTED_EXT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_MAX_SPARSE_TEXTURE_SIZE_AMD", 30)) {
    /*                                 ^                  */
#ifdef GL_MAX_SPARSE_TEXTURE_SIZE_AMD
      *iv_return = GL_MAX_SPARSE_TEXTURE_SIZE_AMD;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_MAX_SPARSE_TEXTURE_SIZE_ARB", 30)) {
    /*                                 ^                  */
#ifdef GL_MAX_SPARSE_TEXTURE_SIZE_ARB
      *iv_return = GL_MAX_SPARSE_TEXTURE_SIZE_ARB;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case 'Y':
    if (memEQ(name, "GL_SAMPLER_1D_ARRAY_SHADOW_EXT", 30)) {
    /*                                 ^                  */
#ifdef GL_SAMPLER_1D_ARRAY_SHADOW_EXT
      *iv_return = GL_SAMPLER_1D_ARRAY_SHADOW_EXT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_SAMPLER_2D_ARRAY_SHADOW_EXT", 30)) {
    /*                                 ^                  */
#ifdef GL_SAMPLER_2D_ARRAY_SHADOW_EXT
      *iv_return = GL_SAMPLER_2D_ARRAY_SHADOW_EXT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case 'Z':
    if (memEQ(name, "GL_VIRTUAL_PAGE_SIZE_INDEX_ARB", 30)) {
    /*                                 ^                  */
#ifdef GL_VIRTUAL_PAGE_SIZE_INDEX_ARB
      *iv_return = GL_VIRTUAL_PAGE_SIZE_INDEX_ARB;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case '_':
    if (memEQ(name, "GLEW_AMD_occlusion_query_event", 30)) {
    /*                                 ^                  */
#ifdef GLEW_AMD_occlusion_query_event
      *iv_return = GLEW_AMD_occlusion_query_event;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GLEW_IBM_multimode_draw_arrays", 30)) {
    /*                                 ^                  */
#ifdef GLEW_IBM_multimode_draw_arrays
      *iv_return = GLEW_IBM_multimode_draw_arrays;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_BUFFER_FLUSHING_UNMAP_APPLE", 30)) {
    /*                                 ^                  */
#ifdef GL_BUFFER_FLUSHING_UNMAP_APPLE
      *iv_return = GL_BUFFER_FLUSHING_UNMAP_APPLE;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_DUP_FIRST_CUBIC_CURVE_TO_NV", 30)) {
    /*                                 ^                  */
#ifdef GL_DUP_FIRST_CUBIC_CURVE_TO_NV
      *iv_return = GL_DUP_FIRST_CUBIC_CURVE_TO_NV;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_EDGE_FLAG_ARRAY_POINTER_EXT", 30)) {
    /*                                 ^                  */
#ifdef GL_EDGE_FLAG_ARRAY_POINTER_EXT
      *iv_return = GL_EDGE_FLAG_ARRAY_POINTER_EXT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_EXT_framebuffer_multisample", 30)) {
    /*                                 ^                  */
#ifdef GL_EXT_framebuffer_multisample
      *iv_return = GL_EXT_framebuffer_multisample;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_GEOMETRY_SHADER_INVOCATIONS", 30)) {
    /*                                 ^                  */
#ifdef GL_GEOMETRY_SHADER_INVOCATIONS
      *iv_return = GL_GEOMETRY_SHADER_INVOCATIONS;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_LUMINANCE_ALPHA_FLOAT16_ATI", 30)) {
    /*                                 ^                  */
#ifdef GL_LUMINANCE_ALPHA_FLOAT16_ATI
      *iv_return = GL_LUMINANCE_ALPHA_FLOAT16_ATI;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_LUMINANCE_ALPHA_FLOAT32_ATI", 30)) {
    /*                                 ^                  */
#ifdef GL_LUMINANCE_ALPHA_FLOAT32_ATI
      *iv_return = GL_LUMINANCE_ALPHA_FLOAT32_ATI;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_LUMINANCE_ALPHA_INTEGER_EXT", 30)) {
    /*                                 ^                  */
#ifdef GL_LUMINANCE_ALPHA_INTEGER_EXT
      *iv_return = GL_LUMINANCE_ALPHA_INTEGER_EXT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_LUMINANCE_ALPHA_SIGNED_SGIX", 30)) {
    /*                                 ^                  */
#ifdef GL_LUMINANCE_ALPHA_SIGNED_SGIX
      *iv_return = GL_LUMINANCE_ALPHA_SIGNED_SGIX;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_MAX_DEBUG_GROUP_STACK_DEPTH", 30)) {
    /*                                 ^                  */
#ifdef GL_MAX_DEBUG_GROUP_STACK_DEPTH
      *iv_return = GL_MAX_DEBUG_GROUP_STACK_DEPTH;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_OBJECT_ATTACHED_OBJECTS_ARB", 30)) {
    /*                                 ^                  */
#ifdef GL_OBJECT_ATTACHED_OBJECTS_ARB
      *iv_return = GL_OBJECT_ATTACHED_OBJECTS_ARB;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_PACK_COMPRESSED_BLOCK_DEPTH", 30)) {
    /*                                 ^                  */
#ifdef GL_PACK_COMPRESSED_BLOCK_DEPTH
      *iv_return = GL_PACK_COMPRESSED_BLOCK_DEPTH;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_PACK_COMPRESSED_BLOCK_WIDTH", 30)) {
    /*                                 ^                  */
#ifdef GL_PACK_COMPRESSED_BLOCK_WIDTH
      *iv_return = GL_PACK_COMPRESSED_BLOCK_WIDTH;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_PERFQUERY_DONOT_FLUSH_INTEL", 30)) {
    /*                                 ^                  */
#ifdef GL_PERFQUERY_DONOT_FLUSH_INTEL
      *iv_return = GL_PERFQUERY_DONOT_FLUSH_INTEL;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_UNSIGNED_INT_10_10_10_2_EXT", 30)) {
    /*                                 ^                  */
#ifdef GL_UNSIGNED_INT_10_10_10_2_EXT
      *iv_return = GL_UNSIGNED_INT_10_10_10_2_EXT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case 'a':
    if (memEQ(name, "GLEW_APPLE_vertex_array_object", 30)) {
    /*                                 ^                  */
#ifdef GLEW_APPLE_vertex_array_object
      *iv_return = GLEW_APPLE_vertex_array_object;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_ARB_parallel_shader_compile", 30)) {
    /*                                 ^                  */
#ifdef GL_ARB_parallel_shader_compile
      *iv_return = GL_ARB_parallel_shader_compile;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_ARB_separate_shader_objects", 30)) {
    /*                                 ^                  */
#ifdef GL_ARB_separate_shader_objects
      *iv_return = GL_ARB_separate_shader_objects;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_EXT_separate_shader_objects", 30)) {
    /*                                 ^                  */
#ifdef GL_EXT_separate_shader_objects
      *iv_return = GL_EXT_separate_shader_objects;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glGetCoverageModulationTableNV", 30)) {
    /*                                 ^                  */
#ifdef glGetCoverageModulationTableNV
      *iv_return = glGetCoverageModulationTableNV;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glGetProgramNamedParameterdvNV", 30)) {
    /*                                 ^                  */
#ifdef glGetProgramNamedParameterdvNV
      *iv_return = glGetProgramNamedParameterdvNV;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glGetProgramNamedParameterfvNV", 30)) {
    /*                                 ^                  */
#ifdef glGetProgramNamedParameterfvNV
      *iv_return = glGetProgramNamedParameterfvNV;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glProgramBufferParametersIivNV", 30)) {
    /*                                 ^                  */
#ifdef glProgramBufferParametersIivNV
      *iv_return = glProgramBufferParametersIivNV;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case 'b':
    if (memEQ(name, "GLEW_SGIS_texture_border_clamp", 30)) {
    /*                                 ^                  */
#ifdef GLEW_SGIS_texture_border_clamp
      *iv_return = GLEW_SGIS_texture_border_clamp;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_HP_convolution_border_modes", 30)) {
    /*                                 ^                  */
#ifdef GL_HP_convolution_border_modes
      *iv_return = GL_HP_convolution_border_modes;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case 'e':
    if (memEQ(name, "GLEW_AMD_shader_stencil_export", 30)) {
    /*                                 ^                  */
#ifdef GLEW_AMD_shader_stencil_export
      *iv_return = GLEW_AMD_shader_stencil_export;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GLEW_ARB_shader_stencil_export", 30)) {
    /*                                 ^                  */
#ifdef GLEW_ARB_shader_stencil_export
      *iv_return = GLEW_ARB_shader_stencil_export;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GLEW_ATIX_texture_env_combine3", 30)) {
    /*                                 ^                  */
#ifdef GLEW_ATIX_texture_env_combine3
      *iv_return = GLEW_ATIX_texture_env_combine3;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_ARB_program_interface_query", 30)) {
    /*                                 ^                  */
#ifdef GL_ARB_program_interface_query
      *iv_return = GL_ARB_program_interface_query;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_ARB_shader_image_load_store", 30)) {
    /*                                 ^                  */
#ifdef GL_ARB_shader_image_load_store
      *iv_return = GL_ARB_shader_image_load_store;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_EXT_separate_specular_color", 30)) {
    /*                                 ^                  */
#ifdef GL_EXT_separate_specular_color
      *iv_return = GL_EXT_separate_specular_color;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_EXT_shader_image_load_store", 30)) {
    /*                                 ^                  */
#ifdef GL_EXT_shader_image_load_store
      *iv_return = GL_EXT_shader_image_load_store;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glCompressedMultiTexImage1DEXT", 30)) {
    /*                                 ^                  */
#ifdef glCompressedMultiTexImage1DEXT
      *iv_return = glCompressedMultiTexImage1DEXT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glCompressedMultiTexImage2DEXT", 30)) {
    /*                                 ^                  */
#ifdef glCompressedMultiTexImage2DEXT
      *iv_return = glCompressedMultiTexImage2DEXT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glCompressedMultiTexImage3DEXT", 30)) {
    /*                                 ^                  */
#ifdef glCompressedMultiTexImage3DEXT
      *iv_return = glCompressedMultiTexImage3DEXT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glMakeTextureHandleResidentARB", 30)) {
    /*                                 ^                  */
#ifdef glMakeTextureHandleResidentARB
      *iv_return = glMakeTextureHandleResidentARB;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case 'f':
    if (memEQ(name, "GL_NV_parameter_buffer_object2", 30)) {
    /*                                 ^                  */
#ifdef GL_NV_parameter_buffer_object2
      *iv_return = GL_NV_parameter_buffer_object2;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glGetSubroutineUniformLocation", 30)) {
    /*                                 ^                  */
#ifdef glGetSubroutineUniformLocation
      *iv_return = glGetSubroutineUniformLocation;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glMulticastCopyBufferSubDataNV", 30)) {
    /*                                 ^                  */
#ifdef glMulticastCopyBufferSubDataNV
      *iv_return = glMulticastCopyBufferSubDataNV;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glTexCoord2fColor3fVertex3fSUN", 30)) {
    /*                                 ^                  */
#ifdef glTexCoord2fColor3fVertex3fSUN
      *iv_return = glTexCoord2fColor3fVertex3fSUN;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case 'g':
    if (memEQ(name, "GLEW_NV_vertex_program2_option", 30)) {
    /*                                 ^                  */
#ifdef GLEW_NV_vertex_program2_option
      *iv_return = GLEW_NV_vertex_program2_option;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case 'h':
    if (memEQ(name, "glStencilStrokePathInstancedNV", 30)) {
    /*                                 ^                  */
#ifdef glStencilStrokePathInstancedNV
      *iv_return = glStencilStrokePathInstancedNV;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case 'i':
    if (memEQ(name, "GLEW_AMD_shader_trinary_minmax", 30)) {
    /*                                 ^                  */
#ifdef GLEW_AMD_shader_trinary_minmax
      *iv_return = GLEW_AMD_shader_trinary_minmax;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GLEW_ARB_texture_filter_minmax", 30)) {
    /*                                 ^                  */
#ifdef GLEW_ARB_texture_filter_minmax
      *iv_return = GLEW_ARB_texture_filter_minmax;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GLEW_EXT_texture_filter_minmax", 30)) {
    /*                                 ^                  */
#ifdef GLEW_EXT_texture_filter_minmax
      *iv_return = GLEW_EXT_texture_filter_minmax;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GLEW_SGIX_convolution_accuracy", 30)) {
    /*                                 ^                  */
#ifdef GLEW_SGIX_convolution_accuracy
      *iv_return = GLEW_SGIX_convolution_accuracy;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_EXT_blend_equation_separate", 30)) {
    /*                                 ^                  */
#ifdef GL_EXT_blend_equation_separate
      *iv_return = GL_EXT_blend_equation_separate;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_KHR_blend_equation_advanced", 30)) {
    /*                                 ^                  */
#ifdef GL_KHR_blend_equation_advanced
      *iv_return = GL_KHR_blend_equation_advanced;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glDisableVariantClientStateEXT", 30)) {
    /*                                 ^                  */
#ifdef glDisableVariantClientStateEXT
      *iv_return = glDisableVariantClientStateEXT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glGetActiveSubroutineUniformiv", 30)) {
    /*                                 ^                  */
#ifdef glGetActiveSubroutineUniformiv
      *iv_return = glGetActiveSubroutineUniformiv;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glReplacementCodeuiVertex3fSUN", 30)) {
    /*                                 ^                  */
#ifdef glReplacementCodeuiVertex3fSUN
      *iv_return = glReplacementCodeuiVertex3fSUN;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glSecondaryColorPointerListIBM", 30)) {
    /*                                 ^                  */
#ifdef glSecondaryColorPointerListIBM
      *iv_return = glSecondaryColorPointerListIBM;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case 'k':
    if (memEQ(name, "glTransformFeedbackBufferRange", 30)) {
    /*                                 ^                  */
#ifdef glTransformFeedbackBufferRange
      *iv_return = glTransformFeedbackBufferRange;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glTransformFeedbackVaryingsEXT", 30)) {
    /*                                 ^                  */
#ifdef glTransformFeedbackVaryingsEXT
      *iv_return = glTransformFeedbackVaryingsEXT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case 'l':
    if (memEQ(name, "GLEW_KHR_context_flush_control", 30)) {
    /*                                 ^                  */
#ifdef GLEW_KHR_context_flush_control
      *iv_return = GLEW_KHR_context_flush_control;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glVertexArrayEdgeFlagOffsetEXT", 30)) {
    /*                                 ^                  */
#ifdef glVertexArrayEdgeFlagOffsetEXT
      *iv_return = glVertexArrayEdgeFlagOffsetEXT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case 'm':
    if (memEQ(name, "GLEW_NV_shader_atomic_counters", 30)) {
    /*                                 ^                  */
#ifdef GLEW_NV_shader_atomic_counters
      *iv_return = GLEW_NV_shader_atomic_counters;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GLEW_SGIX_texture_multi_buffer", 30)) {
    /*                                 ^                  */
#ifdef GLEW_SGIX_texture_multi_buffer
      *iv_return = GLEW_SGIX_texture_multi_buffer;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glProgramLocalParameterI4uivNV", 30)) {
    /*                                 ^                  */
#ifdef glProgramLocalParameterI4uivNV
      *iv_return = glProgramLocalParameterI4uivNV;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glProgramLocalParameters4fvEXT", 30)) {
    /*                                 ^                  */
#ifdef glProgramLocalParameters4fvEXT
      *iv_return = glProgramLocalParameters4fvEXT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glProgramLocalParametersI4ivNV", 30)) {
    /*                                 ^                  */
#ifdef glProgramLocalParametersI4ivNV
      *iv_return = glProgramLocalParametersI4ivNV;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case 'n':
    if (memEQ(name, "glProgramUniformHandleui64vARB", 30)) {
    /*                                 ^                  */
#ifdef glProgramUniformHandleui64vARB
      *iv_return = glProgramUniformHandleui64vARB;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case 'o':
    if (memEQ(name, "GLEW_ARB_internalformat_query2", 30)) {
    /*                                 ^                  */
#ifdef GLEW_ARB_internalformat_query2
      *iv_return = GLEW_ARB_internalformat_query2;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GLEW_REGAL_ES1_0_compatibility", 30)) {
    /*                                 ^                  */
#ifdef GLEW_REGAL_ES1_0_compatibility
      *iv_return = GLEW_REGAL_ES1_0_compatibility;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GLEW_REGAL_ES1_1_compatibility", 30)) {
    /*                                 ^                  */
#ifdef GLEW_REGAL_ES1_1_compatibility
      *iv_return = GLEW_REGAL_ES1_1_compatibility;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_ARB_fragment_program_shadow", 30)) {
    /*                                 ^                  */
#ifdef GL_ARB_fragment_program_shadow
      *iv_return = GL_ARB_fragment_program_shadow;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glGetPerfMonitorGroupStringAMD", 30)) {
    /*                                 ^                  */
#ifdef glGetPerfMonitorGroupStringAMD
      *iv_return = glGetPerfMonitorGroupStringAMD;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glGetTexParameterPointervAPPLE", 30)) {
    /*                                 ^                  */
#ifdef glGetTexParameterPointervAPPLE
      *iv_return = glGetTexParameterPointervAPPLE;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glMakeImageHandleNonResidentNV", 30)) {
    /*                                 ^                  */
#ifdef glMakeImageHandleNonResidentNV
      *iv_return = glMakeImageHandleNonResidentNV;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glMakeNamedBufferNonResidentNV", 30)) {
    /*                                 ^                  */
#ifdef glMakeNamedBufferNonResidentNV
      *iv_return = glMakeNamedBufferNonResidentNV;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glVertexArrayFogCoordOffsetEXT", 30)) {
    /*                                 ^                  */
#ifdef glVertexArrayFogCoordOffsetEXT
      *iv_return = glVertexArrayFogCoordOffsetEXT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glVertexArrayTexCoordOffsetEXT", 30)) {
    /*                                 ^                  */
#ifdef glVertexArrayTexCoordOffsetEXT
      *iv_return = glVertexArrayTexCoordOffsetEXT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case 'p':
    if (memEQ(name, "GL_ATI_texture_compression_3dc", 30)) {
    /*                                 ^                  */
#ifdef GL_ATI_texture_compression_3dc
      *iv_return = GL_ATI_texture_compression_3dc;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glVDPAURegisterOutputSurfaceNV", 30)) {
    /*                                 ^                  */
#ifdef glVDPAURegisterOutputSurfaceNV
      *iv_return = glVDPAURegisterOutputSurfaceNV;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case 'r':
    if (memEQ(name, "GLEW_ARB_get_texture_sub_image", 30)) {
    /*                                 ^                  */
#ifdef GLEW_ARB_get_texture_sub_image
      *iv_return = GLEW_ARB_get_texture_sub_image;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_ARB_texture_mirrored_repeat", 30)) {
    /*                                 ^                  */
#ifdef GL_ARB_texture_mirrored_repeat
      *iv_return = GL_ARB_texture_mirrored_repeat;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_EXT_texture_shared_exponent", 30)) {
    /*                                 ^                  */
#ifdef GL_EXT_texture_shared_exponent
      *iv_return = GL_EXT_texture_shared_exponent;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_IBM_texture_mirrored_repeat", 30)) {
    /*                                 ^                  */
#ifdef GL_IBM_texture_mirrored_repeat
      *iv_return = GL_IBM_texture_mirrored_repeat;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glGetConvolutionParameterfvEXT", 30)) {
    /*                                 ^                  */
#ifdef glGetConvolutionParameterfvEXT
      *iv_return = glGetConvolutionParameterfvEXT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glGetConvolutionParameterivEXT", 30)) {
    /*                                 ^                  */
#ifdef glGetConvolutionParameterivEXT
      *iv_return = glGetConvolutionParameterivEXT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glGetFramebufferParameterivEXT", 30)) {
    /*                                 ^                  */
#ifdef glGetFramebufferParameterivEXT
      *iv_return = glGetFramebufferParameterivEXT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glGetNamedBufferParameterivEXT", 30)) {
    /*                                 ^                  */
#ifdef glGetNamedBufferParameterivEXT
      *iv_return = glGetNamedBufferParameterivEXT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glPixelTransformParameterfvEXT", 30)) {
    /*                                 ^                  */
#ifdef glPixelTransformParameterfvEXT
      *iv_return = glPixelTransformParameterfvEXT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glPixelTransformParameterivEXT", 30)) {
    /*                                 ^                  */
#ifdef glPixelTransformParameterivEXT
      *iv_return = glPixelTransformParameterivEXT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glSelectPerfMonitorCountersAMD", 30)) {
    /*                                 ^                  */
#ifdef glSelectPerfMonitorCountersAMD
      *iv_return = glSelectPerfMonitorCountersAMD;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glSetFragmentShaderConstantATI", 30)) {
    /*                                 ^                  */
#ifdef glSetFragmentShaderConstantATI
      *iv_return = glSetFragmentShaderConstantATI;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case 's':
    if (memEQ(name, "glMultiDrawElementsIndirectAMD", 30)) {
    /*                                 ^                  */
#ifdef glMultiDrawElementsIndirectAMD
      *iv_return = glMultiDrawElementsIndirectAMD;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case 't':
    if (memEQ(name, "GLEW_ARB_vertex_attrib_binding", 30)) {
    /*                                 ^                  */
#ifdef GLEW_ARB_vertex_attrib_binding
      *iv_return = GLEW_ARB_vertex_attrib_binding;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glDisableClientStateIndexedEXT", 30)) {
    /*                                 ^                  */
#ifdef glDisableClientStateIndexedEXT
      *iv_return = glDisableClientStateIndexedEXT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glGetCompressedTextureImageEXT", 30)) {
    /*                                 ^                  */
#ifdef glGetCompressedTextureImageEXT
      *iv_return = glGetCompressedTextureImageEXT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glGetCompressedTextureSubImage", 30)) {
    /*                                 ^                  */
#ifdef glGetCompressedTextureSubImage
      *iv_return = glGetCompressedTextureSubImage;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glProgramUniformMatrix2x3fvEXT", 30)) {
    /*                                 ^                  */
#ifdef glProgramUniformMatrix2x3fvEXT
      *iv_return = glProgramUniformMatrix2x3fvEXT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glProgramUniformMatrix2x4fvEXT", 30)) {
    /*                                 ^                  */
#ifdef glProgramUniformMatrix2x4fvEXT
      *iv_return = glProgramUniformMatrix2x4fvEXT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glProgramUniformMatrix3x2fvEXT", 30)) {
    /*                                 ^                  */
#ifdef glProgramUniformMatrix3x2fvEXT
      *iv_return = glProgramUniformMatrix3x2fvEXT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glProgramUniformMatrix3x4fvEXT", 30)) {
    /*                                 ^                  */
#ifdef glProgramUniformMatrix3x4fvEXT
      *iv_return = glProgramUniformMatrix3x4fvEXT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glProgramUniformMatrix4x2fvEXT", 30)) {
    /*                                 ^                  */
#ifdef glProgramUniformMatrix4x2fvEXT
      *iv_return = glProgramUniformMatrix4x2fvEXT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glProgramUniformMatrix4x3fvEXT", 30)) {
    /*                                 ^                  */
#ifdef glProgramUniformMatrix4x3fvEXT
      *iv_return = glProgramUniformMatrix4x3fvEXT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case 'u':
    if (memEQ(name, "GLEW_ARB_texture_buffer_object", 30)) {
    /*                                 ^                  */
#ifdef GLEW_ARB_texture_buffer_object
      *iv_return = GLEW_ARB_texture_buffer_object;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GLEW_ARB_uniform_buffer_object", 30)) {
    /*                                 ^                  */
#ifdef GLEW_ARB_uniform_buffer_object
      *iv_return = GLEW_ARB_uniform_buffer_object;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GLEW_EXT_texture_buffer_object", 30)) {
    /*                                 ^                  */
#ifdef GLEW_EXT_texture_buffer_object
      *iv_return = GLEW_EXT_texture_buffer_object;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glGetPerfMonitorCounterDataAMD", 30)) {
    /*                                 ^                  */
#ifdef glGetPerfMonitorCounterDataAMD
      *iv_return = glGetPerfMonitorCounterDataAMD;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glGetPerfMonitorCounterInfoAMD", 30)) {
    /*                                 ^                  */
#ifdef glGetPerfMonitorCounterInfoAMD
      *iv_return = glGetPerfMonitorCounterInfoAMD;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case 'v':
    if (memEQ(name, "GLEW_EXT_compiled_vertex_array", 30)) {
    /*                                 ^                  */
#ifdef GLEW_EXT_compiled_vertex_array
      *iv_return = GLEW_EXT_compiled_vertex_array;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case 'y':
    if (memEQ(name, "GL_ARB_fragment_layer_viewport", 30)) {
    /*                                 ^                  */
#ifdef GL_ARB_fragment_layer_viewport
      *iv_return = GL_ARB_fragment_layer_viewport;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glMulticastGetQueryObjectuivNV", 30)) {
    /*                                 ^                  */
#ifdef glMulticastGetQueryObjectuivNV
      *iv_return = glMulticastGetQueryObjectuivNV;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  }
  return PERL_constant_NOTFOUND;
}

static int
constant_31 (pTHX_ const char *name, IV *iv_return) {
  /* When generated this function returned values for the list of names given
     here.  However, subsequent manual editing may have added or removed some.
     GLEW_ARB_shader_atomic_counters GLEW_ARB_shader_draw_parameters
     GLEW_ARB_texture_cube_map_array GLEW_EXT_gpu_program_parameters
     GLEW_EXT_shared_texture_palette GLEW_EXT_texture_perturb_normal
     GLEW_NV_blend_equation_advanced GLEW_NV_fragment_program_option
     GLEW_NV_multisample_filter_hint GLEW_NV_parameter_buffer_object
     GLEW_NV_texture_compression_vtc GL_ACTIVE_SUBROUTINE_MAX_LENGTH
     GL_ACTIVE_VARYING_MAX_LENGTH_NV GL_ANGLE_pack_reverse_row_order
     GL_ARB_explicit_attrib_location GL_ARB_shading_language_420pack
     GL_ARB_shading_language_include GL_ARB_shading_language_packing
     GL_ARB_texture_compression_bptc GL_ARB_texture_compression_rgtc
     GL_ARB_texture_non_power_of_two GL_ARRAY_ELEMENT_LOCK_COUNT_EXT
     GL_ARRAY_ELEMENT_LOCK_FIRST_EXT GL_ATTRIBUTE_ADDRESS_COMMAND_NV
     GL_BIAS_BY_NEGATIVE_ONE_HALF_NV GL_COLOR_MATRIX_STACK_DEPTH_SGI
     GL_COMPRESSED_RGBA_ASTC_4x4_KHR GL_COMPRESSED_RGBA_ASTC_5x4_KHR
     GL_COMPRESSED_RGBA_ASTC_5x5_KHR GL_COMPRESSED_RGBA_ASTC_6x5_KHR
     GL_COMPRESSED_RGBA_ASTC_6x6_KHR GL_COMPRESSED_RGBA_ASTC_8x5_KHR
     GL_COMPRESSED_RGBA_ASTC_8x6_KHR GL_COMPRESSED_RGBA_ASTC_8x8_KHR
     GL_COMPRESSED_RGB_S3TC_DXT1_EXT GL_CONVOLUTION_FILTER_SCALE_EXT
     GL_COVERAGE_MODULATION_TABLE_NV GL_CULL_VERTEX_EYE_POSITION_EXT
     GL_DEBUG_CATEGORY_API_ERROR_AMD GL_DEBUG_OUTPUT_SYNCHRONOUS_ARB
     GL_DEBUG_SOURCE_APPLICATION_ARB GL_DEBUG_SOURCE_SHADER_COMPILER
     GL_DEBUG_SOURCE_THIRD_PARTY_ARB GL_DEPENDENT_HILO_TEXTURE_2D_NV
     GL_DOT_PRODUCT_DEPTH_REPLACE_NV GL_DRAW_ARRAYS_STRIP_COMMAND_NV
     GL_DRAW_FRAMEBUFFER_BINDING_EXT GL_DRAW_INDIRECT_BUFFER_BINDING
     GL_EFFECTIVE_RASTER_SAMPLES_EXT GL_ELEMENT_ARRAY_BUFFER_BINDING
     GL_EXT_texture_compression_dxt1 GL_EXT_texture_compression_latc
     GL_EXT_texture_compression_rgtc GL_EXT_texture_compression_s3tc
     GL_FOG_COORDINATE_ARRAY_POINTER GL_FORMAT_SUBSAMPLE_244_244_OML
     GL_FRAMEBUFFER_ATTACHMENT_ANGLE GL_FRAMEBUFFER_SRGB_CAPABLE_EXT
     GL_HISTOGRAM_LUMINANCE_SIZE_EXT GL_INT_IMAGE_2D_MULTISAMPLE_EXT
     GL_INT_IMAGE_CUBE_MAP_ARRAY_EXT GL_LAST_VIDEO_CAPTURE_STATUS_NV
     GL_MAX_ARRAY_TEXTURE_LAYERS_EXT GL_MAX_COLOR_MATRIX_STACK_DEPTH
     GL_MAX_COMBINED_ATOMIC_COUNTERS GL_MAX_COMPUTE_WORK_GROUP_COUNT
     GL_MAX_DEBUG_MESSAGE_LENGTH_AMD GL_MAX_DEBUG_MESSAGE_LENGTH_ARB
     GL_MAX_DEEP_3D_TEXTURE_DEPTH_NV GL_MAX_DUAL_SOURCE_DRAW_BUFFERS
     GL_MAX_FRAGMENT_ATOMIC_COUNTERS GL_MAX_FRAGMENT_UNIFORM_VECTORS
     GL_MAX_GEOMETRY_ATOMIC_COUNTERS GL_MAX_GEOMETRY_OUTPUT_VERTICES
     GL_MAX_PROGRAM_INSTRUCTIONS_ARB GL_MAX_PROGRAM_PATCH_ATTRIBS_NV
     GL_MAX_SHADER_BUFFER_ADDRESS_NV GL_MAX_VERTEX_OUTPUT_COMPONENTS
     GL_MAX_VERTEX_SHADER_LOCALS_EXT GL_MIN_SAMPLE_SHADING_VALUE_ARB
     GL_NATIVE_GRAPHICS_END_HINT_PGI GL_NORMAL_ARRAY_LIST_STRIDE_IBM
     GL_NUM_VIDEO_CAPTURE_STREAMS_NV GL_NV_fragment_shader_interlock
     GL_NV_framebuffer_mixed_samples GL_NV_gpu_program5_mem_extended
     GL_NV_shader_atomic_fp16_vector GL_OBJECT_ACTIVE_ATTRIBUTES_ARB
     GL_OBJECT_DISTANCE_TO_LINE_SGIS GL_ONE_MINUS_CONSTANT_ALPHA_EXT
     GL_ONE_MINUS_CONSTANT_COLOR_EXT GL_PACK_COMPRESSED_BLOCK_HEIGHT
     GL_PACK_REVERSE_ROW_ORDER_ANGLE GL_PARAMETER_BUFFER_BINDING_ARB
     GL_PERFMON_RESULT_AVAILABLE_AMD GL_PIXEL_BUFFER_BARRIER_BIT_EXT
     GL_PN_TRIANGLES_NORMAL_MODE_ATI GL_POST_COLOR_MATRIX_ALPHA_BIAS
     GL_POST_COLOR_MATRIX_BLUE_SCALE GL_POST_COLOR_MATRIX_GREEN_BIAS
     GL_POST_CONVOLUTION_ALPHA_SCALE GL_POST_CONVOLUTION_COLOR_TABLE
     GL_POST_CONVOLUTION_GREEN_SCALE GL_PREFER_DOUBLEBUFFER_HINT_PGI
     GL_PROGRAM_ALU_INSTRUCTIONS_ARB GL_PROGRAM_ATTRIB_COMPONENTS_NV
     GL_PROGRAM_RESULT_COMPONENTS_NV GL_PROGRAM_TEX_INDIRECTIONS_ARB
     GL_PROGRAM_TEX_INSTRUCTIONS_ARB GL_PROXY_TEXTURE_1D_STACK_MESAX
     GL_PROXY_TEXTURE_2D_MULTISAMPLE GL_PROXY_TEXTURE_2D_STACK_MESAX
     GL_PROXY_TEXTURE_CUBE_MAP_ARRAY GL_QUERY_RESULT_AVAILABLE_ANGLE
     GL_READ_FRAMEBUFFER_BINDING_EXT GL_REFERENCED_BY_COMPUTE_SHADER
     GL_RELATIVE_LARGE_CCW_ARC_TO_NV GL_RELATIVE_SMALL_CCW_ARC_TO_NV
     GL_RELATIVE_VERTICAL_LINE_TO_NV GL_RENDERBUFFER_FREE_MEMORY_ATI
     GL_RENDERBUFFER_INTERNAL_FORMAT GL_SAMPLER_2D_MULTISAMPLE_ARRAY
     GL_SAMPLE_ALPHA_TO_COVERAGE_ARB GL_SECONDARY_COLOR_ARRAY_STRIDE
     GL_SHADING_LANGUAGE_VERSION_ARB GL_SIGNED_RGB_UNSIGNED_ALPHA_NV
     GL_SMOOTH_QUADRATIC_CURVE_TO_NV GL_STENCIL_BACK_PASS_DEPTH_FAIL
     GL_STENCIL_BACK_PASS_DEPTH_PASS GL_SUN_convolution_border_modes
     GL_TESS_CONTROL_OUTPUT_VERTICES GL_TEXTURE_2D_MULTISAMPLE_ARRAY
     GL_TEXTURE_APPLICATION_MODE_EXT GL_TEXTURE_BINDING_1D_ARRAY_EXT
     GL_TEXTURE_BINDING_2D_ARRAY_EXT GL_TEXTURE_BINDING_CUBE_MAP_ARB
     GL_TEXTURE_BINDING_CUBE_MAP_EXT GL_TEXTURE_BINDING_RECTANGLE_NV
     GL_TEXTURE_COMPRESSION_HINT_ARB GL_TEXTURE_COORD_ARRAY_LIST_IBM
     GL_TEXTURE_COORD_ARRAY_SIZE_EXT GL_TEXTURE_COORD_ARRAY_TYPE_EXT
     GL_TEXTURE_POINT_ONE_COORD_ATIX GL_TRANSFORM_FEEDBACK_BUFFER_NV
     GL_TRANSFORM_FEEDBACK_RECORD_NV GL_TRANSPOSE_CURRENT_MATRIX_ARB
     GL_TRANSPOSE_PROGRAM_MATRIX_EXT GL_TRANSPOSE_TEXTURE_MATRIX_ARB
     GL_TRIANGLE_STRIP_ADJACENCY_ARB GL_TRIANGLE_STRIP_ADJACENCY_EXT
     GL_UNPACK_COMPRESSED_BLOCK_SIZE GL_UNSIGNED_INT_10F_11F_11F_REV
     GL_UNSIGNED_INT_5_9_9_9_REV_EXT GL_UNSIGNED_INT_SAMPLER_2D_RECT
     GL_UNSIGNED_SHORT_8_8_REV_APPLE GL_VERTEX_ARRAY_LIST_STRIDE_IBM
     GL_VERTEX_ARRAY_RANGE_LENGTH_NV GL_VERTEX_ATTRIB_ARRAY_SIZE_ARB
     GL_VERTEX_ATTRIB_ARRAY_TYPE_ARB GL_VERTEX_PROGRAM_POINT_SIZE_NV
     GL_VERTEX_SHADER_INVARIANTS_EXT GL_VERTEX_WEIGHT_ARRAY_SIZE_EXT
     GL_VERTEX_WEIGHT_ARRAY_TYPE_EXT GL_VIDEO_CAPTURE_FRAME_WIDTH_NV
     GL_VIEWPORT_POSITION_W_SCALE_NV glGetCombinerInputParameterfvNV
     glGetCombinerInputParameterivNV glGetCombinerStageParameterfvNV
     glGetCompressedMultiTexImageEXT glGetProgramLocalParameterdvARB
     glGetProgramLocalParameterfvARB glGetRenderbufferParameterivEXT
     glGetTextureLevelParameterfvEXT glGetTextureLevelParameterivEXT
     glGetTransformFeedbackVaryingNV glMakeImageHandleNonResidentARB
     glMulticastGetQueryObjecti64vNV glNamedFramebufferParameteriEXT
     glProgramBufferParametersIuivNV glProgramLocalParametersI4uivNV
     glProgramPathFragmentInputGenNV glReplacementCodeuiVertex3fvSUN
     glTexCoord2fColor3fVertex3fvSUN glTexCoord2fColor4ubVertex3fSUN
     glTexCoord2fNormal3fVertex3fSUN */
  /* Offset 26 gives the best switch position.  */
  switch (name[26]) {
  case '0':
    if (memEQ(name, "GL_ARB_shading_language_420pack", 31)) {
    /*                                         ^           */
#ifdef GL_ARB_shading_language_420pack
      *iv_return = GL_ARB_shading_language_420pack;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case '1':
    if (memEQ(name, "GL_COMPRESSED_RGB_S3TC_DXT1_EXT", 31)) {
    /*                                         ^           */
#ifdef GL_COMPRESSED_RGB_S3TC_DXT1_EXT
      *iv_return = GL_COMPRESSED_RGB_S3TC_DXT1_EXT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case '2':
    if (memEQ(name, "GL_DEPENDENT_HILO_TEXTURE_2D_NV", 31)) {
    /*                                         ^           */
#ifdef GL_DEPENDENT_HILO_TEXTURE_2D_NV
      *iv_return = GL_DEPENDENT_HILO_TEXTURE_2D_NV;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case '3':
    if (memEQ(name, "glTexCoord2fColor4ubVertex3fSUN", 31)) {
    /*                                         ^           */
#ifdef glTexCoord2fColor4ubVertex3fSUN
      *iv_return = glTexCoord2fColor4ubVertex3fSUN;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glTexCoord2fNormal3fVertex3fSUN", 31)) {
    /*                                         ^           */
#ifdef glTexCoord2fNormal3fVertex3fSUN
      *iv_return = glTexCoord2fNormal3fVertex3fSUN;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case '4':
    if (memEQ(name, "GL_COMPRESSED_RGBA_ASTC_4x4_KHR", 31)) {
    /*                                         ^           */
#ifdef GL_COMPRESSED_RGBA_ASTC_4x4_KHR
      *iv_return = GL_COMPRESSED_RGBA_ASTC_4x4_KHR;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_COMPRESSED_RGBA_ASTC_5x4_KHR", 31)) {
    /*                                         ^           */
#ifdef GL_COMPRESSED_RGBA_ASTC_5x4_KHR
      *iv_return = GL_COMPRESSED_RGBA_ASTC_5x4_KHR;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_FORMAT_SUBSAMPLE_244_244_OML", 31)) {
    /*                                         ^           */
#ifdef GL_FORMAT_SUBSAMPLE_244_244_OML
      *iv_return = GL_FORMAT_SUBSAMPLE_244_244_OML;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case '5':
    if (memEQ(name, "GL_COMPRESSED_RGBA_ASTC_5x5_KHR", 31)) {
    /*                                         ^           */
#ifdef GL_COMPRESSED_RGBA_ASTC_5x5_KHR
      *iv_return = GL_COMPRESSED_RGBA_ASTC_5x5_KHR;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_COMPRESSED_RGBA_ASTC_6x5_KHR", 31)) {
    /*                                         ^           */
#ifdef GL_COMPRESSED_RGBA_ASTC_6x5_KHR
      *iv_return = GL_COMPRESSED_RGBA_ASTC_6x5_KHR;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_COMPRESSED_RGBA_ASTC_8x5_KHR", 31)) {
    /*                                         ^           */
#ifdef GL_COMPRESSED_RGBA_ASTC_8x5_KHR
      *iv_return = GL_COMPRESSED_RGBA_ASTC_8x5_KHR;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case '6':
    if (memEQ(name, "GL_COMPRESSED_RGBA_ASTC_6x6_KHR", 31)) {
    /*                                         ^           */
#ifdef GL_COMPRESSED_RGBA_ASTC_6x6_KHR
      *iv_return = GL_COMPRESSED_RGBA_ASTC_6x6_KHR;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_COMPRESSED_RGBA_ASTC_8x6_KHR", 31)) {
    /*                                         ^           */
#ifdef GL_COMPRESSED_RGBA_ASTC_8x6_KHR
      *iv_return = GL_COMPRESSED_RGBA_ASTC_8x6_KHR;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glMulticastGetQueryObjecti64vNV", 31)) {
    /*                                         ^           */
#ifdef glMulticastGetQueryObjecti64vNV
      *iv_return = glMulticastGetQueryObjecti64vNV;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case '8':
    if (memEQ(name, "GL_COMPRESSED_RGBA_ASTC_8x8_KHR", 31)) {
    /*                                         ^           */
#ifdef GL_COMPRESSED_RGBA_ASTC_8x8_KHR
      *iv_return = GL_COMPRESSED_RGBA_ASTC_8x8_KHR;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case 'A':
    if (memEQ(name, "GL_FRAMEBUFFER_ATTACHMENT_ANGLE", 31)) {
    /*                                         ^           */
#ifdef GL_FRAMEBUFFER_ATTACHMENT_ANGLE
      *iv_return = GL_FRAMEBUFFER_ATTACHMENT_ANGLE;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_ONE_MINUS_CONSTANT_ALPHA_EXT", 31)) {
    /*                                         ^           */
#ifdef GL_ONE_MINUS_CONSTANT_ALPHA_EXT
      *iv_return = GL_ONE_MINUS_CONSTANT_ALPHA_EXT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_PACK_REVERSE_ROW_ORDER_ANGLE", 31)) {
    /*                                         ^           */
#ifdef GL_PACK_REVERSE_ROW_ORDER_ANGLE
      *iv_return = GL_PACK_REVERSE_ROW_ORDER_ANGLE;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_PROXY_TEXTURE_2D_MULTISAMPLE", 31)) {
    /*                                         ^           */
#ifdef GL_PROXY_TEXTURE_2D_MULTISAMPLE
      *iv_return = GL_PROXY_TEXTURE_2D_MULTISAMPLE;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_PROXY_TEXTURE_CUBE_MAP_ARRAY", 31)) {
    /*                                         ^           */
#ifdef GL_PROXY_TEXTURE_CUBE_MAP_ARRAY
      *iv_return = GL_PROXY_TEXTURE_CUBE_MAP_ARRAY;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_QUERY_RESULT_AVAILABLE_ANGLE", 31)) {
    /*                                         ^           */
#ifdef GL_QUERY_RESULT_AVAILABLE_ANGLE
      *iv_return = GL_QUERY_RESULT_AVAILABLE_ANGLE;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_SAMPLER_2D_MULTISAMPLE_ARRAY", 31)) {
    /*                                         ^           */
#ifdef GL_SAMPLER_2D_MULTISAMPLE_ARRAY
      *iv_return = GL_SAMPLER_2D_MULTISAMPLE_ARRAY;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_TEXTURE_2D_MULTISAMPLE_ARRAY", 31)) {
    /*                                         ^           */
#ifdef GL_TEXTURE_2D_MULTISAMPLE_ARRAY
      *iv_return = GL_TEXTURE_2D_MULTISAMPLE_ARRAY;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_UNSIGNED_SHORT_8_8_REV_APPLE", 31)) {
    /*                                         ^           */
#ifdef GL_UNSIGNED_SHORT_8_8_REV_APPLE
      *iv_return = GL_UNSIGNED_SHORT_8_8_REV_APPLE;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case 'B':
    if (memEQ(name, "GL_MAX_PROGRAM_PATCH_ATTRIBS_NV", 31)) {
    /*                                         ^           */
#ifdef GL_MAX_PROGRAM_PATCH_ATTRIBS_NV
      *iv_return = GL_MAX_PROGRAM_PATCH_ATTRIBS_NV;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case 'C':
    if (memEQ(name, "GL_DOT_PRODUCT_DEPTH_REPLACE_NV", 31)) {
    /*                                         ^           */
#ifdef GL_DOT_PRODUCT_DEPTH_REPLACE_NV
      *iv_return = GL_DOT_PRODUCT_DEPTH_REPLACE_NV;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_MAX_COMPUTE_WORK_GROUP_COUNT", 31)) {
    /*                                         ^           */
#ifdef GL_MAX_COMPUTE_WORK_GROUP_COUNT
      *iv_return = GL_MAX_COMPUTE_WORK_GROUP_COUNT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_MAX_FRAGMENT_UNIFORM_VECTORS", 31)) {
    /*                                         ^           */
#ifdef GL_MAX_FRAGMENT_UNIFORM_VECTORS
      *iv_return = GL_MAX_FRAGMENT_UNIFORM_VECTORS;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case 'D':
    if (memEQ(name, "GL_MAX_COLOR_MATRIX_STACK_DEPTH", 31)) {
    /*                                         ^           */
#ifdef GL_MAX_COLOR_MATRIX_STACK_DEPTH
      *iv_return = GL_MAX_COLOR_MATRIX_STACK_DEPTH;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case 'E':
    if (memEQ(name, "GL_ACTIVE_SUBROUTINE_MAX_LENGTH", 31)) {
    /*                                         ^           */
#ifdef GL_ACTIVE_SUBROUTINE_MAX_LENGTH
      *iv_return = GL_ACTIVE_SUBROUTINE_MAX_LENGTH;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_CONVOLUTION_FILTER_SCALE_EXT", 31)) {
    /*                                         ^           */
#ifdef GL_CONVOLUTION_FILTER_SCALE_EXT
      *iv_return = GL_CONVOLUTION_FILTER_SCALE_EXT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_FRAMEBUFFER_SRGB_CAPABLE_EXT", 31)) {
    /*                                         ^           */
#ifdef GL_FRAMEBUFFER_SRGB_CAPABLE_EXT
      *iv_return = GL_FRAMEBUFFER_SRGB_CAPABLE_EXT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_HISTOGRAM_LUMINANCE_SIZE_EXT", 31)) {
    /*                                         ^           */
#ifdef GL_HISTOGRAM_LUMINANCE_SIZE_EXT
      *iv_return = GL_HISTOGRAM_LUMINANCE_SIZE_EXT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_INT_IMAGE_2D_MULTISAMPLE_EXT", 31)) {
    /*                                         ^           */
#ifdef GL_INT_IMAGE_2D_MULTISAMPLE_EXT
      *iv_return = GL_INT_IMAGE_2D_MULTISAMPLE_EXT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_MIN_SAMPLE_SHADING_VALUE_ARB", 31)) {
    /*                                         ^           */
#ifdef GL_MIN_SAMPLE_SHADING_VALUE_ARB
      *iv_return = GL_MIN_SAMPLE_SHADING_VALUE_ARB;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_NORMAL_ARRAY_LIST_STRIDE_IBM", 31)) {
    /*                                         ^           */
#ifdef GL_NORMAL_ARRAY_LIST_STRIDE_IBM
      *iv_return = GL_NORMAL_ARRAY_LIST_STRIDE_IBM;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_PACK_COMPRESSED_BLOCK_HEIGHT", 31)) {
    /*                                         ^           */
#ifdef GL_PACK_COMPRESSED_BLOCK_HEIGHT
      *iv_return = GL_PACK_COMPRESSED_BLOCK_HEIGHT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_PERFMON_RESULT_AVAILABLE_AMD", 31)) {
    /*                                         ^           */
#ifdef GL_PERFMON_RESULT_AVAILABLE_AMD
      *iv_return = GL_PERFMON_RESULT_AVAILABLE_AMD;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_PN_TRIANGLES_NORMAL_MODE_ATI", 31)) {
    /*                                         ^           */
#ifdef GL_PN_TRIANGLES_NORMAL_MODE_ATI
      *iv_return = GL_PN_TRIANGLES_NORMAL_MODE_ATI;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_SAMPLE_ALPHA_TO_COVERAGE_ARB", 31)) {
    /*                                         ^           */
#ifdef GL_SAMPLE_ALPHA_TO_COVERAGE_ARB
      *iv_return = GL_SAMPLE_ALPHA_TO_COVERAGE_ARB;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_TEXTURE_APPLICATION_MODE_EXT", 31)) {
    /*                                         ^           */
#ifdef GL_TEXTURE_APPLICATION_MODE_EXT
      *iv_return = GL_TEXTURE_APPLICATION_MODE_EXT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_TEXTURE_COORD_ARRAY_SIZE_EXT", 31)) {
    /*                                         ^           */
#ifdef GL_TEXTURE_COORD_ARRAY_SIZE_EXT
      *iv_return = GL_TEXTURE_COORD_ARRAY_SIZE_EXT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_TEXTURE_COORD_ARRAY_TYPE_EXT", 31)) {
    /*                                         ^           */
#ifdef GL_TEXTURE_COORD_ARRAY_TYPE_EXT
      *iv_return = GL_TEXTURE_COORD_ARRAY_TYPE_EXT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_TRANSFORM_FEEDBACK_BUFFER_NV", 31)) {
    /*                                         ^           */
#ifdef GL_TRANSFORM_FEEDBACK_BUFFER_NV
      *iv_return = GL_TRANSFORM_FEEDBACK_BUFFER_NV;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_VERTEX_ARRAY_LIST_STRIDE_IBM", 31)) {
    /*                                         ^           */
#ifdef GL_VERTEX_ARRAY_LIST_STRIDE_IBM
      *iv_return = GL_VERTEX_ARRAY_LIST_STRIDE_IBM;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_VERTEX_ATTRIB_ARRAY_SIZE_ARB", 31)) {
    /*                                         ^           */
#ifdef GL_VERTEX_ATTRIB_ARRAY_SIZE_ARB
      *iv_return = GL_VERTEX_ATTRIB_ARRAY_SIZE_ARB;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_VERTEX_ATTRIB_ARRAY_TYPE_ARB", 31)) {
    /*                                         ^           */
#ifdef GL_VERTEX_ATTRIB_ARRAY_TYPE_ARB
      *iv_return = GL_VERTEX_ATTRIB_ARRAY_TYPE_ARB;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_VERTEX_WEIGHT_ARRAY_SIZE_EXT", 31)) {
    /*                                         ^           */
#ifdef GL_VERTEX_WEIGHT_ARRAY_SIZE_EXT
      *iv_return = GL_VERTEX_WEIGHT_ARRAY_SIZE_EXT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_VERTEX_WEIGHT_ARRAY_TYPE_EXT", 31)) {
    /*                                         ^           */
#ifdef GL_VERTEX_WEIGHT_ARRAY_TYPE_EXT
      *iv_return = GL_VERTEX_WEIGHT_ARRAY_TYPE_EXT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case 'F':
    if (memEQ(name, "GL_MAX_DUAL_SOURCE_DRAW_BUFFERS", 31)) {
    /*                                         ^           */
#ifdef GL_MAX_DUAL_SOURCE_DRAW_BUFFERS
      *iv_return = GL_MAX_DUAL_SOURCE_DRAW_BUFFERS;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_UNSIGNED_INT_10F_11F_11F_REV", 31)) {
    /*                                         ^           */
#ifdef GL_UNSIGNED_INT_10F_11F_11F_REV
      *iv_return = GL_UNSIGNED_INT_10F_11F_11F_REV;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case 'G':
    if (memEQ(name, "GL_DRAW_FRAMEBUFFER_BINDING_EXT", 31)) {
    /*                                         ^           */
#ifdef GL_DRAW_FRAMEBUFFER_BINDING_EXT
      *iv_return = GL_DRAW_FRAMEBUFFER_BINDING_EXT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_PARAMETER_BUFFER_BINDING_ARB", 31)) {
    /*                                         ^           */
#ifdef GL_PARAMETER_BUFFER_BINDING_ARB
      *iv_return = GL_PARAMETER_BUFFER_BINDING_ARB;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_READ_FRAMEBUFFER_BINDING_EXT", 31)) {
    /*                                         ^           */
#ifdef GL_READ_FRAMEBUFFER_BINDING_EXT
      *iv_return = GL_READ_FRAMEBUFFER_BINDING_EXT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glProgramPathFragmentInputGenNV", 31)) {
    /*                                         ^           */
#ifdef glProgramPathFragmentInputGenNV
      *iv_return = glProgramPathFragmentInputGenNV;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case 'H':
    if (memEQ(name, "GL_COLOR_MATRIX_STACK_DEPTH_SGI", 31)) {
    /*                                         ^           */
#ifdef GL_COLOR_MATRIX_STACK_DEPTH_SGI
      *iv_return = GL_COLOR_MATRIX_STACK_DEPTH_SGI;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_MAX_DEBUG_MESSAGE_LENGTH_AMD", 31)) {
    /*                                         ^           */
#ifdef GL_MAX_DEBUG_MESSAGE_LENGTH_AMD
      *iv_return = GL_MAX_DEBUG_MESSAGE_LENGTH_AMD;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_MAX_DEBUG_MESSAGE_LENGTH_ARB", 31)) {
    /*                                         ^           */
#ifdef GL_MAX_DEBUG_MESSAGE_LENGTH_ARB
      *iv_return = GL_MAX_DEBUG_MESSAGE_LENGTH_ARB;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_REFERENCED_BY_COMPUTE_SHADER", 31)) {
    /*                                         ^           */
#ifdef GL_REFERENCED_BY_COMPUTE_SHADER
      *iv_return = GL_REFERENCED_BY_COMPUTE_SHADER;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_SIGNED_RGB_UNSIGNED_ALPHA_NV", 31)) {
    /*                                         ^           */
#ifdef GL_SIGNED_RGB_UNSIGNED_ALPHA_NV
      *iv_return = GL_SIGNED_RGB_UNSIGNED_ALPHA_NV;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case 'I':
    if (memEQ(name, "GL_FOG_COORDINATE_ARRAY_POINTER", 31)) {
    /*                                         ^           */
#ifdef GL_FOG_COORDINATE_ARRAY_POINTER
      *iv_return = GL_FOG_COORDINATE_ARRAY_POINTER;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case 'L':
    if (memEQ(name, "GL_BIAS_BY_NEGATIVE_ONE_HALF_NV", 31)) {
    /*                                         ^           */
#ifdef GL_BIAS_BY_NEGATIVE_ONE_HALF_NV
      *iv_return = GL_BIAS_BY_NEGATIVE_ONE_HALF_NV;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_COVERAGE_MODULATION_TABLE_NV", 31)) {
    /*                                         ^           */
#ifdef GL_COVERAGE_MODULATION_TABLE_NV
      *iv_return = GL_COVERAGE_MODULATION_TABLE_NV;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_TEXTURE_BINDING_RECTANGLE_NV", 31)) {
    /*                                         ^           */
#ifdef GL_TEXTURE_BINDING_RECTANGLE_NV
      *iv_return = GL_TEXTURE_BINDING_RECTANGLE_NV;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_VIEWPORT_POSITION_W_SCALE_NV", 31)) {
    /*                                         ^           */
#ifdef GL_VIEWPORT_POSITION_W_SCALE_NV
      *iv_return = GL_VIEWPORT_POSITION_W_SCALE_NV;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case 'M':
    if (memEQ(name, "GL_NUM_VIDEO_CAPTURE_STREAMS_NV", 31)) {
    /*                                         ^           */
#ifdef GL_NUM_VIDEO_CAPTURE_STREAMS_NV
      *iv_return = GL_NUM_VIDEO_CAPTURE_STREAMS_NV;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_PROXY_TEXTURE_1D_STACK_MESAX", 31)) {
    /*                                         ^           */
#ifdef GL_PROXY_TEXTURE_1D_STACK_MESAX
      *iv_return = GL_PROXY_TEXTURE_1D_STACK_MESAX;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_PROXY_TEXTURE_2D_STACK_MESAX", 31)) {
    /*                                         ^           */
#ifdef GL_PROXY_TEXTURE_2D_STACK_MESAX
      *iv_return = GL_PROXY_TEXTURE_2D_STACK_MESAX;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case 'N':
    if (memEQ(name, "GL_ATTRIBUTE_ADDRESS_COMMAND_NV", 31)) {
    /*                                         ^           */
#ifdef GL_ATTRIBUTE_ADDRESS_COMMAND_NV
      *iv_return = GL_ATTRIBUTE_ADDRESS_COMMAND_NV;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_CULL_VERTEX_EYE_POSITION_EXT", 31)) {
    /*                                         ^           */
#ifdef GL_CULL_VERTEX_EYE_POSITION_EXT
      *iv_return = GL_CULL_VERTEX_EYE_POSITION_EXT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_DEBUG_SOURCE_APPLICATION_ARB", 31)) {
    /*                                         ^           */
#ifdef GL_DEBUG_SOURCE_APPLICATION_ARB
      *iv_return = GL_DEBUG_SOURCE_APPLICATION_ARB;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_DRAW_ARRAYS_STRIP_COMMAND_NV", 31)) {
    /*                                         ^           */
#ifdef GL_DRAW_ARRAYS_STRIP_COMMAND_NV
      *iv_return = GL_DRAW_ARRAYS_STRIP_COMMAND_NV;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_DRAW_INDIRECT_BUFFER_BINDING", 31)) {
    /*                                         ^           */
#ifdef GL_DRAW_INDIRECT_BUFFER_BINDING
      *iv_return = GL_DRAW_INDIRECT_BUFFER_BINDING;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_ELEMENT_ARRAY_BUFFER_BINDING", 31)) {
    /*                                         ^           */
#ifdef GL_ELEMENT_ARRAY_BUFFER_BINDING
      *iv_return = GL_ELEMENT_ARRAY_BUFFER_BINDING;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_MAX_COMBINED_ATOMIC_COUNTERS", 31)) {
    /*                                         ^           */
#ifdef GL_MAX_COMBINED_ATOMIC_COUNTERS
      *iv_return = GL_MAX_COMBINED_ATOMIC_COUNTERS;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_MAX_FRAGMENT_ATOMIC_COUNTERS", 31)) {
    /*                                         ^           */
#ifdef GL_MAX_FRAGMENT_ATOMIC_COUNTERS
      *iv_return = GL_MAX_FRAGMENT_ATOMIC_COUNTERS;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_MAX_GEOMETRY_ATOMIC_COUNTERS", 31)) {
    /*                                         ^           */
#ifdef GL_MAX_GEOMETRY_ATOMIC_COUNTERS
      *iv_return = GL_MAX_GEOMETRY_ATOMIC_COUNTERS;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_MAX_VERTEX_OUTPUT_COMPONENTS", 31)) {
    /*                                         ^           */
#ifdef GL_MAX_VERTEX_OUTPUT_COMPONENTS
      *iv_return = GL_MAX_VERTEX_OUTPUT_COMPONENTS;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_SHADING_LANGUAGE_VERSION_ARB", 31)) {
    /*                                         ^           */
#ifdef GL_SHADING_LANGUAGE_VERSION_ARB
      *iv_return = GL_SHADING_LANGUAGE_VERSION_ARB;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case 'O':
    if (memEQ(name, "GL_RENDERBUFFER_INTERNAL_FORMAT", 31)) {
    /*                                         ^           */
#ifdef GL_RENDERBUFFER_INTERNAL_FORMAT
      *iv_return = GL_RENDERBUFFER_INTERNAL_FORMAT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case 'P':
    if (memEQ(name, "GL_DEBUG_SOURCE_SHADER_COMPILER", 31)) {
    /*                                         ^           */
#ifdef GL_DEBUG_SOURCE_SHADER_COMPILER
      *iv_return = GL_DEBUG_SOURCE_SHADER_COMPILER;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_TEXTURE_BINDING_CUBE_MAP_ARB", 31)) {
    /*                                         ^           */
#ifdef GL_TEXTURE_BINDING_CUBE_MAP_ARB
      *iv_return = GL_TEXTURE_BINDING_CUBE_MAP_ARB;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_TEXTURE_BINDING_CUBE_MAP_EXT", 31)) {
    /*                                         ^           */
#ifdef GL_TEXTURE_BINDING_CUBE_MAP_EXT
      *iv_return = GL_TEXTURE_BINDING_CUBE_MAP_EXT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case 'R':
    if (memEQ(name, "GL_DEBUG_CATEGORY_API_ERROR_AMD", 31)) {
    /*                                         ^           */
#ifdef GL_DEBUG_CATEGORY_API_ERROR_AMD
      *iv_return = GL_DEBUG_CATEGORY_API_ERROR_AMD;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_ONE_MINUS_CONSTANT_COLOR_EXT", 31)) {
    /*                                         ^           */
#ifdef GL_ONE_MINUS_CONSTANT_COLOR_EXT
      *iv_return = GL_ONE_MINUS_CONSTANT_COLOR_EXT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_TRANSFORM_FEEDBACK_RECORD_NV", 31)) {
    /*                                         ^           */
#ifdef GL_TRANSFORM_FEEDBACK_RECORD_NV
      *iv_return = GL_TRANSFORM_FEEDBACK_RECORD_NV;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case 'S':
    if (memEQ(name, "GL_DEBUG_OUTPUT_SYNCHRONOUS_ARB", 31)) {
    /*                                         ^           */
#ifdef GL_DEBUG_OUTPUT_SYNCHRONOUS_ARB
      *iv_return = GL_DEBUG_OUTPUT_SYNCHRONOUS_ARB;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_EFFECTIVE_RASTER_SAMPLES_EXT", 31)) {
    /*                                         ^           */
#ifdef GL_EFFECTIVE_RASTER_SAMPLES_EXT
      *iv_return = GL_EFFECTIVE_RASTER_SAMPLES_EXT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_MAX_ARRAY_TEXTURE_LAYERS_EXT", 31)) {
    /*                                         ^           */
#ifdef GL_MAX_ARRAY_TEXTURE_LAYERS_EXT
      *iv_return = GL_MAX_ARRAY_TEXTURE_LAYERS_EXT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_MAX_PROGRAM_INSTRUCTIONS_ARB", 31)) {
    /*                                         ^           */
#ifdef GL_MAX_PROGRAM_INSTRUCTIONS_ARB
      *iv_return = GL_MAX_PROGRAM_INSTRUCTIONS_ARB;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_MAX_SHADER_BUFFER_ADDRESS_NV", 31)) {
    /*                                         ^           */
#ifdef GL_MAX_SHADER_BUFFER_ADDRESS_NV
      *iv_return = GL_MAX_SHADER_BUFFER_ADDRESS_NV;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_MAX_VERTEX_SHADER_LOCALS_EXT", 31)) {
    /*                                         ^           */
#ifdef GL_MAX_VERTEX_SHADER_LOCALS_EXT
      *iv_return = GL_MAX_VERTEX_SHADER_LOCALS_EXT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_OBJECT_ACTIVE_ATTRIBUTES_ARB", 31)) {
    /*                                         ^           */
#ifdef GL_OBJECT_ACTIVE_ATTRIBUTES_ARB
      *iv_return = GL_OBJECT_ACTIVE_ATTRIBUTES_ARB;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_POST_COLOR_MATRIX_BLUE_SCALE", 31)) {
    /*                                         ^           */
#ifdef GL_POST_COLOR_MATRIX_BLUE_SCALE
      *iv_return = GL_POST_COLOR_MATRIX_BLUE_SCALE;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_POST_CONVOLUTION_ALPHA_SCALE", 31)) {
    /*                                         ^           */
#ifdef GL_POST_CONVOLUTION_ALPHA_SCALE
      *iv_return = GL_POST_CONVOLUTION_ALPHA_SCALE;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_POST_CONVOLUTION_GREEN_SCALE", 31)) {
    /*                                         ^           */
#ifdef GL_POST_CONVOLUTION_GREEN_SCALE
      *iv_return = GL_POST_CONVOLUTION_GREEN_SCALE;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_PROGRAM_ALU_INSTRUCTIONS_ARB", 31)) {
    /*                                         ^           */
#ifdef GL_PROGRAM_ALU_INSTRUCTIONS_ARB
      *iv_return = GL_PROGRAM_ALU_INSTRUCTIONS_ARB;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_PROGRAM_TEX_INDIRECTIONS_ARB", 31)) {
    /*                                         ^           */
#ifdef GL_PROGRAM_TEX_INDIRECTIONS_ARB
      *iv_return = GL_PROGRAM_TEX_INDIRECTIONS_ARB;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_PROGRAM_TEX_INSTRUCTIONS_ARB", 31)) {
    /*                                         ^           */
#ifdef GL_PROGRAM_TEX_INSTRUCTIONS_ARB
      *iv_return = GL_PROGRAM_TEX_INSTRUCTIONS_ARB;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_VERTEX_SHADER_INVARIANTS_EXT", 31)) {
    /*                                         ^           */
#ifdef GL_VERTEX_SHADER_INVARIANTS_EXT
      *iv_return = GL_VERTEX_SHADER_INVARIANTS_EXT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case 'T':
    if (memEQ(name, "GL_ACTIVE_VARYING_MAX_LENGTH_NV", 31)) {
    /*                                         ^           */
#ifdef GL_ACTIVE_VARYING_MAX_LENGTH_NV
      *iv_return = GL_ACTIVE_VARYING_MAX_LENGTH_NV;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_ARRAY_ELEMENT_LOCK_COUNT_EXT", 31)) {
    /*                                         ^           */
#ifdef GL_ARRAY_ELEMENT_LOCK_COUNT_EXT
      *iv_return = GL_ARRAY_ELEMENT_LOCK_COUNT_EXT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_ARRAY_ELEMENT_LOCK_FIRST_EXT", 31)) {
    /*                                         ^           */
#ifdef GL_ARRAY_ELEMENT_LOCK_FIRST_EXT
      *iv_return = GL_ARRAY_ELEMENT_LOCK_FIRST_EXT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_MAX_DEEP_3D_TEXTURE_DEPTH_NV", 31)) {
    /*                                         ^           */
#ifdef GL_MAX_DEEP_3D_TEXTURE_DEPTH_NV
      *iv_return = GL_MAX_DEEP_3D_TEXTURE_DEPTH_NV;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_MAX_GEOMETRY_OUTPUT_VERTICES", 31)) {
    /*                                         ^           */
#ifdef GL_MAX_GEOMETRY_OUTPUT_VERTICES
      *iv_return = GL_MAX_GEOMETRY_OUTPUT_VERTICES;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_NATIVE_GRAPHICS_END_HINT_PGI", 31)) {
    /*                                         ^           */
#ifdef GL_NATIVE_GRAPHICS_END_HINT_PGI
      *iv_return = GL_NATIVE_GRAPHICS_END_HINT_PGI;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_PIXEL_BUFFER_BARRIER_BIT_EXT", 31)) {
    /*                                         ^           */
#ifdef GL_PIXEL_BUFFER_BARRIER_BIT_EXT
      *iv_return = GL_PIXEL_BUFFER_BARRIER_BIT_EXT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_POST_CONVOLUTION_COLOR_TABLE", 31)) {
    /*                                         ^           */
#ifdef GL_POST_CONVOLUTION_COLOR_TABLE
      *iv_return = GL_POST_CONVOLUTION_COLOR_TABLE;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_PREFER_DOUBLEBUFFER_HINT_PGI", 31)) {
    /*                                         ^           */
#ifdef GL_PREFER_DOUBLEBUFFER_HINT_PGI
      *iv_return = GL_PREFER_DOUBLEBUFFER_HINT_PGI;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_PROGRAM_ATTRIB_COMPONENTS_NV", 31)) {
    /*                                         ^           */
#ifdef GL_PROGRAM_ATTRIB_COMPONENTS_NV
      *iv_return = GL_PROGRAM_ATTRIB_COMPONENTS_NV;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_PROGRAM_RESULT_COMPONENTS_NV", 31)) {
    /*                                         ^           */
#ifdef GL_PROGRAM_RESULT_COMPONENTS_NV
      *iv_return = GL_PROGRAM_RESULT_COMPONENTS_NV;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_RELATIVE_LARGE_CCW_ARC_TO_NV", 31)) {
    /*                                         ^           */
#ifdef GL_RELATIVE_LARGE_CCW_ARC_TO_NV
      *iv_return = GL_RELATIVE_LARGE_CCW_ARC_TO_NV;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_RELATIVE_SMALL_CCW_ARC_TO_NV", 31)) {
    /*                                         ^           */
#ifdef GL_RELATIVE_SMALL_CCW_ARC_TO_NV
      *iv_return = GL_RELATIVE_SMALL_CCW_ARC_TO_NV;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_RELATIVE_VERTICAL_LINE_TO_NV", 31)) {
    /*                                         ^           */
#ifdef GL_RELATIVE_VERTICAL_LINE_TO_NV
      *iv_return = GL_RELATIVE_VERTICAL_LINE_TO_NV;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_SECONDARY_COLOR_ARRAY_STRIDE", 31)) {
    /*                                         ^           */
#ifdef GL_SECONDARY_COLOR_ARRAY_STRIDE
      *iv_return = GL_SECONDARY_COLOR_ARRAY_STRIDE;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_SMOOTH_QUADRATIC_CURVE_TO_NV", 31)) {
    /*                                         ^           */
#ifdef GL_SMOOTH_QUADRATIC_CURVE_TO_NV
      *iv_return = GL_SMOOTH_QUADRATIC_CURVE_TO_NV;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_TESS_CONTROL_OUTPUT_VERTICES", 31)) {
    /*                                         ^           */
#ifdef GL_TESS_CONTROL_OUTPUT_VERTICES
      *iv_return = GL_TESS_CONTROL_OUTPUT_VERTICES;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_TEXTURE_COMPRESSION_HINT_ARB", 31)) {
    /*                                         ^           */
#ifdef GL_TEXTURE_COMPRESSION_HINT_ARB
      *iv_return = GL_TEXTURE_COMPRESSION_HINT_ARB;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_TEXTURE_COORD_ARRAY_LIST_IBM", 31)) {
    /*                                         ^           */
#ifdef GL_TEXTURE_COORD_ARRAY_LIST_IBM
      *iv_return = GL_TEXTURE_COORD_ARRAY_LIST_IBM;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_VERTEX_ARRAY_RANGE_LENGTH_NV", 31)) {
    /*                                         ^           */
#ifdef GL_VERTEX_ARRAY_RANGE_LENGTH_NV
      *iv_return = GL_VERTEX_ARRAY_RANGE_LENGTH_NV;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_VIDEO_CAPTURE_FRAME_WIDTH_NV", 31)) {
    /*                                         ^           */
#ifdef GL_VIDEO_CAPTURE_FRAME_WIDTH_NV
      *iv_return = GL_VIDEO_CAPTURE_FRAME_WIDTH_NV;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case 'U':
    if (memEQ(name, "GL_LAST_VIDEO_CAPTURE_STATUS_NV", 31)) {
    /*                                         ^           */
#ifdef GL_LAST_VIDEO_CAPTURE_STATUS_NV
      *iv_return = GL_LAST_VIDEO_CAPTURE_STATUS_NV;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case 'V':
    if (memEQ(name, "GL_UNSIGNED_INT_5_9_9_9_REV_EXT", 31)) {
    /*                                         ^           */
#ifdef GL_UNSIGNED_INT_5_9_9_9_REV_EXT
      *iv_return = GL_UNSIGNED_INT_5_9_9_9_REV_EXT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case 'X':
    if (memEQ(name, "GL_TRANSPOSE_CURRENT_MATRIX_ARB", 31)) {
    /*                                         ^           */
#ifdef GL_TRANSPOSE_CURRENT_MATRIX_ARB
      *iv_return = GL_TRANSPOSE_CURRENT_MATRIX_ARB;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_TRANSPOSE_PROGRAM_MATRIX_EXT", 31)) {
    /*                                         ^           */
#ifdef GL_TRANSPOSE_PROGRAM_MATRIX_EXT
      *iv_return = GL_TRANSPOSE_PROGRAM_MATRIX_EXT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_TRANSPOSE_TEXTURE_MATRIX_ARB", 31)) {
    /*                                         ^           */
#ifdef GL_TRANSPOSE_TEXTURE_MATRIX_ARB
      *iv_return = GL_TRANSPOSE_TEXTURE_MATRIX_ARB;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case 'Y':
    if (memEQ(name, "GL_DEBUG_SOURCE_THIRD_PARTY_ARB", 31)) {
    /*                                         ^           */
#ifdef GL_DEBUG_SOURCE_THIRD_PARTY_ARB
      *iv_return = GL_DEBUG_SOURCE_THIRD_PARTY_ARB;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_INT_IMAGE_CUBE_MAP_ARRAY_EXT", 31)) {
    /*                                         ^           */
#ifdef GL_INT_IMAGE_CUBE_MAP_ARRAY_EXT
      *iv_return = GL_INT_IMAGE_CUBE_MAP_ARRAY_EXT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_RENDERBUFFER_FREE_MEMORY_ATI", 31)) {
    /*                                         ^           */
#ifdef GL_RENDERBUFFER_FREE_MEMORY_ATI
      *iv_return = GL_RENDERBUFFER_FREE_MEMORY_ATI;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_TEXTURE_BINDING_1D_ARRAY_EXT", 31)) {
    /*                                         ^           */
#ifdef GL_TEXTURE_BINDING_1D_ARRAY_EXT
      *iv_return = GL_TEXTURE_BINDING_1D_ARRAY_EXT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_TEXTURE_BINDING_2D_ARRAY_EXT", 31)) {
    /*                                         ^           */
#ifdef GL_TEXTURE_BINDING_2D_ARRAY_EXT
      *iv_return = GL_TEXTURE_BINDING_2D_ARRAY_EXT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_TRIANGLE_STRIP_ADJACENCY_ARB", 31)) {
    /*                                         ^           */
#ifdef GL_TRIANGLE_STRIP_ADJACENCY_ARB
      *iv_return = GL_TRIANGLE_STRIP_ADJACENCY_ARB;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_TRIANGLE_STRIP_ADJACENCY_EXT", 31)) {
    /*                                         ^           */
#ifdef GL_TRIANGLE_STRIP_ADJACENCY_EXT
      *iv_return = GL_TRIANGLE_STRIP_ADJACENCY_EXT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case 'Z':
    if (memEQ(name, "GL_VERTEX_PROGRAM_POINT_SIZE_NV", 31)) {
    /*                                         ^           */
#ifdef GL_VERTEX_PROGRAM_POINT_SIZE_NV
      *iv_return = GL_VERTEX_PROGRAM_POINT_SIZE_NV;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case '_':
    if (memEQ(name, "GLEW_NV_multisample_filter_hint", 31)) {
    /*                                         ^           */
#ifdef GLEW_NV_multisample_filter_hint
      *iv_return = GLEW_NV_multisample_filter_hint;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_ARB_texture_compression_bptc", 31)) {
    /*                                         ^           */
#ifdef GL_ARB_texture_compression_bptc
      *iv_return = GL_ARB_texture_compression_bptc;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_ARB_texture_compression_rgtc", 31)) {
    /*                                         ^           */
#ifdef GL_ARB_texture_compression_rgtc
      *iv_return = GL_ARB_texture_compression_rgtc;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_EXT_texture_compression_dxt1", 31)) {
    /*                                         ^           */
#ifdef GL_EXT_texture_compression_dxt1
      *iv_return = GL_EXT_texture_compression_dxt1;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_EXT_texture_compression_latc", 31)) {
    /*                                         ^           */
#ifdef GL_EXT_texture_compression_latc
      *iv_return = GL_EXT_texture_compression_latc;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_EXT_texture_compression_rgtc", 31)) {
    /*                                         ^           */
#ifdef GL_EXT_texture_compression_rgtc
      *iv_return = GL_EXT_texture_compression_rgtc;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_EXT_texture_compression_s3tc", 31)) {
    /*                                         ^           */
#ifdef GL_EXT_texture_compression_s3tc
      *iv_return = GL_EXT_texture_compression_s3tc;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_OBJECT_DISTANCE_TO_LINE_SGIS", 31)) {
    /*                                         ^           */
#ifdef GL_OBJECT_DISTANCE_TO_LINE_SGIS
      *iv_return = GL_OBJECT_DISTANCE_TO_LINE_SGIS;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_POST_COLOR_MATRIX_ALPHA_BIAS", 31)) {
    /*                                         ^           */
#ifdef GL_POST_COLOR_MATRIX_ALPHA_BIAS
      *iv_return = GL_POST_COLOR_MATRIX_ALPHA_BIAS;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_POST_COLOR_MATRIX_GREEN_BIAS", 31)) {
    /*                                         ^           */
#ifdef GL_POST_COLOR_MATRIX_GREEN_BIAS
      *iv_return = GL_POST_COLOR_MATRIX_GREEN_BIAS;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_STENCIL_BACK_PASS_DEPTH_FAIL", 31)) {
    /*                                         ^           */
#ifdef GL_STENCIL_BACK_PASS_DEPTH_FAIL
      *iv_return = GL_STENCIL_BACK_PASS_DEPTH_FAIL;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_STENCIL_BACK_PASS_DEPTH_PASS", 31)) {
    /*                                         ^           */
#ifdef GL_STENCIL_BACK_PASS_DEPTH_PASS
      *iv_return = GL_STENCIL_BACK_PASS_DEPTH_PASS;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_TEXTURE_POINT_ONE_COORD_ATIX", 31)) {
    /*                                         ^           */
#ifdef GL_TEXTURE_POINT_ONE_COORD_ATIX
      *iv_return = GL_TEXTURE_POINT_ONE_COORD_ATIX;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_UNPACK_COMPRESSED_BLOCK_SIZE", 31)) {
    /*                                         ^           */
#ifdef GL_UNPACK_COMPRESSED_BLOCK_SIZE
      *iv_return = GL_UNPACK_COMPRESSED_BLOCK_SIZE;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_UNSIGNED_INT_SAMPLER_2D_RECT", 31)) {
    /*                                         ^           */
#ifdef GL_UNSIGNED_INT_SAMPLER_2D_RECT
      *iv_return = GL_UNSIGNED_INT_SAMPLER_2D_RECT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case 'a':
    if (memEQ(name, "GLEW_ARB_texture_cube_map_array", 31)) {
    /*                                         ^           */
#ifdef GLEW_ARB_texture_cube_map_array
      *iv_return = GLEW_ARB_texture_cube_map_array;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GLEW_NV_blend_equation_advanced", 31)) {
    /*                                         ^           */
#ifdef GLEW_NV_blend_equation_advanced
      *iv_return = GLEW_NV_blend_equation_advanced;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_ARB_explicit_attrib_location", 31)) {
    /*                                         ^           */
#ifdef GL_ARB_explicit_attrib_location
      *iv_return = GL_ARB_explicit_attrib_location;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case 'b':
    if (memEQ(name, "GLEW_NV_parameter_buffer_object", 31)) {
    /*                                         ^           */
#ifdef GLEW_NV_parameter_buffer_object
      *iv_return = GLEW_NV_parameter_buffer_object;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case 'c':
    if (memEQ(name, "GL_ARB_shading_language_include", 31)) {
    /*                                         ^           */
#ifdef GL_ARB_shading_language_include
      *iv_return = GL_ARB_shading_language_include;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_ARB_shading_language_packing", 31)) {
    /*                                         ^           */
#ifdef GL_ARB_shading_language_packing
      *iv_return = GL_ARB_shading_language_packing;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case 'd':
    if (memEQ(name, "glGetProgramLocalParameterdvARB", 31)) {
    /*                                         ^           */
#ifdef glGetProgramLocalParameterdvARB
      *iv_return = glGetProgramLocalParameterdvARB;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case 'e':
    if (memEQ(name, "GLEW_ARB_shader_draw_parameters", 31)) {
    /*                                         ^           */
#ifdef GLEW_ARB_shader_draw_parameters
      *iv_return = GLEW_ARB_shader_draw_parameters;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GLEW_EXT_gpu_program_parameters", 31)) {
    /*                                         ^           */
#ifdef GLEW_EXT_gpu_program_parameters
      *iv_return = GLEW_EXT_gpu_program_parameters;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_NV_gpu_program5_mem_extended", 31)) {
    /*                                         ^           */
#ifdef GL_NV_gpu_program5_mem_extended
      *iv_return = GL_NV_gpu_program5_mem_extended;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_NV_shader_atomic_fp16_vector", 31)) {
    /*                                         ^           */
#ifdef GL_NV_shader_atomic_fp16_vector
      *iv_return = GL_NV_shader_atomic_fp16_vector;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case 'f':
    if (memEQ(name, "GL_ARB_texture_non_power_of_two", 31)) {
    /*                                         ^           */
#ifdef GL_ARB_texture_non_power_of_two
      *iv_return = GL_ARB_texture_non_power_of_two;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glGetProgramLocalParameterfvARB", 31)) {
    /*                                         ^           */
#ifdef glGetProgramLocalParameterfvARB
      *iv_return = glGetProgramLocalParameterfvARB;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glGetTextureLevelParameterfvEXT", 31)) {
    /*                                         ^           */
#ifdef glGetTextureLevelParameterfvEXT
      *iv_return = glGetTextureLevelParameterfvEXT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glReplacementCodeuiVertex3fvSUN", 31)) {
    /*                                         ^           */
#ifdef glReplacementCodeuiVertex3fvSUN
      *iv_return = glReplacementCodeuiVertex3fvSUN;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glTexCoord2fColor3fVertex3fvSUN", 31)) {
    /*                                         ^           */
#ifdef glTexCoord2fColor3fVertex3fvSUN
      *iv_return = glTexCoord2fColor3fVertex3fvSUN;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case 'g':
    if (memEQ(name, "glGetCompressedMultiTexImageEXT", 31)) {
    /*                                         ^           */
#ifdef glGetCompressedMultiTexImageEXT
      *iv_return = glGetCompressedMultiTexImageEXT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case 'i':
    if (memEQ(name, "glGetRenderbufferParameterivEXT", 31)) {
    /*                                         ^           */
#ifdef glGetRenderbufferParameterivEXT
      *iv_return = glGetRenderbufferParameterivEXT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glGetTextureLevelParameterivEXT", 31)) {
    /*                                         ^           */
#ifdef glGetTextureLevelParameterivEXT
      *iv_return = glGetTextureLevelParameterivEXT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glGetTransformFeedbackVaryingNV", 31)) {
    /*                                         ^           */
#ifdef glGetTransformFeedbackVaryingNV
      *iv_return = glGetTransformFeedbackVaryingNV;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case 'l':
    if (memEQ(name, "GLEW_EXT_shared_texture_palette", 31)) {
    /*                                         ^           */
#ifdef GLEW_EXT_shared_texture_palette
      *iv_return = GLEW_EXT_shared_texture_palette;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case 'm':
    if (memEQ(name, "GL_NV_framebuffer_mixed_samples", 31)) {
    /*                                         ^           */
#ifdef GL_NV_framebuffer_mixed_samples
      *iv_return = GL_NV_framebuffer_mixed_samples;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_SUN_convolution_border_modes", 31)) {
    /*                                         ^           */
#ifdef GL_SUN_convolution_border_modes
      *iv_return = GL_SUN_convolution_border_modes;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case 'n':
    if (memEQ(name, "GLEW_ARB_shader_atomic_counters", 31)) {
    /*                                         ^           */
#ifdef GLEW_ARB_shader_atomic_counters
      *iv_return = GLEW_ARB_shader_atomic_counters;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GLEW_NV_texture_compression_vtc", 31)) {
    /*                                         ^           */
#ifdef GLEW_NV_texture_compression_vtc
      *iv_return = GLEW_NV_texture_compression_vtc;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glMakeImageHandleNonResidentARB", 31)) {
    /*                                         ^           */
#ifdef glMakeImageHandleNonResidentARB
      *iv_return = glMakeImageHandleNonResidentARB;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case 'o':
    if (memEQ(name, "GLEW_EXT_texture_perturb_normal", 31)) {
    /*                                         ^           */
#ifdef GLEW_EXT_texture_perturb_normal
      *iv_return = GLEW_EXT_texture_perturb_normal;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_ANGLE_pack_reverse_row_order", 31)) {
    /*                                         ^           */
#ifdef GL_ANGLE_pack_reverse_row_order
      *iv_return = GL_ANGLE_pack_reverse_row_order;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case 'p':
    if (memEQ(name, "GLEW_NV_fragment_program_option", 31)) {
    /*                                         ^           */
#ifdef GLEW_NV_fragment_program_option
      *iv_return = GLEW_NV_fragment_program_option;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case 'r':
    if (memEQ(name, "GL_NV_fragment_shader_interlock", 31)) {
    /*                                         ^           */
#ifdef GL_NV_fragment_shader_interlock
      *iv_return = GL_NV_fragment_shader_interlock;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glGetCombinerInputParameterfvNV", 31)) {
    /*                                         ^           */
#ifdef glGetCombinerInputParameterfvNV
      *iv_return = glGetCombinerInputParameterfvNV;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glGetCombinerInputParameterivNV", 31)) {
    /*                                         ^           */
#ifdef glGetCombinerInputParameterivNV
      *iv_return = glGetCombinerInputParameterivNV;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glGetCombinerStageParameterfvNV", 31)) {
    /*                                         ^           */
#ifdef glGetCombinerStageParameterfvNV
      *iv_return = glGetCombinerStageParameterfvNV;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glNamedFramebufferParameteriEXT", 31)) {
    /*                                         ^           */
#ifdef glNamedFramebufferParameteriEXT
      *iv_return = glNamedFramebufferParameteriEXT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case 'u':
    if (memEQ(name, "glProgramBufferParametersIuivNV", 31)) {
    /*                                         ^           */
#ifdef glProgramBufferParametersIuivNV
      *iv_return = glProgramBufferParametersIuivNV;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glProgramLocalParametersI4uivNV", 31)) {
    /*                                         ^           */
#ifdef glProgramLocalParametersI4uivNV
      *iv_return = glProgramLocalParametersI4uivNV;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  }
  return PERL_constant_NOTFOUND;
}

static int
constant_32 (pTHX_ const char *name, IV *iv_return) {
  /* When generated this function returned values for the list of names given
     here.  However, subsequent manual editing may have added or removed some.
     GLEW_ARB_fragment_layer_viewport GLEW_ARB_fragment_program_shadow
     GLEW_ARB_parallel_shader_compile GLEW_ARB_program_interface_query
     GLEW_ARB_separate_shader_objects GLEW_ARB_shader_image_load_store
     GLEW_ARB_texture_mirrored_repeat GLEW_ATI_texture_compression_3dc
     GLEW_EXT_blend_equation_separate GLEW_EXT_framebuffer_multisample
     GLEW_EXT_separate_shader_objects GLEW_EXT_separate_specular_color
     GLEW_EXT_shader_image_load_store GLEW_EXT_texture_shared_exponent
     GLEW_HP_convolution_border_modes GLEW_IBM_texture_mirrored_repeat
     GLEW_KHR_blend_equation_advanced GLEW_NV_parameter_buffer_object2
     GL_3DFX_texture_compression_FXT1 GL_ACTIVE_ATOMIC_COUNTER_BUFFERS
     GL_AMD_shader_atomic_counter_ops GL_AMD_vertex_shader_tessellator
     GL_ANGLE_framebuffer_multisample GL_ARB_draw_elements_base_vertex
     GL_ARB_explicit_uniform_location GL_ARB_fragment_shader_interlock
     GL_ARB_pipeline_statistics_query GL_ARB_shader_atomic_counter_ops
     GL_ATOMIC_COUNTER_BUFFER_BINDING GL_BUFFER_UPDATE_BARRIER_BIT_EXT
     GL_CLIPPING_INPUT_PRIMITIVES_ARB GL_CLIP_VOLUME_CLIPPING_HINT_EXT
     GL_COMPRESSED_RGBA_ASTC_10x5_KHR GL_COMPRESSED_RGBA_ASTC_10x6_KHR
     GL_COMPRESSED_RGBA_ASTC_10x8_KHR GL_COMPRESSED_RGBA_S3TC_DXT1_EXT
     GL_COMPRESSED_RGBA_S3TC_DXT3_EXT GL_COMPRESSED_RGBA_S3TC_DXT5_EXT
     GL_COMPRESSED_SRGB_S3TC_DXT1_EXT GL_CONSERVATIVE_RASTERIZATION_NV
     GL_CONSERVATIVE_RASTER_DILATE_NV GL_CONTEXT_FLAG_NO_ERROR_BIT_KHR
     GL_CURRENT_MATRIX_STACK_DEPTH_NV GL_CURRENT_OCCLUSION_QUERY_ID_NV
     GL_CURRENT_RASTER_POSITION_VALID GL_CURRENT_RASTER_TEXTURE_COORDS
     GL_CURRENT_SAMPLE_COUNT_QUERY_NV GL_DEBUG_CALLBACK_USER_PARAM_ARB
     GL_DEBUG_TYPE_UNDEFINED_BEHAVIOR GL_ELEMENT_ARRAY_BARRIER_BIT_EXT
     GL_FOG_COORDINATE_ARRAY_LIST_IBM GL_FOG_COORDINATE_ARRAY_TYPE_EXT
     GL_FONT_MAX_ADVANCE_WIDTH_BIT_NV GL_FONT_NUM_GLYPH_INDICES_BIT_NV
     GL_FRAGMENT_COVERAGE_TO_COLOR_NV GL_INTENSITY_EXTENDED_RANGE_SGIX
     GL_INVALID_FRAMEBUFFER_OPERATION GL_LGPU_SEPARATE_STORAGE_BIT_NVX
     GL_LIGHT_MODEL_COLOR_CONTROL_EXT GL_LUMINANCE_ALPHA_FLOAT16_APPLE
     GL_LUMINANCE_ALPHA_FLOAT32_APPLE GL_LUMINANCE_EXTENDED_RANGE_SGIX
     GL_MATRIX_INDEX_ARRAY_STRIDE_ARB GL_MAX_BINDABLE_UNIFORM_SIZE_EXT
     GL_MAX_CLIENT_ATTRIB_STACK_DEPTH GL_MAX_CUBE_MAP_TEXTURE_SIZE_ARB
     GL_MAX_CUBE_MAP_TEXTURE_SIZE_EXT GL_MAX_DEBUG_LOGGED_MESSAGES_AMD
     GL_MAX_DEBUG_LOGGED_MESSAGES_ARB GL_MAX_FRAGMENT_INPUT_COMPONENTS
     GL_MAX_GEOMETRY_INPUT_COMPONENTS GL_MAX_RECTANGLE_TEXTURE_SIZE_NV
     GL_MAX_SHADER_STORAGE_BLOCK_SIZE GL_MAX_VERTEX_UNIFORM_COMPONENTS
     GL_MESA_shader_integer_functions GL_MULTISAMPLE_COVERAGE_MODES_NV
     GL_NUM_INSTRUCTIONS_PER_PASS_ATI GL_NUM_SHADING_LANGUAGE_VERSIONS
     GL_NV_conservative_raster_dilate GL_NV_fragment_coverage_to_color
     GL_NV_path_rendering_shared_edge GL_OBJECT_DISTANCE_TO_POINT_SGIS
     GL_PERFQUERY_COUNTER_EVENT_INTEL GL_PIXEL_PACK_BUFFER_BINDING_ARB
     GL_PIXEL_PACK_BUFFER_BINDING_EXT GL_PIXEL_TRANSFORM_2D_MATRIX_EXT
     GL_POINT_FADE_THRESHOLD_SIZE_ARB GL_POINT_FADE_THRESHOLD_SIZE_EXT
     GL_POINT_SPRITE_CULL_CENTER_ATIX GL_POST_COLOR_MATRIX_ALPHA_SCALE
     GL_POST_COLOR_MATRIX_COLOR_TABLE GL_POST_COLOR_MATRIX_GREEN_SCALE
     GL_POST_CONVOLUTION_RED_BIAS_EXT GL_POST_TEXTURE_FILTER_BIAS_SGIX
     GL_PRIMITIVE_RESTART_FIXED_INDEX GL_PROGRAM_ADDRESS_REGISTERS_ARB
     GL_PROGRAM_NATIVE_PARAMETERS_ARB GL_PROXY_TEXTURE_COLOR_TABLE_SGI
     GL_QUERY_BY_REGION_WAIT_INVERTED GL_RASTER_POSITION_UNCLIPPED_IBM
     GL_REFERENCED_BY_FRAGMENT_SHADER GL_REFERENCED_BY_GEOMETRY_SHADER
     GL_RENDERBUFFER_COLOR_SAMPLES_NV GL_RENDERBUFFER_STENCIL_SIZE_EXT
     GL_SAMPLER_CUBE_MAP_ARRAY_SHADOW GL_SECONDARY_COLOR_ARRAY_POINTER
     GL_SGIX_texture_coordinate_clamp GL_SHADER_STORAGE_BUFFER_BINDING
     GL_SMOOTH_LINE_WIDTH_GRANULARITY GL_SMOOTH_POINT_SIZE_GRANULARITY
     GL_TERMINATE_SEQUENCE_COMMAND_NV GL_TEXTURE_BINDING_RECTANGLE_ARB
     GL_TEXTURE_BINDING_RECTANGLE_EXT GL_TEXTURE_COMPARE_OPERATOR_SGIX
     GL_TEXTURE_COMPRESSED_BLOCK_SIZE GL_TEXTURE_COMPRESSED_IMAGE_SIZE
     GL_TEXTURE_COORD_ARRAY_COUNT_EXT GL_TEXTURE_COORD_ARRAY_LENGTH_NV
     GL_TEXTURE_CUBE_MAP_SEAMLESS_ARB GL_TEXTURE_FETCH_BARRIER_BIT_EXT
     GL_TRANSFORM_FEEDBACK_ATTRIBS_NV GL_TRANSFORM_FEEDBACK_BINDING_NV
     GL_TRANSFORM_FEEDBACK_BUFFER_EXT GL_UNIFORM_BLOCK_ACTIVE_UNIFORMS
     GL_UNPACK_COMPRESSED_BLOCK_DEPTH GL_UNPACK_COMPRESSED_BLOCK_WIDTH
     GL_UNSIGNED_INT_8_8_S8_S8_REV_NV GL_UNSIGNED_INT_IMAGE_BUFFER_EXT
     GL_UNSIGNED_INT_SAMPLER_1D_ARRAY GL_UNSIGNED_INT_SAMPLER_2D_ARRAY
     GL_UNSIGNED_INT_SAMPLER_CUBE_EXT GL_VERTEX_ARRAY_RANGE_POINTER_NV
     GL_VERTEX_ATTRIB_ARRAY_LENGTH_NV GL_VERTEX_ATTRIB_MAP1_SIZE_APPLE
     GL_VERTEX_ATTRIB_MAP2_SIZE_APPLE GL_VERTEX_ATTRIB_RELATIVE_OFFSET
     GL_VERTEX_PROGRAM_POINT_SIZE_ARB GL_VERTEX_SHADER_INVOCATIONS_ARB
     GL_VIDEO_CAPTURE_FRAME_HEIGHT_NV GL_VIDEO_COLOR_CONVERSION_MAX_NV
     GL_VIDEO_COLOR_CONVERSION_MIN_NV GL_Z4Y12Z4CB12Z4Y12Z4CR12_422_NV
     GL_Z6Y10Z6CB10Z6Y10Z6CR10_422_NV glBindVideoCaptureStreamBufferNV
     glCheckNamedFramebufferStatusEXT glCompressedTextureSubImage1DEXT
     glCompressedTextureSubImage2DEXT glCompressedTextureSubImage3DEXT
     glConservativeRasterParameterfNV glConservativeRasterParameteriNV
     glDrawTransformFeedbackInstanced glFlushMappedNamedBufferRangeEXT
     glFramebufferSampleLocationsfvNV glFramebufferTextureMultiviewOVR
     glGetActiveAtomicCounterBufferiv glGetActiveSubroutineUniformName
     glGetCombinerOutputParameterfvNV glGetCombinerOutputParameterivNV
     glGetImageTransformParameterfvHP glGetImageTransformParameterivHP
     glGetMultiTexLevelParameterfvEXT glGetMultiTexLevelParameterivEXT
     glGetNamedBufferParameterui64vNV glGetNamedFramebufferParameteriv
     glGetPerfMonitorCounterStringAMD glGetTransformFeedbackVaryingEXT
     glGetTranslatedShaderSourceANGLE glInvalidateNamedFramebufferData
     glListDrawCommandsStatesClientNV glMakeTextureHandleNonResidentNV
     glMulticastGetQueryObjectui64vNV glNamedFramebufferTextureFaceEXT
     glRenderbufferStorageMultisample glTexCoord2fColor4ubVertex3fvSUN
     glTexCoord2fNormal3fVertex3fvSUN glTextureStorage2DMultisampleEXT
     glTextureStorage3DMultisampleEXT glVertexArrayBindVertexBufferEXT */
  /* Offset 24 gives the best switch position.  */
  switch (name[24]) {
  case '0':
    if (memEQ(name, "GL_Z6Y10Z6CB10Z6Y10Z6CR10_422_NV", 32)) {
    /*                                       ^              */
#ifdef GL_Z6Y10Z6CB10Z6Y10Z6CR10_422_NV
      *iv_return = GL_Z6Y10Z6CB10Z6Y10Z6CR10_422_NV;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case '1':
    if (memEQ(name, "GL_COMPRESSED_RGBA_ASTC_10x5_KHR", 32)) {
    /*                                       ^              */
#ifdef GL_COMPRESSED_RGBA_ASTC_10x5_KHR
      *iv_return = GL_COMPRESSED_RGBA_ASTC_10x5_KHR;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_COMPRESSED_RGBA_ASTC_10x6_KHR", 32)) {
    /*                                       ^              */
#ifdef GL_COMPRESSED_RGBA_ASTC_10x6_KHR
      *iv_return = GL_COMPRESSED_RGBA_ASTC_10x6_KHR;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_COMPRESSED_RGBA_ASTC_10x8_KHR", 32)) {
    /*                                       ^              */
#ifdef GL_COMPRESSED_RGBA_ASTC_10x8_KHR
      *iv_return = GL_COMPRESSED_RGBA_ASTC_10x8_KHR;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_LUMINANCE_ALPHA_FLOAT16_APPLE", 32)) {
    /*                                       ^              */
#ifdef GL_LUMINANCE_ALPHA_FLOAT16_APPLE
      *iv_return = GL_LUMINANCE_ALPHA_FLOAT16_APPLE;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_UNSIGNED_INT_SAMPLER_1D_ARRAY", 32)) {
    /*                                       ^              */
#ifdef GL_UNSIGNED_INT_SAMPLER_1D_ARRAY
      *iv_return = GL_UNSIGNED_INT_SAMPLER_1D_ARRAY;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case '2':
    if (memEQ(name, "GL_UNSIGNED_INT_SAMPLER_2D_ARRAY", 32)) {
    /*                                       ^              */
#ifdef GL_UNSIGNED_INT_SAMPLER_2D_ARRAY
      *iv_return = GL_UNSIGNED_INT_SAMPLER_2D_ARRAY;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_Z4Y12Z4CB12Z4Y12Z4CR12_422_NV", 32)) {
    /*                                       ^              */
#ifdef GL_Z4Y12Z4CB12Z4Y12Z4CR12_422_NV
      *iv_return = GL_Z4Y12Z4CB12Z4Y12Z4CR12_422_NV;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case '3':
    if (memEQ(name, "GL_LUMINANCE_ALPHA_FLOAT32_APPLE", 32)) {
    /*                                       ^              */
#ifdef GL_LUMINANCE_ALPHA_FLOAT32_APPLE
      *iv_return = GL_LUMINANCE_ALPHA_FLOAT32_APPLE;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case '8':
    if (memEQ(name, "GL_UNSIGNED_INT_8_8_S8_S8_REV_NV", 32)) {
    /*                                       ^              */
#ifdef GL_UNSIGNED_INT_8_8_S8_S8_REV_NV
      *iv_return = GL_UNSIGNED_INT_8_8_S8_S8_REV_NV;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case 'A':
    if (memEQ(name, "GL_CONSERVATIVE_RASTERIZATION_NV", 32)) {
    /*                                       ^              */
#ifdef GL_CONSERVATIVE_RASTERIZATION_NV
      *iv_return = GL_CONSERVATIVE_RASTERIZATION_NV;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_DEBUG_CALLBACK_USER_PARAM_ARB", 32)) {
    /*                                       ^              */
#ifdef GL_DEBUG_CALLBACK_USER_PARAM_ARB
      *iv_return = GL_DEBUG_CALLBACK_USER_PARAM_ARB;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_MAX_DEBUG_LOGGED_MESSAGES_AMD", 32)) {
    /*                                       ^              */
#ifdef GL_MAX_DEBUG_LOGGED_MESSAGES_AMD
      *iv_return = GL_MAX_DEBUG_LOGGED_MESSAGES_AMD;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_MAX_DEBUG_LOGGED_MESSAGES_ARB", 32)) {
    /*                                       ^              */
#ifdef GL_MAX_DEBUG_LOGGED_MESSAGES_ARB
      *iv_return = GL_MAX_DEBUG_LOGGED_MESSAGES_ARB;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_PROXY_TEXTURE_COLOR_TABLE_SGI", 32)) {
    /*                                       ^              */
#ifdef GL_PROXY_TEXTURE_COLOR_TABLE_SGI
      *iv_return = GL_PROXY_TEXTURE_COLOR_TABLE_SGI;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_TEXTURE_COMPRESSED_IMAGE_SIZE", 32)) {
    /*                                       ^              */
#ifdef GL_TEXTURE_COMPRESSED_IMAGE_SIZE
      *iv_return = GL_TEXTURE_COMPRESSED_IMAGE_SIZE;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case 'B':
    if (memEQ(name, "GL_DEBUG_TYPE_UNDEFINED_BEHAVIOR", 32)) {
    /*                                       ^              */
#ifdef GL_DEBUG_TYPE_UNDEFINED_BEHAVIOR
      *iv_return = GL_DEBUG_TYPE_UNDEFINED_BEHAVIOR;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_POST_CONVOLUTION_RED_BIAS_EXT", 32)) {
    /*                                       ^              */
#ifdef GL_POST_CONVOLUTION_RED_BIAS_EXT
      *iv_return = GL_POST_CONVOLUTION_RED_BIAS_EXT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glBindVideoCaptureStreamBufferNV", 32)) {
    /*                                       ^              */
#ifdef glBindVideoCaptureStreamBufferNV
      *iv_return = glBindVideoCaptureStreamBufferNV;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glGetActiveAtomicCounterBufferiv", 32)) {
    /*                                       ^              */
#ifdef glGetActiveAtomicCounterBufferiv
      *iv_return = glGetActiveAtomicCounterBufferiv;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case 'C':
    if (memEQ(name, "GL_FRAGMENT_COVERAGE_TO_COLOR_NV", 32)) {
    /*                                       ^              */
#ifdef GL_FRAGMENT_COVERAGE_TO_COLOR_NV
      *iv_return = GL_FRAGMENT_COVERAGE_TO_COLOR_NV;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_MAX_CLIENT_ATTRIB_STACK_DEPTH", 32)) {
    /*                                       ^              */
#ifdef GL_MAX_CLIENT_ATTRIB_STACK_DEPTH
      *iv_return = GL_MAX_CLIENT_ATTRIB_STACK_DEPTH;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_UNPACK_COMPRESSED_BLOCK_DEPTH", 32)) {
    /*                                       ^              */
#ifdef GL_UNPACK_COMPRESSED_BLOCK_DEPTH
      *iv_return = GL_UNPACK_COMPRESSED_BLOCK_DEPTH;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_UNPACK_COMPRESSED_BLOCK_WIDTH", 32)) {
    /*                                       ^              */
#ifdef GL_UNPACK_COMPRESSED_BLOCK_WIDTH
      *iv_return = GL_UNPACK_COMPRESSED_BLOCK_WIDTH;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_UNSIGNED_INT_SAMPLER_CUBE_EXT", 32)) {
    /*                                       ^              */
#ifdef GL_UNSIGNED_INT_SAMPLER_CUBE_EXT
      *iv_return = GL_UNSIGNED_INT_SAMPLER_CUBE_EXT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glListDrawCommandsStatesClientNV", 32)) {
    /*                                       ^              */
#ifdef glListDrawCommandsStatesClientNV
      *iv_return = glListDrawCommandsStatesClientNV;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case 'D':
    if (memEQ(name, "GL_COMPRESSED_RGBA_S3TC_DXT1_EXT", 32)) {
    /*                                       ^              */
#ifdef GL_COMPRESSED_RGBA_S3TC_DXT1_EXT
      *iv_return = GL_COMPRESSED_RGBA_S3TC_DXT1_EXT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_COMPRESSED_RGBA_S3TC_DXT3_EXT", 32)) {
    /*                                       ^              */
#ifdef GL_COMPRESSED_RGBA_S3TC_DXT3_EXT
      *iv_return = GL_COMPRESSED_RGBA_S3TC_DXT3_EXT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_COMPRESSED_RGBA_S3TC_DXT5_EXT", 32)) {
    /*                                       ^              */
#ifdef GL_COMPRESSED_RGBA_S3TC_DXT5_EXT
      *iv_return = GL_COMPRESSED_RGBA_S3TC_DXT5_EXT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_COMPRESSED_SRGB_S3TC_DXT1_EXT", 32)) {
    /*                                       ^              */
#ifdef GL_COMPRESSED_SRGB_S3TC_DXT1_EXT
      *iv_return = GL_COMPRESSED_SRGB_S3TC_DXT1_EXT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_CURRENT_MATRIX_STACK_DEPTH_NV", 32)) {
    /*                                       ^              */
#ifdef GL_CURRENT_MATRIX_STACK_DEPTH_NV
      *iv_return = GL_CURRENT_MATRIX_STACK_DEPTH_NV;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_PIXEL_PACK_BUFFER_BINDING_ARB", 32)) {
    /*                                       ^              */
#ifdef GL_PIXEL_PACK_BUFFER_BINDING_ARB
      *iv_return = GL_PIXEL_PACK_BUFFER_BINDING_ARB;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_PIXEL_PACK_BUFFER_BINDING_EXT", 32)) {
    /*                                       ^              */
#ifdef GL_PIXEL_PACK_BUFFER_BINDING_EXT
      *iv_return = GL_PIXEL_PACK_BUFFER_BINDING_EXT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case 'E':
    if (memEQ(name, "GL_CURRENT_RASTER_TEXTURE_COORDS", 32)) {
    /*                                       ^              */
#ifdef GL_CURRENT_RASTER_TEXTURE_COORDS
      *iv_return = GL_CURRENT_RASTER_TEXTURE_COORDS;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_POST_COLOR_MATRIX_GREEN_SCALE", 32)) {
    /*                                       ^              */
#ifdef GL_POST_COLOR_MATRIX_GREEN_SCALE
      *iv_return = GL_POST_COLOR_MATRIX_GREEN_SCALE;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_PRIMITIVE_RESTART_FIXED_INDEX", 32)) {
    /*                                       ^              */
#ifdef GL_PRIMITIVE_RESTART_FIXED_INDEX
      *iv_return = GL_PRIMITIVE_RESTART_FIXED_INDEX;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_TEXTURE_COORD_ARRAY_LENGTH_NV", 32)) {
    /*                                       ^              */
#ifdef GL_TEXTURE_COORD_ARRAY_LENGTH_NV
      *iv_return = GL_TEXTURE_COORD_ARRAY_LENGTH_NV;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_VERTEX_ATTRIB_ARRAY_LENGTH_NV", 32)) {
    /*                                       ^              */
#ifdef GL_VERTEX_ATTRIB_ARRAY_LENGTH_NV
      *iv_return = GL_VERTEX_ATTRIB_ARRAY_LENGTH_NV;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_VERTEX_ATTRIB_RELATIVE_OFFSET", 32)) {
    /*                                       ^              */
#ifdef GL_VERTEX_ATTRIB_RELATIVE_OFFSET
      *iv_return = GL_VERTEX_ATTRIB_RELATIVE_OFFSET;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_VIDEO_CAPTURE_FRAME_HEIGHT_NV", 32)) {
    /*                                       ^              */
#ifdef GL_VIDEO_CAPTURE_FRAME_HEIGHT_NV
      *iv_return = GL_VIDEO_CAPTURE_FRAME_HEIGHT_NV;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case 'F':
    if (memEQ(name, "GL_TRANSFORM_FEEDBACK_BUFFER_EXT", 32)) {
    /*                                       ^              */
#ifdef GL_TRANSFORM_FEEDBACK_BUFFER_EXT
      *iv_return = GL_TRANSFORM_FEEDBACK_BUFFER_EXT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_UNSIGNED_INT_IMAGE_BUFFER_EXT", 32)) {
    /*                                       ^              */
#ifdef GL_UNSIGNED_INT_IMAGE_BUFFER_EXT
      *iv_return = GL_UNSIGNED_INT_IMAGE_BUFFER_EXT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case 'H':
    if (memEQ(name, "GL_CLIP_VOLUME_CLIPPING_HINT_EXT", 32)) {
    /*                                       ^              */
#ifdef GL_CLIP_VOLUME_CLIPPING_HINT_EXT
      *iv_return = GL_CLIP_VOLUME_CLIPPING_HINT_EXT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_FONT_MAX_ADVANCE_WIDTH_BIT_NV", 32)) {
    /*                                       ^              */
#ifdef GL_FONT_MAX_ADVANCE_WIDTH_BIT_NV
      *iv_return = GL_FONT_MAX_ADVANCE_WIDTH_BIT_NV;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_POST_COLOR_MATRIX_ALPHA_SCALE", 32)) {
    /*                                       ^              */
#ifdef GL_POST_COLOR_MATRIX_ALPHA_SCALE
      *iv_return = GL_POST_COLOR_MATRIX_ALPHA_SCALE;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case 'I':
    if (memEQ(name, "GL_CLIPPING_INPUT_PRIMITIVES_ARB", 32)) {
    /*                                       ^              */
#ifdef GL_CLIPPING_INPUT_PRIMITIVES_ARB
      *iv_return = GL_CLIPPING_INPUT_PRIMITIVES_ARB;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_CONSERVATIVE_RASTER_DILATE_NV", 32)) {
    /*                                       ^              */
#ifdef GL_CONSERVATIVE_RASTER_DILATE_NV
      *iv_return = GL_CONSERVATIVE_RASTER_DILATE_NV;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_OBJECT_DISTANCE_TO_POINT_SGIS", 32)) {
    /*                                       ^              */
#ifdef GL_OBJECT_DISTANCE_TO_POINT_SGIS
      *iv_return = GL_OBJECT_DISTANCE_TO_POINT_SGIS;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_POST_TEXTURE_FILTER_BIAS_SGIX", 32)) {
    /*                                       ^              */
#ifdef GL_POST_TEXTURE_FILTER_BIAS_SGIX
      *iv_return = GL_POST_TEXTURE_FILTER_BIAS_SGIX;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_QUERY_BY_REGION_WAIT_INVERTED", 32)) {
    /*                                       ^              */
#ifdef GL_QUERY_BY_REGION_WAIT_INVERTED
      *iv_return = GL_QUERY_BY_REGION_WAIT_INVERTED;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_VERTEX_ARRAY_RANGE_POINTER_NV", 32)) {
    /*                                       ^              */
#ifdef GL_VERTEX_ARRAY_RANGE_POINTER_NV
      *iv_return = GL_VERTEX_ARRAY_RANGE_POINTER_NV;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_VERTEX_SHADER_INVOCATIONS_ARB", 32)) {
    /*                                       ^              */
#ifdef GL_VERTEX_SHADER_INVOCATIONS_ARB
      *iv_return = GL_VERTEX_SHADER_INVOCATIONS_ARB;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case 'L':
    if (memEQ(name, "GL_FOG_COORDINATE_ARRAY_LIST_IBM", 32)) {
    /*                                       ^              */
#ifdef GL_FOG_COORDINATE_ARRAY_LIST_IBM
      *iv_return = GL_FOG_COORDINATE_ARRAY_LIST_IBM;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_TEXTURE_CUBE_MAP_SEAMLESS_ARB", 32)) {
    /*                                       ^              */
#ifdef GL_TEXTURE_CUBE_MAP_SEAMLESS_ARB
      *iv_return = GL_TEXTURE_CUBE_MAP_SEAMLESS_ARB;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case 'M':
    if (memEQ(name, "GL_MAX_FRAGMENT_INPUT_COMPONENTS", 32)) {
    /*                                       ^              */
#ifdef GL_MAX_FRAGMENT_INPUT_COMPONENTS
      *iv_return = GL_MAX_FRAGMENT_INPUT_COMPONENTS;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_MAX_GEOMETRY_INPUT_COMPONENTS", 32)) {
    /*                                       ^              */
#ifdef GL_MAX_GEOMETRY_INPUT_COMPONENTS
      *iv_return = GL_MAX_GEOMETRY_INPUT_COMPONENTS;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_MAX_VERTEX_UNIFORM_COMPONENTS", 32)) {
    /*                                       ^              */
#ifdef GL_MAX_VERTEX_UNIFORM_COMPONENTS
      *iv_return = GL_MAX_VERTEX_UNIFORM_COMPONENTS;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_MULTISAMPLE_COVERAGE_MODES_NV", 32)) {
    /*                                       ^              */
#ifdef GL_MULTISAMPLE_COVERAGE_MODES_NV
      *iv_return = GL_MULTISAMPLE_COVERAGE_MODES_NV;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_RENDERBUFFER_COLOR_SAMPLES_NV", 32)) {
    /*                                       ^              */
#ifdef GL_RENDERBUFFER_COLOR_SAMPLES_NV
      *iv_return = GL_RENDERBUFFER_COLOR_SAMPLES_NV;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_TERMINATE_SEQUENCE_COMMAND_NV", 32)) {
    /*                                       ^              */
#ifdef GL_TERMINATE_SEQUENCE_COMMAND_NV
      *iv_return = GL_TERMINATE_SEQUENCE_COMMAND_NV;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case 'N':
    if (memEQ(name, "GL_INTENSITY_EXTENDED_RANGE_SGIX", 32)) {
    /*                                       ^              */
#ifdef GL_INTENSITY_EXTENDED_RANGE_SGIX
      *iv_return = GL_INTENSITY_EXTENDED_RANGE_SGIX;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_LUMINANCE_EXTENDED_RANGE_SGIX", 32)) {
    /*                                       ^              */
#ifdef GL_LUMINANCE_EXTENDED_RANGE_SGIX
      *iv_return = GL_LUMINANCE_EXTENDED_RANGE_SGIX;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_PERFQUERY_COUNTER_EVENT_INTEL", 32)) {
    /*                                       ^              */
#ifdef GL_PERFQUERY_COUNTER_EVENT_INTEL
      *iv_return = GL_PERFQUERY_COUNTER_EVENT_INTEL;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_SMOOTH_LINE_WIDTH_GRANULARITY", 32)) {
    /*                                       ^              */
#ifdef GL_SMOOTH_LINE_WIDTH_GRANULARITY
      *iv_return = GL_SMOOTH_LINE_WIDTH_GRANULARITY;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_SMOOTH_POINT_SIZE_GRANULARITY", 32)) {
    /*                                       ^              */
#ifdef GL_SMOOTH_POINT_SIZE_GRANULARITY
      *iv_return = GL_SMOOTH_POINT_SIZE_GRANULARITY;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_TEXTURE_BINDING_RECTANGLE_ARB", 32)) {
    /*                                       ^              */
#ifdef GL_TEXTURE_BINDING_RECTANGLE_ARB
      *iv_return = GL_TEXTURE_BINDING_RECTANGLE_ARB;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_TEXTURE_BINDING_RECTANGLE_EXT", 32)) {
    /*                                       ^              */
#ifdef GL_TEXTURE_BINDING_RECTANGLE_EXT
      *iv_return = GL_TEXTURE_BINDING_RECTANGLE_EXT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_TRANSFORM_FEEDBACK_BINDING_NV", 32)) {
    /*                                       ^              */
#ifdef GL_TRANSFORM_FEEDBACK_BINDING_NV
      *iv_return = GL_TRANSFORM_FEEDBACK_BINDING_NV;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_VIDEO_COLOR_CONVERSION_MAX_NV", 32)) {
    /*                                       ^              */
#ifdef GL_VIDEO_COLOR_CONVERSION_MAX_NV
      *iv_return = GL_VIDEO_COLOR_CONVERSION_MAX_NV;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_VIDEO_COLOR_CONVERSION_MIN_NV", 32)) {
    /*                                       ^              */
#ifdef GL_VIDEO_COLOR_CONVERSION_MIN_NV
      *iv_return = GL_VIDEO_COLOR_CONVERSION_MIN_NV;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case 'O':
    if (memEQ(name, "GL_CURRENT_RASTER_POSITION_VALID", 32)) {
    /*                                       ^              */
#ifdef GL_CURRENT_RASTER_POSITION_VALID
      *iv_return = GL_CURRENT_RASTER_POSITION_VALID;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_MAX_SHADER_STORAGE_BLOCK_SIZE", 32)) {
    /*                                       ^              */
#ifdef GL_MAX_SHADER_STORAGE_BLOCK_SIZE
      *iv_return = GL_MAX_SHADER_STORAGE_BLOCK_SIZE;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_POST_COLOR_MATRIX_COLOR_TABLE", 32)) {
    /*                                       ^              */
#ifdef GL_POST_COLOR_MATRIX_COLOR_TABLE
      *iv_return = GL_POST_COLOR_MATRIX_COLOR_TABLE;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_TEXTURE_COMPRESSED_BLOCK_SIZE", 32)) {
    /*                                       ^              */
#ifdef GL_TEXTURE_COMPRESSED_BLOCK_SIZE
      *iv_return = GL_TEXTURE_COMPRESSED_BLOCK_SIZE;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_TEXTURE_COORD_ARRAY_COUNT_EXT", 32)) {
    /*                                       ^              */
#ifdef GL_TEXTURE_COORD_ARRAY_COUNT_EXT
      *iv_return = GL_TEXTURE_COORD_ARRAY_COUNT_EXT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case 'P':
    if (memEQ(name, "GL_INVALID_FRAMEBUFFER_OPERATION", 32)) {
    /*                                       ^              */
#ifdef GL_INVALID_FRAMEBUFFER_OPERATION
      *iv_return = GL_INVALID_FRAMEBUFFER_OPERATION;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_NUM_INSTRUCTIONS_PER_PASS_ATI", 32)) {
    /*                                       ^              */
#ifdef GL_NUM_INSTRUCTIONS_PER_PASS_ATI
      *iv_return = GL_NUM_INSTRUCTIONS_PER_PASS_ATI;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_RASTER_POSITION_UNCLIPPED_IBM", 32)) {
    /*                                       ^              */
#ifdef GL_RASTER_POSITION_UNCLIPPED_IBM
      *iv_return = GL_RASTER_POSITION_UNCLIPPED_IBM;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case 'Q':
    if (memEQ(name, "GL_CURRENT_SAMPLE_COUNT_QUERY_NV", 32)) {
    /*                                       ^              */
#ifdef GL_CURRENT_SAMPLE_COUNT_QUERY_NV
      *iv_return = GL_CURRENT_SAMPLE_COUNT_QUERY_NV;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case 'R':
    if (memEQ(name, "GL_CURRENT_OCCLUSION_QUERY_ID_NV", 32)) {
    /*                                       ^              */
#ifdef GL_CURRENT_OCCLUSION_QUERY_ID_NV
      *iv_return = GL_CURRENT_OCCLUSION_QUERY_ID_NV;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_MATRIX_INDEX_ARRAY_STRIDE_ARB", 32)) {
    /*                                       ^              */
#ifdef GL_MATRIX_INDEX_ARRAY_STRIDE_ARB
      *iv_return = GL_MATRIX_INDEX_ARRAY_STRIDE_ARB;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glFlushMappedNamedBufferRangeEXT", 32)) {
    /*                                       ^              */
#ifdef glFlushMappedNamedBufferRangeEXT
      *iv_return = glFlushMappedNamedBufferRangeEXT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case 'S':
    if (memEQ(name, "GL_FONT_NUM_GLYPH_INDICES_BIT_NV", 32)) {
    /*                                       ^              */
#ifdef GL_FONT_NUM_GLYPH_INDICES_BIT_NV
      *iv_return = GL_FONT_NUM_GLYPH_INDICES_BIT_NV;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_MAX_BINDABLE_UNIFORM_SIZE_EXT", 32)) {
    /*                                       ^              */
#ifdef GL_MAX_BINDABLE_UNIFORM_SIZE_EXT
      *iv_return = GL_MAX_BINDABLE_UNIFORM_SIZE_EXT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_MAX_CUBE_MAP_TEXTURE_SIZE_ARB", 32)) {
    /*                                       ^              */
#ifdef GL_MAX_CUBE_MAP_TEXTURE_SIZE_ARB
      *iv_return = GL_MAX_CUBE_MAP_TEXTURE_SIZE_ARB;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_MAX_CUBE_MAP_TEXTURE_SIZE_EXT", 32)) {
    /*                                       ^              */
#ifdef GL_MAX_CUBE_MAP_TEXTURE_SIZE_EXT
      *iv_return = GL_MAX_CUBE_MAP_TEXTURE_SIZE_EXT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_POINT_FADE_THRESHOLD_SIZE_ARB", 32)) {
    /*                                       ^              */
#ifdef GL_POINT_FADE_THRESHOLD_SIZE_ARB
      *iv_return = GL_POINT_FADE_THRESHOLD_SIZE_ARB;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_POINT_FADE_THRESHOLD_SIZE_EXT", 32)) {
    /*                                       ^              */
#ifdef GL_POINT_FADE_THRESHOLD_SIZE_EXT
      *iv_return = GL_POINT_FADE_THRESHOLD_SIZE_EXT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_RENDERBUFFER_STENCIL_SIZE_EXT", 32)) {
    /*                                       ^              */
#ifdef GL_RENDERBUFFER_STENCIL_SIZE_EXT
      *iv_return = GL_RENDERBUFFER_STENCIL_SIZE_EXT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_VERTEX_PROGRAM_POINT_SIZE_ARB", 32)) {
    /*                                       ^              */
#ifdef GL_VERTEX_PROGRAM_POINT_SIZE_ARB
      *iv_return = GL_VERTEX_PROGRAM_POINT_SIZE_ARB;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case 'T':
    if (memEQ(name, "GL_FOG_COORDINATE_ARRAY_TYPE_EXT", 32)) {
    /*                                       ^              */
#ifdef GL_FOG_COORDINATE_ARRAY_TYPE_EXT
      *iv_return = GL_FOG_COORDINATE_ARRAY_TYPE_EXT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_LIGHT_MODEL_COLOR_CONTROL_EXT", 32)) {
    /*                                       ^              */
#ifdef GL_LIGHT_MODEL_COLOR_CONTROL_EXT
      *iv_return = GL_LIGHT_MODEL_COLOR_CONTROL_EXT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_PIXEL_TRANSFORM_2D_MATRIX_EXT", 32)) {
    /*                                       ^              */
#ifdef GL_PIXEL_TRANSFORM_2D_MATRIX_EXT
      *iv_return = GL_PIXEL_TRANSFORM_2D_MATRIX_EXT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_POINT_SPRITE_CULL_CENTER_ATIX", 32)) {
    /*                                       ^              */
#ifdef GL_POINT_SPRITE_CULL_CENTER_ATIX
      *iv_return = GL_POINT_SPRITE_CULL_CENTER_ATIX;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_PROGRAM_ADDRESS_REGISTERS_ARB", 32)) {
    /*                                       ^              */
#ifdef GL_PROGRAM_ADDRESS_REGISTERS_ARB
      *iv_return = GL_PROGRAM_ADDRESS_REGISTERS_ARB;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_PROGRAM_NATIVE_PARAMETERS_ARB", 32)) {
    /*                                       ^              */
#ifdef GL_PROGRAM_NATIVE_PARAMETERS_ARB
      *iv_return = GL_PROGRAM_NATIVE_PARAMETERS_ARB;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_REFERENCED_BY_FRAGMENT_SHADER", 32)) {
    /*                                       ^              */
#ifdef GL_REFERENCED_BY_FRAGMENT_SHADER
      *iv_return = GL_REFERENCED_BY_FRAGMENT_SHADER;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_TEXTURE_COMPARE_OPERATOR_SGIX", 32)) {
    /*                                       ^              */
#ifdef GL_TEXTURE_COMPARE_OPERATOR_SGIX
      *iv_return = GL_TEXTURE_COMPARE_OPERATOR_SGIX;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_TRANSFORM_FEEDBACK_ATTRIBS_NV", 32)) {
    /*                                       ^              */
#ifdef GL_TRANSFORM_FEEDBACK_ATTRIBS_NV
      *iv_return = GL_TRANSFORM_FEEDBACK_ATTRIBS_NV;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case 'U':
    if (memEQ(name, "GL_UNIFORM_BLOCK_ACTIVE_UNIFORMS", 32)) {
    /*                                       ^              */
#ifdef GL_UNIFORM_BLOCK_ACTIVE_UNIFORMS
      *iv_return = GL_UNIFORM_BLOCK_ACTIVE_UNIFORMS;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case 'V':
    if (memEQ(name, "GL_NUM_SHADING_LANGUAGE_VERSIONS", 32)) {
    /*                                       ^              */
#ifdef GL_NUM_SHADING_LANGUAGE_VERSIONS
      *iv_return = GL_NUM_SHADING_LANGUAGE_VERSIONS;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case 'Y':
    if (memEQ(name, "GL_REFERENCED_BY_GEOMETRY_SHADER", 32)) {
    /*                                       ^              */
#ifdef GL_REFERENCED_BY_GEOMETRY_SHADER
      *iv_return = GL_REFERENCED_BY_GEOMETRY_SHADER;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_SAMPLER_CUBE_MAP_ARRAY_SHADOW", 32)) {
    /*                                       ^              */
#ifdef GL_SAMPLER_CUBE_MAP_ARRAY_SHADOW
      *iv_return = GL_SAMPLER_CUBE_MAP_ARRAY_SHADOW;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case 'Z':
    if (memEQ(name, "GL_VERTEX_ATTRIB_MAP1_SIZE_APPLE", 32)) {
    /*                                       ^              */
#ifdef GL_VERTEX_ATTRIB_MAP1_SIZE_APPLE
      *iv_return = GL_VERTEX_ATTRIB_MAP1_SIZE_APPLE;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_VERTEX_ATTRIB_MAP2_SIZE_APPLE", 32)) {
    /*                                       ^              */
#ifdef GL_VERTEX_ATTRIB_MAP2_SIZE_APPLE
      *iv_return = GL_VERTEX_ATTRIB_MAP2_SIZE_APPLE;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case '_':
    if (memEQ(name, "GLEW_ARB_parallel_shader_compile", 32)) {
    /*                                       ^              */
#ifdef GLEW_ARB_parallel_shader_compile
      *iv_return = GLEW_ARB_parallel_shader_compile;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GLEW_ARB_separate_shader_objects", 32)) {
    /*                                       ^              */
#ifdef GLEW_ARB_separate_shader_objects
      *iv_return = GLEW_ARB_separate_shader_objects;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GLEW_EXT_separate_shader_objects", 32)) {
    /*                                       ^              */
#ifdef GLEW_EXT_separate_shader_objects
      *iv_return = GLEW_EXT_separate_shader_objects;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GLEW_NV_parameter_buffer_object2", 32)) {
    /*                                       ^              */
#ifdef GLEW_NV_parameter_buffer_object2
      *iv_return = GLEW_NV_parameter_buffer_object2;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_ACTIVE_ATOMIC_COUNTER_BUFFERS", 32)) {
    /*                                       ^              */
#ifdef GL_ACTIVE_ATOMIC_COUNTER_BUFFERS
      *iv_return = GL_ACTIVE_ATOMIC_COUNTER_BUFFERS;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_ATOMIC_COUNTER_BUFFER_BINDING", 32)) {
    /*                                       ^              */
#ifdef GL_ATOMIC_COUNTER_BUFFER_BINDING
      *iv_return = GL_ATOMIC_COUNTER_BUFFER_BINDING;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_BUFFER_UPDATE_BARRIER_BIT_EXT", 32)) {
    /*                                       ^              */
#ifdef GL_BUFFER_UPDATE_BARRIER_BIT_EXT
      *iv_return = GL_BUFFER_UPDATE_BARRIER_BIT_EXT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_CONTEXT_FLAG_NO_ERROR_BIT_KHR", 32)) {
    /*                                       ^              */
#ifdef GL_CONTEXT_FLAG_NO_ERROR_BIT_KHR
      *iv_return = GL_CONTEXT_FLAG_NO_ERROR_BIT_KHR;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_ELEMENT_ARRAY_BARRIER_BIT_EXT", 32)) {
    /*                                       ^              */
#ifdef GL_ELEMENT_ARRAY_BARRIER_BIT_EXT
      *iv_return = GL_ELEMENT_ARRAY_BARRIER_BIT_EXT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_LGPU_SEPARATE_STORAGE_BIT_NVX", 32)) {
    /*                                       ^              */
#ifdef GL_LGPU_SEPARATE_STORAGE_BIT_NVX
      *iv_return = GL_LGPU_SEPARATE_STORAGE_BIT_NVX;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_MAX_RECTANGLE_TEXTURE_SIZE_NV", 32)) {
    /*                                       ^              */
#ifdef GL_MAX_RECTANGLE_TEXTURE_SIZE_NV
      *iv_return = GL_MAX_RECTANGLE_TEXTURE_SIZE_NV;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_SECONDARY_COLOR_ARRAY_POINTER", 32)) {
    /*                                       ^              */
#ifdef GL_SECONDARY_COLOR_ARRAY_POINTER
      *iv_return = GL_SECONDARY_COLOR_ARRAY_POINTER;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_SHADER_STORAGE_BUFFER_BINDING", 32)) {
    /*                                       ^              */
#ifdef GL_SHADER_STORAGE_BUFFER_BINDING
      *iv_return = GL_SHADER_STORAGE_BUFFER_BINDING;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_TEXTURE_FETCH_BARRIER_BIT_EXT", 32)) {
    /*                                       ^              */
#ifdef GL_TEXTURE_FETCH_BARRIER_BIT_EXT
      *iv_return = GL_TEXTURE_FETCH_BARRIER_BIT_EXT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case 'a':
    if (memEQ(name, "GLEW_ARB_shader_image_load_store", 32)) {
    /*                                       ^              */
#ifdef GLEW_ARB_shader_image_load_store
      *iv_return = GLEW_ARB_shader_image_load_store;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GLEW_EXT_separate_specular_color", 32)) {
    /*                                       ^              */
#ifdef GLEW_EXT_separate_specular_color
      *iv_return = GLEW_EXT_separate_specular_color;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GLEW_EXT_shader_image_load_store", 32)) {
    /*                                       ^              */
#ifdef GLEW_EXT_shader_image_load_store
      *iv_return = GLEW_EXT_shader_image_load_store;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GLEW_KHR_blend_equation_advanced", 32)) {
    /*                                       ^              */
#ifdef GLEW_KHR_blend_equation_advanced
      *iv_return = GLEW_KHR_blend_equation_advanced;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glCompressedTextureSubImage1DEXT", 32)) {
    /*                                       ^              */
#ifdef glCompressedTextureSubImage1DEXT
      *iv_return = glCompressedTextureSubImage1DEXT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glCompressedTextureSubImage2DEXT", 32)) {
    /*                                       ^              */
#ifdef glCompressedTextureSubImage2DEXT
      *iv_return = glCompressedTextureSubImage2DEXT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glCompressedTextureSubImage3DEXT", 32)) {
    /*                                       ^              */
#ifdef glCompressedTextureSubImage3DEXT
      *iv_return = glCompressedTextureSubImage3DEXT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glGetNamedFramebufferParameteriv", 32)) {
    /*                                       ^              */
#ifdef glGetNamedFramebufferParameteriv
      *iv_return = glGetNamedFramebufferParameteriv;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glTextureStorage2DMultisampleEXT", 32)) {
    /*                                       ^              */
#ifdef glTextureStorage2DMultisampleEXT
      *iv_return = glTextureStorage2DMultisampleEXT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glTextureStorage3DMultisampleEXT", 32)) {
    /*                                       ^              */
#ifdef glTextureStorage3DMultisampleEXT
      *iv_return = glTextureStorage3DMultisampleEXT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case 'c':
    if (memEQ(name, "GLEW_ARB_program_interface_query", 32)) {
    /*                                       ^              */
#ifdef GLEW_ARB_program_interface_query
      *iv_return = GLEW_ARB_program_interface_query;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_ARB_pipeline_statistics_query", 32)) {
    /*                                       ^              */
#ifdef GL_ARB_pipeline_statistics_query
      *iv_return = GL_ARB_pipeline_statistics_query;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case 'd':
    if (memEQ(name, "GLEW_ARB_texture_mirrored_repeat", 32)) {
    /*                                       ^              */
#ifdef GLEW_ARB_texture_mirrored_repeat
      *iv_return = GLEW_ARB_texture_mirrored_repeat;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GLEW_IBM_texture_mirrored_repeat", 32)) {
    /*                                       ^              */
#ifdef GLEW_IBM_texture_mirrored_repeat
      *iv_return = GLEW_IBM_texture_mirrored_repeat;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case 'e':
    if (memEQ(name, "GLEW_EXT_texture_shared_exponent", 32)) {
    /*                                       ^              */
#ifdef GLEW_EXT_texture_shared_exponent
      *iv_return = GLEW_EXT_texture_shared_exponent;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GLEW_HP_convolution_border_modes", 32)) {
    /*                                       ^              */
#ifdef GLEW_HP_convolution_border_modes
      *iv_return = GLEW_HP_convolution_border_modes;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_ARB_draw_elements_base_vertex", 32)) {
    /*                                       ^              */
#ifdef GL_ARB_draw_elements_base_vertex
      *iv_return = GL_ARB_draw_elements_base_vertex;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glGetCombinerOutputParameterfvNV", 32)) {
    /*                                       ^              */
#ifdef glGetCombinerOutputParameterfvNV
      *iv_return = glGetCombinerOutputParameterfvNV;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glGetCombinerOutputParameterivNV", 32)) {
    /*                                       ^              */
#ifdef glGetCombinerOutputParameterivNV
      *iv_return = glGetCombinerOutputParameterivNV;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glGetImageTransformParameterfvHP", 32)) {
    /*                                       ^              */
#ifdef glGetImageTransformParameterfvHP
      *iv_return = glGetImageTransformParameterfvHP;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glGetImageTransformParameterivHP", 32)) {
    /*                                       ^              */
#ifdef glGetImageTransformParameterivHP
      *iv_return = glGetImageTransformParameterivHP;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glNamedFramebufferTextureFaceEXT", 32)) {
    /*                                       ^              */
#ifdef glNamedFramebufferTextureFaceEXT
      *iv_return = glNamedFramebufferTextureFaceEXT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glTexCoord2fColor4ubVertex3fvSUN", 32)) {
    /*                                       ^              */
#ifdef glTexCoord2fColor4ubVertex3fvSUN
      *iv_return = glTexCoord2fColor4ubVertex3fvSUN;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glTexCoord2fNormal3fVertex3fvSUN", 32)) {
    /*                                       ^              */
#ifdef glTexCoord2fNormal3fVertex3fvSUN
      *iv_return = glTexCoord2fNormal3fVertex3fvSUN;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case 'f':
    if (memEQ(name, "glGetActiveSubroutineUniformName", 32)) {
    /*                                       ^              */
#ifdef glGetActiveSubroutineUniformName
      *iv_return = glGetActiveSubroutineUniformName;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glInvalidateNamedFramebufferData", 32)) {
    /*                                       ^              */
#ifdef glInvalidateNamedFramebufferData
      *iv_return = glInvalidateNamedFramebufferData;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case 'i':
    if (memEQ(name, "GL_3DFX_texture_compression_FXT1", 32)) {
    /*                                       ^              */
#ifdef GL_3DFX_texture_compression_FXT1
      *iv_return = GL_3DFX_texture_compression_FXT1;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glFramebufferSampleLocationsfvNV", 32)) {
    /*                                       ^              */
#ifdef glFramebufferSampleLocationsfvNV
      *iv_return = glFramebufferSampleLocationsfvNV;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glFramebufferTextureMultiviewOVR", 32)) {
    /*                                       ^              */
#ifdef glFramebufferTextureMultiviewOVR
      *iv_return = glFramebufferTextureMultiviewOVR;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case 'l':
    if (memEQ(name, "GL_ARB_explicit_uniform_location", 32)) {
    /*                                       ^              */
#ifdef GL_ARB_explicit_uniform_location
      *iv_return = GL_ARB_explicit_uniform_location;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case 'm':
    if (memEQ(name, "GLEW_ARB_fragment_program_shadow", 32)) {
    /*                                       ^              */
#ifdef GLEW_ARB_fragment_program_shadow
      *iv_return = GLEW_ARB_fragment_program_shadow;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glConservativeRasterParameterfNV", 32)) {
    /*                                       ^              */
#ifdef glConservativeRasterParameterfNV
      *iv_return = glConservativeRasterParameterfNV;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glConservativeRasterParameteriNV", 32)) {
    /*                                       ^              */
#ifdef glConservativeRasterParameteriNV
      *iv_return = glConservativeRasterParameteriNV;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case 'n':
    if (memEQ(name, "GL_AMD_shader_atomic_counter_ops", 32)) {
    /*                                       ^              */
#ifdef GL_AMD_shader_atomic_counter_ops
      *iv_return = GL_AMD_shader_atomic_counter_ops;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_ARB_fragment_shader_interlock", 32)) {
    /*                                       ^              */
#ifdef GL_ARB_fragment_shader_interlock
      *iv_return = GL_ARB_fragment_shader_interlock;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_ARB_shader_atomic_counter_ops", 32)) {
    /*                                       ^              */
#ifdef GL_ARB_shader_atomic_counter_ops
      *iv_return = GL_ARB_shader_atomic_counter_ops;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glDrawTransformFeedbackInstanced", 32)) {
    /*                                       ^              */
#ifdef glDrawTransformFeedbackInstanced
      *iv_return = glDrawTransformFeedbackInstanced;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case 'r':
    if (memEQ(name, "GL_NV_conservative_raster_dilate", 32)) {
    /*                                       ^              */
#ifdef GL_NV_conservative_raster_dilate
      *iv_return = GL_NV_conservative_raster_dilate;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_NV_path_rendering_shared_edge", 32)) {
    /*                                       ^              */
#ifdef GL_NV_path_rendering_shared_edge
      *iv_return = GL_NV_path_rendering_shared_edge;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glGetNamedBufferParameterui64vNV", 32)) {
    /*                                       ^              */
#ifdef glGetNamedBufferParameterui64vNV
      *iv_return = glGetNamedBufferParameterui64vNV;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glGetTransformFeedbackVaryingEXT", 32)) {
    /*                                       ^              */
#ifdef glGetTransformFeedbackVaryingEXT
      *iv_return = glGetTransformFeedbackVaryingEXT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glGetTranslatedShaderSourceANGLE", 32)) {
    /*                                       ^              */
#ifdef glGetTranslatedShaderSourceANGLE
      *iv_return = glGetTranslatedShaderSourceANGLE;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case 's':
    if (memEQ(name, "GLEW_ATI_texture_compression_3dc", 32)) {
    /*                                       ^              */
#ifdef GLEW_ATI_texture_compression_3dc
      *iv_return = GLEW_ATI_texture_compression_3dc;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GLEW_EXT_blend_equation_separate", 32)) {
    /*                                       ^              */
#ifdef GLEW_EXT_blend_equation_separate
      *iv_return = GLEW_EXT_blend_equation_separate;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_AMD_vertex_shader_tessellator", 32)) {
    /*                                       ^              */
#ifdef GL_AMD_vertex_shader_tessellator
      *iv_return = GL_AMD_vertex_shader_tessellator;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glMakeTextureHandleNonResidentNV", 32)) {
    /*                                       ^              */
#ifdef glMakeTextureHandleNonResidentNV
      *iv_return = glMakeTextureHandleNonResidentNV;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case 't':
    if (memEQ(name, "GLEW_EXT_framebuffer_multisample", 32)) {
    /*                                       ^              */
#ifdef GLEW_EXT_framebuffer_multisample
      *iv_return = GLEW_EXT_framebuffer_multisample;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_ANGLE_framebuffer_multisample", 32)) {
    /*                                       ^              */
#ifdef GL_ANGLE_framebuffer_multisample
      *iv_return = GL_ANGLE_framebuffer_multisample;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_NV_fragment_coverage_to_color", 32)) {
    /*                                       ^              */
#ifdef GL_NV_fragment_coverage_to_color
      *iv_return = GL_NV_fragment_coverage_to_color;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_SGIX_texture_coordinate_clamp", 32)) {
    /*                                       ^              */
#ifdef GL_SGIX_texture_coordinate_clamp
      *iv_return = GL_SGIX_texture_coordinate_clamp;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glCheckNamedFramebufferStatusEXT", 32)) {
    /*                                       ^              */
#ifdef glCheckNamedFramebufferStatusEXT
      *iv_return = glCheckNamedFramebufferStatusEXT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glGetMultiTexLevelParameterfvEXT", 32)) {
    /*                                       ^              */
#ifdef glGetMultiTexLevelParameterfvEXT
      *iv_return = glGetMultiTexLevelParameterfvEXT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glGetMultiTexLevelParameterivEXT", 32)) {
    /*                                       ^              */
#ifdef glGetMultiTexLevelParameterivEXT
      *iv_return = glGetMultiTexLevelParameterivEXT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glGetPerfMonitorCounterStringAMD", 32)) {
    /*                                       ^              */
#ifdef glGetPerfMonitorCounterStringAMD
      *iv_return = glGetPerfMonitorCounterStringAMD;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glMulticastGetQueryObjectui64vNV", 32)) {
    /*                                       ^              */
#ifdef glMulticastGetQueryObjectui64vNV
      *iv_return = glMulticastGetQueryObjectui64vNV;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glRenderbufferStorageMultisample", 32)) {
    /*                                       ^              */
#ifdef glRenderbufferStorageMultisample
      *iv_return = glRenderbufferStorageMultisample;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case 'u':
    if (memEQ(name, "GL_MESA_shader_integer_functions", 32)) {
    /*                                       ^              */
#ifdef GL_MESA_shader_integer_functions
      *iv_return = GL_MESA_shader_integer_functions;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glVertexArrayBindVertexBufferEXT", 32)) {
    /*                                       ^              */
#ifdef glVertexArrayBindVertexBufferEXT
      *iv_return = glVertexArrayBindVertexBufferEXT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case 'v':
    if (memEQ(name, "GLEW_ARB_fragment_layer_viewport", 32)) {
    /*                                       ^              */
#ifdef GLEW_ARB_fragment_layer_viewport
      *iv_return = GLEW_ARB_fragment_layer_viewport;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  }
  return PERL_constant_NOTFOUND;
}

static int
constant_33 (pTHX_ const char *name, IV *iv_return) {
  /* When generated this function returned values for the list of names given
     here.  However, subsequent manual editing may have added or removed some.
     GLEW_ANGLE_pack_reverse_row_order GLEW_ARB_explicit_attrib_location
     GLEW_ARB_shading_language_420pack GLEW_ARB_shading_language_include
     GLEW_ARB_shading_language_packing GLEW_ARB_texture_compression_bptc
     GLEW_ARB_texture_compression_rgtc GLEW_ARB_texture_non_power_of_two
     GLEW_EXT_texture_compression_dxt1 GLEW_EXT_texture_compression_latc
     GLEW_EXT_texture_compression_rgtc GLEW_EXT_texture_compression_s3tc
     GLEW_NV_fragment_shader_interlock GLEW_NV_framebuffer_mixed_samples
     GLEW_NV_gpu_program5_mem_extended GLEW_NV_shader_atomic_fp16_vector
     GLEW_SUN_convolution_border_modes GL_AMD_stencil_operation_extended
     GL_ANGLE_texture_compression_dxt1 GL_ANGLE_texture_compression_dxt3
     GL_ANGLE_texture_compression_dxt5 GL_ANGLE_translated_shader_source
     GL_ARB_fragment_coord_conventions GL_ARB_framebuffer_no_attachments
     GL_ARB_vertex_type_2_10_10_10_rev GL_ATI_vertex_attrib_array_object
     GL_ATOMIC_COUNTER_BARRIER_BIT_EXT GL_BUFFER_SERIALIZED_MODIFY_APPLE
     GL_CLIPPING_OUTPUT_PRIMITIVES_ARB GL_COLOR_ARRAY_BUFFER_BINDING_ARB
     GL_COLOR_TABLE_INTENSITY_SIZE_EXT GL_COLOR_TABLE_INTENSITY_SIZE_SGI
     GL_COLOR_TABLE_LUMINANCE_SIZE_EXT GL_COLOR_TABLE_LUMINANCE_SIZE_SGI
     GL_COMPRESSED_LUMINANCE_ALPHA_ARB GL_COMPRESSED_LUMINANCE_LATC1_EXT
     GL_COMPRESSED_RED_GREEN_RGTC2_EXT GL_COMPRESSED_RGBA_ASTC_10x10_KHR
     GL_COMPRESSED_RGBA_ASTC_12x10_KHR GL_COMPRESSED_RGBA_ASTC_12x12_KHR
     GL_COMPRESSED_RGBA_BPTC_UNORM_ARB GL_COMPRESSED_RGB_S3TC_DXT1_ANGLE
     GL_COMPRESSED_TEXTURE_FORMATS_ARB GL_COMPUTE_SHADER_INVOCATIONS_ARB
     GL_CONTEXT_FLAG_ROBUST_ACCESS_BIT GL_CONTEXT_RELEASE_BEHAVIOR_FLUSH
     GL_CURRENT_MATRIX_STACK_DEPTH_ARB GL_CURRENT_RASTER_SECONDARY_COLOR
     GL_DEBUG_CATEGORY_APPLICATION_AMD GL_DEBUG_CATEGORY_DEPRECATION_AMD
     GL_DEBUG_CATEGORY_PERFORMANCE_AMD GL_DEBUG_SOURCE_WINDOW_SYSTEM_ARB
     GL_DEBUG_TYPE_DEPRECATED_BEHAVIOR GL_DRAW_ELEMENTS_STRIP_COMMAND_NV
     GL_DRAW_FRAMEBUFFER_BINDING_ANGLE GL_EDGE_FLAG_ARRAY_BUFFER_BINDING
     GL_EXT_texture_filter_anisotropic GL_FLOAT_32_UNSIGNED_INT_24_8_REV
     GL_FOG_COORD_ARRAY_BUFFER_BINDING GL_FONT_MAX_ADVANCE_HEIGHT_BIT_NV
     GL_FONT_UNDERLINE_POSITION_BIT_NV GL_FRAMEBUFFER_ATTACHMENT_LAYERED
     GL_FRAMEBUFFER_RENDERABLE_LAYERED GL_IMAGE_2D_MULTISAMPLE_ARRAY_EXT
     GL_IMPLEMENTATION_COLOR_READ_TYPE GL_INDEX_ARRAY_BUFFER_BINDING_ARB
     GL_INTEL_fragment_shader_ordering GL_INT_IMAGE_2D_MULTISAMPLE_ARRAY
     GL_INT_SAMPLER_CUBE_MAP_ARRAY_ARB GL_LAYOUT_LINEAR_CPU_CACHED_INTEL
     GL_MATRIX_INDEX_ARRAY_POINTER_ARB GL_MAX_ATOMIC_COUNTER_BUFFER_SIZE
     GL_MAX_COMPUTE_SHARED_MEMORY_SIZE GL_MAX_COMPUTE_UNIFORM_COMPONENTS
     GL_MAX_GEOMETRY_OUTPUT_COMPONENTS GL_MAX_NUM_COMPATIBLE_SUBROUTINES
     GL_MAX_PROGRAM_ENV_PARAMETERS_ARB GL_MAX_PROGRAM_GENERIC_ATTRIBS_NV
     GL_MAX_PROGRAM_GENERIC_RESULTS_NV GL_MAX_PROGRAM_NATIVE_ATTRIBS_ARB
     GL_MAX_PROGRAM_OUTPUT_VERTICES_NV GL_MAX_RECTANGLE_TEXTURE_SIZE_ARB
     GL_MAX_RECTANGLE_TEXTURE_SIZE_EXT GL_MAX_SPARSE_3D_TEXTURE_SIZE_AMD
     GL_MAX_SPARSE_3D_TEXTURE_SIZE_ARB GL_MAX_TEXTURE_MAX_ANISOTROPY_EXT
     GL_MAX_TRANSFORM_FEEDBACK_BUFFERS GL_MAX_VERTEX_SHADER_VARIANTS_EXT
     GL_MAX_VERTEX_TEXTURE_IMAGE_UNITS GL_NATIVE_GRAPHICS_BEGIN_HINT_PGI
     GL_NUM_COMPRESSED_TEXTURE_FORMATS GL_NV_geometry_shader_passthrough
     GL_NV_internalformat_sample_query GL_NV_vertex_attrib_integer_64bit
     GL_OCCLUSION_QUERY_EVENT_MASK_AMD GL_PERFQUERY_GLOBAL_CONTEXT_INTEL
     GL_PERFQUERY_SINGLE_CONTEXT_INTEL GL_POINT_DISTANCE_ATTENUATION_ARB
     GL_POST_COLOR_MATRIX_RED_BIAS_SGI GL_POST_CONVOLUTION_BLUE_BIAS_EXT
     GL_POST_CONVOLUTION_RED_SCALE_EXT GL_POST_TEXTURE_FILTER_SCALE_SGIX
     GL_PROGRAM_MATRIX_STACK_DEPTH_EXT GL_PROGRAM_NATIVE_TEMPORARIES_ARB
     GL_QUERY_DEPTH_FAIL_EVENT_BIT_AMD GL_QUERY_DEPTH_PASS_EVENT_BIT_AMD
     GL_READ_FRAMEBUFFER_BINDING_ANGLE GL_RELATIVE_HORIZONTAL_LINE_TO_NV
     GL_RELATIVE_QUADRATIC_CURVE_TO_NV GL_SECONDARY_COLOR_ARRAY_LIST_IBM
     GL_SECONDARY_COLOR_ARRAY_SIZE_EXT GL_SECONDARY_COLOR_ARRAY_TYPE_EXT
     GL_SIGNED_RGB8_UNSIGNED_ALPHA8_NV GL_SPARE0_PLUS_SECONDARY_COLOR_NV
     GL_TEXTURE_1D_STACK_BINDING_MESAX GL_TEXTURE_2D_STACK_BINDING_MESAX
     GL_TEXTURE_BINDING_2D_MULTISAMPLE GL_TEXTURE_BINDING_CUBE_MAP_ARRAY
     GL_TEXTURE_COMPARE_FAIL_VALUE_ARB GL_TEXTURE_COMPRESSED_BLOCK_WIDTH
     GL_TEXTURE_COORD_ARRAY_ADDRESS_NV GL_TEXTURE_COORD_ARRAY_STRIDE_EXT
     GL_TEXTURE_FIXED_SAMPLE_LOCATIONS GL_TEXTURE_MATERIAL_PARAMETER_EXT
     GL_TEXTURE_MULTI_BUFFER_HINT_SGIX GL_TEXTURE_STORAGE_SPARSE_BIT_AMD
     GL_TEXTURE_UNSIGNED_REMAP_MODE_NV GL_TEXTURE_UPDATE_BARRIER_BIT_EXT
     GL_TRANSFORM_FEEDBACK_BARRIER_BIT GL_TRANSFORM_FEEDBACK_BUFFER_MODE
     GL_TRANSFORM_FEEDBACK_BUFFER_SIZE GL_TRANSFORM_FEEDBACK_VARYINGS_NV
     GL_TRANSPOSE_MODELVIEW_MATRIX_ARB GL_UNPACK_COMPRESSED_BLOCK_HEIGHT
     GL_UNSIGNED_INT_IMAGE_2D_RECT_EXT GL_VERTEX_ATTRIB_ARRAY_ADDRESS_NV
     GL_VERTEX_ATTRIB_ARRAY_INTEGER_NV GL_VERTEX_ATTRIB_ARRAY_NORMALIZED
     GL_VERTEX_ATTRIB_ARRAY_STRIDE_ARB GL_VERTEX_ATTRIB_ARRAY_UNIFIED_NV
     GL_VERTEX_ATTRIB_MAP1_COEFF_APPLE GL_VERTEX_ATTRIB_MAP1_ORDER_APPLE
     GL_VERTEX_ATTRIB_MAP2_COEFF_APPLE GL_VERTEX_ATTRIB_MAP2_ORDER_APPLE
     GL_VERTEX_SHADER_INSTRUCTIONS_EXT GL_VERTEX_WEIGHT_ARRAY_STRIDE_EXT
     GL_VIEWPORT_SWIZZLE_NEGATIVE_W_NV GL_VIEWPORT_SWIZZLE_NEGATIVE_X_NV
     GL_VIEWPORT_SWIZZLE_NEGATIVE_Y_NV GL_VIEWPORT_SWIZZLE_NEGATIVE_Z_NV
     GL_VIEWPORT_SWIZZLE_POSITIVE_W_NV GL_VIEWPORT_SWIZZLE_POSITIVE_X_NV
     GL_VIEWPORT_SWIZZLE_POSITIVE_Y_NV GL_VIEWPORT_SWIZZLE_POSITIVE_Z_NV
     glBindVideoCaptureStreamTextureNV glBlendEquationSeparateIndexedAMD
     glCompressedMultiTexSubImage1DEXT glCompressedMultiTexSubImage2DEXT
     glCompressedMultiTexSubImage3DEXT glDrawArraysInstancedBaseInstance
     glDrawElementsInstancedBaseVertex glFramebufferSampleLocationsfvARB
     glGetNamedRenderbufferParameteriv glGetPixelTransformParameterfvEXT
     glGetPixelTransformParameterivEXT glGetProgramResourceLocationIndex
     glGetVertexAttribArrayObjectfvATI glGetVertexAttribArrayObjectivATI
     glMakeTextureHandleNonResidentARB glMultiDrawArraysIndirectCountARB
     glMultiDrawRangeElementArrayAPPLE glNamedFramebufferRenderbufferEXT
     glNamedFramebufferTextureLayerEXT glNamedProgramLocalParameter4dEXT
     glNamedProgramLocalParameter4fEXT glTexImage2DMultisampleCoverageNV
     glTexImage3DMultisampleCoverageNV glVideoCaptureStreamParameterdvNV
     glVideoCaptureStreamParameterfvNV glVideoCaptureStreamParameterivNV */
  /* Offset 13 gives the best switch position.  */
  switch (name[13]) {
  case '2':
    if (memEQ(name, "GL_INT_IMAGE_2D_MULTISAMPLE_ARRAY", 33)) {
    /*                            ^                          */
#ifdef GL_INT_IMAGE_2D_MULTISAMPLE_ARRAY
      *iv_return = GL_INT_IMAGE_2D_MULTISAMPLE_ARRAY;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case '8':
    if (memEQ(name, "GL_SIGNED_RGB8_UNSIGNED_ALPHA8_NV", 33)) {
    /*                            ^                          */
#ifdef GL_SIGNED_RGB8_UNSIGNED_ALPHA8_NV
      *iv_return = GL_SIGNED_RGB8_UNSIGNED_ALPHA8_NV;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case 'A':
    if (memEQ(name, "GL_COMPUTE_SHADER_INVOCATIONS_ARB", 33)) {
    /*                            ^                          */
#ifdef GL_COMPUTE_SHADER_INVOCATIONS_ARB
      *iv_return = GL_COMPUTE_SHADER_INVOCATIONS_ARB;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_CONTEXT_FLAG_ROBUST_ACCESS_BIT", 33)) {
    /*                            ^                          */
#ifdef GL_CONTEXT_FLAG_ROBUST_ACCESS_BIT
      *iv_return = GL_CONTEXT_FLAG_ROBUST_ACCESS_BIT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_EDGE_FLAG_ARRAY_BUFFER_BINDING", 33)) {
    /*                            ^                          */
#ifdef GL_EDGE_FLAG_ARRAY_BUFFER_BINDING
      *iv_return = GL_EDGE_FLAG_ARRAY_BUFFER_BINDING;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_FOG_COORD_ARRAY_BUFFER_BINDING", 33)) {
    /*                            ^                          */
#ifdef GL_FOG_COORD_ARRAY_BUFFER_BINDING
      *iv_return = GL_FOG_COORD_ARRAY_BUFFER_BINDING;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_POINT_DISTANCE_ATTENUATION_ARB", 33)) {
    /*                            ^                          */
#ifdef GL_POINT_DISTANCE_ATTENUATION_ARB
      *iv_return = GL_POINT_DISTANCE_ATTENUATION_ARB;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case 'B':
    if (memEQ(name, "GL_DRAW_FRAMEBUFFER_BINDING_ANGLE", 33)) {
    /*                            ^                          */
#ifdef GL_DRAW_FRAMEBUFFER_BINDING_ANGLE
      *iv_return = GL_DRAW_FRAMEBUFFER_BINDING_ANGLE;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_READ_FRAMEBUFFER_BINDING_ANGLE", 33)) {
    /*                            ^                          */
#ifdef GL_READ_FRAMEBUFFER_BINDING_ANGLE
      *iv_return = GL_READ_FRAMEBUFFER_BINDING_ANGLE;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case 'C':
    if (memEQ(name, "GL_DEBUG_SOURCE_WINDOW_SYSTEM_ARB", 33)) {
    /*                            ^                          */
#ifdef GL_DEBUG_SOURCE_WINDOW_SYSTEM_ARB
      *iv_return = GL_DEBUG_SOURCE_WINDOW_SYSTEM_ARB;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_SECONDARY_COLOR_ARRAY_LIST_IBM", 33)) {
    /*                            ^                          */
#ifdef GL_SECONDARY_COLOR_ARRAY_LIST_IBM
      *iv_return = GL_SECONDARY_COLOR_ARRAY_LIST_IBM;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_SECONDARY_COLOR_ARRAY_SIZE_EXT", 33)) {
    /*                            ^                          */
#ifdef GL_SECONDARY_COLOR_ARRAY_SIZE_EXT
      *iv_return = GL_SECONDARY_COLOR_ARRAY_SIZE_EXT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_SECONDARY_COLOR_ARRAY_TYPE_EXT", 33)) {
    /*                            ^                          */
#ifdef GL_SECONDARY_COLOR_ARRAY_TYPE_EXT
      *iv_return = GL_SECONDARY_COLOR_ARRAY_TYPE_EXT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case 'D':
    if (memEQ(name, "GL_FONT_MAX_ADVANCE_HEIGHT_BIT_NV", 33)) {
    /*                            ^                          */
#ifdef GL_FONT_MAX_ADVANCE_HEIGHT_BIT_NV
      *iv_return = GL_FONT_MAX_ADVANCE_HEIGHT_BIT_NV;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_TEXTURE_UPDATE_BARRIER_BIT_EXT", 33)) {
    /*                            ^                          */
#ifdef GL_TEXTURE_UPDATE_BARRIER_BIT_EXT
      *iv_return = GL_TEXTURE_UPDATE_BARRIER_BIT_EXT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_VERTEX_SHADER_INSTRUCTIONS_EXT", 33)) {
    /*                            ^                          */
#ifdef GL_VERTEX_SHADER_INSTRUCTIONS_EXT
      *iv_return = GL_VERTEX_SHADER_INSTRUCTIONS_EXT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case 'E':
    if (memEQ(name, "GL_COLOR_TABLE_INTENSITY_SIZE_EXT", 33)) {
    /*                            ^                          */
#ifdef GL_COLOR_TABLE_INTENSITY_SIZE_EXT
      *iv_return = GL_COLOR_TABLE_INTENSITY_SIZE_EXT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_COLOR_TABLE_INTENSITY_SIZE_SGI", 33)) {
    /*                            ^                          */
#ifdef GL_COLOR_TABLE_INTENSITY_SIZE_SGI
      *iv_return = GL_COLOR_TABLE_INTENSITY_SIZE_SGI;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_COLOR_TABLE_LUMINANCE_SIZE_EXT", 33)) {
    /*                            ^                          */
#ifdef GL_COLOR_TABLE_LUMINANCE_SIZE_EXT
      *iv_return = GL_COLOR_TABLE_LUMINANCE_SIZE_EXT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_COLOR_TABLE_LUMINANCE_SIZE_SGI", 33)) {
    /*                            ^                          */
#ifdef GL_COLOR_TABLE_LUMINANCE_SIZE_SGI
      *iv_return = GL_COLOR_TABLE_LUMINANCE_SIZE_SGI;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_LAYOUT_LINEAR_CPU_CACHED_INTEL", 33)) {
    /*                            ^                          */
#ifdef GL_LAYOUT_LINEAR_CPU_CACHED_INTEL
      *iv_return = GL_LAYOUT_LINEAR_CPU_CACHED_INTEL;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_MATRIX_INDEX_ARRAY_POINTER_ARB", 33)) {
    /*                            ^                          */
#ifdef GL_MATRIX_INDEX_ARRAY_POINTER_ARB
      *iv_return = GL_MATRIX_INDEX_ARRAY_POINTER_ARB;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_MAX_COMPUTE_SHARED_MEMORY_SIZE", 33)) {
    /*                            ^                          */
#ifdef GL_MAX_COMPUTE_SHARED_MEMORY_SIZE
      *iv_return = GL_MAX_COMPUTE_SHARED_MEMORY_SIZE;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_MAX_COMPUTE_UNIFORM_COMPONENTS", 33)) {
    /*                            ^                          */
#ifdef GL_MAX_COMPUTE_UNIFORM_COMPONENTS
      *iv_return = GL_MAX_COMPUTE_UNIFORM_COMPONENTS;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_MAX_TEXTURE_MAX_ANISOTROPY_EXT", 33)) {
    /*                            ^                          */
#ifdef GL_MAX_TEXTURE_MAX_ANISOTROPY_EXT
      *iv_return = GL_MAX_TEXTURE_MAX_ANISOTROPY_EXT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case 'F':
    if (memEQ(name, "GL_TRANSFORM_FEEDBACK_BARRIER_BIT", 33)) {
    /*                            ^                          */
#ifdef GL_TRANSFORM_FEEDBACK_BARRIER_BIT
      *iv_return = GL_TRANSFORM_FEEDBACK_BARRIER_BIT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_TRANSFORM_FEEDBACK_BUFFER_MODE", 33)) {
    /*                            ^                          */
#ifdef GL_TRANSFORM_FEEDBACK_BUFFER_MODE
      *iv_return = GL_TRANSFORM_FEEDBACK_BUFFER_MODE;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_TRANSFORM_FEEDBACK_BUFFER_SIZE", 33)) {
    /*                            ^                          */
#ifdef GL_TRANSFORM_FEEDBACK_BUFFER_SIZE
      *iv_return = GL_TRANSFORM_FEEDBACK_BUFFER_SIZE;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_TRANSFORM_FEEDBACK_VARYINGS_NV", 33)) {
    /*                            ^                          */
#ifdef GL_TRANSFORM_FEEDBACK_VARYINGS_NV
      *iv_return = GL_TRANSFORM_FEEDBACK_VARYINGS_NV;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case 'G':
    if (memEQ(name, "GL_DEBUG_CATEGORY_APPLICATION_AMD", 33)) {
    /*                            ^                          */
#ifdef GL_DEBUG_CATEGORY_APPLICATION_AMD
      *iv_return = GL_DEBUG_CATEGORY_APPLICATION_AMD;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_DEBUG_CATEGORY_DEPRECATION_AMD", 33)) {
    /*                            ^                          */
#ifdef GL_DEBUG_CATEGORY_DEPRECATION_AMD
      *iv_return = GL_DEBUG_CATEGORY_DEPRECATION_AMD;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_DEBUG_CATEGORY_PERFORMANCE_AMD", 33)) {
    /*                            ^                          */
#ifdef GL_DEBUG_CATEGORY_PERFORMANCE_AMD
      *iv_return = GL_DEBUG_CATEGORY_PERFORMANCE_AMD;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_MAX_RECTANGLE_TEXTURE_SIZE_ARB", 33)) {
    /*                            ^                          */
#ifdef GL_MAX_RECTANGLE_TEXTURE_SIZE_ARB
      *iv_return = GL_MAX_RECTANGLE_TEXTURE_SIZE_ARB;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_MAX_RECTANGLE_TEXTURE_SIZE_EXT", 33)) {
    /*                            ^                          */
#ifdef GL_MAX_RECTANGLE_TEXTURE_SIZE_EXT
      *iv_return = GL_MAX_RECTANGLE_TEXTURE_SIZE_EXT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_PERFQUERY_GLOBAL_CONTEXT_INTEL", 33)) {
    /*                            ^                          */
#ifdef GL_PERFQUERY_GLOBAL_CONTEXT_INTEL
      *iv_return = GL_PERFQUERY_GLOBAL_CONTEXT_INTEL;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_VERTEX_WEIGHT_ARRAY_STRIDE_EXT", 33)) {
    /*                            ^                          */
#ifdef GL_VERTEX_WEIGHT_ARRAY_STRIDE_EXT
      *iv_return = GL_VERTEX_WEIGHT_ARRAY_STRIDE_EXT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case 'H':
    if (memEQ(name, "GL_QUERY_DEPTH_FAIL_EVENT_BIT_AMD", 33)) {
    /*                            ^                          */
#ifdef GL_QUERY_DEPTH_FAIL_EVENT_BIT_AMD
      *iv_return = GL_QUERY_DEPTH_FAIL_EVENT_BIT_AMD;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_QUERY_DEPTH_PASS_EVENT_BIT_AMD", 33)) {
    /*                            ^                          */
#ifdef GL_QUERY_DEPTH_PASS_EVENT_BIT_AMD
      *iv_return = GL_QUERY_DEPTH_PASS_EVENT_BIT_AMD;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glMakeTextureHandleNonResidentARB", 33)) {
    /*                            ^                          */
#ifdef glMakeTextureHandleNonResidentARB
      *iv_return = glMakeTextureHandleNonResidentARB;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case 'I':
    if (memEQ(name, "GL_BUFFER_SERIALIZED_MODIFY_APPLE", 33)) {
    /*                            ^                          */
#ifdef GL_BUFFER_SERIALIZED_MODIFY_APPLE
      *iv_return = GL_BUFFER_SERIALIZED_MODIFY_APPLE;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case 'L':
    if (memEQ(name, "GL_CONTEXT_RELEASE_BEHAVIOR_FLUSH", 33)) {
    /*                            ^                          */
#ifdef GL_CONTEXT_RELEASE_BEHAVIOR_FLUSH
      *iv_return = GL_CONTEXT_RELEASE_BEHAVIOR_FLUSH;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_FONT_UNDERLINE_POSITION_BIT_NV", 33)) {
    /*                            ^                          */
#ifdef GL_FONT_UNDERLINE_POSITION_BIT_NV
      *iv_return = GL_FONT_UNDERLINE_POSITION_BIT_NV;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_POST_CONVOLUTION_BLUE_BIAS_EXT", 33)) {
    /*                            ^                          */
#ifdef GL_POST_CONVOLUTION_BLUE_BIAS_EXT
      *iv_return = GL_POST_CONVOLUTION_BLUE_BIAS_EXT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_POST_CONVOLUTION_RED_SCALE_EXT", 33)) {
    /*                            ^                          */
#ifdef GL_POST_CONVOLUTION_RED_SCALE_EXT
      *iv_return = GL_POST_CONVOLUTION_RED_SCALE_EXT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_TEXTURE_MULTI_BUFFER_HINT_SGIX", 33)) {
    /*                            ^                          */
#ifdef GL_TEXTURE_MULTI_BUFFER_HINT_SGIX
      *iv_return = GL_TEXTURE_MULTI_BUFFER_HINT_SGIX;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case 'M':
    if (memEQ(name, "GL_MAX_NUM_COMPATIBLE_SUBROUTINES", 33)) {
    /*                            ^                          */
#ifdef GL_MAX_NUM_COMPATIBLE_SUBROUTINES
      *iv_return = GL_MAX_NUM_COMPATIBLE_SUBROUTINES;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_MAX_PROGRAM_ENV_PARAMETERS_ARB", 33)) {
    /*                            ^                          */
#ifdef GL_MAX_PROGRAM_ENV_PARAMETERS_ARB
      *iv_return = GL_MAX_PROGRAM_ENV_PARAMETERS_ARB;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_MAX_PROGRAM_GENERIC_ATTRIBS_NV", 33)) {
    /*                            ^                          */
#ifdef GL_MAX_PROGRAM_GENERIC_ATTRIBS_NV
      *iv_return = GL_MAX_PROGRAM_GENERIC_ATTRIBS_NV;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_MAX_PROGRAM_GENERIC_RESULTS_NV", 33)) {
    /*                            ^                          */
#ifdef GL_MAX_PROGRAM_GENERIC_RESULTS_NV
      *iv_return = GL_MAX_PROGRAM_GENERIC_RESULTS_NV;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_MAX_PROGRAM_NATIVE_ATTRIBS_ARB", 33)) {
    /*                            ^                          */
#ifdef GL_MAX_PROGRAM_NATIVE_ATTRIBS_ARB
      *iv_return = GL_MAX_PROGRAM_NATIVE_ATTRIBS_ARB;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_MAX_PROGRAM_OUTPUT_VERTICES_NV", 33)) {
    /*                            ^                          */
#ifdef GL_MAX_PROGRAM_OUTPUT_VERTICES_NV
      *iv_return = GL_MAX_PROGRAM_OUTPUT_VERTICES_NV;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_TEXTURE_COMPARE_FAIL_VALUE_ARB", 33)) {
    /*                            ^                          */
#ifdef GL_TEXTURE_COMPARE_FAIL_VALUE_ARB
      *iv_return = GL_TEXTURE_COMPARE_FAIL_VALUE_ARB;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_TEXTURE_COMPRESSED_BLOCK_WIDTH", 33)) {
    /*                            ^                          */
#ifdef GL_TEXTURE_COMPRESSED_BLOCK_WIDTH
      *iv_return = GL_TEXTURE_COMPRESSED_BLOCK_WIDTH;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_TRANSPOSE_MODELVIEW_MATRIX_ARB", 33)) {
    /*                            ^                          */
#ifdef GL_TRANSPOSE_MODELVIEW_MATRIX_ARB
      *iv_return = GL_TRANSPOSE_MODELVIEW_MATRIX_ARB;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case 'N':
    if (memEQ(name, "GL_ATOMIC_COUNTER_BARRIER_BIT_EXT", 33)) {
    /*                            ^                          */
#ifdef GL_ATOMIC_COUNTER_BARRIER_BIT_EXT
      *iv_return = GL_ATOMIC_COUNTER_BARRIER_BIT_EXT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_DRAW_ELEMENTS_STRIP_COMMAND_NV", 33)) {
    /*                            ^                          */
#ifdef GL_DRAW_ELEMENTS_STRIP_COMMAND_NV
      *iv_return = GL_DRAW_ELEMENTS_STRIP_COMMAND_NV;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_FLOAT_32_UNSIGNED_INT_24_8_REV", 33)) {
    /*                            ^                          */
#ifdef GL_FLOAT_32_UNSIGNED_INT_24_8_REV
      *iv_return = GL_FLOAT_32_UNSIGNED_INT_24_8_REV;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_TEXTURE_BINDING_2D_MULTISAMPLE", 33)) {
    /*                            ^                          */
#ifdef GL_TEXTURE_BINDING_2D_MULTISAMPLE
      *iv_return = GL_TEXTURE_BINDING_2D_MULTISAMPLE;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_TEXTURE_BINDING_CUBE_MAP_ARRAY", 33)) {
    /*                            ^                          */
#ifdef GL_TEXTURE_BINDING_CUBE_MAP_ARRAY
      *iv_return = GL_TEXTURE_BINDING_CUBE_MAP_ARRAY;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_UNSIGNED_INT_IMAGE_2D_RECT_EXT", 33)) {
    /*                            ^                          */
#ifdef GL_UNSIGNED_INT_IMAGE_2D_RECT_EXT
      *iv_return = GL_UNSIGNED_INT_IMAGE_2D_RECT_EXT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case 'O':
    if (memEQ(name, "GL_MAX_TRANSFORM_FEEDBACK_BUFFERS", 33)) {
    /*                            ^                          */
#ifdef GL_MAX_TRANSFORM_FEEDBACK_BUFFERS
      *iv_return = GL_MAX_TRANSFORM_FEEDBACK_BUFFERS;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_RELATIVE_HORIZONTAL_LINE_TO_NV", 33)) {
    /*                            ^                          */
#ifdef GL_RELATIVE_HORIZONTAL_LINE_TO_NV
      *iv_return = GL_RELATIVE_HORIZONTAL_LINE_TO_NV;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_TEXTURE_COORD_ARRAY_ADDRESS_NV", 33)) {
    /*                            ^                          */
#ifdef GL_TEXTURE_COORD_ARRAY_ADDRESS_NV
      *iv_return = GL_TEXTURE_COORD_ARRAY_ADDRESS_NV;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_TEXTURE_COORD_ARRAY_STRIDE_EXT", 33)) {
    /*                            ^                          */
#ifdef GL_TEXTURE_COORD_ARRAY_STRIDE_EXT
      *iv_return = GL_TEXTURE_COORD_ARRAY_STRIDE_EXT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_TEXTURE_STORAGE_SPARSE_BIT_AMD", 33)) {
    /*                            ^                          */
#ifdef GL_TEXTURE_STORAGE_SPARSE_BIT_AMD
      *iv_return = GL_TEXTURE_STORAGE_SPARSE_BIT_AMD;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case 'P':
    if (memEQ(name, "GL_NATIVE_GRAPHICS_BEGIN_HINT_PGI", 33)) {
    /*                            ^                          */
#ifdef GL_NATIVE_GRAPHICS_BEGIN_HINT_PGI
      *iv_return = GL_NATIVE_GRAPHICS_BEGIN_HINT_PGI;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_UNPACK_COMPRESSED_BLOCK_HEIGHT", 33)) {
    /*                            ^                          */
#ifdef GL_UNPACK_COMPRESSED_BLOCK_HEIGHT
      *iv_return = GL_UNPACK_COMPRESSED_BLOCK_HEIGHT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case 'Q':
    if (memEQ(name, "GL_OCCLUSION_QUERY_EVENT_MASK_AMD", 33)) {
    /*                            ^                          */
#ifdef GL_OCCLUSION_QUERY_EVENT_MASK_AMD
      *iv_return = GL_OCCLUSION_QUERY_EVENT_MASK_AMD;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case 'R':
    if (memEQ(name, "GL_FRAMEBUFFER_ATTACHMENT_LAYERED", 33)) {
    /*                            ^                          */
#ifdef GL_FRAMEBUFFER_ATTACHMENT_LAYERED
      *iv_return = GL_FRAMEBUFFER_ATTACHMENT_LAYERED;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_FRAMEBUFFER_RENDERABLE_LAYERED", 33)) {
    /*                            ^                          */
#ifdef GL_FRAMEBUFFER_RENDERABLE_LAYERED
      *iv_return = GL_FRAMEBUFFER_RENDERABLE_LAYERED;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_INT_SAMPLER_CUBE_MAP_ARRAY_ARB", 33)) {
    /*                            ^                          */
#ifdef GL_INT_SAMPLER_CUBE_MAP_ARRAY_ARB
      *iv_return = GL_INT_SAMPLER_CUBE_MAP_ARRAY_ARB;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_MAX_GEOMETRY_OUTPUT_COMPONENTS", 33)) {
    /*                            ^                          */
#ifdef GL_MAX_GEOMETRY_OUTPUT_COMPONENTS
      *iv_return = GL_MAX_GEOMETRY_OUTPUT_COMPONENTS;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_POST_TEXTURE_FILTER_SCALE_SGIX", 33)) {
    /*                            ^                          */
#ifdef GL_POST_TEXTURE_FILTER_SCALE_SGIX
      *iv_return = GL_POST_TEXTURE_FILTER_SCALE_SGIX;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_VERTEX_ATTRIB_ARRAY_ADDRESS_NV", 33)) {
    /*                            ^                          */
#ifdef GL_VERTEX_ATTRIB_ARRAY_ADDRESS_NV
      *iv_return = GL_VERTEX_ATTRIB_ARRAY_ADDRESS_NV;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_VERTEX_ATTRIB_ARRAY_INTEGER_NV", 33)) {
    /*                            ^                          */
#ifdef GL_VERTEX_ATTRIB_ARRAY_INTEGER_NV
      *iv_return = GL_VERTEX_ATTRIB_ARRAY_INTEGER_NV;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_VERTEX_ATTRIB_ARRAY_NORMALIZED", 33)) {
    /*                            ^                          */
#ifdef GL_VERTEX_ATTRIB_ARRAY_NORMALIZED
      *iv_return = GL_VERTEX_ATTRIB_ARRAY_NORMALIZED;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_VERTEX_ATTRIB_ARRAY_STRIDE_ARB", 33)) {
    /*                            ^                          */
#ifdef GL_VERTEX_ATTRIB_ARRAY_STRIDE_ARB
      *iv_return = GL_VERTEX_ATTRIB_ARRAY_STRIDE_ARB;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_VERTEX_ATTRIB_ARRAY_UNIFIED_NV", 33)) {
    /*                            ^                          */
#ifdef GL_VERTEX_ATTRIB_ARRAY_UNIFIED_NV
      *iv_return = GL_VERTEX_ATTRIB_ARRAY_UNIFIED_NV;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_VERTEX_ATTRIB_MAP1_COEFF_APPLE", 33)) {
    /*                            ^                          */
#ifdef GL_VERTEX_ATTRIB_MAP1_COEFF_APPLE
      *iv_return = GL_VERTEX_ATTRIB_MAP1_COEFF_APPLE;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_VERTEX_ATTRIB_MAP1_ORDER_APPLE", 33)) {
    /*                            ^                          */
#ifdef GL_VERTEX_ATTRIB_MAP1_ORDER_APPLE
      *iv_return = GL_VERTEX_ATTRIB_MAP1_ORDER_APPLE;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_VERTEX_ATTRIB_MAP2_COEFF_APPLE", 33)) {
    /*                            ^                          */
#ifdef GL_VERTEX_ATTRIB_MAP2_COEFF_APPLE
      *iv_return = GL_VERTEX_ATTRIB_MAP2_COEFF_APPLE;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_VERTEX_ATTRIB_MAP2_ORDER_APPLE", 33)) {
    /*                            ^                          */
#ifdef GL_VERTEX_ATTRIB_MAP2_ORDER_APPLE
      *iv_return = GL_VERTEX_ATTRIB_MAP2_ORDER_APPLE;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case 'S':
    if (memEQ(name, "GL_CURRENT_RASTER_SECONDARY_COLOR", 33)) {
    /*                            ^                          */
#ifdef GL_CURRENT_RASTER_SECONDARY_COLOR
      *iv_return = GL_CURRENT_RASTER_SECONDARY_COLOR;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_NUM_COMPRESSED_TEXTURE_FORMATS", 33)) {
    /*                            ^                          */
#ifdef GL_NUM_COMPRESSED_TEXTURE_FORMATS
      *iv_return = GL_NUM_COMPRESSED_TEXTURE_FORMATS;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_PERFQUERY_SINGLE_CONTEXT_INTEL", 33)) {
    /*                            ^                          */
#ifdef GL_PERFQUERY_SINGLE_CONTEXT_INTEL
      *iv_return = GL_PERFQUERY_SINGLE_CONTEXT_INTEL;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_SPARE0_PLUS_SECONDARY_COLOR_NV", 33)) {
    /*                            ^                          */
#ifdef GL_SPARE0_PLUS_SECONDARY_COLOR_NV
      *iv_return = GL_SPARE0_PLUS_SECONDARY_COLOR_NV;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_TEXTURE_UNSIGNED_REMAP_MODE_NV", 33)) {
    /*                            ^                          */
#ifdef GL_TEXTURE_UNSIGNED_REMAP_MODE_NV
      *iv_return = GL_TEXTURE_UNSIGNED_REMAP_MODE_NV;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glFramebufferSampleLocationsfvARB", 33)) {
    /*                            ^                          */
#ifdef glFramebufferSampleLocationsfvARB
      *iv_return = glFramebufferSampleLocationsfvARB;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case 'T':
    if (memEQ(name, "GL_CURRENT_MATRIX_STACK_DEPTH_ARB", 33)) {
    /*                            ^                          */
#ifdef GL_CURRENT_MATRIX_STACK_DEPTH_ARB
      *iv_return = GL_CURRENT_MATRIX_STACK_DEPTH_ARB;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_IMPLEMENTATION_COLOR_READ_TYPE", 33)) {
    /*                            ^                          */
#ifdef GL_IMPLEMENTATION_COLOR_READ_TYPE
      *iv_return = GL_IMPLEMENTATION_COLOR_READ_TYPE;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_PROGRAM_MATRIX_STACK_DEPTH_EXT", 33)) {
    /*                            ^                          */
#ifdef GL_PROGRAM_MATRIX_STACK_DEPTH_EXT
      *iv_return = GL_PROGRAM_MATRIX_STACK_DEPTH_EXT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_PROGRAM_NATIVE_TEMPORARIES_ARB", 33)) {
    /*                            ^                          */
#ifdef GL_PROGRAM_NATIVE_TEMPORARIES_ARB
      *iv_return = GL_PROGRAM_NATIVE_TEMPORARIES_ARB;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_TEXTURE_MATERIAL_PARAMETER_EXT", 33)) {
    /*                            ^                          */
#ifdef GL_TEXTURE_MATERIAL_PARAMETER_EXT
      *iv_return = GL_TEXTURE_MATERIAL_PARAMETER_EXT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case 'U':
    if (memEQ(name, "GL_CLIPPING_OUTPUT_PRIMITIVES_ARB", 33)) {
    /*                            ^                          */
#ifdef GL_CLIPPING_OUTPUT_PRIMITIVES_ARB
      *iv_return = GL_CLIPPING_OUTPUT_PRIMITIVES_ARB;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_IMAGE_2D_MULTISAMPLE_ARRAY_EXT", 33)) {
    /*                            ^                          */
#ifdef GL_IMAGE_2D_MULTISAMPLE_ARRAY_EXT
      *iv_return = GL_IMAGE_2D_MULTISAMPLE_ARRAY_EXT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_RELATIVE_QUADRATIC_CURVE_TO_NV", 33)) {
    /*                            ^                          */
#ifdef GL_RELATIVE_QUADRATIC_CURVE_TO_NV
      *iv_return = GL_RELATIVE_QUADRATIC_CURVE_TO_NV;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case 'W':
    if (memEQ(name, "GL_VIEWPORT_SWIZZLE_NEGATIVE_W_NV", 33)) {
    /*                            ^                          */
#ifdef GL_VIEWPORT_SWIZZLE_NEGATIVE_W_NV
      *iv_return = GL_VIEWPORT_SWIZZLE_NEGATIVE_W_NV;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_VIEWPORT_SWIZZLE_NEGATIVE_X_NV", 33)) {
    /*                            ^                          */
#ifdef GL_VIEWPORT_SWIZZLE_NEGATIVE_X_NV
      *iv_return = GL_VIEWPORT_SWIZZLE_NEGATIVE_X_NV;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_VIEWPORT_SWIZZLE_NEGATIVE_Y_NV", 33)) {
    /*                            ^                          */
#ifdef GL_VIEWPORT_SWIZZLE_NEGATIVE_Y_NV
      *iv_return = GL_VIEWPORT_SWIZZLE_NEGATIVE_Y_NV;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_VIEWPORT_SWIZZLE_NEGATIVE_Z_NV", 33)) {
    /*                            ^                          */
#ifdef GL_VIEWPORT_SWIZZLE_NEGATIVE_Z_NV
      *iv_return = GL_VIEWPORT_SWIZZLE_NEGATIVE_Z_NV;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_VIEWPORT_SWIZZLE_POSITIVE_W_NV", 33)) {
    /*                            ^                          */
#ifdef GL_VIEWPORT_SWIZZLE_POSITIVE_W_NV
      *iv_return = GL_VIEWPORT_SWIZZLE_POSITIVE_W_NV;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_VIEWPORT_SWIZZLE_POSITIVE_X_NV", 33)) {
    /*                            ^                          */
#ifdef GL_VIEWPORT_SWIZZLE_POSITIVE_X_NV
      *iv_return = GL_VIEWPORT_SWIZZLE_POSITIVE_X_NV;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_VIEWPORT_SWIZZLE_POSITIVE_Y_NV", 33)) {
    /*                            ^                          */
#ifdef GL_VIEWPORT_SWIZZLE_POSITIVE_Y_NV
      *iv_return = GL_VIEWPORT_SWIZZLE_POSITIVE_Y_NV;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_VIEWPORT_SWIZZLE_POSITIVE_Z_NV", 33)) {
    /*                            ^                          */
#ifdef GL_VIEWPORT_SWIZZLE_POSITIVE_Z_NV
      *iv_return = GL_VIEWPORT_SWIZZLE_POSITIVE_Z_NV;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case 'X':
    if (memEQ(name, "GL_TEXTURE_FIXED_SAMPLE_LOCATIONS", 33)) {
    /*                            ^                          */
#ifdef GL_TEXTURE_FIXED_SAMPLE_LOCATIONS
      *iv_return = GL_TEXTURE_FIXED_SAMPLE_LOCATIONS;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case 'Y':
    if (memEQ(name, "GL_COLOR_ARRAY_BUFFER_BINDING_ARB", 33)) {
    /*                            ^                          */
#ifdef GL_COLOR_ARRAY_BUFFER_BINDING_ARB
      *iv_return = GL_COLOR_ARRAY_BUFFER_BINDING_ARB;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_INDEX_ARRAY_BUFFER_BINDING_ARB", 33)) {
    /*                            ^                          */
#ifdef GL_INDEX_ARRAY_BUFFER_BINDING_ARB
      *iv_return = GL_INDEX_ARRAY_BUFFER_BINDING_ARB;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case '_':
    if (memEQ(name, "GL_ARB_vertex_type_2_10_10_10_rev", 33)) {
    /*                            ^                          */
#ifdef GL_ARB_vertex_type_2_10_10_10_rev
      *iv_return = GL_ARB_vertex_type_2_10_10_10_rev;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_ATI_vertex_attrib_array_object", 33)) {
    /*                            ^                          */
#ifdef GL_ATI_vertex_attrib_array_object
      *iv_return = GL_ATI_vertex_attrib_array_object;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_COMPRESSED_LUMINANCE_ALPHA_ARB", 33)) {
    /*                            ^                          */
#ifdef GL_COMPRESSED_LUMINANCE_ALPHA_ARB
      *iv_return = GL_COMPRESSED_LUMINANCE_ALPHA_ARB;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_COMPRESSED_LUMINANCE_LATC1_EXT", 33)) {
    /*                            ^                          */
#ifdef GL_COMPRESSED_LUMINANCE_LATC1_EXT
      *iv_return = GL_COMPRESSED_LUMINANCE_LATC1_EXT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_COMPRESSED_RED_GREEN_RGTC2_EXT", 33)) {
    /*                            ^                          */
#ifdef GL_COMPRESSED_RED_GREEN_RGTC2_EXT
      *iv_return = GL_COMPRESSED_RED_GREEN_RGTC2_EXT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_COMPRESSED_RGBA_ASTC_10x10_KHR", 33)) {
    /*                            ^                          */
#ifdef GL_COMPRESSED_RGBA_ASTC_10x10_KHR
      *iv_return = GL_COMPRESSED_RGBA_ASTC_10x10_KHR;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_COMPRESSED_RGBA_ASTC_12x10_KHR", 33)) {
    /*                            ^                          */
#ifdef GL_COMPRESSED_RGBA_ASTC_12x10_KHR
      *iv_return = GL_COMPRESSED_RGBA_ASTC_12x10_KHR;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_COMPRESSED_RGBA_ASTC_12x12_KHR", 33)) {
    /*                            ^                          */
#ifdef GL_COMPRESSED_RGBA_ASTC_12x12_KHR
      *iv_return = GL_COMPRESSED_RGBA_ASTC_12x12_KHR;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_COMPRESSED_RGBA_BPTC_UNORM_ARB", 33)) {
    /*                            ^                          */
#ifdef GL_COMPRESSED_RGBA_BPTC_UNORM_ARB
      *iv_return = GL_COMPRESSED_RGBA_BPTC_UNORM_ARB;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_COMPRESSED_RGB_S3TC_DXT1_ANGLE", 33)) {
    /*                            ^                          */
#ifdef GL_COMPRESSED_RGB_S3TC_DXT1_ANGLE
      *iv_return = GL_COMPRESSED_RGB_S3TC_DXT1_ANGLE;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_COMPRESSED_TEXTURE_FORMATS_ARB", 33)) {
    /*                            ^                          */
#ifdef GL_COMPRESSED_TEXTURE_FORMATS_ARB
      *iv_return = GL_COMPRESSED_TEXTURE_FORMATS_ARB;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_DEBUG_TYPE_DEPRECATED_BEHAVIOR", 33)) {
    /*                            ^                          */
#ifdef GL_DEBUG_TYPE_DEPRECATED_BEHAVIOR
      *iv_return = GL_DEBUG_TYPE_DEPRECATED_BEHAVIOR;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_MAX_ATOMIC_COUNTER_BUFFER_SIZE", 33)) {
    /*                            ^                          */
#ifdef GL_MAX_ATOMIC_COUNTER_BUFFER_SIZE
      *iv_return = GL_MAX_ATOMIC_COUNTER_BUFFER_SIZE;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_MAX_SPARSE_3D_TEXTURE_SIZE_AMD", 33)) {
    /*                            ^                          */
#ifdef GL_MAX_SPARSE_3D_TEXTURE_SIZE_AMD
      *iv_return = GL_MAX_SPARSE_3D_TEXTURE_SIZE_AMD;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_MAX_SPARSE_3D_TEXTURE_SIZE_ARB", 33)) {
    /*                            ^                          */
#ifdef GL_MAX_SPARSE_3D_TEXTURE_SIZE_ARB
      *iv_return = GL_MAX_SPARSE_3D_TEXTURE_SIZE_ARB;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_MAX_VERTEX_SHADER_VARIANTS_EXT", 33)) {
    /*                            ^                          */
#ifdef GL_MAX_VERTEX_SHADER_VARIANTS_EXT
      *iv_return = GL_MAX_VERTEX_SHADER_VARIANTS_EXT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_MAX_VERTEX_TEXTURE_IMAGE_UNITS", 33)) {
    /*                            ^                          */
#ifdef GL_MAX_VERTEX_TEXTURE_IMAGE_UNITS
      *iv_return = GL_MAX_VERTEX_TEXTURE_IMAGE_UNITS;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_POST_COLOR_MATRIX_RED_BIAS_SGI", 33)) {
    /*                            ^                          */
#ifdef GL_POST_COLOR_MATRIX_RED_BIAS_SGI
      *iv_return = GL_POST_COLOR_MATRIX_RED_BIAS_SGI;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_TEXTURE_1D_STACK_BINDING_MESAX", 33)) {
    /*                            ^                          */
#ifdef GL_TEXTURE_1D_STACK_BINDING_MESAX
      *iv_return = GL_TEXTURE_1D_STACK_BINDING_MESAX;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_TEXTURE_2D_STACK_BINDING_MESAX", 33)) {
    /*                            ^                          */
#ifdef GL_TEXTURE_2D_STACK_BINDING_MESAX
      *iv_return = GL_TEXTURE_2D_STACK_BINDING_MESAX;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case 'a':
    if (memEQ(name, "GL_NV_vertex_attrib_integer_64bit", 33)) {
    /*                            ^                          */
#ifdef GL_NV_vertex_attrib_integer_64bit
      *iv_return = GL_NV_vertex_attrib_integer_64bit;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case 'b':
    if (memEQ(name, "GLEW_NV_framebuffer_mixed_samples", 33)) {
    /*                            ^                          */
#ifdef GLEW_NV_framebuffer_mixed_samples
      *iv_return = GLEW_NV_framebuffer_mixed_samples;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case 'c':
    if (memEQ(name, "GLEW_ANGLE_pack_reverse_row_order", 33)) {
    /*                            ^                          */
#ifdef GLEW_ANGLE_pack_reverse_row_order
      *iv_return = GLEW_ANGLE_pack_reverse_row_order;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case 'd':
    if (memEQ(name, "glGetNamedRenderbufferParameteriv", 33)) {
    /*                            ^                          */
#ifdef glGetNamedRenderbufferParameteriv
      *iv_return = glGetNamedRenderbufferParameteriv;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case 'e':
    if (memEQ(name, "GLEW_NV_fragment_shader_interlock", 33)) {
    /*                            ^                          */
#ifdef GLEW_NV_fragment_shader_interlock
      *iv_return = GLEW_NV_fragment_shader_interlock;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_EXT_texture_filter_anisotropic", 33)) {
    /*                            ^                          */
#ifdef GL_EXT_texture_filter_anisotropic
      *iv_return = GL_EXT_texture_filter_anisotropic;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glGetProgramResourceLocationIndex", 33)) {
    /*                            ^                          */
#ifdef glGetProgramResourceLocationIndex
      *iv_return = glGetProgramResourceLocationIndex;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glVideoCaptureStreamParameterdvNV", 33)) {
    /*                            ^                          */
#ifdef glVideoCaptureStreamParameterdvNV
      *iv_return = glVideoCaptureStreamParameterdvNV;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glVideoCaptureStreamParameterfvNV", 33)) {
    /*                            ^                          */
#ifdef glVideoCaptureStreamParameterfvNV
      *iv_return = glVideoCaptureStreamParameterfvNV;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glVideoCaptureStreamParameterivNV", 33)) {
    /*                            ^                          */
#ifdef glVideoCaptureStreamParameterivNV
      *iv_return = glVideoCaptureStreamParameterivNV;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case 'i':
    if (memEQ(name, "GLEW_ARB_explicit_attrib_location", 33)) {
    /*                            ^                          */
#ifdef GLEW_ARB_explicit_attrib_location
      *iv_return = GLEW_ARB_explicit_attrib_location;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GLEW_ARB_shading_language_420pack", 33)) {
    /*                            ^                          */
#ifdef GLEW_ARB_shading_language_420pack
      *iv_return = GLEW_ARB_shading_language_420pack;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GLEW_ARB_shading_language_include", 33)) {
    /*                            ^                          */
#ifdef GLEW_ARB_shading_language_include
      *iv_return = GLEW_ARB_shading_language_include;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GLEW_ARB_shading_language_packing", 33)) {
    /*                            ^                          */
#ifdef GLEW_ARB_shading_language_packing
      *iv_return = GLEW_ARB_shading_language_packing;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case 'l':
    if (memEQ(name, "GL_AMD_stencil_operation_extended", 33)) {
    /*                            ^                          */
#ifdef GL_AMD_stencil_operation_extended
      *iv_return = GL_AMD_stencil_operation_extended;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_NV_internalformat_sample_query", 33)) {
    /*                            ^                          */
#ifdef GL_NV_internalformat_sample_query
      *iv_return = GL_NV_internalformat_sample_query;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case 'm':
    if (memEQ(name, "GL_INTEL_fragment_shader_ordering", 33)) {
    /*                            ^                          */
#ifdef GL_INTEL_fragment_shader_ordering
      *iv_return = GL_INTEL_fragment_shader_ordering;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glNamedProgramLocalParameter4dEXT", 33)) {
    /*                            ^                          */
#ifdef glNamedProgramLocalParameter4dEXT
      *iv_return = glNamedProgramLocalParameter4dEXT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glNamedProgramLocalParameter4fEXT", 33)) {
    /*                            ^                          */
#ifdef glNamedProgramLocalParameter4fEXT
      *iv_return = glNamedProgramLocalParameter4fEXT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case 'n':
    if (memEQ(name, "GL_ARB_fragment_coord_conventions", 33)) {
    /*                            ^                          */
#ifdef GL_ARB_fragment_coord_conventions
      *iv_return = GL_ARB_fragment_coord_conventions;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glDrawArraysInstancedBaseInstance", 33)) {
    /*                            ^                          */
#ifdef glDrawArraysInstancedBaseInstance
      *iv_return = glDrawArraysInstancedBaseInstance;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glGetPixelTransformParameterfvEXT", 33)) {
    /*                            ^                          */
#ifdef glGetPixelTransformParameterfvEXT
      *iv_return = glGetPixelTransformParameterfvEXT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glGetPixelTransformParameterivEXT", 33)) {
    /*                            ^                          */
#ifdef glGetPixelTransformParameterivEXT
      *iv_return = glGetPixelTransformParameterivEXT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glMultiDrawRangeElementArrayAPPLE", 33)) {
    /*                            ^                          */
#ifdef glMultiDrawRangeElementArrayAPPLE
      *iv_return = glMultiDrawRangeElementArrayAPPLE;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case 'o':
    if (memEQ(name, "GLEW_SUN_convolution_border_modes", 33)) {
    /*                            ^                          */
#ifdef GLEW_SUN_convolution_border_modes
      *iv_return = GLEW_SUN_convolution_border_modes;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glBlendEquationSeparateIndexedAMD", 33)) {
    /*                            ^                          */
#ifdef glBlendEquationSeparateIndexedAMD
      *iv_return = glBlendEquationSeparateIndexedAMD;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case 'p':
    if (memEQ(name, "glBindVideoCaptureStreamTextureNV", 33)) {
    /*                            ^                          */
#ifdef glBindVideoCaptureStreamTextureNV
      *iv_return = glBindVideoCaptureStreamTextureNV;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case 'r':
    if (memEQ(name, "GLEW_NV_gpu_program5_mem_extended", 33)) {
    /*                            ^                          */
#ifdef GLEW_NV_gpu_program5_mem_extended
      *iv_return = GLEW_NV_gpu_program5_mem_extended;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GLEW_NV_shader_atomic_fp16_vector", 33)) {
    /*                            ^                          */
#ifdef GLEW_NV_shader_atomic_fp16_vector
      *iv_return = GLEW_NV_shader_atomic_fp16_vector;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glMultiDrawArraysIndirectCountARB", 33)) {
    /*                            ^                          */
#ifdef glMultiDrawArraysIndirectCountARB
      *iv_return = glMultiDrawArraysIndirectCountARB;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case 's':
    if (memEQ(name, "GL_ANGLE_translated_shader_source", 33)) {
    /*                            ^                          */
#ifdef GL_ANGLE_translated_shader_source
      *iv_return = GL_ANGLE_translated_shader_source;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glDrawElementsInstancedBaseVertex", 33)) {
    /*                            ^                          */
#ifdef glDrawElementsInstancedBaseVertex
      *iv_return = glDrawElementsInstancedBaseVertex;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case 't':
    if (memEQ(name, "glGetVertexAttribArrayObjectfvATI", 33)) {
    /*                            ^                          */
#ifdef glGetVertexAttribArrayObjectfvATI
      *iv_return = glGetVertexAttribArrayObjectfvATI;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glGetVertexAttribArrayObjectivATI", 33)) {
    /*                            ^                          */
#ifdef glGetVertexAttribArrayObjectivATI
      *iv_return = glGetVertexAttribArrayObjectivATI;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case 'u':
    if (memEQ(name, "GLEW_ARB_texture_compression_bptc", 33)) {
    /*                            ^                          */
#ifdef GLEW_ARB_texture_compression_bptc
      *iv_return = GLEW_ARB_texture_compression_bptc;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GLEW_ARB_texture_compression_rgtc", 33)) {
    /*                            ^                          */
#ifdef GLEW_ARB_texture_compression_rgtc
      *iv_return = GLEW_ARB_texture_compression_rgtc;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GLEW_ARB_texture_non_power_of_two", 33)) {
    /*                            ^                          */
#ifdef GLEW_ARB_texture_non_power_of_two
      *iv_return = GLEW_ARB_texture_non_power_of_two;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GLEW_EXT_texture_compression_dxt1", 33)) {
    /*                            ^                          */
#ifdef GLEW_EXT_texture_compression_dxt1
      *iv_return = GLEW_EXT_texture_compression_dxt1;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GLEW_EXT_texture_compression_latc", 33)) {
    /*                            ^                          */
#ifdef GLEW_EXT_texture_compression_latc
      *iv_return = GLEW_EXT_texture_compression_latc;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GLEW_EXT_texture_compression_rgtc", 33)) {
    /*                            ^                          */
#ifdef GLEW_EXT_texture_compression_rgtc
      *iv_return = GLEW_EXT_texture_compression_rgtc;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GLEW_EXT_texture_compression_s3tc", 33)) {
    /*                            ^                          */
#ifdef GLEW_EXT_texture_compression_s3tc
      *iv_return = GLEW_EXT_texture_compression_s3tc;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_ANGLE_texture_compression_dxt1", 33)) {
    /*                            ^                          */
#ifdef GL_ANGLE_texture_compression_dxt1
      *iv_return = GL_ANGLE_texture_compression_dxt1;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_ANGLE_texture_compression_dxt3", 33)) {
    /*                            ^                          */
#ifdef GL_ANGLE_texture_compression_dxt3
      *iv_return = GL_ANGLE_texture_compression_dxt3;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_ANGLE_texture_compression_dxt5", 33)) {
    /*                            ^                          */
#ifdef GL_ANGLE_texture_compression_dxt5
      *iv_return = GL_ANGLE_texture_compression_dxt5;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_ARB_framebuffer_no_attachments", 33)) {
    /*                            ^                          */
#ifdef GL_ARB_framebuffer_no_attachments
      *iv_return = GL_ARB_framebuffer_no_attachments;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glCompressedMultiTexSubImage1DEXT", 33)) {
    /*                            ^                          */
#ifdef glCompressedMultiTexSubImage1DEXT
      *iv_return = glCompressedMultiTexSubImage1DEXT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glCompressedMultiTexSubImage2DEXT", 33)) {
    /*                            ^                          */
#ifdef glCompressedMultiTexSubImage2DEXT
      *iv_return = glCompressedMultiTexSubImage2DEXT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glCompressedMultiTexSubImage3DEXT", 33)) {
    /*                            ^                          */
#ifdef glCompressedMultiTexSubImage3DEXT
      *iv_return = glCompressedMultiTexSubImage3DEXT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glNamedFramebufferRenderbufferEXT", 33)) {
    /*                            ^                          */
#ifdef glNamedFramebufferRenderbufferEXT
      *iv_return = glNamedFramebufferRenderbufferEXT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glNamedFramebufferTextureLayerEXT", 33)) {
    /*                            ^                          */
#ifdef glNamedFramebufferTextureLayerEXT
      *iv_return = glNamedFramebufferTextureLayerEXT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glTexImage2DMultisampleCoverageNV", 33)) {
    /*                            ^                          */
#ifdef glTexImage2DMultisampleCoverageNV
      *iv_return = glTexImage2DMultisampleCoverageNV;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glTexImage3DMultisampleCoverageNV", 33)) {
    /*                            ^                          */
#ifdef glTexImage3DMultisampleCoverageNV
      *iv_return = glTexImage3DMultisampleCoverageNV;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case 'y':
    if (memEQ(name, "GL_NV_geometry_shader_passthrough", 33)) {
    /*                            ^                          */
#ifdef GL_NV_geometry_shader_passthrough
      *iv_return = GL_NV_geometry_shader_passthrough;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  }
  return PERL_constant_NOTFOUND;
}

static int
constant_34 (pTHX_ const char *name, IV *iv_return) {
  /* When generated this function returned values for the list of names given
     here.  However, subsequent manual editing may have added or removed some.
     GLEW_3DFX_texture_compression_FXT1 GLEW_AMD_shader_atomic_counter_ops
     GLEW_AMD_vertex_shader_tessellator GLEW_ANGLE_framebuffer_multisample
     GLEW_ARB_draw_elements_base_vertex GLEW_ARB_explicit_uniform_location
     GLEW_ARB_fragment_shader_interlock GLEW_ARB_pipeline_statistics_query
     GLEW_ARB_shader_atomic_counter_ops GLEW_MESA_shader_integer_functions
     GLEW_NV_conservative_raster_dilate GLEW_NV_fragment_coverage_to_color
     GLEW_NV_path_rendering_shared_edge GLEW_SGIX_texture_coordinate_clamp
     GL_AMD_shader_stencil_value_export GL_ANY_SAMPLES_PASSED_CONSERVATIVE
     GL_APPLE_vertex_program_evaluators GL_ARB_compute_variable_group_size
     GL_ARB_conditional_render_inverted GL_ARB_shader_viewport_layer_array
     GL_ARB_texture_buffer_object_rgb32 GL_ARB_texture_storage_multisample
     GL_ARB_vertex_type_10f_11f_11f_rev GL_ATOMIC_COUNTER_BUFFER_DATA_SIZE
     GL_COMPRESSED_RGBA_S3TC_DXT1_ANGLE GL_COMPRESSED_RGBA_S3TC_DXT3_ANGLE
     GL_COMPRESSED_RGBA_S3TC_DXT5_ANGLE GL_COMPRESSED_SIGNED_RED_RGTC1_EXT
     GL_COMPRESSED_SLUMINANCE_ALPHA_EXT GL_CULL_VERTEX_OBJECT_POSITION_EXT
     GL_DOT_PRODUCT_DIFFUSE_CUBE_MAP_NV GL_DOT_PRODUCT_REFLECT_CUBE_MAP_NV
     GL_DOT_PRODUCT_TEXTURE_CUBE_MAP_NV GL_EDGE_FLAG_ARRAY_LIST_STRIDE_IBM
     GL_EVAL_FRACTIONAL_TESSELLATION_NV GL_EXT_pixel_transform_color_table
     GL_EXT_shader_image_load_formatted GL_FOG_COORDINATE_ARRAY_STRIDE_EXT
     GL_FONT_UNDERLINE_THICKNESS_BIT_NV GL_FRAGMENT_SHADER_DERIVATIVE_HINT
     GL_FRAGMENT_SHADER_INVOCATIONS_ARB GL_FRAMEBUFFER_ATTACHMENT_RED_SIZE
     GL_GLYPH_VERTICAL_BEARING_X_BIT_NV GL_GLYPH_VERTICAL_BEARING_Y_BIT_NV
     GL_IMAGE_FORMAT_COMPATIBILITY_TYPE GL_INTENSITY16_EXTENDED_RANGE_SGIX
     GL_LUMINANCE16_ALPHA16_SIGNED_SGIX GL_LUMINANCE16_EXTENDED_RANGE_SGIX
     GL_MAT_AMBIENT_AND_DIFFUSE_BIT_PGI GL_MAX_COMPUTE_TEXTURE_IMAGE_UNITS
     GL_MAX_FRAGMENT_UNIFORM_COMPONENTS GL_MAX_GEOMETRY_SHADER_INVOCATIONS
     GL_MAX_GEOMETRY_UNIFORM_COMPONENTS GL_MAX_SHADER_COMPILER_THREADS_ARB
     GL_MAX_SPARSE_ARRAY_TEXTURE_LAYERS GL_MAX_TESS_CONTROL_IMAGE_UNIFORMS
     GL_MAX_TESS_CONTROL_UNIFORM_BLOCKS GL_MAX_TRACK_MATRIX_STACK_DEPTH_NV
     GL_MIN_PBUFFER_VIEWPORT_DIMS_APPLE GL_NORMAL_ARRAY_BUFFER_BINDING_ARB
     GL_NV_bindless_multi_draw_indirect GL_NV_shader_storage_buffer_object
     GL_NV_vertex_buffer_unified_memory GL_OBJECT_SHADER_SOURCE_LENGTH_ARB
     GL_OES_compressed_paletted_texture GL_OFFSET_PROJECTIVE_TEXTURE_2D_NV
     GL_PIXEL_UNPACK_BUFFER_BINDING_ARB GL_PIXEL_UNPACK_BUFFER_BINDING_EXT
     GL_POST_COLOR_MATRIX_BLUE_BIAS_SGI GL_POST_COLOR_MATRIX_RED_SCALE_SGI
     GL_POST_CONVOLUTION_ALPHA_BIAS_EXT GL_POST_CONVOLUTION_BLUE_SCALE_EXT
     GL_POST_CONVOLUTION_GREEN_BIAS_EXT GL_PROGRAMMABLE_SAMPLE_LOCATION_NV
     GL_PROGRAM_BINARY_RETRIEVABLE_HINT GL_PROGRAM_NATIVE_INSTRUCTIONS_ARB
     GL_PROGRAM_UNDER_NATIVE_LIMITS_ARB GL_READ_PIXEL_DATA_RANGE_LENGTH_NV
     GL_REPLACEMENT_CODE_ARRAY_TYPE_SUN GL_RESET_NOTIFICATION_STRATEGY_ARB
     GL_SECONDARY_COLOR_ARRAY_LENGTH_NV GL_SGIX_fragment_specular_lighting
     GL_SHADER_BINARY_FORMAT_SPIR_V_ARB GL_SHADER_IMAGE_ACCESS_BARRIER_BIT
     GL_TESS_CONTROL_SHADER_PATCHES_ARB GL_TESS_CONTROL_SUBROUTINE_UNIFORM
     GL_TEXTURE_BINDING_RENDERBUFFER_NV GL_TEXTURE_BUFFER_OFFSET_ALIGNMENT
     GL_TEXTURE_COMPRESSED_BLOCK_HEIGHT GL_TEXTURE_COORD_ARRAY_POINTER_EXT
     GL_TEXTURE_CUBE_MAP_NEGATIVE_X_ARB GL_TEXTURE_CUBE_MAP_NEGATIVE_X_EXT
     GL_TEXTURE_CUBE_MAP_NEGATIVE_Y_ARB GL_TEXTURE_CUBE_MAP_NEGATIVE_Y_EXT
     GL_TEXTURE_CUBE_MAP_NEGATIVE_Z_ARB GL_TEXTURE_CUBE_MAP_NEGATIVE_Z_EXT
     GL_TEXTURE_CUBE_MAP_POSITIVE_X_ARB GL_TEXTURE_CUBE_MAP_POSITIVE_X_EXT
     GL_TEXTURE_CUBE_MAP_POSITIVE_Y_ARB GL_TEXTURE_CUBE_MAP_POSITIVE_Y_EXT
     GL_TEXTURE_CUBE_MAP_POSITIVE_Z_ARB GL_TEXTURE_CUBE_MAP_POSITIVE_Z_EXT
     GL_TRANSFORM_FEEDBACK_BUFFER_INDEX GL_TRANSFORM_FEEDBACK_BUFFER_START
     GL_TRANSFORM_FEEDBACK_OVERFLOW_ARB GL_TRANSFORM_FEEDBACK_VARYINGS_EXT
     GL_TRANSPOSE_PROJECTION_MATRIX_ARB GL_UNIFORM_BUFFER_OFFSET_ALIGNMENT
     GL_UNSIGNED_INT_IMAGE_1D_ARRAY_EXT GL_UNSIGNED_INT_IMAGE_2D_ARRAY_EXT
     GL_UNSIGNED_INT_SAMPLER_BUFFER_AMD GL_UNSIGNED_INT_SAMPLER_BUFFER_EXT
     GL_VERTEX_ARRAY_BUFFER_BINDING_ARB GL_VERTEX_ARRAY_RANGE_LENGTH_APPLE
     GL_VERTEX_ARRAY_STORAGE_HINT_APPLE GL_VERTEX_ATTRIB_ARRAY_BARRIER_BIT
     GL_VERTEX_ATTRIB_ARRAY_DIVISOR_ARB GL_VERTEX_ATTRIB_ARRAY_ENABLED_ARB
     GL_VERTEX_ATTRIB_ARRAY_INTEGER_EXT GL_VERTEX_ATTRIB_ARRAY_POINTER_ARB
     GL_VERTEX_ATTRIB_MAP1_DOMAIN_APPLE GL_VERTEX_ATTRIB_MAP2_DOMAIN_APPLE
     GL_VERTEX_WEIGHT_ARRAY_POINTER_EXT GL_VIDEO_BUFFER_INTERNAL_FORMAT_NV
     GL_VIDEO_CAPTURE_SURFACE_ORIGIN_NV GL_VIEWPORT_INDEX_PROVOKING_VERTEX
     GL_WEIGHT_ARRAY_BUFFER_BINDING_ARB MAX_VERTEX_TEXTURE_IMAGE_UNITS_ARB
     glNamedProgramLocalParameter4dvEXT glNamedProgramLocalParameter4fvEXT
     glNamedProgramLocalParameterI4iEXT glVertexArrayVertexAttribFormatEXT
     glVertexArrayVertexAttribOffsetEXT */
  /* Offset 20 gives the best switch position.  */
  switch (name[20]) {
  case '0':
    if (memEQ(name, "GL_ARB_vertex_type_10f_11f_11f_rev", 34)) {
    /*                                   ^                    */
#ifdef GL_ARB_vertex_type_10f_11f_11f_rev
      *iv_return = GL_ARB_vertex_type_10f_11f_11f_rev;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case '1':
    if (memEQ(name, "GL_LUMINANCE16_ALPHA16_SIGNED_SGIX", 34)) {
    /*                                   ^                    */
#ifdef GL_LUMINANCE16_ALPHA16_SIGNED_SGIX
      *iv_return = GL_LUMINANCE16_ALPHA16_SIGNED_SGIX;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_VERTEX_ATTRIB_MAP1_DOMAIN_APPLE", 34)) {
    /*                                   ^                    */
#ifdef GL_VERTEX_ATTRIB_MAP1_DOMAIN_APPLE
      *iv_return = GL_VERTEX_ATTRIB_MAP1_DOMAIN_APPLE;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case '2':
    if (memEQ(name, "GL_VERTEX_ATTRIB_MAP2_DOMAIN_APPLE", 34)) {
    /*                                   ^                    */
#ifdef GL_VERTEX_ATTRIB_MAP2_DOMAIN_APPLE
      *iv_return = GL_VERTEX_ATTRIB_MAP2_DOMAIN_APPLE;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case '3':
    if (memEQ(name, "GL_COMPRESSED_RGBA_S3TC_DXT1_ANGLE", 34)) {
    /*                                   ^                    */
#ifdef GL_COMPRESSED_RGBA_S3TC_DXT1_ANGLE
      *iv_return = GL_COMPRESSED_RGBA_S3TC_DXT1_ANGLE;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_COMPRESSED_RGBA_S3TC_DXT3_ANGLE", 34)) {
    /*                                   ^                    */
#ifdef GL_COMPRESSED_RGBA_S3TC_DXT3_ANGLE
      *iv_return = GL_COMPRESSED_RGBA_S3TC_DXT3_ANGLE;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_COMPRESSED_RGBA_S3TC_DXT5_ANGLE", 34)) {
    /*                                   ^                    */
#ifdef GL_COMPRESSED_RGBA_S3TC_DXT5_ANGLE
      *iv_return = GL_COMPRESSED_RGBA_S3TC_DXT5_ANGLE;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case 'A':
    if (memEQ(name, "GL_COMPRESSED_SLUMINANCE_ALPHA_EXT", 34)) {
    /*                                   ^                    */
#ifdef GL_COMPRESSED_SLUMINANCE_ALPHA_EXT
      *iv_return = GL_COMPRESSED_SLUMINANCE_ALPHA_EXT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_GLYPH_VERTICAL_BEARING_X_BIT_NV", 34)) {
    /*                                   ^                    */
#ifdef GL_GLYPH_VERTICAL_BEARING_X_BIT_NV
      *iv_return = GL_GLYPH_VERTICAL_BEARING_X_BIT_NV;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_GLYPH_VERTICAL_BEARING_Y_BIT_NV", 34)) {
    /*                                   ^                    */
#ifdef GL_GLYPH_VERTICAL_BEARING_Y_BIT_NV
      *iv_return = GL_GLYPH_VERTICAL_BEARING_Y_BIT_NV;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_IMAGE_FORMAT_COMPATIBILITY_TYPE", 34)) {
    /*                                   ^                    */
#ifdef GL_IMAGE_FORMAT_COMPATIBILITY_TYPE
      *iv_return = GL_IMAGE_FORMAT_COMPATIBILITY_TYPE;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_POST_CONVOLUTION_ALPHA_BIAS_EXT", 34)) {
    /*                                   ^                    */
#ifdef GL_POST_CONVOLUTION_ALPHA_BIAS_EXT
      *iv_return = GL_POST_CONVOLUTION_ALPHA_BIAS_EXT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_READ_PIXEL_DATA_RANGE_LENGTH_NV", 34)) {
    /*                                   ^                    */
#ifdef GL_READ_PIXEL_DATA_RANGE_LENGTH_NV
      *iv_return = GL_READ_PIXEL_DATA_RANGE_LENGTH_NV;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_REPLACEMENT_CODE_ARRAY_TYPE_SUN", 34)) {
    /*                                   ^                    */
#ifdef GL_REPLACEMENT_CODE_ARRAY_TYPE_SUN
      *iv_return = GL_REPLACEMENT_CODE_ARRAY_TYPE_SUN;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_TEXTURE_COORD_ARRAY_POINTER_EXT", 34)) {
    /*                                   ^                    */
#ifdef GL_TEXTURE_COORD_ARRAY_POINTER_EXT
      *iv_return = GL_TEXTURE_COORD_ARRAY_POINTER_EXT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_VERTEX_ARRAY_STORAGE_HINT_APPLE", 34)) {
    /*                                   ^                    */
#ifdef GL_VERTEX_ARRAY_STORAGE_HINT_APPLE
      *iv_return = GL_VERTEX_ARRAY_STORAGE_HINT_APPLE;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_VERTEX_ATTRIB_ARRAY_BARRIER_BIT", 34)) {
    /*                                   ^                    */
#ifdef GL_VERTEX_ATTRIB_ARRAY_BARRIER_BIT
      *iv_return = GL_VERTEX_ATTRIB_ARRAY_BARRIER_BIT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_VERTEX_ATTRIB_ARRAY_DIVISOR_ARB", 34)) {
    /*                                   ^                    */
#ifdef GL_VERTEX_ATTRIB_ARRAY_DIVISOR_ARB
      *iv_return = GL_VERTEX_ATTRIB_ARRAY_DIVISOR_ARB;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_VERTEX_ATTRIB_ARRAY_ENABLED_ARB", 34)) {
    /*                                   ^                    */
#ifdef GL_VERTEX_ATTRIB_ARRAY_ENABLED_ARB
      *iv_return = GL_VERTEX_ATTRIB_ARRAY_ENABLED_ARB;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_VERTEX_ATTRIB_ARRAY_INTEGER_EXT", 34)) {
    /*                                   ^                    */
#ifdef GL_VERTEX_ATTRIB_ARRAY_INTEGER_EXT
      *iv_return = GL_VERTEX_ATTRIB_ARRAY_INTEGER_EXT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_VERTEX_ATTRIB_ARRAY_POINTER_ARB", 34)) {
    /*                                   ^                    */
#ifdef GL_VERTEX_ATTRIB_ARRAY_POINTER_ARB
      *iv_return = GL_VERTEX_ATTRIB_ARRAY_POINTER_ARB;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_VERTEX_WEIGHT_ARRAY_POINTER_EXT", 34)) {
    /*                                   ^                    */
#ifdef GL_VERTEX_WEIGHT_ARRAY_POINTER_EXT
      *iv_return = GL_VERTEX_WEIGHT_ARRAY_POINTER_EXT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case 'B':
    if (memEQ(name, "GL_POST_CONVOLUTION_BLUE_SCALE_EXT", 34)) {
    /*                                   ^                    */
#ifdef GL_POST_CONVOLUTION_BLUE_SCALE_EXT
      *iv_return = GL_POST_CONVOLUTION_BLUE_SCALE_EXT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case 'C':
    if (memEQ(name, "GL_DOT_PRODUCT_REFLECT_CUBE_MAP_NV", 34)) {
    /*                                   ^                    */
#ifdef GL_DOT_PRODUCT_REFLECT_CUBE_MAP_NV
      *iv_return = GL_DOT_PRODUCT_REFLECT_CUBE_MAP_NV;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case 'D':
    if (memEQ(name, "GL_ANY_SAMPLES_PASSED_CONSERVATIVE", 34)) {
    /*                                   ^                    */
#ifdef GL_ANY_SAMPLES_PASSED_CONSERVATIVE
      *iv_return = GL_ANY_SAMPLES_PASSED_CONSERVATIVE;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_INTENSITY16_EXTENDED_RANGE_SGIX", 34)) {
    /*                                   ^                    */
#ifdef GL_INTENSITY16_EXTENDED_RANGE_SGIX
      *iv_return = GL_INTENSITY16_EXTENDED_RANGE_SGIX;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_LUMINANCE16_EXTENDED_RANGE_SGIX", 34)) {
    /*                                   ^                    */
#ifdef GL_LUMINANCE16_EXTENDED_RANGE_SGIX
      *iv_return = GL_LUMINANCE16_EXTENDED_RANGE_SGIX;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_TEXTURE_COMPRESSED_BLOCK_HEIGHT", 34)) {
    /*                                   ^                    */
#ifdef GL_TEXTURE_COMPRESSED_BLOCK_HEIGHT
      *iv_return = GL_TEXTURE_COMPRESSED_BLOCK_HEIGHT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case 'E':
    if (memEQ(name, "GL_EVAL_FRACTIONAL_TESSELLATION_NV", 34)) {
    /*                                   ^                    */
#ifdef GL_EVAL_FRACTIONAL_TESSELLATION_NV
      *iv_return = GL_EVAL_FRACTIONAL_TESSELLATION_NV;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_FRAGMENT_SHADER_DERIVATIVE_HINT", 34)) {
    /*                                   ^                    */
#ifdef GL_FRAGMENT_SHADER_DERIVATIVE_HINT
      *iv_return = GL_FRAGMENT_SHADER_DERIVATIVE_HINT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_MAX_GEOMETRY_SHADER_INVOCATIONS", 34)) {
    /*                                   ^                    */
#ifdef GL_MAX_GEOMETRY_SHADER_INVOCATIONS
      *iv_return = GL_MAX_GEOMETRY_SHADER_INVOCATIONS;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_MAX_SHADER_COMPILER_THREADS_ARB", 34)) {
    /*                                   ^                    */
#ifdef GL_MAX_SHADER_COMPILER_THREADS_ARB
      *iv_return = GL_MAX_SHADER_COMPILER_THREADS_ARB;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_NORMAL_ARRAY_BUFFER_BINDING_ARB", 34)) {
    /*                                   ^                    */
#ifdef GL_NORMAL_ARRAY_BUFFER_BINDING_ARB
      *iv_return = GL_NORMAL_ARRAY_BUFFER_BINDING_ARB;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_PIXEL_UNPACK_BUFFER_BINDING_ARB", 34)) {
    /*                                   ^                    */
#ifdef GL_PIXEL_UNPACK_BUFFER_BINDING_ARB
      *iv_return = GL_PIXEL_UNPACK_BUFFER_BINDING_ARB;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_PIXEL_UNPACK_BUFFER_BINDING_EXT", 34)) {
    /*                                   ^                    */
#ifdef GL_PIXEL_UNPACK_BUFFER_BINDING_EXT
      *iv_return = GL_PIXEL_UNPACK_BUFFER_BINDING_EXT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_TESS_CONTROL_SHADER_PATCHES_ARB", 34)) {
    /*                                   ^                    */
#ifdef GL_TESS_CONTROL_SHADER_PATCHES_ARB
      *iv_return = GL_TESS_CONTROL_SHADER_PATCHES_ARB;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_TEXTURE_BINDING_RENDERBUFFER_NV", 34)) {
    /*                                   ^                    */
#ifdef GL_TEXTURE_BINDING_RENDERBUFFER_NV
      *iv_return = GL_TEXTURE_BINDING_RENDERBUFFER_NV;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_UNSIGNED_INT_IMAGE_1D_ARRAY_EXT", 34)) {
    /*                                   ^                    */
#ifdef GL_UNSIGNED_INT_IMAGE_1D_ARRAY_EXT
      *iv_return = GL_UNSIGNED_INT_IMAGE_1D_ARRAY_EXT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_UNSIGNED_INT_IMAGE_2D_ARRAY_EXT", 34)) {
    /*                                   ^                    */
#ifdef GL_UNSIGNED_INT_IMAGE_2D_ARRAY_EXT
      *iv_return = GL_UNSIGNED_INT_IMAGE_2D_ARRAY_EXT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_VERTEX_ARRAY_BUFFER_BINDING_ARB", 34)) {
    /*                                   ^                    */
#ifdef GL_VERTEX_ARRAY_BUFFER_BINDING_ARB
      *iv_return = GL_VERTEX_ARRAY_BUFFER_BINDING_ARB;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_VERTEX_ARRAY_RANGE_LENGTH_APPLE", 34)) {
    /*                                   ^                    */
#ifdef GL_VERTEX_ARRAY_RANGE_LENGTH_APPLE
      *iv_return = GL_VERTEX_ARRAY_RANGE_LENGTH_APPLE;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_WEIGHT_ARRAY_BUFFER_BINDING_ARB", 34)) {
    /*                                   ^                    */
#ifdef GL_WEIGHT_ARRAY_BUFFER_BINDING_ARB
      *iv_return = GL_WEIGHT_ARRAY_BUFFER_BINDING_ARB;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case 'F':
    if (memEQ(name, "GL_ATOMIC_COUNTER_BUFFER_DATA_SIZE", 34)) {
    /*                                   ^                    */
#ifdef GL_ATOMIC_COUNTER_BUFFER_DATA_SIZE
      *iv_return = GL_ATOMIC_COUNTER_BUFFER_DATA_SIZE;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_TEXTURE_BUFFER_OFFSET_ALIGNMENT", 34)) {
    /*                                   ^                    */
#ifdef GL_TEXTURE_BUFFER_OFFSET_ALIGNMENT
      *iv_return = GL_TEXTURE_BUFFER_OFFSET_ALIGNMENT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_UNIFORM_BUFFER_OFFSET_ALIGNMENT", 34)) {
    /*                                   ^                    */
#ifdef GL_UNIFORM_BUFFER_OFFSET_ALIGNMENT
      *iv_return = GL_UNIFORM_BUFFER_OFFSET_ALIGNMENT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_VIDEO_CAPTURE_SURFACE_ORIGIN_NV", 34)) {
    /*                                   ^                    */
#ifdef GL_VIDEO_CAPTURE_SURFACE_ORIGIN_NV
      *iv_return = GL_VIDEO_CAPTURE_SURFACE_ORIGIN_NV;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case 'G':
    if (memEQ(name, "GL_POST_CONVOLUTION_GREEN_BIAS_EXT", 34)) {
    /*                                   ^                    */
#ifdef GL_POST_CONVOLUTION_GREEN_BIAS_EXT
      *iv_return = GL_POST_CONVOLUTION_GREEN_BIAS_EXT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case 'H':
    if (memEQ(name, "GL_FRAMEBUFFER_ATTACHMENT_RED_SIZE", 34)) {
    /*                                   ^                    */
#ifdef GL_FRAMEBUFFER_ATTACHMENT_RED_SIZE
      *iv_return = GL_FRAMEBUFFER_ATTACHMENT_RED_SIZE;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case 'I':
    if (memEQ(name, "GL_EDGE_FLAG_ARRAY_LIST_STRIDE_IBM", 34)) {
    /*                                   ^                    */
#ifdef GL_EDGE_FLAG_ARRAY_LIST_STRIDE_IBM
      *iv_return = GL_EDGE_FLAG_ARRAY_LIST_STRIDE_IBM;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_FONT_UNDERLINE_THICKNESS_BIT_NV", 34)) {
    /*                                   ^                    */
#ifdef GL_FONT_UNDERLINE_THICKNESS_BIT_NV
      *iv_return = GL_FONT_UNDERLINE_THICKNESS_BIT_NV;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_MAT_AMBIENT_AND_DIFFUSE_BIT_PGI", 34)) {
    /*                                   ^                    */
#ifdef GL_MAT_AMBIENT_AND_DIFFUSE_BIT_PGI
      *iv_return = GL_MAT_AMBIENT_AND_DIFFUSE_BIT_PGI;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_MAX_TESS_CONTROL_IMAGE_UNIFORMS", 34)) {
    /*                                   ^                    */
#ifdef GL_MAX_TESS_CONTROL_IMAGE_UNIFORMS
      *iv_return = GL_MAX_TESS_CONTROL_IMAGE_UNIFORMS;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_PROGRAM_UNDER_NATIVE_LIMITS_ARB", 34)) {
    /*                                   ^                    */
#ifdef GL_PROGRAM_UNDER_NATIVE_LIMITS_ARB
      *iv_return = GL_PROGRAM_UNDER_NATIVE_LIMITS_ARB;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_TRANSPOSE_PROJECTION_MATRIX_ARB", 34)) {
    /*                                   ^                    */
#ifdef GL_TRANSPOSE_PROJECTION_MATRIX_ARB
      *iv_return = GL_TRANSPOSE_PROJECTION_MATRIX_ARB;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case 'K':
    if (memEQ(name, "GL_TRANSFORM_FEEDBACK_BUFFER_INDEX", 34)) {
    /*                                   ^                    */
#ifdef GL_TRANSFORM_FEEDBACK_BUFFER_INDEX
      *iv_return = GL_TRANSFORM_FEEDBACK_BUFFER_INDEX;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_TRANSFORM_FEEDBACK_BUFFER_START", 34)) {
    /*                                   ^                    */
#ifdef GL_TRANSFORM_FEEDBACK_BUFFER_START
      *iv_return = GL_TRANSFORM_FEEDBACK_BUFFER_START;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_TRANSFORM_FEEDBACK_OVERFLOW_ARB", 34)) {
    /*                                   ^                    */
#ifdef GL_TRANSFORM_FEEDBACK_OVERFLOW_ARB
      *iv_return = GL_TRANSFORM_FEEDBACK_OVERFLOW_ARB;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_TRANSFORM_FEEDBACK_VARYINGS_EXT", 34)) {
    /*                                   ^                    */
#ifdef GL_TRANSFORM_FEEDBACK_VARYINGS_EXT
      *iv_return = GL_TRANSFORM_FEEDBACK_VARYINGS_EXT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case 'L':
    if (memEQ(name, "GL_PROGRAMMABLE_SAMPLE_LOCATION_NV", 34)) {
    /*                                   ^                    */
#ifdef GL_PROGRAMMABLE_SAMPLE_LOCATION_NV
      *iv_return = GL_PROGRAMMABLE_SAMPLE_LOCATION_NV;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_UNSIGNED_INT_SAMPLER_BUFFER_AMD", 34)) {
    /*                                   ^                    */
#ifdef GL_UNSIGNED_INT_SAMPLER_BUFFER_AMD
      *iv_return = GL_UNSIGNED_INT_SAMPLER_BUFFER_AMD;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_UNSIGNED_INT_SAMPLER_BUFFER_EXT", 34)) {
    /*                                   ^                    */
#ifdef GL_UNSIGNED_INT_SAMPLER_BUFFER_EXT
      *iv_return = GL_UNSIGNED_INT_SAMPLER_BUFFER_EXT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case 'M':
    if (memEQ(name, "GL_SHADER_BINARY_FORMAT_SPIR_V_ARB", 34)) {
    /*                                   ^                    */
#ifdef GL_SHADER_BINARY_FORMAT_SPIR_V_ARB
      *iv_return = GL_SHADER_BINARY_FORMAT_SPIR_V_ARB;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "MAX_VERTEX_TEXTURE_IMAGE_UNITS_ARB", 34)) {
    /*                                   ^                    */
#ifdef MAX_VERTEX_TEXTURE_IMAGE_UNITS_ARB
      *iv_return = MAX_VERTEX_TEXTURE_IMAGE_UNITS_ARB;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case 'N':
    if (memEQ(name, "GL_FRAGMENT_SHADER_INVOCATIONS_ARB", 34)) {
    /*                                   ^                    */
#ifdef GL_FRAGMENT_SHADER_INVOCATIONS_ARB
      *iv_return = GL_FRAGMENT_SHADER_INVOCATIONS_ARB;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_RESET_NOTIFICATION_STRATEGY_ARB", 34)) {
    /*                                   ^                    */
#ifdef GL_RESET_NOTIFICATION_STRATEGY_ARB
      *iv_return = GL_RESET_NOTIFICATION_STRATEGY_ARB;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_TEXTURE_CUBE_MAP_NEGATIVE_X_ARB", 34)) {
    /*                                   ^                    */
#ifdef GL_TEXTURE_CUBE_MAP_NEGATIVE_X_ARB
      *iv_return = GL_TEXTURE_CUBE_MAP_NEGATIVE_X_ARB;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_TEXTURE_CUBE_MAP_NEGATIVE_X_EXT", 34)) {
    /*                                   ^                    */
#ifdef GL_TEXTURE_CUBE_MAP_NEGATIVE_X_EXT
      *iv_return = GL_TEXTURE_CUBE_MAP_NEGATIVE_X_EXT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_TEXTURE_CUBE_MAP_NEGATIVE_Y_ARB", 34)) {
    /*                                   ^                    */
#ifdef GL_TEXTURE_CUBE_MAP_NEGATIVE_Y_ARB
      *iv_return = GL_TEXTURE_CUBE_MAP_NEGATIVE_Y_ARB;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_TEXTURE_CUBE_MAP_NEGATIVE_Y_EXT", 34)) {
    /*                                   ^                    */
#ifdef GL_TEXTURE_CUBE_MAP_NEGATIVE_Y_EXT
      *iv_return = GL_TEXTURE_CUBE_MAP_NEGATIVE_Y_EXT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_TEXTURE_CUBE_MAP_NEGATIVE_Z_ARB", 34)) {
    /*                                   ^                    */
#ifdef GL_TEXTURE_CUBE_MAP_NEGATIVE_Z_ARB
      *iv_return = GL_TEXTURE_CUBE_MAP_NEGATIVE_Z_ARB;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_TEXTURE_CUBE_MAP_NEGATIVE_Z_EXT", 34)) {
    /*                                   ^                    */
#ifdef GL_TEXTURE_CUBE_MAP_NEGATIVE_Z_EXT
      *iv_return = GL_TEXTURE_CUBE_MAP_NEGATIVE_Z_EXT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case 'O':
    if (memEQ(name, "GL_MAX_FRAGMENT_UNIFORM_COMPONENTS", 34)) {
    /*                                   ^                    */
#ifdef GL_MAX_FRAGMENT_UNIFORM_COMPONENTS
      *iv_return = GL_MAX_FRAGMENT_UNIFORM_COMPONENTS;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_MAX_GEOMETRY_UNIFORM_COMPONENTS", 34)) {
    /*                                   ^                    */
#ifdef GL_MAX_GEOMETRY_UNIFORM_COMPONENTS
      *iv_return = GL_MAX_GEOMETRY_UNIFORM_COMPONENTS;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_MIN_PBUFFER_VIEWPORT_DIMS_APPLE", 34)) {
    /*                                   ^                    */
#ifdef GL_MIN_PBUFFER_VIEWPORT_DIMS_APPLE
      *iv_return = GL_MIN_PBUFFER_VIEWPORT_DIMS_APPLE;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_TESS_CONTROL_SUBROUTINE_UNIFORM", 34)) {
    /*                                   ^                    */
#ifdef GL_TESS_CONTROL_SUBROUTINE_UNIFORM
      *iv_return = GL_TESS_CONTROL_SUBROUTINE_UNIFORM;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_VIEWPORT_INDEX_PROVOKING_VERTEX", 34)) {
    /*                                   ^                    */
#ifdef GL_VIEWPORT_INDEX_PROVOKING_VERTEX
      *iv_return = GL_VIEWPORT_INDEX_PROVOKING_VERTEX;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case 'P':
    if (memEQ(name, "GL_TEXTURE_CUBE_MAP_POSITIVE_X_ARB", 34)) {
    /*                                   ^                    */
#ifdef GL_TEXTURE_CUBE_MAP_POSITIVE_X_ARB
      *iv_return = GL_TEXTURE_CUBE_MAP_POSITIVE_X_ARB;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_TEXTURE_CUBE_MAP_POSITIVE_X_EXT", 34)) {
    /*                                   ^                    */
#ifdef GL_TEXTURE_CUBE_MAP_POSITIVE_X_EXT
      *iv_return = GL_TEXTURE_CUBE_MAP_POSITIVE_X_EXT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_TEXTURE_CUBE_MAP_POSITIVE_Y_ARB", 34)) {
    /*                                   ^                    */
#ifdef GL_TEXTURE_CUBE_MAP_POSITIVE_Y_ARB
      *iv_return = GL_TEXTURE_CUBE_MAP_POSITIVE_Y_ARB;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_TEXTURE_CUBE_MAP_POSITIVE_Y_EXT", 34)) {
    /*                                   ^                    */
#ifdef GL_TEXTURE_CUBE_MAP_POSITIVE_Y_EXT
      *iv_return = GL_TEXTURE_CUBE_MAP_POSITIVE_Y_EXT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_TEXTURE_CUBE_MAP_POSITIVE_Z_ARB", 34)) {
    /*                                   ^                    */
#ifdef GL_TEXTURE_CUBE_MAP_POSITIVE_Z_ARB
      *iv_return = GL_TEXTURE_CUBE_MAP_POSITIVE_Z_ARB;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_TEXTURE_CUBE_MAP_POSITIVE_Z_EXT", 34)) {
    /*                                   ^                    */
#ifdef GL_TEXTURE_CUBE_MAP_POSITIVE_Z_EXT
      *iv_return = GL_TEXTURE_CUBE_MAP_POSITIVE_Z_EXT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case 'R':
    if (memEQ(name, "GL_DOT_PRODUCT_TEXTURE_CUBE_MAP_NV", 34)) {
    /*                                   ^                    */
#ifdef GL_DOT_PRODUCT_TEXTURE_CUBE_MAP_NV
      *iv_return = GL_DOT_PRODUCT_TEXTURE_CUBE_MAP_NV;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_FOG_COORDINATE_ARRAY_STRIDE_EXT", 34)) {
    /*                                   ^                    */
#ifdef GL_FOG_COORDINATE_ARRAY_STRIDE_EXT
      *iv_return = GL_FOG_COORDINATE_ARRAY_STRIDE_EXT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_MAX_COMPUTE_TEXTURE_IMAGE_UNITS", 34)) {
    /*                                   ^                    */
#ifdef GL_MAX_COMPUTE_TEXTURE_IMAGE_UNITS
      *iv_return = GL_MAX_COMPUTE_TEXTURE_IMAGE_UNITS;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_OBJECT_SHADER_SOURCE_LENGTH_ARB", 34)) {
    /*                                   ^                    */
#ifdef GL_OBJECT_SHADER_SOURCE_LENGTH_ARB
      *iv_return = GL_OBJECT_SHADER_SOURCE_LENGTH_ARB;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_SECONDARY_COLOR_ARRAY_LENGTH_NV", 34)) {
    /*                                   ^                    */
#ifdef GL_SECONDARY_COLOR_ARRAY_LENGTH_NV
      *iv_return = GL_SECONDARY_COLOR_ARRAY_LENGTH_NV;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_VIDEO_BUFFER_INTERNAL_FORMAT_NV", 34)) {
    /*                                   ^                    */
#ifdef GL_VIDEO_BUFFER_INTERNAL_FORMAT_NV
      *iv_return = GL_VIDEO_BUFFER_INTERNAL_FORMAT_NV;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case 'S':
    if (memEQ(name, "GL_DOT_PRODUCT_DIFFUSE_CUBE_MAP_NV", 34)) {
    /*                                   ^                    */
#ifdef GL_DOT_PRODUCT_DIFFUSE_CUBE_MAP_NV
      *iv_return = GL_DOT_PRODUCT_DIFFUSE_CUBE_MAP_NV;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_MAX_TRACK_MATRIX_STACK_DEPTH_NV", 34)) {
    /*                                   ^                    */
#ifdef GL_MAX_TRACK_MATRIX_STACK_DEPTH_NV
      *iv_return = GL_MAX_TRACK_MATRIX_STACK_DEPTH_NV;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_PROGRAM_NATIVE_INSTRUCTIONS_ARB", 34)) {
    /*                                   ^                    */
#ifdef GL_PROGRAM_NATIVE_INSTRUCTIONS_ARB
      *iv_return = GL_PROGRAM_NATIVE_INSTRUCTIONS_ARB;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_SHADER_IMAGE_ACCESS_BARRIER_BIT", 34)) {
    /*                                   ^                    */
#ifdef GL_SHADER_IMAGE_ACCESS_BARRIER_BIT
      *iv_return = GL_SHADER_IMAGE_ACCESS_BARRIER_BIT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case 'T':
    if (memEQ(name, "GL_CULL_VERTEX_OBJECT_POSITION_EXT", 34)) {
    /*                                   ^                    */
#ifdef GL_CULL_VERTEX_OBJECT_POSITION_EXT
      *iv_return = GL_CULL_VERTEX_OBJECT_POSITION_EXT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_MAX_SPARSE_ARRAY_TEXTURE_LAYERS", 34)) {
    /*                                   ^                    */
#ifdef GL_MAX_SPARSE_ARRAY_TEXTURE_LAYERS
      *iv_return = GL_MAX_SPARSE_ARRAY_TEXTURE_LAYERS;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_PROGRAM_BINARY_RETRIEVABLE_HINT", 34)) {
    /*                                   ^                    */
#ifdef GL_PROGRAM_BINARY_RETRIEVABLE_HINT
      *iv_return = GL_PROGRAM_BINARY_RETRIEVABLE_HINT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case 'U':
    if (memEQ(name, "GL_MAX_TESS_CONTROL_UNIFORM_BLOCKS", 34)) {
    /*                                   ^                    */
#ifdef GL_MAX_TESS_CONTROL_UNIFORM_BLOCKS
      *iv_return = GL_MAX_TESS_CONTROL_UNIFORM_BLOCKS;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case '_':
    if (memEQ(name, "GLEW_NV_conservative_raster_dilate", 34)) {
    /*                                   ^                    */
#ifdef GLEW_NV_conservative_raster_dilate
      *iv_return = GLEW_NV_conservative_raster_dilate;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_COMPRESSED_SIGNED_RED_RGTC1_EXT", 34)) {
    /*                                   ^                    */
#ifdef GL_COMPRESSED_SIGNED_RED_RGTC1_EXT
      *iv_return = GL_COMPRESSED_SIGNED_RED_RGTC1_EXT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_NV_bindless_multi_draw_indirect", 34)) {
    /*                                   ^                    */
#ifdef GL_NV_bindless_multi_draw_indirect
      *iv_return = GL_NV_bindless_multi_draw_indirect;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_NV_shader_storage_buffer_object", 34)) {
    /*                                   ^                    */
#ifdef GL_NV_shader_storage_buffer_object
      *iv_return = GL_NV_shader_storage_buffer_object;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_OFFSET_PROJECTIVE_TEXTURE_2D_NV", 34)) {
    /*                                   ^                    */
#ifdef GL_OFFSET_PROJECTIVE_TEXTURE_2D_NV
      *iv_return = GL_OFFSET_PROJECTIVE_TEXTURE_2D_NV;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_POST_COLOR_MATRIX_BLUE_BIAS_SGI", 34)) {
    /*                                   ^                    */
#ifdef GL_POST_COLOR_MATRIX_BLUE_BIAS_SGI
      *iv_return = GL_POST_COLOR_MATRIX_BLUE_BIAS_SGI;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_POST_COLOR_MATRIX_RED_SCALE_SGI", 34)) {
    /*                                   ^                    */
#ifdef GL_POST_COLOR_MATRIX_RED_SCALE_SGI
      *iv_return = GL_POST_COLOR_MATRIX_RED_SCALE_SGI;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case 'a':
    if (memEQ(name, "GLEW_ARB_fragment_shader_interlock", 34)) {
    /*                                   ^                    */
#ifdef GLEW_ARB_fragment_shader_interlock
      *iv_return = GLEW_ARB_fragment_shader_interlock;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GLEW_ARB_pipeline_statistics_query", 34)) {
    /*                                   ^                    */
#ifdef GLEW_ARB_pipeline_statistics_query
      *iv_return = GLEW_ARB_pipeline_statistics_query;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glNamedProgramLocalParameter4dvEXT", 34)) {
    /*                                   ^                    */
#ifdef glNamedProgramLocalParameter4dvEXT
      *iv_return = glNamedProgramLocalParameter4dvEXT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glNamedProgramLocalParameter4fvEXT", 34)) {
    /*                                   ^                    */
#ifdef glNamedProgramLocalParameter4fvEXT
      *iv_return = glNamedProgramLocalParameter4fvEXT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glNamedProgramLocalParameterI4iEXT", 34)) {
    /*                                   ^                    */
#ifdef glNamedProgramLocalParameterI4iEXT
      *iv_return = glNamedProgramLocalParameterI4iEXT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case 'b':
    if (memEQ(name, "GL_ARB_compute_variable_group_size", 34)) {
    /*                                   ^                    */
#ifdef GL_ARB_compute_variable_group_size
      *iv_return = GL_ARB_compute_variable_group_size;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case 'c':
    if (memEQ(name, "GL_SGIX_fragment_specular_lighting", 34)) {
    /*                                   ^                    */
#ifdef GL_SGIX_fragment_specular_lighting
      *iv_return = GL_SGIX_fragment_specular_lighting;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case 'e':
    if (memEQ(name, "GLEW_AMD_vertex_shader_tessellator", 34)) {
    /*                                   ^                    */
#ifdef GLEW_AMD_vertex_shader_tessellator
      *iv_return = GLEW_AMD_vertex_shader_tessellator;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GLEW_ANGLE_framebuffer_multisample", 34)) {
    /*                                   ^                    */
#ifdef GLEW_ANGLE_framebuffer_multisample
      *iv_return = GLEW_ANGLE_framebuffer_multisample;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GLEW_MESA_shader_integer_functions", 34)) {
    /*                                   ^                    */
#ifdef GLEW_MESA_shader_integer_functions
      *iv_return = GLEW_MESA_shader_integer_functions;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GLEW_NV_fragment_coverage_to_color", 34)) {
    /*                                   ^                    */
#ifdef GLEW_NV_fragment_coverage_to_color
      *iv_return = GLEW_NV_fragment_coverage_to_color;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_ARB_conditional_render_inverted", 34)) {
    /*                                   ^                    */
#ifdef GL_ARB_conditional_render_inverted
      *iv_return = GL_ARB_conditional_render_inverted;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case 'g':
    if (memEQ(name, "GL_ARB_texture_storage_multisample", 34)) {
    /*                                   ^                    */
#ifdef GL_ARB_texture_storage_multisample
      *iv_return = GL_ARB_texture_storage_multisample;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case 'i':
    if (memEQ(name, "GLEW_AMD_shader_atomic_counter_ops", 34)) {
    /*                                   ^                    */
#ifdef GLEW_AMD_shader_atomic_counter_ops
      *iv_return = GLEW_AMD_shader_atomic_counter_ops;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GLEW_ARB_explicit_uniform_location", 34)) {
    /*                                   ^                    */
#ifdef GLEW_ARB_explicit_uniform_location
      *iv_return = GLEW_ARB_explicit_uniform_location;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GLEW_ARB_shader_atomic_counter_ops", 34)) {
    /*                                   ^                    */
#ifdef GLEW_ARB_shader_atomic_counter_ops
      *iv_return = GLEW_ARB_shader_atomic_counter_ops;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case 'l':
    if (memEQ(name, "GL_AMD_shader_stencil_value_export", 34)) {
    /*                                   ^                    */
#ifdef GL_AMD_shader_stencil_value_export
      *iv_return = GL_AMD_shader_stencil_value_export;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_EXT_shader_image_load_formatted", 34)) {
    /*                                   ^                    */
#ifdef GL_EXT_shader_image_load_formatted
      *iv_return = GL_EXT_shader_image_load_formatted;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_OES_compressed_paletted_texture", 34)) {
    /*                                   ^                    */
#ifdef GL_OES_compressed_paletted_texture
      *iv_return = GL_OES_compressed_paletted_texture;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case 'm':
    if (memEQ(name, "GLEW_3DFX_texture_compression_FXT1", 34)) {
    /*                                   ^                    */
#ifdef GLEW_3DFX_texture_compression_FXT1
      *iv_return = GLEW_3DFX_texture_compression_FXT1;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case 'n':
    if (memEQ(name, "GLEW_NV_path_rendering_shared_edge", 34)) {
    /*                                   ^                    */
#ifdef GLEW_NV_path_rendering_shared_edge
      *iv_return = GLEW_NV_path_rendering_shared_edge;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case 'o':
    if (memEQ(name, "GLEW_SGIX_texture_coordinate_clamp", 34)) {
    /*                                   ^                    */
#ifdef GLEW_SGIX_texture_coordinate_clamp
      *iv_return = GLEW_SGIX_texture_coordinate_clamp;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case 'r':
    if (memEQ(name, "GL_APPLE_vertex_program_evaluators", 34)) {
    /*                                   ^                    */
#ifdef GL_APPLE_vertex_program_evaluators
      *iv_return = GL_APPLE_vertex_program_evaluators;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_ARB_shader_viewport_layer_array", 34)) {
    /*                                   ^                    */
#ifdef GL_ARB_shader_viewport_layer_array
      *iv_return = GL_ARB_shader_viewport_layer_array;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_ARB_texture_buffer_object_rgb32", 34)) {
    /*                                   ^                    */
#ifdef GL_ARB_texture_buffer_object_rgb32
      *iv_return = GL_ARB_texture_buffer_object_rgb32;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_EXT_pixel_transform_color_table", 34)) {
    /*                                   ^                    */
#ifdef GL_EXT_pixel_transform_color_table
      *iv_return = GL_EXT_pixel_transform_color_table;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case 't':
    if (memEQ(name, "GLEW_ARB_draw_elements_base_vertex", 34)) {
    /*                                   ^                    */
#ifdef GLEW_ARB_draw_elements_base_vertex
      *iv_return = GLEW_ARB_draw_elements_base_vertex;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glVertexArrayVertexAttribFormatEXT", 34)) {
    /*                                   ^                    */
#ifdef glVertexArrayVertexAttribFormatEXT
      *iv_return = glVertexArrayVertexAttribFormatEXT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glVertexArrayVertexAttribOffsetEXT", 34)) {
    /*                                   ^                    */
#ifdef glVertexArrayVertexAttribOffsetEXT
      *iv_return = glVertexArrayVertexAttribOffsetEXT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case 'u':
    if (memEQ(name, "GL_NV_vertex_buffer_unified_memory", 34)) {
    /*                                   ^                    */
#ifdef GL_NV_vertex_buffer_unified_memory
      *iv_return = GL_NV_vertex_buffer_unified_memory;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  }
  return PERL_constant_NOTFOUND;
}

static int
constant_35 (pTHX_ const char *name, IV *iv_return) {
  /* When generated this function returned values for the list of names given
     here.  However, subsequent manual editing may have added or removed some.
     GLEW_AMD_stencil_operation_extended GLEW_ANGLE_texture_compression_dxt1
     GLEW_ANGLE_texture_compression_dxt3 GLEW_ANGLE_texture_compression_dxt5
     GLEW_ANGLE_translated_shader_source GLEW_ARB_fragment_coord_conventions
     GLEW_ARB_framebuffer_no_attachments GLEW_ARB_vertex_type_2_10_10_10_rev
     GLEW_ATI_vertex_attrib_array_object GLEW_EXT_texture_filter_anisotropic
     GLEW_INTEL_fragment_shader_ordering GLEW_NV_geometry_shader_passthrough
     GLEW_NV_internalformat_sample_query GLEW_NV_vertex_attrib_integer_64bit
     GL_AMD_seamless_cubemap_per_texture GL_AMD_vertex_shader_viewport_index
     GL_ARB_seamless_cubemap_per_texture GL_ARB_shader_storage_buffer_object
     GL_ARB_shader_texture_image_samples GL_ARB_texture_mirror_clamp_to_edge
     GL_ARB_transform_feedback_instanced GL_CLIENT_MAPPED_BUFFER_BARRIER_BIT
     GL_COMPARE_REF_DEPTH_TO_TEXTURE_EXT GL_COMPRESSED_RGB_BPTC_SIGNED_FLOAT
     GL_COMPRESSED_SRGB8_ALPHA8_ETC2_EAC GL_COMPRESSED_SRGB_ALPHA_BPTC_UNORM
     GL_CONSERVATIVE_RASTERIZATION_INTEL GL_DEBUG_CATEGORY_WINDOW_SYSTEM_AMD
     GL_DEBUG_NEXT_LOGGED_MESSAGE_LENGTH GL_DEBUG_SOURCE_SHADER_COMPILER_ARB
     GL_DISPATCH_INDIRECT_BUFFER_BINDING GL_DOT_PRODUCT_TEXTURE_RECTANGLE_NV
     GL_DRAW_ARRAYS_INSTANCED_COMMAND_NV GL_ELEMENT_ARRAY_BUFFER_BINDING_ARB
     GL_FOG_COORDINATE_ARRAY_POINTER_EXT GL_FRAGMENT_COLOR_MATERIAL_FACE_EXT
     GL_FRAGMENT_LIGHT_MODEL_AMBIENT_EXT GL_FRAMEBUFFER_ATTACHMENT_BLUE_SIZE
     GL_IMPLEMENTATION_COLOR_READ_FORMAT GL_INTEL_conservative_rasterization
     GL_INT_SAMPLER_2D_MULTISAMPLE_ARRAY GL_KHR_texture_compression_astc_hdr
     GL_KHR_texture_compression_astc_ldr GL_MAX_COLOR_MATRIX_STACK_DEPTH_SGI
     GL_MAX_COMBINED_TEXTURE_IMAGE_UNITS GL_MAX_COMPUTE_FIXED_GROUP_SIZE_ARB
     GL_MAX_GEOMETRY_OUTPUT_VERTICES_ARB GL_MAX_GEOMETRY_OUTPUT_VERTICES_EXT
     GL_MAX_GEOMETRY_TEXTURE_IMAGE_UNITS GL_MAX_PROGRAM_ALU_INSTRUCTIONS_ARB
     GL_MAX_PROGRAM_ATTRIB_COMPONENTS_NV GL_MAX_PROGRAM_EXEC_INSTRUCTIONS_NV
     GL_MAX_PROGRAM_LOCAL_PARAMETERS_ARB GL_MAX_PROGRAM_RESULT_COMPONENTS_NV
     GL_MAX_PROGRAM_TEX_INDIRECTIONS_ARB GL_MAX_PROGRAM_TEX_INSTRUCTIONS_ARB
     GL_MAX_SUBROUTINE_UNIFORM_LOCATIONS GL_MAX_TESS_CONTROL_ATOMIC_COUNTERS
     GL_MAX_VERTEX_BINDABLE_UNIFORMS_EXT GL_MAX_VERTEX_SHADER_INVARIANTS_EXT
     GL_MAX_VERTEX_SHADER_STORAGE_BLOCKS GL_MIXED_DEPTH_SAMPLES_SUPPORTED_NV
     GL_MULTISAMPLE_LINE_WIDTH_RANGE_ARB GL_NV_robustness_video_memory_purge
     GL_NV_sample_mask_override_coverage GL_NV_uniform_buffer_unified_memory
     GL_OFFSET_HILO_TEXTURE_RECTANGLE_NV GL_POST_COLOR_MATRIX_ALPHA_BIAS_SGI
     GL_POST_COLOR_MATRIX_BLUE_SCALE_SGI GL_POST_COLOR_MATRIX_GREEN_BIAS_SGI
     GL_POST_CONVOLUTION_ALPHA_SCALE_EXT GL_POST_CONVOLUTION_COLOR_TABLE_SGI
     GL_POST_CONVOLUTION_GREEN_SCALE_EXT GL_PROGRAMMABLE_SAMPLE_LOCATION_ARB
     GL_PROXY_TEXTURE_CUBE_MAP_ARRAY_ARB GL_QUERY_BY_REGION_NO_WAIT_INVERTED
     GL_QUERY_STENCIL_FAIL_EVENT_BIT_AMD GL_READ_PIXEL_DATA_RANGE_POINTER_NV
     GL_RENDERBUFFER_COVERAGE_SAMPLES_NV GL_RENDERBUFFER_INTERNAL_FORMAT_EXT
     GL_SAMPLE_LOCATION_SUBPIXEL_BITS_NV GL_SECONDARY_COLOR_ARRAY_ADDRESS_NV
     GL_SECONDARY_COLOR_ARRAY_STRIDE_EXT GL_STENCIL_BACK_PASS_DEPTH_FAIL_ATI
     GL_STENCIL_BACK_PASS_DEPTH_PASS_ATI GL_TRANSFORM_FEEDBACK_BUFFER_ACTIVE
     GL_TRANSFORM_FEEDBACK_BUFFER_PAUSED GL_TRANSFORM_FEEDBACK_BUFFER_STRIDE
     GL_UNSIGNED_INT_10F_11F_11F_REV_EXT GL_UNSIGNED_INT_SAMPLER_2D_RECT_EXT
     GL_VERTEX_ARRAY_RANGE_POINTER_APPLE GL_VIDEO_COLOR_CONVERSION_MATRIX_NV
     GL_VIDEO_COLOR_CONVERSION_OFFSET_NV GL_WRITE_PIXEL_DATA_RANGE_LENGTH_NV
     glDrawElementsInstancedBaseInstance glGetNamedFramebufferParameterivEXT
     glInvalidateNamedFramebufferSubData glMultiDrawArraysIndirectBindlessNV
     glMultiDrawElementsIndirectCountARB glNamedProgramLocalParameterI4ivEXT
     glNamedProgramLocalParameterI4uiEXT glNamedProgramLocalParameters4fvEXT
     glRenderbufferStorageMultisampleEXT glVertexArrayMultiTexCoordOffsetEXT
     glVertexArrayVertexAttribBindingEXT glVertexArrayVertexAttribDivisorEXT
     glVertexArrayVertexAttribIFormatEXT glVertexArrayVertexAttribIOffsetEXT
     glVertexArrayVertexAttribLFormatEXT glVertexArrayVertexAttribLOffsetEXT */
  /* Offset 29 gives the best switch position.  */
  switch (name[29]) {
  case '1':
    if (memEQ(name, "GLEW_ARB_vertex_type_2_10_10_10_rev", 35)) {
    /*                                            ^            */
#ifdef GLEW_ARB_vertex_type_2_10_10_10_rev
      *iv_return = GLEW_ARB_vertex_type_2_10_10_10_rev;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case '4':
    if (memEQ(name, "glNamedProgramLocalParameterI4ivEXT", 35)) {
    /*                                            ^            */
#ifdef glNamedProgramLocalParameterI4ivEXT
      *iv_return = glNamedProgramLocalParameterI4ivEXT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glNamedProgramLocalParameterI4uiEXT", 35)) {
    /*                                            ^            */
#ifdef glNamedProgramLocalParameterI4uiEXT
      *iv_return = glNamedProgramLocalParameterI4uiEXT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glNamedProgramLocalParameters4fvEXT", 35)) {
    /*                                            ^            */
#ifdef glNamedProgramLocalParameters4fvEXT
      *iv_return = glNamedProgramLocalParameters4fvEXT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case 'A':
    if (memEQ(name, "GL_DRAW_ARRAYS_INSTANCED_COMMAND_NV", 35)) {
    /*                                            ^            */
#ifdef GL_DRAW_ARRAYS_INSTANCED_COMMAND_NV
      *iv_return = GL_DRAW_ARRAYS_INSTANCED_COMMAND_NV;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_MAX_SUBROUTINE_UNIFORM_LOCATIONS", 35)) {
    /*                                            ^            */
#ifdef GL_MAX_SUBROUTINE_UNIFORM_LOCATIONS
      *iv_return = GL_MAX_SUBROUTINE_UNIFORM_LOCATIONS;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_POST_COLOR_MATRIX_ALPHA_BIAS_SGI", 35)) {
    /*                                            ^            */
#ifdef GL_POST_COLOR_MATRIX_ALPHA_BIAS_SGI
      *iv_return = GL_POST_COLOR_MATRIX_ALPHA_BIAS_SGI;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_POST_COLOR_MATRIX_GREEN_BIAS_SGI", 35)) {
    /*                                            ^            */
#ifdef GL_POST_COLOR_MATRIX_GREEN_BIAS_SGI
      *iv_return = GL_POST_COLOR_MATRIX_GREEN_BIAS_SGI;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_PROXY_TEXTURE_CUBE_MAP_ARRAY_ARB", 35)) {
    /*                                            ^            */
#ifdef GL_PROXY_TEXTURE_CUBE_MAP_ARRAY_ARB
      *iv_return = GL_PROXY_TEXTURE_CUBE_MAP_ARRAY_ARB;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_RENDERBUFFER_INTERNAL_FORMAT_EXT", 35)) {
    /*                                            ^            */
#ifdef GL_RENDERBUFFER_INTERNAL_FORMAT_EXT
      *iv_return = GL_RENDERBUFFER_INTERNAL_FORMAT_EXT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_TRANSFORM_FEEDBACK_BUFFER_ACTIVE", 35)) {
    /*                                            ^            */
#ifdef GL_TRANSFORM_FEEDBACK_BUFFER_ACTIVE
      *iv_return = GL_TRANSFORM_FEEDBACK_BUFFER_ACTIVE;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case 'B':
    if (memEQ(name, "GL_MAX_VERTEX_SHADER_STORAGE_BLOCKS", 35)) {
    /*                                            ^            */
#ifdef GL_MAX_VERTEX_SHADER_STORAGE_BLOCKS
      *iv_return = GL_MAX_VERTEX_SHADER_STORAGE_BLOCKS;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case 'C':
    if (memEQ(name, "GL_COMPRESSED_SRGB8_ALPHA8_ETC2_EAC", 35)) {
    /*                                            ^            */
#ifdef GL_COMPRESSED_SRGB8_ALPHA8_ETC2_EAC
      *iv_return = GL_COMPRESSED_SRGB8_ALPHA8_ETC2_EAC;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_FRAGMENT_COLOR_MATERIAL_FACE_EXT", 35)) {
    /*                                            ^            */
#ifdef GL_FRAGMENT_COLOR_MATERIAL_FACE_EXT
      *iv_return = GL_FRAGMENT_COLOR_MATERIAL_FACE_EXT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_UNSIGNED_INT_SAMPLER_2D_RECT_EXT", 35)) {
    /*                                            ^            */
#ifdef GL_UNSIGNED_INT_SAMPLER_2D_RECT_EXT
      *iv_return = GL_UNSIGNED_INT_SAMPLER_2D_RECT_EXT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case 'D':
    if (memEQ(name, "GL_SECONDARY_COLOR_ARRAY_STRIDE_EXT", 35)) {
    /*                                            ^            */
#ifdef GL_SECONDARY_COLOR_ARRAY_STRIDE_EXT
      *iv_return = GL_SECONDARY_COLOR_ARRAY_STRIDE_EXT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case 'E':
    if (memEQ(name, "GL_CLIENT_MAPPED_BUFFER_BARRIER_BIT", 35)) {
    /*                                            ^            */
#ifdef GL_CLIENT_MAPPED_BUFFER_BARRIER_BIT
      *iv_return = GL_CLIENT_MAPPED_BUFFER_BARRIER_BIT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_DEBUG_CATEGORY_WINDOW_SYSTEM_AMD", 35)) {
    /*                                            ^            */
#ifdef GL_DEBUG_CATEGORY_WINDOW_SYSTEM_AMD
      *iv_return = GL_DEBUG_CATEGORY_WINDOW_SYSTEM_AMD;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_DEBUG_SOURCE_SHADER_COMPILER_ARB", 35)) {
    /*                                            ^            */
#ifdef GL_DEBUG_SOURCE_SHADER_COMPILER_ARB
      *iv_return = GL_DEBUG_SOURCE_SHADER_COMPILER_ARB;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_FOG_COORDINATE_ARRAY_POINTER_EXT", 35)) {
    /*                                            ^            */
#ifdef GL_FOG_COORDINATE_ARRAY_POINTER_EXT
      *iv_return = GL_FOG_COORDINATE_ARRAY_POINTER_EXT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_FRAMEBUFFER_ATTACHMENT_BLUE_SIZE", 35)) {
    /*                                            ^            */
#ifdef GL_FRAMEBUFFER_ATTACHMENT_BLUE_SIZE
      *iv_return = GL_FRAMEBUFFER_ATTACHMENT_BLUE_SIZE;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_MAX_GEOMETRY_OUTPUT_VERTICES_ARB", 35)) {
    /*                                            ^            */
#ifdef GL_MAX_GEOMETRY_OUTPUT_VERTICES_ARB
      *iv_return = GL_MAX_GEOMETRY_OUTPUT_VERTICES_ARB;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_MAX_GEOMETRY_OUTPUT_VERTICES_EXT", 35)) {
    /*                                            ^            */
#ifdef GL_MAX_GEOMETRY_OUTPUT_VERTICES_EXT
      *iv_return = GL_MAX_GEOMETRY_OUTPUT_VERTICES_EXT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_SECONDARY_COLOR_ARRAY_ADDRESS_NV", 35)) {
    /*                                            ^            */
#ifdef GL_SECONDARY_COLOR_ARRAY_ADDRESS_NV
      *iv_return = GL_SECONDARY_COLOR_ARRAY_ADDRESS_NV;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_UNSIGNED_INT_10F_11F_11F_REV_EXT", 35)) {
    /*                                            ^            */
#ifdef GL_UNSIGNED_INT_10F_11F_11F_REV_EXT
      *iv_return = GL_UNSIGNED_INT_10F_11F_11F_REV_EXT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case 'F':
    if (memEQ(name, "GL_IMPLEMENTATION_COLOR_READ_FORMAT", 35)) {
    /*                                            ^            */
#ifdef GL_IMPLEMENTATION_COLOR_READ_FORMAT
      *iv_return = GL_IMPLEMENTATION_COLOR_READ_FORMAT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case 'G':
    if (memEQ(name, "GL_DOT_PRODUCT_TEXTURE_RECTANGLE_NV", 35)) {
    /*                                            ^            */
#ifdef GL_DOT_PRODUCT_TEXTURE_RECTANGLE_NV
      *iv_return = GL_DOT_PRODUCT_TEXTURE_RECTANGLE_NV;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_MULTISAMPLE_LINE_WIDTH_RANGE_ARB", 35)) {
    /*                                            ^            */
#ifdef GL_MULTISAMPLE_LINE_WIDTH_RANGE_ARB
      *iv_return = GL_MULTISAMPLE_LINE_WIDTH_RANGE_ARB;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_OFFSET_HILO_TEXTURE_RECTANGLE_NV", 35)) {
    /*                                            ^            */
#ifdef GL_OFFSET_HILO_TEXTURE_RECTANGLE_NV
      *iv_return = GL_OFFSET_HILO_TEXTURE_RECTANGLE_NV;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_WRITE_PIXEL_DATA_RANGE_LENGTH_NV", 35)) {
    /*                                            ^            */
#ifdef GL_WRITE_PIXEL_DATA_RANGE_LENGTH_NV
      *iv_return = GL_WRITE_PIXEL_DATA_RANGE_LENGTH_NV;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case 'I':
    if (memEQ(name, "GL_DISPATCH_INDIRECT_BUFFER_BINDING", 35)) {
    /*                                            ^            */
#ifdef GL_DISPATCH_INDIRECT_BUFFER_BINDING
      *iv_return = GL_DISPATCH_INDIRECT_BUFFER_BINDING;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_QUERY_STENCIL_FAIL_EVENT_BIT_AMD", 35)) {
    /*                                            ^            */
#ifdef GL_QUERY_STENCIL_FAIL_EVENT_BIT_AMD
      *iv_return = GL_QUERY_STENCIL_FAIL_EVENT_BIT_AMD;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_SAMPLE_LOCATION_SUBPIXEL_BITS_NV", 35)) {
    /*                                            ^            */
#ifdef GL_SAMPLE_LOCATION_SUBPIXEL_BITS_NV
      *iv_return = GL_SAMPLE_LOCATION_SUBPIXEL_BITS_NV;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_STENCIL_BACK_PASS_DEPTH_FAIL_ATI", 35)) {
    /*                                            ^            */
#ifdef GL_STENCIL_BACK_PASS_DEPTH_FAIL_ATI
      *iv_return = GL_STENCIL_BACK_PASS_DEPTH_FAIL_ATI;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case 'L':
    if (memEQ(name, "GL_DEBUG_NEXT_LOGGED_MESSAGE_LENGTH", 35)) {
    /*                                            ^            */
#ifdef GL_DEBUG_NEXT_LOGGED_MESSAGE_LENGTH
      *iv_return = GL_DEBUG_NEXT_LOGGED_MESSAGE_LENGTH;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_POST_COLOR_MATRIX_BLUE_SCALE_SGI", 35)) {
    /*                                            ^            */
#ifdef GL_POST_COLOR_MATRIX_BLUE_SCALE_SGI
      *iv_return = GL_POST_COLOR_MATRIX_BLUE_SCALE_SGI;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_POST_CONVOLUTION_ALPHA_SCALE_EXT", 35)) {
    /*                                            ^            */
#ifdef GL_POST_CONVOLUTION_ALPHA_SCALE_EXT
      *iv_return = GL_POST_CONVOLUTION_ALPHA_SCALE_EXT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_POST_CONVOLUTION_COLOR_TABLE_SGI", 35)) {
    /*                                            ^            */
#ifdef GL_POST_CONVOLUTION_COLOR_TABLE_SGI
      *iv_return = GL_POST_CONVOLUTION_COLOR_TABLE_SGI;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_POST_CONVOLUTION_GREEN_SCALE_EXT", 35)) {
    /*                                            ^            */
#ifdef GL_POST_CONVOLUTION_GREEN_SCALE_EXT
      *iv_return = GL_POST_CONVOLUTION_GREEN_SCALE_EXT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_RENDERBUFFER_COVERAGE_SAMPLES_NV", 35)) {
    /*                                            ^            */
#ifdef GL_RENDERBUFFER_COVERAGE_SAMPLES_NV
      *iv_return = GL_RENDERBUFFER_COVERAGE_SAMPLES_NV;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case 'M':
    if (memEQ(name, "GL_MAX_VERTEX_BINDABLE_UNIFORMS_EXT", 35)) {
    /*                                            ^            */
#ifdef GL_MAX_VERTEX_BINDABLE_UNIFORMS_EXT
      *iv_return = GL_MAX_VERTEX_BINDABLE_UNIFORMS_EXT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case 'N':
    if (memEQ(name, "GL_ELEMENT_ARRAY_BUFFER_BINDING_ARB", 35)) {
    /*                                            ^            */
#ifdef GL_ELEMENT_ARRAY_BUFFER_BINDING_ARB
      *iv_return = GL_ELEMENT_ARRAY_BUFFER_BINDING_ARB;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_FRAGMENT_LIGHT_MODEL_AMBIENT_EXT", 35)) {
    /*                                            ^            */
#ifdef GL_FRAGMENT_LIGHT_MODEL_AMBIENT_EXT
      *iv_return = GL_FRAGMENT_LIGHT_MODEL_AMBIENT_EXT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_MAX_PROGRAM_ALU_INSTRUCTIONS_ARB", 35)) {
    /*                                            ^            */
#ifdef GL_MAX_PROGRAM_ALU_INSTRUCTIONS_ARB
      *iv_return = GL_MAX_PROGRAM_ALU_INSTRUCTIONS_ARB;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_MAX_PROGRAM_ATTRIB_COMPONENTS_NV", 35)) {
    /*                                            ^            */
#ifdef GL_MAX_PROGRAM_ATTRIB_COMPONENTS_NV
      *iv_return = GL_MAX_PROGRAM_ATTRIB_COMPONENTS_NV;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_MAX_PROGRAM_RESULT_COMPONENTS_NV", 35)) {
    /*                                            ^            */
#ifdef GL_MAX_PROGRAM_RESULT_COMPONENTS_NV
      *iv_return = GL_MAX_PROGRAM_RESULT_COMPONENTS_NV;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_MAX_PROGRAM_TEX_INDIRECTIONS_ARB", 35)) {
    /*                                            ^            */
#ifdef GL_MAX_PROGRAM_TEX_INDIRECTIONS_ARB
      *iv_return = GL_MAX_PROGRAM_TEX_INDIRECTIONS_ARB;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_MAX_PROGRAM_TEX_INSTRUCTIONS_ARB", 35)) {
    /*                                            ^            */
#ifdef GL_MAX_PROGRAM_TEX_INSTRUCTIONS_ARB
      *iv_return = GL_MAX_PROGRAM_TEX_INSTRUCTIONS_ARB;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case 'O':
    if (memEQ(name, "GL_MAX_PROGRAM_EXEC_INSTRUCTIONS_NV", 35)) {
    /*                                            ^            */
#ifdef GL_MAX_PROGRAM_EXEC_INSTRUCTIONS_NV
      *iv_return = GL_MAX_PROGRAM_EXEC_INSTRUCTIONS_NV;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_PROGRAMMABLE_SAMPLE_LOCATION_ARB", 35)) {
    /*                                            ^            */
#ifdef GL_PROGRAMMABLE_SAMPLE_LOCATION_ARB
      *iv_return = GL_PROGRAMMABLE_SAMPLE_LOCATION_ARB;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case 'P':
    if (memEQ(name, "GL_TRANSFORM_FEEDBACK_BUFFER_PAUSED", 35)) {
    /*                                            ^            */
#ifdef GL_TRANSFORM_FEEDBACK_BUFFER_PAUSED
      *iv_return = GL_TRANSFORM_FEEDBACK_BUFFER_PAUSED;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case 'R':
    if (memEQ(name, "GL_COMPARE_REF_DEPTH_TO_TEXTURE_EXT", 35)) {
    /*                                            ^            */
#ifdef GL_COMPARE_REF_DEPTH_TO_TEXTURE_EXT
      *iv_return = GL_COMPARE_REF_DEPTH_TO_TEXTURE_EXT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_MAX_PROGRAM_LOCAL_PARAMETERS_ARB", 35)) {
    /*                                            ^            */
#ifdef GL_MAX_PROGRAM_LOCAL_PARAMETERS_ARB
      *iv_return = GL_MAX_PROGRAM_LOCAL_PARAMETERS_ARB;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_VIDEO_COLOR_CONVERSION_MATRIX_NV", 35)) {
    /*                                            ^            */
#ifdef GL_VIDEO_COLOR_CONVERSION_MATRIX_NV
      *iv_return = GL_VIDEO_COLOR_CONVERSION_MATRIX_NV;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case 'S':
    if (memEQ(name, "GL_STENCIL_BACK_PASS_DEPTH_PASS_ATI", 35)) {
    /*                                            ^            */
#ifdef GL_STENCIL_BACK_PASS_DEPTH_PASS_ATI
      *iv_return = GL_STENCIL_BACK_PASS_DEPTH_PASS_ATI;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_TRANSFORM_FEEDBACK_BUFFER_STRIDE", 35)) {
    /*                                            ^            */
#ifdef GL_TRANSFORM_FEEDBACK_BUFFER_STRIDE
      *iv_return = GL_TRANSFORM_FEEDBACK_BUFFER_STRIDE;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_VIDEO_COLOR_CONVERSION_OFFSET_NV", 35)) {
    /*                                            ^            */
#ifdef GL_VIDEO_COLOR_CONVERSION_OFFSET_NV
      *iv_return = GL_VIDEO_COLOR_CONVERSION_OFFSET_NV;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case 'T':
    if (memEQ(name, "GL_MAX_COLOR_MATRIX_STACK_DEPTH_SGI", 35)) {
    /*                                            ^            */
#ifdef GL_MAX_COLOR_MATRIX_STACK_DEPTH_SGI
      *iv_return = GL_MAX_COLOR_MATRIX_STACK_DEPTH_SGI;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_MAX_VERTEX_SHADER_INVARIANTS_EXT", 35)) {
    /*                                            ^            */
#ifdef GL_MAX_VERTEX_SHADER_INVARIANTS_EXT
      *iv_return = GL_MAX_VERTEX_SHADER_INVARIANTS_EXT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_MIXED_DEPTH_SAMPLES_SUPPORTED_NV", 35)) {
    /*                                            ^            */
#ifdef GL_MIXED_DEPTH_SAMPLES_SUPPORTED_NV
      *iv_return = GL_MIXED_DEPTH_SAMPLES_SUPPORTED_NV;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_READ_PIXEL_DATA_RANGE_POINTER_NV", 35)) {
    /*                                            ^            */
#ifdef GL_READ_PIXEL_DATA_RANGE_POINTER_NV
      *iv_return = GL_READ_PIXEL_DATA_RANGE_POINTER_NV;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case 'U':
    if (memEQ(name, "GL_MAX_TESS_CONTROL_ATOMIC_COUNTERS", 35)) {
    /*                                            ^            */
#ifdef GL_MAX_TESS_CONTROL_ATOMIC_COUNTERS
      *iv_return = GL_MAX_TESS_CONTROL_ATOMIC_COUNTERS;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case 'V':
    if (memEQ(name, "GL_QUERY_BY_REGION_NO_WAIT_INVERTED", 35)) {
    /*                                            ^            */
#ifdef GL_QUERY_BY_REGION_NO_WAIT_INVERTED
      *iv_return = GL_QUERY_BY_REGION_NO_WAIT_INVERTED;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case 'Z':
    if (memEQ(name, "GL_MAX_COMPUTE_FIXED_GROUP_SIZE_ARB", 35)) {
    /*                                            ^            */
#ifdef GL_MAX_COMPUTE_FIXED_GROUP_SIZE_ARB
      *iv_return = GL_MAX_COMPUTE_FIXED_GROUP_SIZE_ARB;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case '_':
    if (memEQ(name, "GLEW_NV_internalformat_sample_query", 35)) {
    /*                                            ^            */
#ifdef GLEW_NV_internalformat_sample_query
      *iv_return = GLEW_NV_internalformat_sample_query;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GLEW_NV_vertex_attrib_integer_64bit", 35)) {
    /*                                            ^            */
#ifdef GLEW_NV_vertex_attrib_integer_64bit
      *iv_return = GLEW_NV_vertex_attrib_integer_64bit;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_AMD_vertex_shader_viewport_index", 35)) {
    /*                                            ^            */
#ifdef GL_AMD_vertex_shader_viewport_index
      *iv_return = GL_AMD_vertex_shader_viewport_index;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_COMPRESSED_RGB_BPTC_SIGNED_FLOAT", 35)) {
    /*                                            ^            */
#ifdef GL_COMPRESSED_RGB_BPTC_SIGNED_FLOAT
      *iv_return = GL_COMPRESSED_RGB_BPTC_SIGNED_FLOAT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_COMPRESSED_SRGB_ALPHA_BPTC_UNORM", 35)) {
    /*                                            ^            */
#ifdef GL_COMPRESSED_SRGB_ALPHA_BPTC_UNORM
      *iv_return = GL_COMPRESSED_SRGB_ALPHA_BPTC_UNORM;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_CONSERVATIVE_RASTERIZATION_INTEL", 35)) {
    /*                                            ^            */
#ifdef GL_CONSERVATIVE_RASTERIZATION_INTEL
      *iv_return = GL_CONSERVATIVE_RASTERIZATION_INTEL;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_INT_SAMPLER_2D_MULTISAMPLE_ARRAY", 35)) {
    /*                                            ^            */
#ifdef GL_INT_SAMPLER_2D_MULTISAMPLE_ARRAY
      *iv_return = GL_INT_SAMPLER_2D_MULTISAMPLE_ARRAY;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_MAX_COMBINED_TEXTURE_IMAGE_UNITS", 35)) {
    /*                                            ^            */
#ifdef GL_MAX_COMBINED_TEXTURE_IMAGE_UNITS
      *iv_return = GL_MAX_COMBINED_TEXTURE_IMAGE_UNITS;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_MAX_GEOMETRY_TEXTURE_IMAGE_UNITS", 35)) {
    /*                                            ^            */
#ifdef GL_MAX_GEOMETRY_TEXTURE_IMAGE_UNITS
      *iv_return = GL_MAX_GEOMETRY_TEXTURE_IMAGE_UNITS;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_NV_robustness_video_memory_purge", 35)) {
    /*                                            ^            */
#ifdef GL_NV_robustness_video_memory_purge
      *iv_return = GL_NV_robustness_video_memory_purge;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_VERTEX_ARRAY_RANGE_POINTER_APPLE", 35)) {
    /*                                            ^            */
#ifdef GL_VERTEX_ARRAY_RANGE_POINTER_APPLE
      *iv_return = GL_VERTEX_ARRAY_RANGE_POINTER_APPLE;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case 'a':
    if (memEQ(name, "GL_ARB_shader_texture_image_samples", 35)) {
    /*                                            ^            */
#ifdef GL_ARB_shader_texture_image_samples
      *iv_return = GL_ARB_shader_texture_image_samples;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case 'd':
    if (memEQ(name, "GLEW_INTEL_fragment_shader_ordering", 35)) {
    /*                                            ^            */
#ifdef GLEW_INTEL_fragment_shader_ordering
      *iv_return = GLEW_INTEL_fragment_shader_ordering;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case 'e':
    if (memEQ(name, "GL_AMD_seamless_cubemap_per_texture", 35)) {
    /*                                            ^            */
#ifdef GL_AMD_seamless_cubemap_per_texture
      *iv_return = GL_AMD_seamless_cubemap_per_texture;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_ARB_seamless_cubemap_per_texture", 35)) {
    /*                                            ^            */
#ifdef GL_ARB_seamless_cubemap_per_texture
      *iv_return = GL_ARB_seamless_cubemap_per_texture;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case 'h':
    if (memEQ(name, "GLEW_ARB_framebuffer_no_attachments", 35)) {
    /*                                            ^            */
#ifdef GLEW_ARB_framebuffer_no_attachments
      *iv_return = GLEW_ARB_framebuffer_no_attachments;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GLEW_NV_geometry_shader_passthrough", 35)) {
    /*                                            ^            */
#ifdef GLEW_NV_geometry_shader_passthrough
      *iv_return = GLEW_NV_geometry_shader_passthrough;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case 'i':
    if (memEQ(name, "glVertexArrayVertexAttribBindingEXT", 35)) {
    /*                                            ^            */
#ifdef glVertexArrayVertexAttribBindingEXT
      *iv_return = glVertexArrayVertexAttribBindingEXT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case 'l':
    if (memEQ(name, "glMultiDrawArraysIndirectBindlessNV", 35)) {
    /*                                            ^            */
#ifdef glMultiDrawArraysIndirectBindlessNV
      *iv_return = glMultiDrawArraysIndirectBindlessNV;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case 'm':
    if (memEQ(name, "GL_NV_uniform_buffer_unified_memory", 35)) {
    /*                                            ^            */
#ifdef GL_NV_uniform_buffer_unified_memory
      *iv_return = GL_NV_uniform_buffer_unified_memory;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glVertexArrayVertexAttribIFormatEXT", 35)) {
    /*                                            ^            */
#ifdef glVertexArrayVertexAttribIFormatEXT
      *iv_return = glVertexArrayVertexAttribIFormatEXT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glVertexArrayVertexAttribLFormatEXT", 35)) {
    /*                                            ^            */
#ifdef glVertexArrayVertexAttribLFormatEXT
      *iv_return = glVertexArrayVertexAttribLFormatEXT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case 'n':
    if (memEQ(name, "GLEW_ANGLE_texture_compression_dxt1", 35)) {
    /*                                            ^            */
#ifdef GLEW_ANGLE_texture_compression_dxt1
      *iv_return = GLEW_ANGLE_texture_compression_dxt1;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GLEW_ANGLE_texture_compression_dxt3", 35)) {
    /*                                            ^            */
#ifdef GLEW_ANGLE_texture_compression_dxt3
      *iv_return = GLEW_ANGLE_texture_compression_dxt3;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GLEW_ANGLE_texture_compression_dxt5", 35)) {
    /*                                            ^            */
#ifdef GLEW_ANGLE_texture_compression_dxt5
      *iv_return = GLEW_ANGLE_texture_compression_dxt5;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GLEW_ARB_fragment_coord_conventions", 35)) {
    /*                                            ^            */
#ifdef GLEW_ARB_fragment_coord_conventions
      *iv_return = GLEW_ARB_fragment_coord_conventions;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case 'o':
    if (memEQ(name, "GLEW_ATI_vertex_attrib_array_object", 35)) {
    /*                                            ^            */
#ifdef GLEW_ATI_vertex_attrib_array_object
      *iv_return = GLEW_ATI_vertex_attrib_array_object;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_ARB_shader_storage_buffer_object", 35)) {
    /*                                            ^            */
#ifdef GL_ARB_shader_storage_buffer_object
      *iv_return = GL_ARB_shader_storage_buffer_object;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_ARB_texture_mirror_clamp_to_edge", 35)) {
    /*                                            ^            */
#ifdef GL_ARB_texture_mirror_clamp_to_edge
      *iv_return = GL_ARB_texture_mirror_clamp_to_edge;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case 'p':
    if (memEQ(name, "glRenderbufferStorageMultisampleEXT", 35)) {
    /*                                            ^            */
#ifdef glRenderbufferStorageMultisampleEXT
      *iv_return = glRenderbufferStorageMultisampleEXT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case 'r':
    if (memEQ(name, "glGetNamedFramebufferParameterivEXT", 35)) {
    /*                                            ^            */
#ifdef glGetNamedFramebufferParameterivEXT
      *iv_return = glGetNamedFramebufferParameterivEXT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case 's':
    if (memEQ(name, "GLEW_ANGLE_translated_shader_source", 35)) {
    /*                                            ^            */
#ifdef GLEW_ANGLE_translated_shader_source
      *iv_return = GLEW_ANGLE_translated_shader_source;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glDrawElementsInstancedBaseInstance", 35)) {
    /*                                            ^            */
#ifdef glDrawElementsInstancedBaseInstance
      *iv_return = glDrawElementsInstancedBaseInstance;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glVertexArrayMultiTexCoordOffsetEXT", 35)) {
    /*                                            ^            */
#ifdef glVertexArrayMultiTexCoordOffsetEXT
      *iv_return = glVertexArrayMultiTexCoordOffsetEXT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glVertexArrayVertexAttribDivisorEXT", 35)) {
    /*                                            ^            */
#ifdef glVertexArrayVertexAttribDivisorEXT
      *iv_return = glVertexArrayVertexAttribDivisorEXT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glVertexArrayVertexAttribIOffsetEXT", 35)) {
    /*                                            ^            */
#ifdef glVertexArrayVertexAttribIOffsetEXT
      *iv_return = glVertexArrayVertexAttribIOffsetEXT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glVertexArrayVertexAttribLOffsetEXT", 35)) {
    /*                                            ^            */
#ifdef glVertexArrayVertexAttribLOffsetEXT
      *iv_return = glVertexArrayVertexAttribLOffsetEXT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case 't':
    if (memEQ(name, "GLEW_AMD_stencil_operation_extended", 35)) {
    /*                                            ^            */
#ifdef GLEW_AMD_stencil_operation_extended
      *iv_return = GLEW_AMD_stencil_operation_extended;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GLEW_EXT_texture_filter_anisotropic", 35)) {
    /*                                            ^            */
#ifdef GLEW_EXT_texture_filter_anisotropic
      *iv_return = GLEW_EXT_texture_filter_anisotropic;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_ARB_transform_feedback_instanced", 35)) {
    /*                                            ^            */
#ifdef GL_ARB_transform_feedback_instanced
      *iv_return = GL_ARB_transform_feedback_instanced;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_KHR_texture_compression_astc_hdr", 35)) {
    /*                                            ^            */
#ifdef GL_KHR_texture_compression_astc_hdr
      *iv_return = GL_KHR_texture_compression_astc_hdr;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_KHR_texture_compression_astc_ldr", 35)) {
    /*                                            ^            */
#ifdef GL_KHR_texture_compression_astc_ldr
      *iv_return = GL_KHR_texture_compression_astc_ldr;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case 'u':
    if (memEQ(name, "glInvalidateNamedFramebufferSubData", 35)) {
    /*                                            ^            */
#ifdef glInvalidateNamedFramebufferSubData
      *iv_return = glInvalidateNamedFramebufferSubData;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glMultiDrawElementsIndirectCountARB", 35)) {
    /*                                            ^            */
#ifdef glMultiDrawElementsIndirectCountARB
      *iv_return = glMultiDrawElementsIndirectCountARB;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case 'v':
    if (memEQ(name, "GL_NV_sample_mask_override_coverage", 35)) {
    /*                                            ^            */
#ifdef GL_NV_sample_mask_override_coverage
      *iv_return = GL_NV_sample_mask_override_coverage;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case 'z':
    if (memEQ(name, "GL_INTEL_conservative_rasterization", 35)) {
    /*                                            ^            */
#ifdef GL_INTEL_conservative_rasterization
      *iv_return = GL_INTEL_conservative_rasterization;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  }
  return PERL_constant_NOTFOUND;
}

static int
constant_36 (pTHX_ const char *name, IV *iv_return) {
  /* When generated this function returned values for the list of names given
     here.  However, subsequent manual editing may have added or removed some.
     GLEW_AMD_shader_stencil_value_export GLEW_APPLE_vertex_program_evaluators
     GLEW_ARB_compute_variable_group_size GLEW_ARB_conditional_render_inverted
     GLEW_ARB_shader_viewport_layer_array GLEW_ARB_texture_buffer_object_rgb32
     GLEW_ARB_texture_storage_multisample GLEW_ARB_vertex_type_10f_11f_11f_rev
     GLEW_EXT_pixel_transform_color_table GLEW_EXT_shader_image_load_formatted
     GLEW_NV_bindless_multi_draw_indirect GLEW_NV_shader_storage_buffer_object
     GLEW_NV_vertex_buffer_unified_memory GLEW_OES_compressed_paletted_texture
     GLEW_SGIX_fragment_specular_lighting GL_ARB_robust_buffer_access_behavior
     GL_BOUNDING_BOX_OF_BOUNDING_BOXES_NV GL_CONTEXT_COMPATIBILITY_PROFILE_BIT
     GL_COVERAGE_MODULATION_TABLE_SIZE_NV GL_DEBUG_TYPE_UNDEFINED_BEHAVIOR_ARB
     GL_DEPENDENT_RGB_TEXTURE_CUBE_MAP_NV GL_FLOAT_32_UNSIGNED_INT_24_8_REV_NV
     GL_FRAGMENT_LIGHT_MODEL_TWO_SIDE_EXT GL_FRAMEBUFFER_ATTACHMENT_ALPHA_SIZE
     GL_FRAMEBUFFER_ATTACHMENT_DEPTH_SIZE GL_FRAMEBUFFER_ATTACHMENT_GREEN_SIZE
     GL_FRAMEBUFFER_INCOMPLETE_ATTACHMENT GL_GLYPH_HORIZONTAL_BEARING_X_BIT_NV
     GL_GLYPH_HORIZONTAL_BEARING_Y_BIT_NV GL_INVALID_FRAMEBUFFER_OPERATION_EXT
     GL_KHR_robust_buffer_access_behavior GL_LIGHT_MODEL_SPECULAR_VECTOR_APPLE
     GL_MAX_COMPUTE_SHADER_STORAGE_BLOCKS GL_MAX_FRAGMENT_INTERPOLATION_OFFSET
     GL_MAX_MULTISAMPLE_COVERAGE_MODES_NV GL_MAX_PROGRAM_ADDRESS_REGISTERS_ARB
     GL_MAX_PROGRAM_NATIVE_PARAMETERS_ARB GL_MAX_PROGRAM_TEXTURE_GATHER_OFFSET
     GL_MAX_TESS_CONTROL_INPUT_COMPONENTS GL_MAX_VERTEX_ARRAY_RANGE_ELEMENT_NV
     GL_MAX_VERTEX_ATOMIC_COUNTER_BUFFERS GL_MAX_VERTEX_ATTRIB_RELATIVE_OFFSET
     GL_MAX_VERTEX_UNIFORM_COMPONENTS_ARB GL_MAX_VERTEX_VARYING_COMPONENTS_ARB
     GL_MAX_VERTEX_VARYING_COMPONENTS_EXT GL_MIN_FRAGMENT_INTERPOLATION_OFFSET
     GL_MIN_PROGRAM_TEXTURE_GATHER_OFFSET GL_OFFSET_TEXTURE_RECTANGLE_SCALE_NV
     GL_PERFQUERY_COUNTER_TIMESTAMP_INTEL GL_PN_TRIANGLES_POINT_MODE_CUBIC_ATI
     GL_POST_COLOR_MATRIX_ALPHA_SCALE_SGI GL_POST_COLOR_MATRIX_COLOR_TABLE_SGI
     GL_POST_COLOR_MATRIX_GREEN_SCALE_SGI GL_RASTER_FIXED_SAMPLE_LOCATIONS_EXT
     GL_REFERENCED_BY_TESS_CONTROL_SHADER GL_RELATIVE_SMOOTH_CUBIC_CURVE_TO_NV
     GL_REPLACEMENT_CODE_ARRAY_STRIDE_SUN GL_SAMPLER_CUBE_MAP_ARRAY_SHADOW_ARB
     GL_SAMPLE_LOCATION_SUBPIXEL_BITS_ARB GL_SECONDARY_COLOR_ARRAY_POINTER_EXT
     GL_SUBPIXEL_PRECISION_BIAS_X_BITS_NV GL_SUBPIXEL_PRECISION_BIAS_Y_BITS_NV
     GL_TEXTURE_BUFFER_DATA_STORE_BINDING GL_TEXTURE_COMPRESSED_IMAGE_SIZE_ARB
     GL_TRANSFORM_FEEDBACK_BUFFER_BINDING GL_TRANSFORM_FEEDBACK_BUFFER_MODE_NV
     GL_TRANSFORM_FEEDBACK_BUFFER_SIZE_NV GL_UNSIGNED_INT_IMAGE_2D_MULTISAMPLE
     GL_UNSIGNED_INT_IMAGE_CUBE_MAP_ARRAY GL_UNSIGNED_INT_SAMPLER_1D_ARRAY_EXT
     GL_UNSIGNED_INT_SAMPLER_2D_ARRAY_EXT GL_VERTEX_ATTRIB_ARRAY_DIVISOR_ANGLE
     GL_VERTEX_SHADER_LOCAL_CONSTANTS_EXT GL_VIDEO_CAPTURE_TO_422_SUPPORTED_NV
     GL_WRITE_PIXEL_DATA_RANGE_POINTER_NV glGetFinalCombinerInputParameterfvNV
     glGetFinalCombinerInputParameterivNV glGetNamedProgramLocalParameterdvEXT
     glGetNamedProgramLocalParameterfvEXT glGetNamedRenderbufferParameterivEXT
     glNamedProgramLocalParameterI4uivEXT glNamedProgramLocalParametersI4ivEXT
     glVertexArraySecondaryColorOffsetEXT glVertexArrayVertexBindingDivisorEXT
     */
  /* Offset 17 gives the best switch position.  */
  switch (name[17]) {
  case 'A':
    if (memEQ(name, "GL_COVERAGE_MODULATION_TABLE_SIZE_NV", 36)) {
    /*                                ^                         */
#ifdef GL_COVERAGE_MODULATION_TABLE_SIZE_NV
      *iv_return = GL_COVERAGE_MODULATION_TABLE_SIZE_NV;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_GLYPH_HORIZONTAL_BEARING_X_BIT_NV", 36)) {
    /*                                ^                         */
#ifdef GL_GLYPH_HORIZONTAL_BEARING_X_BIT_NV
      *iv_return = GL_GLYPH_HORIZONTAL_BEARING_X_BIT_NV;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_GLYPH_HORIZONTAL_BEARING_Y_BIT_NV", 36)) {
    /*                                ^                         */
#ifdef GL_GLYPH_HORIZONTAL_BEARING_Y_BIT_NV
      *iv_return = GL_GLYPH_HORIZONTAL_BEARING_Y_BIT_NV;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_MAX_COMPUTE_SHADER_STORAGE_BLOCKS", 36)) {
    /*                                ^                         */
#ifdef GL_MAX_COMPUTE_SHADER_STORAGE_BLOCKS
      *iv_return = GL_MAX_COMPUTE_SHADER_STORAGE_BLOCKS;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_MAX_VERTEX_ARRAY_RANGE_ELEMENT_NV", 36)) {
    /*                                ^                         */
#ifdef GL_MAX_VERTEX_ARRAY_RANGE_ELEMENT_NV
      *iv_return = GL_MAX_VERTEX_ARRAY_RANGE_ELEMENT_NV;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_RASTER_FIXED_SAMPLE_LOCATIONS_EXT", 36)) {
    /*                                ^                         */
#ifdef GL_RASTER_FIXED_SAMPLE_LOCATIONS_EXT
      *iv_return = GL_RASTER_FIXED_SAMPLE_LOCATIONS_EXT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_SAMPLER_CUBE_MAP_ARRAY_SHADOW_ARB", 36)) {
    /*                                ^                         */
#ifdef GL_SAMPLER_CUBE_MAP_ARRAY_SHADOW_ARB
      *iv_return = GL_SAMPLER_CUBE_MAP_ARRAY_SHADOW_ARB;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_UNSIGNED_INT_SAMPLER_1D_ARRAY_EXT", 36)) {
    /*                                ^                         */
#ifdef GL_UNSIGNED_INT_SAMPLER_1D_ARRAY_EXT
      *iv_return = GL_UNSIGNED_INT_SAMPLER_1D_ARRAY_EXT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_UNSIGNED_INT_SAMPLER_2D_ARRAY_EXT", 36)) {
    /*                                ^                         */
#ifdef GL_UNSIGNED_INT_SAMPLER_2D_ARRAY_EXT
      *iv_return = GL_UNSIGNED_INT_SAMPLER_2D_ARRAY_EXT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_VERTEX_ATTRIB_ARRAY_DIVISOR_ANGLE", 36)) {
    /*                                ^                         */
#ifdef GL_VERTEX_ATTRIB_ARRAY_DIVISOR_ANGLE
      *iv_return = GL_VERTEX_ATTRIB_ARRAY_DIVISOR_ANGLE;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case 'B':
    if (memEQ(name, "GL_TRANSFORM_FEEDBACK_BUFFER_BINDING", 36)) {
    /*                                ^                         */
#ifdef GL_TRANSFORM_FEEDBACK_BUFFER_BINDING
      *iv_return = GL_TRANSFORM_FEEDBACK_BUFFER_BINDING;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_TRANSFORM_FEEDBACK_BUFFER_MODE_NV", 36)) {
    /*                                ^                         */
#ifdef GL_TRANSFORM_FEEDBACK_BUFFER_MODE_NV
      *iv_return = GL_TRANSFORM_FEEDBACK_BUFFER_MODE_NV;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_TRANSFORM_FEEDBACK_BUFFER_SIZE_NV", 36)) {
    /*                                ^                         */
#ifdef GL_TRANSFORM_FEEDBACK_BUFFER_SIZE_NV
      *iv_return = GL_TRANSFORM_FEEDBACK_BUFFER_SIZE_NV;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case 'C':
    if (memEQ(name, "GL_FRAMEBUFFER_INCOMPLETE_ATTACHMENT", 36)) {
    /*                                ^                         */
#ifdef GL_FRAMEBUFFER_INCOMPLETE_ATTACHMENT
      *iv_return = GL_FRAMEBUFFER_INCOMPLETE_ATTACHMENT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case 'D':
    if (memEQ(name, "GL_MAX_PROGRAM_ADDRESS_REGISTERS_ARB", 36)) {
    /*                                ^                         */
#ifdef GL_MAX_PROGRAM_ADDRESS_REGISTERS_ARB
      *iv_return = GL_MAX_PROGRAM_ADDRESS_REGISTERS_ARB;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_REPLACEMENT_CODE_ARRAY_STRIDE_SUN", 36)) {
    /*                                ^                         */
#ifdef GL_REPLACEMENT_CODE_ARRAY_STRIDE_SUN
      *iv_return = GL_REPLACEMENT_CODE_ARRAY_STRIDE_SUN;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case 'E':
    if (memEQ(name, "GL_DEBUG_TYPE_UNDEFINED_BEHAVIOR_ARB", 36)) {
    /*                                ^                         */
#ifdef GL_DEBUG_TYPE_UNDEFINED_BEHAVIOR_ARB
      *iv_return = GL_DEBUG_TYPE_UNDEFINED_BEHAVIOR_ARB;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_LIGHT_MODEL_SPECULAR_VECTOR_APPLE", 36)) {
    /*                                ^                         */
#ifdef GL_LIGHT_MODEL_SPECULAR_VECTOR_APPLE
      *iv_return = GL_LIGHT_MODEL_SPECULAR_VECTOR_APPLE;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_MAX_MULTISAMPLE_COVERAGE_MODES_NV", 36)) {
    /*                                ^                         */
#ifdef GL_MAX_MULTISAMPLE_COVERAGE_MODES_NV
      *iv_return = GL_MAX_MULTISAMPLE_COVERAGE_MODES_NV;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case 'F':
    if (memEQ(name, "GL_BOUNDING_BOX_OF_BOUNDING_BOXES_NV", 36)) {
    /*                                ^                         */
#ifdef GL_BOUNDING_BOX_OF_BOUNDING_BOXES_NV
      *iv_return = GL_BOUNDING_BOX_OF_BOUNDING_BOXES_NV;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_MAX_VERTEX_UNIFORM_COMPONENTS_ARB", 36)) {
    /*                                ^                         */
#ifdef GL_MAX_VERTEX_UNIFORM_COMPONENTS_ARB
      *iv_return = GL_MAX_VERTEX_UNIFORM_COMPONENTS_ARB;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case 'H':
    if (memEQ(name, "GL_RELATIVE_SMOOTH_CUBIC_CURVE_TO_NV", 36)) {
    /*                                ^                         */
#ifdef GL_RELATIVE_SMOOTH_CUBIC_CURVE_TO_NV
      *iv_return = GL_RELATIVE_SMOOTH_CUBIC_CURVE_TO_NV;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case 'I':
    if (memEQ(name, "GL_CONTEXT_COMPATIBILITY_PROFILE_BIT", 36)) {
    /*                                ^                         */
#ifdef GL_CONTEXT_COMPATIBILITY_PROFILE_BIT
      *iv_return = GL_CONTEXT_COMPATIBILITY_PROFILE_BIT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case 'L':
    if (memEQ(name, "GL_VERTEX_SHADER_LOCAL_CONSTANTS_EXT", 36)) {
    /*                                ^                         */
#ifdef GL_VERTEX_SHADER_LOCAL_CONSTANTS_EXT
      *iv_return = GL_VERTEX_SHADER_LOCAL_CONSTANTS_EXT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glGetNamedProgramLocalParameterdvEXT", 36)) {
    /*                                ^                         */
#ifdef glGetNamedProgramLocalParameterdvEXT
      *iv_return = glGetNamedProgramLocalParameterdvEXT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glGetNamedProgramLocalParameterfvEXT", 36)) {
    /*                                ^                         */
#ifdef glGetNamedProgramLocalParameterfvEXT
      *iv_return = glGetNamedProgramLocalParameterfvEXT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case 'M':
    if (memEQ(name, "GL_MAX_VERTEX_ATOMIC_COUNTER_BUFFERS", 36)) {
    /*                                ^                         */
#ifdef GL_MAX_VERTEX_ATOMIC_COUNTER_BUFFERS
      *iv_return = GL_MAX_VERTEX_ATOMIC_COUNTER_BUFFERS;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_UNSIGNED_INT_IMAGE_2D_MULTISAMPLE", 36)) {
    /*                                ^                         */
#ifdef GL_UNSIGNED_INT_IMAGE_2D_MULTISAMPLE
      *iv_return = GL_UNSIGNED_INT_IMAGE_2D_MULTISAMPLE;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_UNSIGNED_INT_IMAGE_CUBE_MAP_ARRAY", 36)) {
    /*                                ^                         */
#ifdef GL_UNSIGNED_INT_IMAGE_CUBE_MAP_ARRAY
      *iv_return = GL_UNSIGNED_INT_IMAGE_CUBE_MAP_ARRAY;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case 'N':
    if (memEQ(name, "GL_FLOAT_32_UNSIGNED_INT_24_8_REV_NV", 36)) {
    /*                                ^                         */
#ifdef GL_FLOAT_32_UNSIGNED_INT_24_8_REV_NV
      *iv_return = GL_FLOAT_32_UNSIGNED_INT_24_8_REV_NV;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_MAX_FRAGMENT_INTERPOLATION_OFFSET", 36)) {
    /*                                ^                         */
#ifdef GL_MAX_FRAGMENT_INTERPOLATION_OFFSET
      *iv_return = GL_MAX_FRAGMENT_INTERPOLATION_OFFSET;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_MIN_FRAGMENT_INTERPOLATION_OFFSET", 36)) {
    /*                                ^                         */
#ifdef GL_MIN_FRAGMENT_INTERPOLATION_OFFSET
      *iv_return = GL_MIN_FRAGMENT_INTERPOLATION_OFFSET;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_SAMPLE_LOCATION_SUBPIXEL_BITS_ARB", 36)) {
    /*                                ^                         */
#ifdef GL_SAMPLE_LOCATION_SUBPIXEL_BITS_ARB
      *iv_return = GL_SAMPLE_LOCATION_SUBPIXEL_BITS_ARB;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case 'O':
    if (memEQ(name, "GL_MAX_TESS_CONTROL_INPUT_COMPONENTS", 36)) {
    /*                                ^                         */
#ifdef GL_MAX_TESS_CONTROL_INPUT_COMPONENTS
      *iv_return = GL_MAX_TESS_CONTROL_INPUT_COMPONENTS;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_PN_TRIANGLES_POINT_MODE_CUBIC_ATI", 36)) {
    /*                                ^                         */
#ifdef GL_PN_TRIANGLES_POINT_MODE_CUBIC_ATI
      *iv_return = GL_PN_TRIANGLES_POINT_MODE_CUBIC_ATI;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case 'R':
    if (memEQ(name, "GL_MAX_VERTEX_ATTRIB_RELATIVE_OFFSET", 36)) {
    /*                                ^                         */
#ifdef GL_MAX_VERTEX_ATTRIB_RELATIVE_OFFSET
      *iv_return = GL_MAX_VERTEX_ATTRIB_RELATIVE_OFFSET;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_POST_COLOR_MATRIX_ALPHA_SCALE_SGI", 36)) {
    /*                                ^                         */
#ifdef GL_POST_COLOR_MATRIX_ALPHA_SCALE_SGI
      *iv_return = GL_POST_COLOR_MATRIX_ALPHA_SCALE_SGI;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_POST_COLOR_MATRIX_COLOR_TABLE_SGI", 36)) {
    /*                                ^                         */
#ifdef GL_POST_COLOR_MATRIX_COLOR_TABLE_SGI
      *iv_return = GL_POST_COLOR_MATRIX_COLOR_TABLE_SGI;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_POST_COLOR_MATRIX_GREEN_SCALE_SGI", 36)) {
    /*                                ^                         */
#ifdef GL_POST_COLOR_MATRIX_GREEN_SCALE_SGI
      *iv_return = GL_POST_COLOR_MATRIX_GREEN_SCALE_SGI;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_SECONDARY_COLOR_ARRAY_POINTER_EXT", 36)) {
    /*                                ^                         */
#ifdef GL_SECONDARY_COLOR_ARRAY_POINTER_EXT
      *iv_return = GL_SECONDARY_COLOR_ARRAY_POINTER_EXT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case 'S':
    if (memEQ(name, "GL_SUBPIXEL_PRECISION_BIAS_X_BITS_NV", 36)) {
    /*                                ^                         */
#ifdef GL_SUBPIXEL_PRECISION_BIAS_X_BITS_NV
      *iv_return = GL_SUBPIXEL_PRECISION_BIAS_X_BITS_NV;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_SUBPIXEL_PRECISION_BIAS_Y_BITS_NV", 36)) {
    /*                                ^                         */
#ifdef GL_SUBPIXEL_PRECISION_BIAS_Y_BITS_NV
      *iv_return = GL_SUBPIXEL_PRECISION_BIAS_Y_BITS_NV;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_TEXTURE_COMPRESSED_IMAGE_SIZE_ARB", 36)) {
    /*                                ^                         */
#ifdef GL_TEXTURE_COMPRESSED_IMAGE_SIZE_ARB
      *iv_return = GL_TEXTURE_COMPRESSED_IMAGE_SIZE_ARB;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case 'T':
    if (memEQ(name, "GL_DEPENDENT_RGB_TEXTURE_CUBE_MAP_NV", 36)) {
    /*                                ^                         */
#ifdef GL_DEPENDENT_RGB_TEXTURE_CUBE_MAP_NV
      *iv_return = GL_DEPENDENT_RGB_TEXTURE_CUBE_MAP_NV;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_FRAMEBUFFER_ATTACHMENT_ALPHA_SIZE", 36)) {
    /*                                ^                         */
#ifdef GL_FRAMEBUFFER_ATTACHMENT_ALPHA_SIZE
      *iv_return = GL_FRAMEBUFFER_ATTACHMENT_ALPHA_SIZE;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_FRAMEBUFFER_ATTACHMENT_DEPTH_SIZE", 36)) {
    /*                                ^                         */
#ifdef GL_FRAMEBUFFER_ATTACHMENT_DEPTH_SIZE
      *iv_return = GL_FRAMEBUFFER_ATTACHMENT_DEPTH_SIZE;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_FRAMEBUFFER_ATTACHMENT_GREEN_SIZE", 36)) {
    /*                                ^                         */
#ifdef GL_FRAMEBUFFER_ATTACHMENT_GREEN_SIZE
      *iv_return = GL_FRAMEBUFFER_ATTACHMENT_GREEN_SIZE;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_MAX_PROGRAM_NATIVE_PARAMETERS_ARB", 36)) {
    /*                                ^                         */
#ifdef GL_MAX_PROGRAM_NATIVE_PARAMETERS_ARB
      *iv_return = GL_MAX_PROGRAM_NATIVE_PARAMETERS_ARB;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_PERFQUERY_COUNTER_TIMESTAMP_INTEL", 36)) {
    /*                                ^                         */
#ifdef GL_PERFQUERY_COUNTER_TIMESTAMP_INTEL
      *iv_return = GL_PERFQUERY_COUNTER_TIMESTAMP_INTEL;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_REFERENCED_BY_TESS_CONTROL_SHADER", 36)) {
    /*                                ^                         */
#ifdef GL_REFERENCED_BY_TESS_CONTROL_SHADER
      *iv_return = GL_REFERENCED_BY_TESS_CONTROL_SHADER;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_VIDEO_CAPTURE_TO_422_SUPPORTED_NV", 36)) {
    /*                                ^                         */
#ifdef GL_VIDEO_CAPTURE_TO_422_SUPPORTED_NV
      *iv_return = GL_VIDEO_CAPTURE_TO_422_SUPPORTED_NV;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_WRITE_PIXEL_DATA_RANGE_POINTER_NV", 36)) {
    /*                                ^                         */
#ifdef GL_WRITE_PIXEL_DATA_RANGE_POINTER_NV
      *iv_return = GL_WRITE_PIXEL_DATA_RANGE_POINTER_NV;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case 'U':
    if (memEQ(name, "GL_INVALID_FRAMEBUFFER_OPERATION_EXT", 36)) {
    /*                                ^                         */
#ifdef GL_INVALID_FRAMEBUFFER_OPERATION_EXT
      *iv_return = GL_INVALID_FRAMEBUFFER_OPERATION_EXT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case 'X':
    if (memEQ(name, "GL_MAX_PROGRAM_TEXTURE_GATHER_OFFSET", 36)) {
    /*                                ^                         */
#ifdef GL_MAX_PROGRAM_TEXTURE_GATHER_OFFSET
      *iv_return = GL_MAX_PROGRAM_TEXTURE_GATHER_OFFSET;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_MIN_PROGRAM_TEXTURE_GATHER_OFFSET", 36)) {
    /*                                ^                         */
#ifdef GL_MIN_PROGRAM_TEXTURE_GATHER_OFFSET
      *iv_return = GL_MIN_PROGRAM_TEXTURE_GATHER_OFFSET;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case 'Y':
    if (memEQ(name, "GL_MAX_VERTEX_VARYING_COMPONENTS_ARB", 36)) {
    /*                                ^                         */
#ifdef GL_MAX_VERTEX_VARYING_COMPONENTS_ARB
      *iv_return = GL_MAX_VERTEX_VARYING_COMPONENTS_ARB;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_MAX_VERTEX_VARYING_COMPONENTS_EXT", 36)) {
    /*                                ^                         */
#ifdef GL_MAX_VERTEX_VARYING_COMPONENTS_EXT
      *iv_return = GL_MAX_VERTEX_VARYING_COMPONENTS_EXT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case '_':
    if (memEQ(name, "GLEW_APPLE_vertex_program_evaluators", 36)) {
    /*                                ^                         */
#ifdef GLEW_APPLE_vertex_program_evaluators
      *iv_return = GLEW_APPLE_vertex_program_evaluators;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_FRAGMENT_LIGHT_MODEL_TWO_SIDE_EXT", 36)) {
    /*                                ^                         */
#ifdef GL_FRAGMENT_LIGHT_MODEL_TWO_SIDE_EXT
      *iv_return = GL_FRAGMENT_LIGHT_MODEL_TWO_SIDE_EXT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_OFFSET_TEXTURE_RECTANGLE_SCALE_NV", 36)) {
    /*                                ^                         */
#ifdef GL_OFFSET_TEXTURE_RECTANGLE_SCALE_NV
      *iv_return = GL_OFFSET_TEXTURE_RECTANGLE_SCALE_NV;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_TEXTURE_BUFFER_DATA_STORE_BINDING", 36)) {
    /*                                ^                         */
#ifdef GL_TEXTURE_BUFFER_DATA_STORE_BINDING
      *iv_return = GL_TEXTURE_BUFFER_DATA_STORE_BINDING;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case 'a':
    if (memEQ(name, "GLEW_EXT_pixel_transform_color_table", 36)) {
    /*                                ^                         */
#ifdef GLEW_EXT_pixel_transform_color_table
      *iv_return = GLEW_EXT_pixel_transform_color_table;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glNamedProgramLocalParameterI4uivEXT", 36)) {
    /*                                ^                         */
#ifdef glNamedProgramLocalParameterI4uivEXT
      *iv_return = glNamedProgramLocalParameterI4uivEXT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glNamedProgramLocalParametersI4ivEXT", 36)) {
    /*                                ^                         */
#ifdef glNamedProgramLocalParametersI4ivEXT
      *iv_return = glNamedProgramLocalParametersI4ivEXT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case 'b':
    if (memEQ(name, "GLEW_ARB_texture_buffer_object_rgb32", 36)) {
    /*                                ^                         */
#ifdef GLEW_ARB_texture_buffer_object_rgb32
      *iv_return = GLEW_ARB_texture_buffer_object_rgb32;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case 'e':
    if (memEQ(name, "GLEW_OES_compressed_paletted_texture", 36)) {
    /*                                ^                         */
#ifdef GLEW_OES_compressed_paletted_texture
      *iv_return = GLEW_OES_compressed_paletted_texture;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glVertexArrayVertexBindingDivisorEXT", 36)) {
    /*                                ^                         */
#ifdef glVertexArrayVertexBindingDivisorEXT
      *iv_return = glVertexArrayVertexBindingDivisorEXT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case 'f':
    if (memEQ(name, "GLEW_NV_vertex_buffer_unified_memory", 36)) {
    /*                                ^                         */
#ifdef GLEW_NV_vertex_buffer_unified_memory
      *iv_return = GLEW_NV_vertex_buffer_unified_memory;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_ARB_robust_buffer_access_behavior", 36)) {
    /*                                ^                         */
#ifdef GL_ARB_robust_buffer_access_behavior
      *iv_return = GL_ARB_robust_buffer_access_behavior;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_KHR_robust_buffer_access_behavior", 36)) {
    /*                                ^                         */
#ifdef GL_KHR_robust_buffer_access_behavior
      *iv_return = GL_KHR_robust_buffer_access_behavior;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case 'i':
    if (memEQ(name, "GLEW_ARB_shader_viewport_layer_array", 36)) {
    /*                                ^                         */
#ifdef GLEW_ARB_shader_viewport_layer_array
      *iv_return = GLEW_ARB_shader_viewport_layer_array;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case 'm':
    if (memEQ(name, "GLEW_EXT_shader_image_load_formatted", 36)) {
    /*                                ^                         */
#ifdef GLEW_EXT_shader_image_load_formatted
      *iv_return = GLEW_EXT_shader_image_load_formatted;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GLEW_NV_bindless_multi_draw_indirect", 36)) {
    /*                                ^                         */
#ifdef GLEW_NV_bindless_multi_draw_indirect
      *iv_return = GLEW_NV_bindless_multi_draw_indirect;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case 'n':
    if (memEQ(name, "GLEW_ARB_conditional_render_inverted", 36)) {
    /*                                ^                         */
#ifdef GLEW_ARB_conditional_render_inverted
      *iv_return = GLEW_ARB_conditional_render_inverted;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glVertexArraySecondaryColorOffsetEXT", 36)) {
    /*                                ^                         */
#ifdef glVertexArraySecondaryColorOffsetEXT
      *iv_return = glVertexArraySecondaryColorOffsetEXT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case 'o':
    if (memEQ(name, "GLEW_NV_shader_storage_buffer_object", 36)) {
    /*                                ^                         */
#ifdef GLEW_NV_shader_storage_buffer_object
      *iv_return = GLEW_NV_shader_storage_buffer_object;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case 'r':
    if (memEQ(name, "glGetFinalCombinerInputParameterfvNV", 36)) {
    /*                                ^                         */
#ifdef glGetFinalCombinerInputParameterfvNV
      *iv_return = glGetFinalCombinerInputParameterfvNV;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glGetFinalCombinerInputParameterivNV", 36)) {
    /*                                ^                         */
#ifdef glGetFinalCombinerInputParameterivNV
      *iv_return = glGetFinalCombinerInputParameterivNV;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case 's':
    if (memEQ(name, "GLEW_ARB_texture_storage_multisample", 36)) {
    /*                                ^                         */
#ifdef GLEW_ARB_texture_storage_multisample
      *iv_return = GLEW_ARB_texture_storage_multisample;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case 't':
    if (memEQ(name, "GLEW_AMD_shader_stencil_value_export", 36)) {
    /*                                ^                         */
#ifdef GLEW_AMD_shader_stencil_value_export
      *iv_return = GLEW_AMD_shader_stencil_value_export;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GLEW_SGIX_fragment_specular_lighting", 36)) {
    /*                                ^                         */
#ifdef GLEW_SGIX_fragment_specular_lighting
      *iv_return = GLEW_SGIX_fragment_specular_lighting;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case 'u':
    if (memEQ(name, "glGetNamedRenderbufferParameterivEXT", 36)) {
    /*                                ^                         */
#ifdef glGetNamedRenderbufferParameterivEXT
      *iv_return = glGetNamedRenderbufferParameterivEXT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case 'v':
    if (memEQ(name, "GLEW_ARB_compute_variable_group_size", 36)) {
    /*                                ^                         */
#ifdef GLEW_ARB_compute_variable_group_size
      *iv_return = GLEW_ARB_compute_variable_group_size;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case 'y':
    if (memEQ(name, "GLEW_ARB_vertex_type_10f_11f_11f_rev", 36)) {
    /*                                ^                         */
#ifdef GLEW_ARB_vertex_type_10f_11f_11f_rev
      *iv_return = GLEW_ARB_vertex_type_10f_11f_11f_rev;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  }
  return PERL_constant_NOTFOUND;
}

static int
constant_37 (pTHX_ const char *name, IV *iv_return) {
  /* When generated this function returned values for the list of names given
     here.  However, subsequent manual editing may have added or removed some.
     GLEW_AMD_seamless_cubemap_per_texture
     GLEW_AMD_vertex_shader_viewport_index
     GLEW_ARB_seamless_cubemap_per_texture
     GLEW_ARB_shader_storage_buffer_object
     GLEW_ARB_shader_texture_image_samples
     GLEW_ARB_texture_mirror_clamp_to_edge
     GLEW_ARB_transform_feedback_instanced
     GLEW_INTEL_conservative_rasterization
     GLEW_KHR_texture_compression_astc_hdr
     GLEW_KHR_texture_compression_astc_ldr
     GLEW_NV_robustness_video_memory_purge
     GLEW_NV_sample_mask_override_coverage
     GLEW_NV_uniform_buffer_unified_memory
     GL_COMPRESSED_LUMINANCE_ALPHA_3DC_ATI
     GL_COMPRESSED_RGB_BPTC_UNSIGNED_FLOAT
     GL_CONTEXT_FLAG_ROBUST_ACCESS_BIT_ARB
     GL_DEBUG_CATEGORY_SHADER_COMPILER_AMD
     GL_DEBUG_TYPE_DEPRECATED_BEHAVIOR_ARB
     GL_DRAW_ELEMENTS_INSTANCED_COMMAND_NV
     GL_EDGE_FLAG_ARRAY_BUFFER_BINDING_ARB
     GL_EXTERNAL_VIRTUAL_MEMORY_BUFFER_AMD
     GL_FRAGMENT_INTERPOLATION_OFFSET_BITS
     GL_FRAMEBUFFER_ATTACHMENT_LAYERED_ARB
     GL_FRAMEBUFFER_ATTACHMENT_LAYERED_EXT
     GL_FRAMEBUFFER_ATTACHMENT_OBJECT_NAME
     GL_FRAMEBUFFER_ATTACHMENT_OBJECT_TYPE
     GL_FRAMEBUFFER_INCOMPLETE_DRAW_BUFFER
     GL_FRAMEBUFFER_INCOMPLETE_FORMATS_EXT
     GL_FRAMEBUFFER_INCOMPLETE_MULTISAMPLE
     GL_FRAMEBUFFER_INCOMPLETE_READ_BUFFER
     GL_GPU_MEMORY_INFO_EVICTED_MEMORY_NVX
     GL_GPU_MEMORY_INFO_EVICTION_COUNT_NVX
     GL_IMAGE_FORMAT_COMPATIBILITY_BY_SIZE
     GL_IMPLEMENTATION_COLOR_READ_TYPE_OES
     GL_INT_IMAGE_2D_MULTISAMPLE_ARRAY_EXT
     GL_MAX_ATOMIC_COUNTER_BUFFER_BINDINGS
     GL_MAX_COMBINED_SHADER_STORAGE_BLOCKS
     GL_MAX_COMPUTE_ATOMIC_COUNTER_BUFFERS
     GL_MAX_COMPUTE_WORK_GROUP_INVOCATIONS
     GL_MAX_FRAGMENT_BINDABLE_UNIFORMS_EXT
     GL_MAX_FRAGMENT_SHADER_STORAGE_BLOCKS
     GL_MAX_GEOMETRY_BINDABLE_UNIFORMS_EXT
     GL_MAX_GEOMETRY_SHADER_STORAGE_BLOCKS
     GL_MAX_MATRIX_PALETTE_STACK_DEPTH_ARB
     GL_MAX_PROGRAM_MATRIX_STACK_DEPTH_ARB
     GL_MAX_PROGRAM_NATIVE_TEMPORARIES_ARB
     GL_MAX_SHADER_STORAGE_BUFFER_BINDINGS
     GL_MAX_TESS_CONTROL_OUTPUT_COMPONENTS
     GL_MAX_TESS_EVALUATION_IMAGE_UNIFORMS
     GL_MAX_TESS_EVALUATION_UNIFORM_BLOCKS
     GL_MAX_VERTEX_SHADER_INSTRUCTIONS_EXT
     GL_MAX_VERTEX_TEXTURE_IMAGE_UNITS_ARB
     GL_MIXED_STENCIL_SAMPLES_SUPPORTED_NV
     GL_NUM_COMPRESSED_TEXTURE_FORMATS_ARB
     GL_PATH_STENCIL_DEPTH_OFFSET_UNITS_NV
     GL_PERFQUERY_COUNTER_DATA_FLOAT_INTEL
     GL_PERFQUERY_COUNTER_THROUGHPUT_INTEL
     GL_PIXEL_TRANSFORM_2D_STACK_DEPTH_EXT
     GL_PN_TRIANGLES_POINT_MODE_LINEAR_ATI
     GL_PN_TRIANGLES_TESSELATION_LEVEL_ATI
     GL_PROXY_POST_CONVOLUTION_COLOR_TABLE
     GL_PROXY_TEXTURE_2D_MULTISAMPLE_ARRAY
     GL_REPLACEMENT_CODE_ARRAY_POINTER_SUN
     GL_TESS_EVALUATION_SUBROUTINE_UNIFORM
     GL_TEXTURE_BINDING_CUBE_MAP_ARRAY_ARB
     GL_TEXTURE_COORD_ARRAY_BUFFER_BINDING
     GL_TRANSFORM_FEEDBACK_BARRIER_BIT_EXT
     GL_TRANSFORM_FEEDBACK_BUFFER_MODE_EXT
     GL_TRANSFORM_FEEDBACK_BUFFER_SIZE_EXT
     GL_TRANSFORM_FEEDBACK_BUFFER_START_NV
     GL_VERTEX_ATTRIB_ARRAY_BUFFER_BINDING
     GL_VERTEX_ATTRIB_ARRAY_NORMALIZED_ARB
     GL_VERTEX_PROGRAM_PARAMETER_BUFFER_NV
     glGetFramebufferAttachmentParameteriv
     glGetNamedProgramLocalParameterIivEXT
     glMultiDrawElementsIndirectBindlessNV
     glNamedFramebufferSampleLocationsfvNV
     glNamedProgramLocalParametersI4uivEXT
     glNamedRenderbufferStorageMultisample
     glRenderbufferStorageMultisampleANGLE
     glReplacementCodeuiColor3fVertex3fSUN
     glStencilThenCoverFillPathInstancedNV
     glTextureImage2DMultisampleCoverageNV
     glTextureImage3DMultisampleCoverageNV */
  /* Offset 20 gives the best switch position.  */
  switch (name[20]) {
  case 'A':
    if (memEQ(name, "GL_DEBUG_CATEGORY_SHADER_COMPILER_AMD", 37)) {
    /*                                   ^                       */
#ifdef GL_DEBUG_CATEGORY_SHADER_COMPILER_AMD
      *iv_return = GL_DEBUG_CATEGORY_SHADER_COMPILER_AMD;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_DEBUG_TYPE_DEPRECATED_BEHAVIOR_ARB", 37)) {
    /*                                   ^                       */
#ifdef GL_DEBUG_TYPE_DEPRECATED_BEHAVIOR_ARB
      *iv_return = GL_DEBUG_TYPE_DEPRECATED_BEHAVIOR_ARB;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_FRAGMENT_INTERPOLATION_OFFSET_BITS", 37)) {
    /*                                   ^                       */
#ifdef GL_FRAGMENT_INTERPOLATION_OFFSET_BITS
      *iv_return = GL_FRAGMENT_INTERPOLATION_OFFSET_BITS;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_IMAGE_FORMAT_COMPATIBILITY_BY_SIZE", 37)) {
    /*                                   ^                       */
#ifdef GL_IMAGE_FORMAT_COMPATIBILITY_BY_SIZE
      *iv_return = GL_IMAGE_FORMAT_COMPATIBILITY_BY_SIZE;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_MAX_FRAGMENT_BINDABLE_UNIFORMS_EXT", 37)) {
    /*                                   ^                       */
#ifdef GL_MAX_FRAGMENT_BINDABLE_UNIFORMS_EXT
      *iv_return = GL_MAX_FRAGMENT_BINDABLE_UNIFORMS_EXT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_MAX_GEOMETRY_BINDABLE_UNIFORMS_EXT", 37)) {
    /*                                   ^                       */
#ifdef GL_MAX_GEOMETRY_BINDABLE_UNIFORMS_EXT
      *iv_return = GL_MAX_GEOMETRY_BINDABLE_UNIFORMS_EXT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_REPLACEMENT_CODE_ARRAY_POINTER_SUN", 37)) {
    /*                                   ^                       */
#ifdef GL_REPLACEMENT_CODE_ARRAY_POINTER_SUN
      *iv_return = GL_REPLACEMENT_CODE_ARRAY_POINTER_SUN;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_TEXTURE_COORD_ARRAY_BUFFER_BINDING", 37)) {
    /*                                   ^                       */
#ifdef GL_TEXTURE_COORD_ARRAY_BUFFER_BINDING
      *iv_return = GL_TEXTURE_COORD_ARRAY_BUFFER_BINDING;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_VERTEX_ATTRIB_ARRAY_BUFFER_BINDING", 37)) {
    /*                                   ^                       */
#ifdef GL_VERTEX_ATTRIB_ARRAY_BUFFER_BINDING
      *iv_return = GL_VERTEX_ATTRIB_ARRAY_BUFFER_BINDING;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_VERTEX_ATTRIB_ARRAY_NORMALIZED_ARB", 37)) {
    /*                                   ^                       */
#ifdef GL_VERTEX_ATTRIB_ARRAY_NORMALIZED_ARB
      *iv_return = GL_VERTEX_ATTRIB_ARRAY_NORMALIZED_ARB;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case 'C':
    if (memEQ(name, "GL_MAX_COMPUTE_ATOMIC_COUNTER_BUFFERS", 37)) {
    /*                                   ^                       */
#ifdef GL_MAX_COMPUTE_ATOMIC_COUNTER_BUFFERS
      *iv_return = GL_MAX_COMPUTE_ATOMIC_COUNTER_BUFFERS;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case 'D':
    if (memEQ(name, "GL_PIXEL_TRANSFORM_2D_STACK_DEPTH_EXT", 37)) {
    /*                                   ^                       */
#ifdef GL_PIXEL_TRANSFORM_2D_STACK_DEPTH_EXT
      *iv_return = GL_PIXEL_TRANSFORM_2D_STACK_DEPTH_EXT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case 'E':
    if (memEQ(name, "GL_MAX_COMBINED_SHADER_STORAGE_BLOCKS", 37)) {
    /*                                   ^                       */
#ifdef GL_MAX_COMBINED_SHADER_STORAGE_BLOCKS
      *iv_return = GL_MAX_COMBINED_SHADER_STORAGE_BLOCKS;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_MAX_FRAGMENT_SHADER_STORAGE_BLOCKS", 37)) {
    /*                                   ^                       */
#ifdef GL_MAX_FRAGMENT_SHADER_STORAGE_BLOCKS
      *iv_return = GL_MAX_FRAGMENT_SHADER_STORAGE_BLOCKS;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_MAX_GEOMETRY_SHADER_STORAGE_BLOCKS", 37)) {
    /*                                   ^                       */
#ifdef GL_MAX_GEOMETRY_SHADER_STORAGE_BLOCKS
      *iv_return = GL_MAX_GEOMETRY_SHADER_STORAGE_BLOCKS;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_MAX_MATRIX_PALETTE_STACK_DEPTH_ARB", 37)) {
    /*                                   ^                       */
#ifdef GL_MAX_MATRIX_PALETTE_STACK_DEPTH_ARB
      *iv_return = GL_MAX_MATRIX_PALETTE_STACK_DEPTH_ARB;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_MAX_PROGRAM_NATIVE_TEMPORARIES_ARB", 37)) {
    /*                                   ^                       */
#ifdef GL_MAX_PROGRAM_NATIVE_TEMPORARIES_ARB
      *iv_return = GL_MAX_PROGRAM_NATIVE_TEMPORARIES_ARB;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_MAX_SHADER_STORAGE_BUFFER_BINDINGS", 37)) {
    /*                                   ^                       */
#ifdef GL_MAX_SHADER_STORAGE_BUFFER_BINDINGS
      *iv_return = GL_MAX_SHADER_STORAGE_BUFFER_BINDINGS;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_MAX_VERTEX_TEXTURE_IMAGE_UNITS_ARB", 37)) {
    /*                                   ^                       */
#ifdef GL_MAX_VERTEX_TEXTURE_IMAGE_UNITS_ARB
      *iv_return = GL_MAX_VERTEX_TEXTURE_IMAGE_UNITS_ARB;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_PN_TRIANGLES_TESSELATION_LEVEL_ATI", 37)) {
    /*                                   ^                       */
#ifdef GL_PN_TRIANGLES_TESSELATION_LEVEL_ATI
      *iv_return = GL_PN_TRIANGLES_TESSELATION_LEVEL_ATI;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case 'G':
    if (memEQ(name, "GL_MAX_COMPUTE_WORK_GROUP_INVOCATIONS", 37)) {
    /*                                   ^                       */
#ifdef GL_MAX_COMPUTE_WORK_GROUP_INVOCATIONS
      *iv_return = GL_MAX_COMPUTE_WORK_GROUP_INVOCATIONS;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case 'H':
    if (memEQ(name, "GL_FRAMEBUFFER_ATTACHMENT_LAYERED_ARB", 37)) {
    /*                                   ^                       */
#ifdef GL_FRAMEBUFFER_ATTACHMENT_LAYERED_ARB
      *iv_return = GL_FRAMEBUFFER_ATTACHMENT_LAYERED_ARB;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_FRAMEBUFFER_ATTACHMENT_LAYERED_EXT", 37)) {
    /*                                   ^                       */
#ifdef GL_FRAMEBUFFER_ATTACHMENT_LAYERED_EXT
      *iv_return = GL_FRAMEBUFFER_ATTACHMENT_LAYERED_EXT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_FRAMEBUFFER_ATTACHMENT_OBJECT_NAME", 37)) {
    /*                                   ^                       */
#ifdef GL_FRAMEBUFFER_ATTACHMENT_OBJECT_NAME
      *iv_return = GL_FRAMEBUFFER_ATTACHMENT_OBJECT_NAME;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_FRAMEBUFFER_ATTACHMENT_OBJECT_TYPE", 37)) {
    /*                                   ^                       */
#ifdef GL_FRAMEBUFFER_ATTACHMENT_OBJECT_TYPE
      *iv_return = GL_FRAMEBUFFER_ATTACHMENT_OBJECT_TYPE;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_PATH_STENCIL_DEPTH_OFFSET_UNITS_NV", 37)) {
    /*                                   ^                       */
#ifdef GL_PATH_STENCIL_DEPTH_OFFSET_UNITS_NV
      *iv_return = GL_PATH_STENCIL_DEPTH_OFFSET_UNITS_NV;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case 'I':
    if (memEQ(name, "GL_INT_IMAGE_2D_MULTISAMPLE_ARRAY_EXT", 37)) {
    /*                                   ^                       */
#ifdef GL_INT_IMAGE_2D_MULTISAMPLE_ARRAY_EXT
      *iv_return = GL_INT_IMAGE_2D_MULTISAMPLE_ARRAY_EXT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case 'K':
    if (memEQ(name, "GL_TRANSFORM_FEEDBACK_BARRIER_BIT_EXT", 37)) {
    /*                                   ^                       */
#ifdef GL_TRANSFORM_FEEDBACK_BARRIER_BIT_EXT
      *iv_return = GL_TRANSFORM_FEEDBACK_BARRIER_BIT_EXT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_TRANSFORM_FEEDBACK_BUFFER_MODE_EXT", 37)) {
    /*                                   ^                       */
#ifdef GL_TRANSFORM_FEEDBACK_BUFFER_MODE_EXT
      *iv_return = GL_TRANSFORM_FEEDBACK_BUFFER_MODE_EXT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_TRANSFORM_FEEDBACK_BUFFER_SIZE_EXT", 37)) {
    /*                                   ^                       */
#ifdef GL_TRANSFORM_FEEDBACK_BUFFER_SIZE_EXT
      *iv_return = GL_TRANSFORM_FEEDBACK_BUFFER_SIZE_EXT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_TRANSFORM_FEEDBACK_BUFFER_START_NV", 37)) {
    /*                                   ^                       */
#ifdef GL_TRANSFORM_FEEDBACK_BUFFER_START_NV
      *iv_return = GL_TRANSFORM_FEEDBACK_BUFFER_START_NV;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case 'L':
    if (memEQ(name, "GL_IMPLEMENTATION_COLOR_READ_TYPE_OES", 37)) {
    /*                                   ^                       */
#ifdef GL_IMPLEMENTATION_COLOR_READ_TYPE_OES
      *iv_return = GL_IMPLEMENTATION_COLOR_READ_TYPE_OES;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case 'M':
    if (memEQ(name, "GL_EXTERNAL_VIRTUAL_MEMORY_BUFFER_AMD", 37)) {
    /*                                   ^                       */
#ifdef GL_EXTERNAL_VIRTUAL_MEMORY_BUFFER_AMD
      *iv_return = GL_EXTERNAL_VIRTUAL_MEMORY_BUFFER_AMD;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_PROXY_TEXTURE_2D_MULTISAMPLE_ARRAY", 37)) {
    /*                                   ^                       */
#ifdef GL_PROXY_TEXTURE_2D_MULTISAMPLE_ARRAY
      *iv_return = GL_PROXY_TEXTURE_2D_MULTISAMPLE_ARRAY;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case 'N':
    if (memEQ(name, "GL_COMPRESSED_LUMINANCE_ALPHA_3DC_ATI", 37)) {
    /*                                   ^                       */
#ifdef GL_COMPRESSED_LUMINANCE_ALPHA_3DC_ATI
      *iv_return = GL_COMPRESSED_LUMINANCE_ALPHA_3DC_ATI;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case 'O':
    if (memEQ(name, "GL_MAX_TESS_CONTROL_OUTPUT_COMPONENTS", 37)) {
    /*                                   ^                       */
#ifdef GL_MAX_TESS_CONTROL_OUTPUT_COMPONENTS
      *iv_return = GL_MAX_TESS_CONTROL_OUTPUT_COMPONENTS;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_MAX_TESS_EVALUATION_IMAGE_UNIFORMS", 37)) {
    /*                                   ^                       */
#ifdef GL_MAX_TESS_EVALUATION_IMAGE_UNIFORMS
      *iv_return = GL_MAX_TESS_EVALUATION_IMAGE_UNIFORMS;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_MAX_TESS_EVALUATION_UNIFORM_BLOCKS", 37)) {
    /*                                   ^                       */
#ifdef GL_MAX_TESS_EVALUATION_UNIFORM_BLOCKS
      *iv_return = GL_MAX_TESS_EVALUATION_UNIFORM_BLOCKS;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case 'P':
    if (memEQ(name, "GL_FRAMEBUFFER_INCOMPLETE_DRAW_BUFFER", 37)) {
    /*                                   ^                       */
#ifdef GL_FRAMEBUFFER_INCOMPLETE_DRAW_BUFFER
      *iv_return = GL_FRAMEBUFFER_INCOMPLETE_DRAW_BUFFER;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_FRAMEBUFFER_INCOMPLETE_FORMATS_EXT", 37)) {
    /*                                   ^                       */
#ifdef GL_FRAMEBUFFER_INCOMPLETE_FORMATS_EXT
      *iv_return = GL_FRAMEBUFFER_INCOMPLETE_FORMATS_EXT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_FRAMEBUFFER_INCOMPLETE_MULTISAMPLE", 37)) {
    /*                                   ^                       */
#ifdef GL_FRAMEBUFFER_INCOMPLETE_MULTISAMPLE
      *iv_return = GL_FRAMEBUFFER_INCOMPLETE_MULTISAMPLE;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_FRAMEBUFFER_INCOMPLETE_READ_BUFFER", 37)) {
    /*                                   ^                       */
#ifdef GL_FRAMEBUFFER_INCOMPLETE_READ_BUFFER
      *iv_return = GL_FRAMEBUFFER_INCOMPLETE_READ_BUFFER;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_MIXED_STENCIL_SAMPLES_SUPPORTED_NV", 37)) {
    /*                                   ^                       */
#ifdef GL_MIXED_STENCIL_SAMPLES_SUPPORTED_NV
      *iv_return = GL_MIXED_STENCIL_SAMPLES_SUPPORTED_NV;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case 'R':
    if (memEQ(name, "GL_MAX_ATOMIC_COUNTER_BUFFER_BINDINGS", 37)) {
    /*                                   ^                       */
#ifdef GL_MAX_ATOMIC_COUNTER_BUFFER_BINDINGS
      *iv_return = GL_MAX_ATOMIC_COUNTER_BUFFER_BINDINGS;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_VERTEX_PROGRAM_PARAMETER_BUFFER_NV", 37)) {
    /*                                   ^                       */
#ifdef GL_VERTEX_PROGRAM_PARAMETER_BUFFER_NV
      *iv_return = GL_VERTEX_PROGRAM_PARAMETER_BUFFER_NV;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case 'S':
    if (memEQ(name, "GL_CONTEXT_FLAG_ROBUST_ACCESS_BIT_ARB", 37)) {
    /*                                   ^                       */
#ifdef GL_CONTEXT_FLAG_ROBUST_ACCESS_BIT_ARB
      *iv_return = GL_CONTEXT_FLAG_ROBUST_ACCESS_BIT_ARB;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case 'T':
    if (memEQ(name, "GL_COMPRESSED_RGB_BPTC_UNSIGNED_FLOAT", 37)) {
    /*                                   ^                       */
#ifdef GL_COMPRESSED_RGB_BPTC_UNSIGNED_FLOAT
      *iv_return = GL_COMPRESSED_RGB_BPTC_UNSIGNED_FLOAT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_DRAW_ELEMENTS_INSTANCED_COMMAND_NV", 37)) {
    /*                                   ^                       */
#ifdef GL_DRAW_ELEMENTS_INSTANCED_COMMAND_NV
      *iv_return = GL_DRAW_ELEMENTS_INSTANCED_COMMAND_NV;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_PN_TRIANGLES_POINT_MODE_LINEAR_ATI", 37)) {
    /*                                   ^                       */
#ifdef GL_PN_TRIANGLES_POINT_MODE_LINEAR_ATI
      *iv_return = GL_PN_TRIANGLES_POINT_MODE_LINEAR_ATI;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case 'U':
    if (memEQ(name, "GL_EDGE_FLAG_ARRAY_BUFFER_BINDING_ARB", 37)) {
    /*                                   ^                       */
#ifdef GL_EDGE_FLAG_ARRAY_BUFFER_BINDING_ARB
      *iv_return = GL_EDGE_FLAG_ARRAY_BUFFER_BINDING_ARB;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_PROXY_POST_CONVOLUTION_COLOR_TABLE", 37)) {
    /*                                   ^                       */
#ifdef GL_PROXY_POST_CONVOLUTION_COLOR_TABLE
      *iv_return = GL_PROXY_POST_CONVOLUTION_COLOR_TABLE;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_TESS_EVALUATION_SUBROUTINE_UNIFORM", 37)) {
    /*                                   ^                       */
#ifdef GL_TESS_EVALUATION_SUBROUTINE_UNIFORM
      *iv_return = GL_TESS_EVALUATION_SUBROUTINE_UNIFORM;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_TEXTURE_BINDING_CUBE_MAP_ARRAY_ARB", 37)) {
    /*                                   ^                       */
#ifdef GL_TEXTURE_BINDING_CUBE_MAP_ARRAY_ARB
      *iv_return = GL_TEXTURE_BINDING_CUBE_MAP_ARRAY_ARB;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case 'V':
    if (memEQ(name, "GL_GPU_MEMORY_INFO_EVICTED_MEMORY_NVX", 37)) {
    /*                                   ^                       */
#ifdef GL_GPU_MEMORY_INFO_EVICTED_MEMORY_NVX
      *iv_return = GL_GPU_MEMORY_INFO_EVICTED_MEMORY_NVX;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_GPU_MEMORY_INFO_EVICTION_COUNT_NVX", 37)) {
    /*                                   ^                       */
#ifdef GL_GPU_MEMORY_INFO_EVICTION_COUNT_NVX
      *iv_return = GL_GPU_MEMORY_INFO_EVICTION_COUNT_NVX;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case 'X':
    if (memEQ(name, "GL_MAX_PROGRAM_MATRIX_STACK_DEPTH_ARB", 37)) {
    /*                                   ^                       */
#ifdef GL_MAX_PROGRAM_MATRIX_STACK_DEPTH_ARB
      *iv_return = GL_MAX_PROGRAM_MATRIX_STACK_DEPTH_ARB;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_NUM_COMPRESSED_TEXTURE_FORMATS_ARB", 37)) {
    /*                                   ^                       */
#ifdef GL_NUM_COMPRESSED_TEXTURE_FORMATS_ARB
      *iv_return = GL_NUM_COMPRESSED_TEXTURE_FORMATS_ARB;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case '_':
    if (memEQ(name, "GL_MAX_VERTEX_SHADER_INSTRUCTIONS_EXT", 37)) {
    /*                                   ^                       */
#ifdef GL_MAX_VERTEX_SHADER_INSTRUCTIONS_EXT
      *iv_return = GL_MAX_VERTEX_SHADER_INSTRUCTIONS_EXT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_PERFQUERY_COUNTER_DATA_FLOAT_INTEL", 37)) {
    /*                                   ^                       */
#ifdef GL_PERFQUERY_COUNTER_DATA_FLOAT_INTEL
      *iv_return = GL_PERFQUERY_COUNTER_DATA_FLOAT_INTEL;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_PERFQUERY_COUNTER_THROUGHPUT_INTEL", 37)) {
    /*                                   ^                       */
#ifdef GL_PERFQUERY_COUNTER_THROUGHPUT_INTEL
      *iv_return = GL_PERFQUERY_COUNTER_THROUGHPUT_INTEL;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case 'a':
    if (memEQ(name, "GLEW_ARB_shader_storage_buffer_object", 37)) {
    /*                                   ^                       */
#ifdef GLEW_ARB_shader_storage_buffer_object
      *iv_return = GLEW_ARB_shader_storage_buffer_object;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glGetNamedProgramLocalParameterIivEXT", 37)) {
    /*                                   ^                       */
#ifdef glGetNamedProgramLocalParameterIivEXT
      *iv_return = glGetNamedProgramLocalParameterIivEXT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glNamedProgramLocalParametersI4uivEXT", 37)) {
    /*                                   ^                       */
#ifdef glNamedProgramLocalParametersI4uivEXT
      *iv_return = glNamedProgramLocalParametersI4uivEXT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case 'b':
    if (memEQ(name, "GLEW_AMD_seamless_cubemap_per_texture", 37)) {
    /*                                   ^                       */
#ifdef GLEW_AMD_seamless_cubemap_per_texture
      *iv_return = GLEW_AMD_seamless_cubemap_per_texture;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GLEW_ARB_seamless_cubemap_per_texture", 37)) {
    /*                                   ^                       */
#ifdef GLEW_ARB_seamless_cubemap_per_texture
      *iv_return = GLEW_ARB_seamless_cubemap_per_texture;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case 'c':
    if (memEQ(name, "glGetFramebufferAttachmentParameteriv", 37)) {
    /*                                   ^                       */
#ifdef glGetFramebufferAttachmentParameteriv
      *iv_return = glGetFramebufferAttachmentParameteriv;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case 'e':
    if (memEQ(name, "GLEW_AMD_vertex_shader_viewport_index", 37)) {
    /*                                   ^                       */
#ifdef GLEW_AMD_vertex_shader_viewport_index
      *iv_return = GLEW_AMD_vertex_shader_viewport_index;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GLEW_ARB_transform_feedback_instanced", 37)) {
    /*                                   ^                       */
#ifdef GLEW_ARB_transform_feedback_instanced
      *iv_return = GLEW_ARB_transform_feedback_instanced;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GLEW_NV_uniform_buffer_unified_memory", 37)) {
    /*                                   ^                       */
#ifdef GLEW_NV_uniform_buffer_unified_memory
      *iv_return = GLEW_NV_uniform_buffer_unified_memory;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glRenderbufferStorageMultisampleANGLE", 37)) {
    /*                                   ^                       */
#ifdef glRenderbufferStorageMultisampleANGLE
      *iv_return = glRenderbufferStorageMultisampleANGLE;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case 'i':
    if (memEQ(name, "GLEW_INTEL_conservative_rasterization", 37)) {
    /*                                   ^                       */
#ifdef GLEW_INTEL_conservative_rasterization
      *iv_return = GLEW_INTEL_conservative_rasterization;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GLEW_NV_robustness_video_memory_purge", 37)) {
    /*                                   ^                       */
#ifdef GLEW_NV_robustness_video_memory_purge
      *iv_return = GLEW_NV_robustness_video_memory_purge;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glTextureImage2DMultisampleCoverageNV", 37)) {
    /*                                   ^                       */
#ifdef glTextureImage2DMultisampleCoverageNV
      *iv_return = glTextureImage2DMultisampleCoverageNV;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glTextureImage3DMultisampleCoverageNV", 37)) {
    /*                                   ^                       */
#ifdef glTextureImage3DMultisampleCoverageNV
      *iv_return = glTextureImage3DMultisampleCoverageNV;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case 'l':
    if (memEQ(name, "glStencilThenCoverFillPathInstancedNV", 37)) {
    /*                                   ^                       */
#ifdef glStencilThenCoverFillPathInstancedNV
      *iv_return = glStencilThenCoverFillPathInstancedNV;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case 'm':
    if (memEQ(name, "glNamedFramebufferSampleLocationsfvNV", 37)) {
    /*                                   ^                       */
#ifdef glNamedFramebufferSampleLocationsfvNV
      *iv_return = glNamedFramebufferSampleLocationsfvNV;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case 'n':
    if (memEQ(name, "glMultiDrawElementsIndirectBindlessNV", 37)) {
    /*                                   ^                       */
#ifdef glMultiDrawElementsIndirectBindlessNV
      *iv_return = glMultiDrawElementsIndirectBindlessNV;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case 'o':
    if (memEQ(name, "GLEW_NV_sample_mask_override_coverage", 37)) {
    /*                                   ^                       */
#ifdef GLEW_NV_sample_mask_override_coverage
      *iv_return = GLEW_NV_sample_mask_override_coverage;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glReplacementCodeuiColor3fVertex3fSUN", 37)) {
    /*                                   ^                       */
#ifdef glReplacementCodeuiColor3fVertex3fSUN
      *iv_return = glReplacementCodeuiColor3fVertex3fSUN;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case 'p':
    if (memEQ(name, "GLEW_KHR_texture_compression_astc_hdr", 37)) {
    /*                                   ^                       */
#ifdef GLEW_KHR_texture_compression_astc_hdr
      *iv_return = GLEW_KHR_texture_compression_astc_hdr;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GLEW_KHR_texture_compression_astc_ldr", 37)) {
    /*                                   ^                       */
#ifdef GLEW_KHR_texture_compression_astc_ldr
      *iv_return = GLEW_KHR_texture_compression_astc_ldr;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case 'r':
    if (memEQ(name, "GLEW_ARB_texture_mirror_clamp_to_edge", 37)) {
    /*                                   ^                       */
#ifdef GLEW_ARB_texture_mirror_clamp_to_edge
      *iv_return = GLEW_ARB_texture_mirror_clamp_to_edge;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case 't':
    if (memEQ(name, "glNamedRenderbufferStorageMultisample", 37)) {
    /*                                   ^                       */
#ifdef glNamedRenderbufferStorageMultisample
      *iv_return = glNamedRenderbufferStorageMultisample;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case 'u':
    if (memEQ(name, "GLEW_ARB_shader_texture_image_samples", 37)) {
    /*                                   ^                       */
#ifdef GLEW_ARB_shader_texture_image_samples
      *iv_return = GLEW_ARB_shader_texture_image_samples;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  }
  return PERL_constant_NOTFOUND;
}

static int
constant_38 (pTHX_ const char *name, IV *iv_return) {
  /* When generated this function returned values for the list of names given
     here.  However, subsequent manual editing may have added or removed some.
     GLEW_ARB_robust_buffer_access_behavior
     GLEW_KHR_robust_buffer_access_behavior
     GL_ACTIVE_SUBROUTINE_UNIFORM_LOCATIONS
     GL_COLOR_ARRAY_PARALLEL_POINTERS_INTEL
     GL_COMPRESSED_SRGB_ALPHA_S3TC_DXT1_EXT
     GL_COMPRESSED_SRGB_ALPHA_S3TC_DXT3_EXT
     GL_COMPRESSED_SRGB_ALPHA_S3TC_DXT5_EXT
     GL_COMPUTE_PROGRAM_PARAMETER_BUFFER_NV
     GL_CONSERVATIVE_RASTER_DILATE_RANGE_NV
     GL_CONTEXT_FLAG_FORWARD_COMPATIBLE_BIT
     GL_DOT_PRODUCT_AFFINE_DEPTH_REPLACE_NV
     GL_FOG_COORDINATE_ARRAY_BUFFER_BINDING
     GL_FRAGMENT_SHADER_DERIVATIVE_HINT_ARB
     GL_FRAMEBUFFER_ATTACHMENT_STENCIL_SIZE
     GL_IMAGE_FORMAT_COMPATIBILITY_BY_CLASS
     GL_LUMINANCE_ALPHA_EXTENDED_RANGE_SGIX
     GL_MAX_COMBINED_ATOMIC_COUNTER_BUFFERS
     GL_MAX_COMPUTE_VARIABLE_GROUP_SIZE_ARB
     GL_MAX_DEEP_3D_TEXTURE_WIDTH_HEIGHT_NV
     GL_MAX_FRAGMENT_ATOMIC_COUNTER_BUFFERS
     GL_MAX_FRAGMENT_UNIFORM_COMPONENTS_ARB
     GL_MAX_GEOMETRY_ATOMIC_COUNTER_BUFFERS
     GL_MAX_GEOMETRY_PROGRAM_INVOCATIONS_NV
     GL_MAX_GEOMETRY_UNIFORM_COMPONENTS_ARB
     GL_MAX_GEOMETRY_UNIFORM_COMPONENTS_EXT
     GL_MAX_GEOMETRY_VARYING_COMPONENTS_ARB
     GL_MAX_GEOMETRY_VARYING_COMPONENTS_EXT
     GL_MAX_PROGRAM_NATIVE_INSTRUCTIONS_ARB
     GL_MAX_SPARSE_ARRAY_TEXTURE_LAYERS_ARB
     GL_MAX_SUBPIXEL_PRECISION_BIAS_BITS_NV
     GL_MAX_TESS_CONTROL_UNIFORM_COMPONENTS
     GL_MAX_TESS_EVALUATION_ATOMIC_COUNTERS
     GL_NEXT_VIDEO_CAPTURE_BUFFER_STATUS_NV
     GL_NV_blend_equation_advanced_coherent
     GL_NV_framebuffer_multisample_coverage
     GL_PATH_STENCIL_DEPTH_OFFSET_FACTOR_NV
     GL_PERFQUERY_COUNTER_DATA_BOOL32_INTEL
     GL_PERFQUERY_COUNTER_DATA_DOUBLE_INTEL
     GL_PERFQUERY_COUNTER_DATA_UINT32_INTEL
     GL_PERFQUERY_COUNTER_DATA_UINT64_INTEL
     GL_PN_TRIANGLES_NORMAL_MODE_LINEAR_ATI
     GL_POST_TEXTURE_FILTER_BIAS_RANGE_SGIX
     GL_PROGRAM_NATIVE_ALU_INSTRUCTIONS_ARB
     GL_PROGRAM_NATIVE_TEX_INDIRECTIONS_ARB
     GL_PROGRAM_NATIVE_TEX_INSTRUCTIONS_ARB
     GL_PROXY_POST_COLOR_MATRIX_COLOR_TABLE
     GL_SAMPLE_LOCATION_PIXEL_GRID_WIDTH_NV
     GL_SHADER_IMAGE_ACCESS_BARRIER_BIT_EXT
     GL_SIMULTANEOUS_TEXTURE_AND_DEPTH_TEST
     GL_TEXTURE_COORD_ARRAY_LIST_STRIDE_IBM
     GL_TRANSFORM_FEEDBACK_BUFFER_ACTIVE_NV
     GL_TRANSFORM_FEEDBACK_BUFFER_PAUSED_NV
     GL_TRANSFORM_FEEDBACK_BUFFER_START_EXT
     GL_UNIFORM_ATOMIC_COUNTER_BUFFER_INDEX
     GL_UNSIGNED_INT_SAMPLER_2D_MULTISAMPLE
     GL_UNSIGNED_INT_SAMPLER_CUBE_MAP_ARRAY
     GL_VERTEX_ARRAY_RANGE_WITHOUT_FLUSH_NV
     GL_VERTEX_ATTRIB_ARRAY_BARRIER_BIT_EXT
     GL_VIDEO_CAPTURE_FIELD_LOWER_HEIGHT_NV
     GL_VIDEO_CAPTURE_FIELD_UPPER_HEIGHT_NV
     glDrawTransformFeedbackStreamInstanced
     glGetNamedProgramLocalParameterIuivEXT
     glNamedFramebufferSampleLocationsfvARB
     glReplacementCodeuiColor3fVertex3fvSUN
     glReplacementCodeuiColor4ubVertex3fSUN
     glReplacementCodeuiNormal3fVertex3fSUN
     glTexCoord2fColor4fNormal3fVertex3fSUN
     glTexCoord4fColor4fNormal3fVertex4fSUN */
  /* Offset 30 gives the best switch position.  */
  switch (name[30]) {
  case '3':
    if (memEQ(name, "GL_PERFQUERY_COUNTER_DATA_BOOL32_INTEL", 38)) {
    /*                                             ^              */
#ifdef GL_PERFQUERY_COUNTER_DATA_BOOL32_INTEL
      *iv_return = GL_PERFQUERY_COUNTER_DATA_BOOL32_INTEL;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_PERFQUERY_COUNTER_DATA_UINT32_INTEL", 38)) {
    /*                                             ^              */
#ifdef GL_PERFQUERY_COUNTER_DATA_UINT32_INTEL
      *iv_return = GL_PERFQUERY_COUNTER_DATA_UINT32_INTEL;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case '6':
    if (memEQ(name, "GL_PERFQUERY_COUNTER_DATA_UINT64_INTEL", 38)) {
    /*                                             ^              */
#ifdef GL_PERFQUERY_COUNTER_DATA_UINT64_INTEL
      *iv_return = GL_PERFQUERY_COUNTER_DATA_UINT64_INTEL;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case 'A':
    if (memEQ(name, "GL_PATH_STENCIL_DEPTH_OFFSET_FACTOR_NV", 38)) {
    /*                                             ^              */
#ifdef GL_PATH_STENCIL_DEPTH_OFFSET_FACTOR_NV
      *iv_return = GL_PATH_STENCIL_DEPTH_OFFSET_FACTOR_NV;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_TRANSFORM_FEEDBACK_BUFFER_PAUSED_NV", 38)) {
    /*                                             ^              */
#ifdef GL_TRANSFORM_FEEDBACK_BUFFER_PAUSED_NV
      *iv_return = GL_TRANSFORM_FEEDBACK_BUFFER_PAUSED_NV;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_UNSIGNED_INT_SAMPLER_CUBE_MAP_ARRAY", 38)) {
    /*                                             ^              */
#ifdef GL_UNSIGNED_INT_SAMPLER_CUBE_MAP_ARRAY
      *iv_return = GL_UNSIGNED_INT_SAMPLER_CUBE_MAP_ARRAY;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case 'B':
    if (memEQ(name, "GL_IMAGE_FORMAT_COMPATIBILITY_BY_CLASS", 38)) {
    /*                                             ^              */
#ifdef GL_IMAGE_FORMAT_COMPATIBILITY_BY_CLASS
      *iv_return = GL_IMAGE_FORMAT_COMPATIBILITY_BY_CLASS;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case 'C':
    if (memEQ(name, "GL_FRAMEBUFFER_ATTACHMENT_STENCIL_SIZE", 38)) {
    /*                                             ^              */
#ifdef GL_FRAMEBUFFER_ATTACHMENT_STENCIL_SIZE
      *iv_return = GL_FRAMEBUFFER_ATTACHMENT_STENCIL_SIZE;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_MAX_TESS_EVALUATION_ATOMIC_COUNTERS", 38)) {
    /*                                             ^              */
#ifdef GL_MAX_TESS_EVALUATION_ATOMIC_COUNTERS
      *iv_return = GL_MAX_TESS_EVALUATION_ATOMIC_COUNTERS;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_TRANSFORM_FEEDBACK_BUFFER_ACTIVE_NV", 38)) {
    /*                                             ^              */
#ifdef GL_TRANSFORM_FEEDBACK_BUFFER_ACTIVE_NV
      *iv_return = GL_TRANSFORM_FEEDBACK_BUFFER_ACTIVE_NV;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case 'D':
    if (memEQ(name, "GL_COMPRESSED_SRGB_ALPHA_S3TC_DXT1_EXT", 38)) {
    /*                                             ^              */
#ifdef GL_COMPRESSED_SRGB_ALPHA_S3TC_DXT1_EXT
      *iv_return = GL_COMPRESSED_SRGB_ALPHA_S3TC_DXT1_EXT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_COMPRESSED_SRGB_ALPHA_S3TC_DXT3_EXT", 38)) {
    /*                                             ^              */
#ifdef GL_COMPRESSED_SRGB_ALPHA_S3TC_DXT3_EXT
      *iv_return = GL_COMPRESSED_SRGB_ALPHA_S3TC_DXT3_EXT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_COMPRESSED_SRGB_ALPHA_S3TC_DXT5_EXT", 38)) {
    /*                                             ^              */
#ifdef GL_COMPRESSED_SRGB_ALPHA_S3TC_DXT5_EXT
      *iv_return = GL_COMPRESSED_SRGB_ALPHA_S3TC_DXT5_EXT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case 'E':
    if (memEQ(name, "GL_MAX_DEEP_3D_TEXTURE_WIDTH_HEIGHT_NV", 38)) {
    /*                                             ^              */
#ifdef GL_MAX_DEEP_3D_TEXTURE_WIDTH_HEIGHT_NV
      *iv_return = GL_MAX_DEEP_3D_TEXTURE_WIDTH_HEIGHT_NV;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_MAX_FRAGMENT_UNIFORM_COMPONENTS_ARB", 38)) {
    /*                                             ^              */
#ifdef GL_MAX_FRAGMENT_UNIFORM_COMPONENTS_ARB
      *iv_return = GL_MAX_FRAGMENT_UNIFORM_COMPONENTS_ARB;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_MAX_GEOMETRY_UNIFORM_COMPONENTS_ARB", 38)) {
    /*                                             ^              */
#ifdef GL_MAX_GEOMETRY_UNIFORM_COMPONENTS_ARB
      *iv_return = GL_MAX_GEOMETRY_UNIFORM_COMPONENTS_ARB;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_MAX_GEOMETRY_UNIFORM_COMPONENTS_EXT", 38)) {
    /*                                             ^              */
#ifdef GL_MAX_GEOMETRY_UNIFORM_COMPONENTS_EXT
      *iv_return = GL_MAX_GEOMETRY_UNIFORM_COMPONENTS_EXT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_MAX_GEOMETRY_VARYING_COMPONENTS_ARB", 38)) {
    /*                                             ^              */
#ifdef GL_MAX_GEOMETRY_VARYING_COMPONENTS_ARB
      *iv_return = GL_MAX_GEOMETRY_VARYING_COMPONENTS_ARB;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_MAX_GEOMETRY_VARYING_COMPONENTS_EXT", 38)) {
    /*                                             ^              */
#ifdef GL_MAX_GEOMETRY_VARYING_COMPONENTS_EXT
      *iv_return = GL_MAX_GEOMETRY_VARYING_COMPONENTS_EXT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_UNIFORM_ATOMIC_COUNTER_BUFFER_INDEX", 38)) {
    /*                                             ^              */
#ifdef GL_UNIFORM_ATOMIC_COUNTER_BUFFER_INDEX
      *iv_return = GL_UNIFORM_ATOMIC_COUNTER_BUFFER_INDEX;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_VIDEO_CAPTURE_FIELD_LOWER_HEIGHT_NV", 38)) {
    /*                                             ^              */
#ifdef GL_VIDEO_CAPTURE_FIELD_LOWER_HEIGHT_NV
      *iv_return = GL_VIDEO_CAPTURE_FIELD_LOWER_HEIGHT_NV;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_VIDEO_CAPTURE_FIELD_UPPER_HEIGHT_NV", 38)) {
    /*                                             ^              */
#ifdef GL_VIDEO_CAPTURE_FIELD_UPPER_HEIGHT_NV
      *iv_return = GL_VIDEO_CAPTURE_FIELD_UPPER_HEIGHT_NV;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case 'F':
    if (memEQ(name, "GL_VERTEX_ARRAY_RANGE_WITHOUT_FLUSH_NV", 38)) {
    /*                                             ^              */
#ifdef GL_VERTEX_ARRAY_RANGE_WITHOUT_FLUSH_NV
      *iv_return = GL_VERTEX_ARRAY_RANGE_WITHOUT_FLUSH_NV;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case 'H':
    if (memEQ(name, "GL_FRAGMENT_SHADER_DERIVATIVE_HINT_ARB", 38)) {
    /*                                             ^              */
#ifdef GL_FRAGMENT_SHADER_DERIVATIVE_HINT_ARB
      *iv_return = GL_FRAGMENT_SHADER_DERIVATIVE_HINT_ARB;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case 'I':
    if (memEQ(name, "GL_CONTEXT_FLAG_FORWARD_COMPATIBLE_BIT", 38)) {
    /*                                             ^              */
#ifdef GL_CONTEXT_FLAG_FORWARD_COMPATIBLE_BIT
      *iv_return = GL_CONTEXT_FLAG_FORWARD_COMPATIBLE_BIT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_MAX_PROGRAM_NATIVE_INSTRUCTIONS_ARB", 38)) {
    /*                                             ^              */
#ifdef GL_MAX_PROGRAM_NATIVE_INSTRUCTIONS_ARB
      *iv_return = GL_MAX_PROGRAM_NATIVE_INSTRUCTIONS_ARB;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_PROGRAM_NATIVE_ALU_INSTRUCTIONS_ARB", 38)) {
    /*                                             ^              */
#ifdef GL_PROGRAM_NATIVE_ALU_INSTRUCTIONS_ARB
      *iv_return = GL_PROGRAM_NATIVE_ALU_INSTRUCTIONS_ARB;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_PROGRAM_NATIVE_TEX_INDIRECTIONS_ARB", 38)) {
    /*                                             ^              */
#ifdef GL_PROGRAM_NATIVE_TEX_INDIRECTIONS_ARB
      *iv_return = GL_PROGRAM_NATIVE_TEX_INDIRECTIONS_ARB;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_PROGRAM_NATIVE_TEX_INSTRUCTIONS_ARB", 38)) {
    /*                                             ^              */
#ifdef GL_PROGRAM_NATIVE_TEX_INSTRUCTIONS_ARB
      *iv_return = GL_PROGRAM_NATIVE_TEX_INSTRUCTIONS_ARB;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case 'L':
    if (memEQ(name, "GL_PERFQUERY_COUNTER_DATA_DOUBLE_INTEL", 38)) {
    /*                                             ^              */
#ifdef GL_PERFQUERY_COUNTER_DATA_DOUBLE_INTEL
      *iv_return = GL_PERFQUERY_COUNTER_DATA_DOUBLE_INTEL;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case 'M':
    if (memEQ(name, "GL_MAX_TESS_CONTROL_UNIFORM_COMPONENTS", 38)) {
    /*                                             ^              */
#ifdef GL_MAX_TESS_CONTROL_UNIFORM_COMPONENTS
      *iv_return = GL_MAX_TESS_CONTROL_UNIFORM_COMPONENTS;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case 'N':
    if (memEQ(name, "GL_LUMINANCE_ALPHA_EXTENDED_RANGE_SGIX", 38)) {
    /*                                             ^              */
#ifdef GL_LUMINANCE_ALPHA_EXTENDED_RANGE_SGIX
      *iv_return = GL_LUMINANCE_ALPHA_EXTENDED_RANGE_SGIX;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_PN_TRIANGLES_NORMAL_MODE_LINEAR_ATI", 38)) {
    /*                                             ^              */
#ifdef GL_PN_TRIANGLES_NORMAL_MODE_LINEAR_ATI
      *iv_return = GL_PN_TRIANGLES_NORMAL_MODE_LINEAR_ATI;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_POST_TEXTURE_FILTER_BIAS_RANGE_SGIX", 38)) {
    /*                                             ^              */
#ifdef GL_POST_TEXTURE_FILTER_BIAS_RANGE_SGIX
      *iv_return = GL_POST_TEXTURE_FILTER_BIAS_RANGE_SGIX;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case 'O':
    if (memEQ(name, "GL_ACTIVE_SUBROUTINE_UNIFORM_LOCATIONS", 38)) {
    /*                                             ^              */
#ifdef GL_ACTIVE_SUBROUTINE_UNIFORM_LOCATIONS
      *iv_return = GL_ACTIVE_SUBROUTINE_UNIFORM_LOCATIONS;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_PROXY_POST_COLOR_MATRIX_COLOR_TABLE", 38)) {
    /*                                             ^              */
#ifdef GL_PROXY_POST_COLOR_MATRIX_COLOR_TABLE
      *iv_return = GL_PROXY_POST_COLOR_MATRIX_COLOR_TABLE;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case 'P':
    if (memEQ(name, "GL_DOT_PRODUCT_AFFINE_DEPTH_REPLACE_NV", 38)) {
    /*                                             ^              */
#ifdef GL_DOT_PRODUCT_AFFINE_DEPTH_REPLACE_NV
      *iv_return = GL_DOT_PRODUCT_AFFINE_DEPTH_REPLACE_NV;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_SIMULTANEOUS_TEXTURE_AND_DEPTH_TEST", 38)) {
    /*                                             ^              */
#ifdef GL_SIMULTANEOUS_TEXTURE_AND_DEPTH_TEST
      *iv_return = GL_SIMULTANEOUS_TEXTURE_AND_DEPTH_TEST;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case 'R':
    if (memEQ(name, "GL_COLOR_ARRAY_PARALLEL_POINTERS_INTEL", 38)) {
    /*                                             ^              */
#ifdef GL_COLOR_ARRAY_PARALLEL_POINTERS_INTEL
      *iv_return = GL_COLOR_ARRAY_PARALLEL_POINTERS_INTEL;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_CONSERVATIVE_RASTER_DILATE_RANGE_NV", 38)) {
    /*                                             ^              */
#ifdef GL_CONSERVATIVE_RASTER_DILATE_RANGE_NV
      *iv_return = GL_CONSERVATIVE_RASTER_DILATE_RANGE_NV;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_TEXTURE_COORD_ARRAY_LIST_STRIDE_IBM", 38)) {
    /*                                             ^              */
#ifdef GL_TEXTURE_COORD_ARRAY_LIST_STRIDE_IBM
      *iv_return = GL_TEXTURE_COORD_ARRAY_LIST_STRIDE_IBM;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case 'S':
    if (memEQ(name, "GL_MAX_COMPUTE_VARIABLE_GROUP_SIZE_ARB", 38)) {
    /*                                             ^              */
#ifdef GL_MAX_COMPUTE_VARIABLE_GROUP_SIZE_ARB
      *iv_return = GL_MAX_COMPUTE_VARIABLE_GROUP_SIZE_ARB;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case 'T':
    if (memEQ(name, "GL_MAX_GEOMETRY_PROGRAM_INVOCATIONS_NV", 38)) {
    /*                                             ^              */
#ifdef GL_MAX_GEOMETRY_PROGRAM_INVOCATIONS_NV
      *iv_return = GL_MAX_GEOMETRY_PROGRAM_INVOCATIONS_NV;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_NEXT_VIDEO_CAPTURE_BUFFER_STATUS_NV", 38)) {
    /*                                             ^              */
#ifdef GL_NEXT_VIDEO_CAPTURE_BUFFER_STATUS_NV
      *iv_return = GL_NEXT_VIDEO_CAPTURE_BUFFER_STATUS_NV;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_TRANSFORM_FEEDBACK_BUFFER_START_EXT", 38)) {
    /*                                             ^              */
#ifdef GL_TRANSFORM_FEEDBACK_BUFFER_START_EXT
      *iv_return = GL_TRANSFORM_FEEDBACK_BUFFER_START_EXT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_UNSIGNED_INT_SAMPLER_2D_MULTISAMPLE", 38)) {
    /*                                             ^              */
#ifdef GL_UNSIGNED_INT_SAMPLER_2D_MULTISAMPLE
      *iv_return = GL_UNSIGNED_INT_SAMPLER_2D_MULTISAMPLE;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case 'U':
    if (memEQ(name, "GL_COMPUTE_PROGRAM_PARAMETER_BUFFER_NV", 38)) {
    /*                                             ^              */
#ifdef GL_COMPUTE_PROGRAM_PARAMETER_BUFFER_NV
      *iv_return = GL_COMPUTE_PROGRAM_PARAMETER_BUFFER_NV;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case 'W':
    if (memEQ(name, "GL_SAMPLE_LOCATION_PIXEL_GRID_WIDTH_NV", 38)) {
    /*                                             ^              */
#ifdef GL_SAMPLE_LOCATION_PIXEL_GRID_WIDTH_NV
      *iv_return = GL_SAMPLE_LOCATION_PIXEL_GRID_WIDTH_NV;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case 'Y':
    if (memEQ(name, "GL_MAX_SPARSE_ARRAY_TEXTURE_LAYERS_ARB", 38)) {
    /*                                             ^              */
#ifdef GL_MAX_SPARSE_ARRAY_TEXTURE_LAYERS_ARB
      *iv_return = GL_MAX_SPARSE_ARRAY_TEXTURE_LAYERS_ARB;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case '_':
    if (memEQ(name, "GL_FOG_COORDINATE_ARRAY_BUFFER_BINDING", 38)) {
    /*                                             ^              */
#ifdef GL_FOG_COORDINATE_ARRAY_BUFFER_BINDING
      *iv_return = GL_FOG_COORDINATE_ARRAY_BUFFER_BINDING;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_MAX_COMBINED_ATOMIC_COUNTER_BUFFERS", 38)) {
    /*                                             ^              */
#ifdef GL_MAX_COMBINED_ATOMIC_COUNTER_BUFFERS
      *iv_return = GL_MAX_COMBINED_ATOMIC_COUNTER_BUFFERS;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_MAX_FRAGMENT_ATOMIC_COUNTER_BUFFERS", 38)) {
    /*                                             ^              */
#ifdef GL_MAX_FRAGMENT_ATOMIC_COUNTER_BUFFERS
      *iv_return = GL_MAX_FRAGMENT_ATOMIC_COUNTER_BUFFERS;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_MAX_GEOMETRY_ATOMIC_COUNTER_BUFFERS", 38)) {
    /*                                             ^              */
#ifdef GL_MAX_GEOMETRY_ATOMIC_COUNTER_BUFFERS
      *iv_return = GL_MAX_GEOMETRY_ATOMIC_COUNTER_BUFFERS;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_MAX_SUBPIXEL_PRECISION_BIAS_BITS_NV", 38)) {
    /*                                             ^              */
#ifdef GL_MAX_SUBPIXEL_PRECISION_BIAS_BITS_NV
      *iv_return = GL_MAX_SUBPIXEL_PRECISION_BIAS_BITS_NV;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_SHADER_IMAGE_ACCESS_BARRIER_BIT_EXT", 38)) {
    /*                                             ^              */
#ifdef GL_SHADER_IMAGE_ACCESS_BARRIER_BIT_EXT
      *iv_return = GL_SHADER_IMAGE_ACCESS_BARRIER_BIT_EXT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_VERTEX_ATTRIB_ARRAY_BARRIER_BIT_EXT", 38)) {
    /*                                             ^              */
#ifdef GL_VERTEX_ATTRIB_ARRAY_BARRIER_BIT_EXT
      *iv_return = GL_VERTEX_ATTRIB_ARRAY_BARRIER_BIT_EXT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case 'b':
    if (memEQ(name, "GLEW_ARB_robust_buffer_access_behavior", 38)) {
    /*                                             ^              */
#ifdef GLEW_ARB_robust_buffer_access_behavior
      *iv_return = GLEW_ARB_robust_buffer_access_behavior;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GLEW_KHR_robust_buffer_access_behavior", 38)) {
    /*                                             ^              */
#ifdef GLEW_KHR_robust_buffer_access_behavior
      *iv_return = GLEW_KHR_robust_buffer_access_behavior;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case 'c':
    if (memEQ(name, "GL_NV_blend_equation_advanced_coherent", 38)) {
    /*                                             ^              */
#ifdef GL_NV_blend_equation_advanced_coherent
      *iv_return = GL_NV_blend_equation_advanced_coherent;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_NV_framebuffer_multisample_coverage", 38)) {
    /*                                             ^              */
#ifdef GL_NV_framebuffer_multisample_coverage
      *iv_return = GL_NV_framebuffer_multisample_coverage;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case 'e':
    if (memEQ(name, "glReplacementCodeuiColor3fVertex3fvSUN", 38)) {
    /*                                             ^              */
#ifdef glReplacementCodeuiColor3fVertex3fvSUN
      *iv_return = glReplacementCodeuiColor3fVertex3fvSUN;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case 'n':
    if (memEQ(name, "glDrawTransformFeedbackStreamInstanced", 38)) {
    /*                                             ^              */
#ifdef glDrawTransformFeedbackStreamInstanced
      *iv_return = glDrawTransformFeedbackStreamInstanced;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case 'o':
    if (memEQ(name, "glNamedFramebufferSampleLocationsfvARB", 38)) {
    /*                                             ^              */
#ifdef glNamedFramebufferSampleLocationsfvARB
      *iv_return = glNamedFramebufferSampleLocationsfvARB;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case 'r':
    if (memEQ(name, "glGetNamedProgramLocalParameterIuivEXT", 38)) {
    /*                                             ^              */
#ifdef glGetNamedProgramLocalParameterIuivEXT
      *iv_return = glGetNamedProgramLocalParameterIuivEXT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case 't':
    if (memEQ(name, "glReplacementCodeuiColor4ubVertex3fSUN", 38)) {
    /*                                             ^              */
#ifdef glReplacementCodeuiColor4ubVertex3fSUN
      *iv_return = glReplacementCodeuiColor4ubVertex3fSUN;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glReplacementCodeuiNormal3fVertex3fSUN", 38)) {
    /*                                             ^              */
#ifdef glReplacementCodeuiNormal3fVertex3fSUN
      *iv_return = glReplacementCodeuiNormal3fVertex3fSUN;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glTexCoord2fColor4fNormal3fVertex3fSUN", 38)) {
    /*                                             ^              */
#ifdef glTexCoord2fColor4fNormal3fVertex3fSUN
      *iv_return = glTexCoord2fColor4fNormal3fVertex3fSUN;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glTexCoord4fColor4fNormal3fVertex4fSUN", 38)) {
    /*                                             ^              */
#ifdef glTexCoord4fColor4fNormal3fVertex4fSUN
      *iv_return = glTexCoord4fColor4fNormal3fVertex4fSUN;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  }
  return PERL_constant_NOTFOUND;
}

static int
constant_39 (pTHX_ const char *name, IV *iv_return) {
  /* When generated this function returned values for the list of names given
     here.  However, subsequent manual editing may have added or removed some.
     GL_ACTIVE_SUBROUTINE_UNIFORM_MAX_LENGTH
     GL_ACTIVE_UNIFORM_BLOCK_MAX_NAME_LENGTH
     GL_AMD_shader_explicit_vertex_parameter
     GL_ARB_compressed_texture_pixel_storage
     GL_ARB_robustness_application_isolation
     GL_ARB_robustness_share_group_isolation
     GL_ATIX_vertex_shader_output_point_size
     GL_COMPRESSED_LUMINANCE_ALPHA_LATC2_EXT
     GL_COMPRESSED_RGB_BPTC_SIGNED_FLOAT_ARB
     GL_COMPRESSED_SRGB8_ALPHA8_ASTC_4x4_KHR
     GL_COMPRESSED_SRGB8_ALPHA8_ASTC_5x4_KHR
     GL_COMPRESSED_SRGB8_ALPHA8_ASTC_5x5_KHR
     GL_COMPRESSED_SRGB8_ALPHA8_ASTC_6x5_KHR
     GL_COMPRESSED_SRGB8_ALPHA8_ASTC_6x6_KHR
     GL_COMPRESSED_SRGB8_ALPHA8_ASTC_8x5_KHR
     GL_COMPRESSED_SRGB8_ALPHA8_ASTC_8x6_KHR
     GL_COMPRESSED_SRGB8_ALPHA8_ASTC_8x8_KHR
     GL_COMPRESSED_SRGB_ALPHA_BPTC_UNORM_ARB
     GL_DEBUG_NEXT_LOGGED_MESSAGE_LENGTH_ARB
     GL_EGL_NV_robustness_video_memory_purge
     GL_FOG_COORDINATE_ARRAY_LIST_STRIDE_IBM
     GL_FRAGMENT_PROGRAM_PARAMETER_BUFFER_NV
     GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_LAYER
     GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_LEVEL
     GL_FRAMEBUFFER_INCOMPLETE_LAYER_TARGETS
     GL_GEOMETRY_PROGRAM_PARAMETER_BUFFER_NV
     GL_GPU_MEMORY_INFO_DEDICATED_VIDMEM_NVX
     GL_IMPLEMENTATION_COLOR_READ_FORMAT_OES
     GL_KHR_blend_equation_advanced_coherent
     GL_MAX_COMBINED_CLIP_AND_CULL_DISTANCES
     GL_MAX_COMBINED_SHADER_OUTPUT_RESOURCES
     GL_MAX_COMBINED_TEXTURE_IMAGE_UNITS_ARB
     GL_MAX_FRAGMENT_INTERPOLATION_OFFSET_NV
     GL_MAX_GEOMETRY_TEXTURE_IMAGE_UNITS_ARB
     GL_MAX_GEOMETRY_TEXTURE_IMAGE_UNITS_EXT
     GL_MAX_GEOMETRY_TOTAL_OUTPUT_COMPONENTS
     GL_MAX_PROGRAM_PARAMETER_BUFFER_SIZE_NV
     GL_MAX_PROGRAM_TEXTURE_GATHER_OFFSET_NV
     GL_MAX_TESS_CONTROL_TEXTURE_IMAGE_UNITS
     GL_MAX_TESS_EVALUATION_INPUT_COMPONENTS
     GL_MAX_VERTEX_ARRAY_RANGE_ELEMENT_APPLE
     GL_MIN_FRAGMENT_INTERPOLATION_OFFSET_NV
     GL_MIN_PROGRAM_TEXTURE_GATHER_OFFSET_NV
     GL_NORMAL_ARRAY_PARALLEL_POINTERS_INTEL
     GL_OBJECT_ACTIVE_UNIFORM_MAX_LENGTH_ARB
     GL_OFFSET_HILO_PROJECTIVE_TEXTURE_2D_NV
     GL_PERFQUERY_COUNTER_DURATION_RAW_INTEL
     GL_POST_TEXTURE_FILTER_SCALE_RANGE_SGIX
     GL_PROGRAM_NATIVE_ADDRESS_REGISTERS_ARB
     GL_REFERENCED_BY_TESS_EVALUATION_SHADER
     GL_RGBA_UNSIGNED_DOT_PRODUCT_MAPPING_NV
     GL_SAMPLE_LOCATION_PIXEL_GRID_HEIGHT_NV
     GL_SAMPLE_LOCATION_PIXEL_GRID_WIDTH_ARB
     GL_SECONDARY_COLOR_ARRAY_BUFFER_BINDING
     GL_SIMULTANEOUS_TEXTURE_AND_DEPTH_WRITE
     GL_TEXTURE_BINDING_2D_MULTISAMPLE_ARRAY
     GL_TRANSFORM_FEEDBACK_BUFFER_BINDING_NV
     GL_UNIFORM_BLOCK_ACTIVE_UNIFORM_INDICES
     GL_UNSIGNED_INT_SAMPLER_RENDERBUFFER_NV
     GL_VERTEX_ARRAY_PARALLEL_POINTERS_INTEL
     GL_VIEWPORT_POSITION_W_SCALE_X_COEFF_NV
     GL_VIEWPORT_POSITION_W_SCALE_Y_COEFF_NV
     glReplacementCodeuiColor4ubVertex3fvSUN
     glReplacementCodeuiNormal3fVertex3fvSUN
     glStencilThenCoverStrokePathInstancedNV
     glTexCoord2fColor4fNormal3fVertex3fvSUN
     glTexCoord4fColor4fNormal3fVertex4fvSUN */
  /* Offset 34 gives the best switch position.  */
  switch (name[34]) {
  case '2':
    if (memEQ(name, "GL_COMPRESSED_LUMINANCE_ALPHA_LATC2_EXT", 39)) {
    /*                                                 ^           */
#ifdef GL_COMPRESSED_LUMINANCE_ALPHA_LATC2_EXT
      *iv_return = GL_COMPRESSED_LUMINANCE_ALPHA_LATC2_EXT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_OFFSET_HILO_PROJECTIVE_TEXTURE_2D_NV", 39)) {
    /*                                                 ^           */
#ifdef GL_OFFSET_HILO_PROJECTIVE_TEXTURE_2D_NV
      *iv_return = GL_OFFSET_HILO_PROJECTIVE_TEXTURE_2D_NV;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case '4':
    if (memEQ(name, "GL_COMPRESSED_SRGB8_ALPHA8_ASTC_4x4_KHR", 39)) {
    /*                                                 ^           */
#ifdef GL_COMPRESSED_SRGB8_ALPHA8_ASTC_4x4_KHR
      *iv_return = GL_COMPRESSED_SRGB8_ALPHA8_ASTC_4x4_KHR;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_COMPRESSED_SRGB8_ALPHA8_ASTC_5x4_KHR", 39)) {
    /*                                                 ^           */
#ifdef GL_COMPRESSED_SRGB8_ALPHA8_ASTC_5x4_KHR
      *iv_return = GL_COMPRESSED_SRGB8_ALPHA8_ASTC_5x4_KHR;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case '5':
    if (memEQ(name, "GL_COMPRESSED_SRGB8_ALPHA8_ASTC_5x5_KHR", 39)) {
    /*                                                 ^           */
#ifdef GL_COMPRESSED_SRGB8_ALPHA8_ASTC_5x5_KHR
      *iv_return = GL_COMPRESSED_SRGB8_ALPHA8_ASTC_5x5_KHR;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_COMPRESSED_SRGB8_ALPHA8_ASTC_6x5_KHR", 39)) {
    /*                                                 ^           */
#ifdef GL_COMPRESSED_SRGB8_ALPHA8_ASTC_6x5_KHR
      *iv_return = GL_COMPRESSED_SRGB8_ALPHA8_ASTC_6x5_KHR;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_COMPRESSED_SRGB8_ALPHA8_ASTC_8x5_KHR", 39)) {
    /*                                                 ^           */
#ifdef GL_COMPRESSED_SRGB8_ALPHA8_ASTC_8x5_KHR
      *iv_return = GL_COMPRESSED_SRGB8_ALPHA8_ASTC_8x5_KHR;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case '6':
    if (memEQ(name, "GL_COMPRESSED_SRGB8_ALPHA8_ASTC_6x6_KHR", 39)) {
    /*                                                 ^           */
#ifdef GL_COMPRESSED_SRGB8_ALPHA8_ASTC_6x6_KHR
      *iv_return = GL_COMPRESSED_SRGB8_ALPHA8_ASTC_6x6_KHR;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_COMPRESSED_SRGB8_ALPHA8_ASTC_8x6_KHR", 39)) {
    /*                                                 ^           */
#ifdef GL_COMPRESSED_SRGB8_ALPHA8_ASTC_8x6_KHR
      *iv_return = GL_COMPRESSED_SRGB8_ALPHA8_ASTC_8x6_KHR;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case '8':
    if (memEQ(name, "GL_COMPRESSED_SRGB8_ALPHA8_ASTC_8x8_KHR", 39)) {
    /*                                                 ^           */
#ifdef GL_COMPRESSED_SRGB8_ALPHA8_ASTC_8x8_KHR
      *iv_return = GL_COMPRESSED_SRGB8_ALPHA8_ASTC_8x8_KHR;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case 'A':
    if (memEQ(name, "GL_MAX_COMBINED_CLIP_AND_CULL_DISTANCES", 39)) {
    /*                                                 ^           */
#ifdef GL_MAX_COMBINED_CLIP_AND_CULL_DISTANCES
      *iv_return = GL_MAX_COMBINED_CLIP_AND_CULL_DISTANCES;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_MAX_VERTEX_ARRAY_RANGE_ELEMENT_APPLE", 39)) {
    /*                                                 ^           */
#ifdef GL_MAX_VERTEX_ARRAY_RANGE_ELEMENT_APPLE
      *iv_return = GL_MAX_VERTEX_ARRAY_RANGE_ELEMENT_APPLE;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_TEXTURE_BINDING_2D_MULTISAMPLE_ARRAY", 39)) {
    /*                                                 ^           */
#ifdef GL_TEXTURE_BINDING_2D_MULTISAMPLE_ARRAY
      *iv_return = GL_TEXTURE_BINDING_2D_MULTISAMPLE_ARRAY;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case 'D':
    if (memEQ(name, "GL_UNIFORM_BLOCK_ACTIVE_UNIFORM_INDICES", 39)) {
    /*                                                 ^           */
#ifdef GL_UNIFORM_BLOCK_ACTIVE_UNIFORM_INDICES
      *iv_return = GL_UNIFORM_BLOCK_ACTIVE_UNIFORM_INDICES;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case 'E':
    if (memEQ(name, "GL_ACTIVE_SUBROUTINE_UNIFORM_MAX_LENGTH", 39)) {
    /*                                                 ^           */
#ifdef GL_ACTIVE_SUBROUTINE_UNIFORM_MAX_LENGTH
      *iv_return = GL_ACTIVE_SUBROUTINE_UNIFORM_MAX_LENGTH;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_ACTIVE_UNIFORM_BLOCK_MAX_NAME_LENGTH", 39)) {
    /*                                                 ^           */
#ifdef GL_ACTIVE_UNIFORM_BLOCK_MAX_NAME_LENGTH
      *iv_return = GL_ACTIVE_UNIFORM_BLOCK_MAX_NAME_LENGTH;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_FOG_COORDINATE_ARRAY_LIST_STRIDE_IBM", 39)) {
    /*                                                 ^           */
#ifdef GL_FOG_COORDINATE_ARRAY_LIST_STRIDE_IBM
      *iv_return = GL_FOG_COORDINATE_ARRAY_LIST_STRIDE_IBM;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_FRAGMENT_PROGRAM_PARAMETER_BUFFER_NV", 39)) {
    /*                                                 ^           */
#ifdef GL_FRAGMENT_PROGRAM_PARAMETER_BUFFER_NV
      *iv_return = GL_FRAGMENT_PROGRAM_PARAMETER_BUFFER_NV;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_GEOMETRY_PROGRAM_PARAMETER_BUFFER_NV", 39)) {
    /*                                                 ^           */
#ifdef GL_GEOMETRY_PROGRAM_PARAMETER_BUFFER_NV
      *iv_return = GL_GEOMETRY_PROGRAM_PARAMETER_BUFFER_NV;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_MAX_FRAGMENT_INTERPOLATION_OFFSET_NV", 39)) {
    /*                                                 ^           */
#ifdef GL_MAX_FRAGMENT_INTERPOLATION_OFFSET_NV
      *iv_return = GL_MAX_FRAGMENT_INTERPOLATION_OFFSET_NV;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_MAX_PROGRAM_TEXTURE_GATHER_OFFSET_NV", 39)) {
    /*                                                 ^           */
#ifdef GL_MAX_PROGRAM_TEXTURE_GATHER_OFFSET_NV
      *iv_return = GL_MAX_PROGRAM_TEXTURE_GATHER_OFFSET_NV;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_MIN_FRAGMENT_INTERPOLATION_OFFSET_NV", 39)) {
    /*                                                 ^           */
#ifdef GL_MIN_FRAGMENT_INTERPOLATION_OFFSET_NV
      *iv_return = GL_MIN_FRAGMENT_INTERPOLATION_OFFSET_NV;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_MIN_PROGRAM_TEXTURE_GATHER_OFFSET_NV", 39)) {
    /*                                                 ^           */
#ifdef GL_MIN_PROGRAM_TEXTURE_GATHER_OFFSET_NV
      *iv_return = GL_MIN_PROGRAM_TEXTURE_GATHER_OFFSET_NV;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_UNSIGNED_INT_SAMPLER_RENDERBUFFER_NV", 39)) {
    /*                                                 ^           */
#ifdef GL_UNSIGNED_INT_SAMPLER_RENDERBUFFER_NV
      *iv_return = GL_UNSIGNED_INT_SAMPLER_RENDERBUFFER_NV;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case 'F':
    if (memEQ(name, "GL_VIEWPORT_POSITION_W_SCALE_X_COEFF_NV", 39)) {
    /*                                                 ^           */
#ifdef GL_VIEWPORT_POSITION_W_SCALE_X_COEFF_NV
      *iv_return = GL_VIEWPORT_POSITION_W_SCALE_X_COEFF_NV;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_VIEWPORT_POSITION_W_SCALE_Y_COEFF_NV", 39)) {
    /*                                                 ^           */
#ifdef GL_VIEWPORT_POSITION_W_SCALE_Y_COEFF_NV
      *iv_return = GL_VIEWPORT_POSITION_W_SCALE_Y_COEFF_NV;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case 'H':
    if (memEQ(name, "GL_DEBUG_NEXT_LOGGED_MESSAGE_LENGTH_ARB", 39)) {
    /*                                                 ^           */
#ifdef GL_DEBUG_NEXT_LOGGED_MESSAGE_LENGTH_ARB
      *iv_return = GL_DEBUG_NEXT_LOGGED_MESSAGE_LENGTH_ARB;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_OBJECT_ACTIVE_UNIFORM_MAX_LENGTH_ARB", 39)) {
    /*                                                 ^           */
#ifdef GL_OBJECT_ACTIVE_UNIFORM_MAX_LENGTH_ARB
      *iv_return = GL_OBJECT_ACTIVE_UNIFORM_MAX_LENGTH_ARB;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_REFERENCED_BY_TESS_EVALUATION_SHADER", 39)) {
    /*                                                 ^           */
#ifdef GL_REFERENCED_BY_TESS_EVALUATION_SHADER
      *iv_return = GL_REFERENCED_BY_TESS_EVALUATION_SHADER;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_SAMPLE_LOCATION_PIXEL_GRID_HEIGHT_NV", 39)) {
    /*                                                 ^           */
#ifdef GL_SAMPLE_LOCATION_PIXEL_GRID_HEIGHT_NV
      *iv_return = GL_SAMPLE_LOCATION_PIXEL_GRID_HEIGHT_NV;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_SAMPLE_LOCATION_PIXEL_GRID_WIDTH_ARB", 39)) {
    /*                                                 ^           */
#ifdef GL_SAMPLE_LOCATION_PIXEL_GRID_WIDTH_ARB
      *iv_return = GL_SAMPLE_LOCATION_PIXEL_GRID_WIDTH_ARB;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case 'I':
    if (memEQ(name, "GL_NORMAL_ARRAY_PARALLEL_POINTERS_INTEL", 39)) {
    /*                                                 ^           */
#ifdef GL_NORMAL_ARRAY_PARALLEL_POINTERS_INTEL
      *iv_return = GL_NORMAL_ARRAY_PARALLEL_POINTERS_INTEL;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_PERFQUERY_COUNTER_DURATION_RAW_INTEL", 39)) {
    /*                                                 ^           */
#ifdef GL_PERFQUERY_COUNTER_DURATION_RAW_INTEL
      *iv_return = GL_PERFQUERY_COUNTER_DURATION_RAW_INTEL;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_VERTEX_ARRAY_PARALLEL_POINTERS_INTEL", 39)) {
    /*                                                 ^           */
#ifdef GL_VERTEX_ARRAY_PARALLEL_POINTERS_INTEL
      *iv_return = GL_VERTEX_ARRAY_PARALLEL_POINTERS_INTEL;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case 'L':
    if (memEQ(name, "GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_LAYER", 39)) {
    /*                                                 ^           */
#ifdef GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_LAYER
      *iv_return = GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_LAYER;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_LEVEL", 39)) {
    /*                                                 ^           */
#ifdef GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_LEVEL
      *iv_return = GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_LEVEL;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case 'M':
    if (memEQ(name, "GL_COMPRESSED_SRGB_ALPHA_BPTC_UNORM_ARB", 39)) {
    /*                                                 ^           */
#ifdef GL_COMPRESSED_SRGB_ALPHA_BPTC_UNORM_ARB
      *iv_return = GL_COMPRESSED_SRGB_ALPHA_BPTC_UNORM_ARB;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_GPU_MEMORY_INFO_DEDICATED_VIDMEM_NVX", 39)) {
    /*                                                 ^           */
#ifdef GL_GPU_MEMORY_INFO_DEDICATED_VIDMEM_NVX
      *iv_return = GL_GPU_MEMORY_INFO_DEDICATED_VIDMEM_NVX;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case 'N':
    if (memEQ(name, "GL_MAX_GEOMETRY_TOTAL_OUTPUT_COMPONENTS", 39)) {
    /*                                                 ^           */
#ifdef GL_MAX_GEOMETRY_TOTAL_OUTPUT_COMPONENTS
      *iv_return = GL_MAX_GEOMETRY_TOTAL_OUTPUT_COMPONENTS;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_MAX_TESS_EVALUATION_INPUT_COMPONENTS", 39)) {
    /*                                                 ^           */
#ifdef GL_MAX_TESS_EVALUATION_INPUT_COMPONENTS
      *iv_return = GL_MAX_TESS_EVALUATION_INPUT_COMPONENTS;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_RGBA_UNSIGNED_DOT_PRODUCT_MAPPING_NV", 39)) {
    /*                                                 ^           */
#ifdef GL_RGBA_UNSIGNED_DOT_PRODUCT_MAPPING_NV
      *iv_return = GL_RGBA_UNSIGNED_DOT_PRODUCT_MAPPING_NV;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_SECONDARY_COLOR_ARRAY_BUFFER_BINDING", 39)) {
    /*                                                 ^           */
#ifdef GL_SECONDARY_COLOR_ARRAY_BUFFER_BINDING
      *iv_return = GL_SECONDARY_COLOR_ARRAY_BUFFER_BINDING;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_TRANSFORM_FEEDBACK_BUFFER_BINDING_NV", 39)) {
    /*                                                 ^           */
#ifdef GL_TRANSFORM_FEEDBACK_BUFFER_BINDING_NV
      *iv_return = GL_TRANSFORM_FEEDBACK_BUFFER_BINDING_NV;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case 'R':
    if (memEQ(name, "GL_FRAMEBUFFER_INCOMPLETE_LAYER_TARGETS", 39)) {
    /*                                                 ^           */
#ifdef GL_FRAMEBUFFER_INCOMPLETE_LAYER_TARGETS
      *iv_return = GL_FRAMEBUFFER_INCOMPLETE_LAYER_TARGETS;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case 'S':
    if (memEQ(name, "GL_MAX_COMBINED_TEXTURE_IMAGE_UNITS_ARB", 39)) {
    /*                                                 ^           */
#ifdef GL_MAX_COMBINED_TEXTURE_IMAGE_UNITS_ARB
      *iv_return = GL_MAX_COMBINED_TEXTURE_IMAGE_UNITS_ARB;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_MAX_GEOMETRY_TEXTURE_IMAGE_UNITS_ARB", 39)) {
    /*                                                 ^           */
#ifdef GL_MAX_GEOMETRY_TEXTURE_IMAGE_UNITS_ARB
      *iv_return = GL_MAX_GEOMETRY_TEXTURE_IMAGE_UNITS_ARB;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_MAX_GEOMETRY_TEXTURE_IMAGE_UNITS_EXT", 39)) {
    /*                                                 ^           */
#ifdef GL_MAX_GEOMETRY_TEXTURE_IMAGE_UNITS_EXT
      *iv_return = GL_MAX_GEOMETRY_TEXTURE_IMAGE_UNITS_EXT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_PROGRAM_NATIVE_ADDRESS_REGISTERS_ARB", 39)) {
    /*                                                 ^           */
#ifdef GL_PROGRAM_NATIVE_ADDRESS_REGISTERS_ARB
      *iv_return = GL_PROGRAM_NATIVE_ADDRESS_REGISTERS_ARB;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case 'T':
    if (memEQ(name, "GL_COMPRESSED_RGB_BPTC_SIGNED_FLOAT_ARB", 39)) {
    /*                                                 ^           */
#ifdef GL_COMPRESSED_RGB_BPTC_SIGNED_FLOAT_ARB
      *iv_return = GL_COMPRESSED_RGB_BPTC_SIGNED_FLOAT_ARB;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_IMPLEMENTATION_COLOR_READ_FORMAT_OES", 39)) {
    /*                                                 ^           */
#ifdef GL_IMPLEMENTATION_COLOR_READ_FORMAT_OES
      *iv_return = GL_IMPLEMENTATION_COLOR_READ_FORMAT_OES;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case 'U':
    if (memEQ(name, "GL_MAX_COMBINED_SHADER_OUTPUT_RESOURCES", 39)) {
    /*                                                 ^           */
#ifdef GL_MAX_COMBINED_SHADER_OUTPUT_RESOURCES
      *iv_return = GL_MAX_COMBINED_SHADER_OUTPUT_RESOURCES;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_MAX_TESS_CONTROL_TEXTURE_IMAGE_UNITS", 39)) {
    /*                                                 ^           */
#ifdef GL_MAX_TESS_CONTROL_TEXTURE_IMAGE_UNITS
      *iv_return = GL_MAX_TESS_CONTROL_TEXTURE_IMAGE_UNITS;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case 'W':
    if (memEQ(name, "GL_SIMULTANEOUS_TEXTURE_AND_DEPTH_WRITE", 39)) {
    /*                                                 ^           */
#ifdef GL_SIMULTANEOUS_TEXTURE_AND_DEPTH_WRITE
      *iv_return = GL_SIMULTANEOUS_TEXTURE_AND_DEPTH_WRITE;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case 'Z':
    if (memEQ(name, "GL_MAX_PROGRAM_PARAMETER_BUFFER_SIZE_NV", 39)) {
    /*                                                 ^           */
#ifdef GL_MAX_PROGRAM_PARAMETER_BUFFER_SIZE_NV
      *iv_return = GL_MAX_PROGRAM_PARAMETER_BUFFER_SIZE_NV;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case '_':
    if (memEQ(name, "GL_ATIX_vertex_shader_output_point_size", 39)) {
    /*                                                 ^           */
#ifdef GL_ATIX_vertex_shader_output_point_size
      *iv_return = GL_ATIX_vertex_shader_output_point_size;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_POST_TEXTURE_FILTER_SCALE_RANGE_SGIX", 39)) {
    /*                                                 ^           */
#ifdef GL_POST_TEXTURE_FILTER_SCALE_RANGE_SGIX
      *iv_return = GL_POST_TEXTURE_FILTER_SCALE_RANGE_SGIX;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case 'a':
    if (memEQ(name, "GL_ARB_robustness_application_isolation", 39)) {
    /*                                                 ^           */
#ifdef GL_ARB_robustness_application_isolation
      *iv_return = GL_ARB_robustness_application_isolation;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_ARB_robustness_share_group_isolation", 39)) {
    /*                                                 ^           */
#ifdef GL_ARB_robustness_share_group_isolation
      *iv_return = GL_ARB_robustness_share_group_isolation;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case 'c':
    if (memEQ(name, "glStencilThenCoverStrokePathInstancedNV", 39)) {
    /*                                                 ^           */
#ifdef glStencilThenCoverStrokePathInstancedNV
      *iv_return = glStencilThenCoverStrokePathInstancedNV;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case 'e':
    if (memEQ(name, "GL_KHR_blend_equation_advanced_coherent", 39)) {
    /*                                                 ^           */
#ifdef GL_KHR_blend_equation_advanced_coherent
      *iv_return = GL_KHR_blend_equation_advanced_coherent;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case 'f':
    if (memEQ(name, "glReplacementCodeuiColor4ubVertex3fvSUN", 39)) {
    /*                                                 ^           */
#ifdef glReplacementCodeuiColor4ubVertex3fvSUN
      *iv_return = glReplacementCodeuiColor4ubVertex3fvSUN;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glReplacementCodeuiNormal3fVertex3fvSUN", 39)) {
    /*                                                 ^           */
#ifdef glReplacementCodeuiNormal3fVertex3fvSUN
      *iv_return = glReplacementCodeuiNormal3fVertex3fvSUN;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glTexCoord2fColor4fNormal3fVertex3fvSUN", 39)) {
    /*                                                 ^           */
#ifdef glTexCoord2fColor4fNormal3fVertex3fvSUN
      *iv_return = glTexCoord2fColor4fNormal3fVertex3fvSUN;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glTexCoord4fColor4fNormal3fVertex4fvSUN", 39)) {
    /*                                                 ^           */
#ifdef glTexCoord4fColor4fNormal3fVertex4fvSUN
      *iv_return = glTexCoord4fColor4fNormal3fVertex4fvSUN;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case 'm':
    if (memEQ(name, "GL_AMD_shader_explicit_vertex_parameter", 39)) {
    /*                                                 ^           */
#ifdef GL_AMD_shader_explicit_vertex_parameter
      *iv_return = GL_AMD_shader_explicit_vertex_parameter;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case 'o':
    if (memEQ(name, "GL_ARB_compressed_texture_pixel_storage", 39)) {
    /*                                                 ^           */
#ifdef GL_ARB_compressed_texture_pixel_storage
      *iv_return = GL_ARB_compressed_texture_pixel_storage;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case 'p':
    if (memEQ(name, "GL_EGL_NV_robustness_video_memory_purge", 39)) {
    /*                                                 ^           */
#ifdef GL_EGL_NV_robustness_video_memory_purge
      *iv_return = GL_EGL_NV_robustness_video_memory_purge;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  }
  return PERL_constant_NOTFOUND;
}

static int
constant_40 (pTHX_ const char *name, IV *iv_return) {
  /* When generated this function returned values for the list of names given
     here.  However, subsequent manual editing may have added or removed some.
     GLEW_NV_blend_equation_advanced_coherent
     GLEW_NV_framebuffer_multisample_coverage
     GL_ARB_transform_feedback_overflow_query
     GL_COMPRESSED_SIGNED_LUMINANCE_LATC1_EXT
     GL_COMPRESSED_SIGNED_RED_GREEN_RGTC2_EXT
     GL_COMPRESSED_SRGB8_ALPHA8_ASTC_10x5_KHR
     GL_COMPRESSED_SRGB8_ALPHA8_ASTC_10x6_KHR
     GL_COMPRESSED_SRGB8_ALPHA8_ASTC_10x8_KHR
     GL_CONSERVATIVE_RASTER_MODE_POST_SNAP_NV
     GL_DEBUG_CATEGORY_UNDEFINED_BEHAVIOR_AMD
     GL_FRAGMENT_COLOR_MATERIAL_PARAMETER_EXT
     GL_FRAGMENT_LIGHT_MODEL_LOCAL_VIEWER_EXT
     GL_FRAMEBUFFER_ATTACHMENT_COLOR_ENCODING
     GL_FRAMEBUFFER_ATTACHMENT_COMPONENT_TYPE
     GL_FRAMEBUFFER_INCOMPLETE_ATTACHMENT_EXT
     GL_FRAMEBUFFER_INCOMPLETE_DIMENSIONS_EXT
     GL_GLYPH_VERTICAL_BEARING_ADVANCE_BIT_NV
     GL_MAX_PROGRAM_TEXTURE_GATHER_COMPONENTS
     GL_MAX_PROGRAM_TEXTURE_GATHER_OFFSET_ARB
     GL_MAX_TESS_EVALUATION_OUTPUT_COMPONENTS
     GL_MAX_VERTEX_SHADER_LOCAL_CONSTANTS_EXT
     GL_MIN_PROGRAM_TEXTURE_GATHER_OFFSET_ARB
     GL_MULTISAMPLE_RASTERIZATION_ALLOWED_EXT
     GL_NUM_INPUT_INTERPOLATOR_COMPONENTS_ATI
     GL_NV_bindless_multi_draw_indirect_count
     GL_OFFSET_PROJECTIVE_TEXTURE_2D_SCALE_NV
     GL_PERFQUERY_COUNTER_DURATION_NORM_INTEL
     GL_PERFQUERY_GPA_EXTENDED_COUNTERS_INTEL
     GL_PERFQUERY_QUERY_NAME_LENGTH_MAX_INTEL
     GL_QUERY_DEPTH_BOUNDS_FAIL_EVENT_BIT_AMD
     GL_RELATIVE_SMOOTH_QUADRATIC_CURVE_TO_NV
     GL_SAMPLE_LOCATION_PIXEL_GRID_HEIGHT_ARB
     GL_SECONDARY_COLOR_ARRAY_LIST_STRIDE_IBM
     GL_SIMULTANEOUS_TEXTURE_AND_STENCIL_TEST
     GL_TEXTURE_BUFFER_DATA_STORE_BINDING_ARB
     GL_TEXTURE_BUFFER_DATA_STORE_BINDING_EXT
     GL_TRANSFORM_FEEDBACK_BUFFER_BINDING_EXT
     GL_TRANSFORM_FEEDBACK_PRIMITIVES_WRITTEN
     GL_TRANSFORM_FEEDBACK_VARYING_MAX_LENGTH
     GL_TRANSLATED_SHADER_SOURCE_LENGTH_ANGLE
     GL_UNSIGNED_INT_IMAGE_2D_MULTISAMPLE_EXT
     GL_UNSIGNED_INT_IMAGE_CUBE_MAP_ARRAY_EXT
     glGetFramebufferAttachmentParameterivEXT
     glMultiDrawArraysIndirectBindlessCountNV
     glNamedRenderbufferStorageMultisampleEXT
     glReplacementCodeuiTexCoord2fVertex3fSUN */
  /* Offset 23 gives the best switch position.  */
  switch (name[23]) {
  case 'A':
    if (memEQ(name, "GL_MULTISAMPLE_RASTERIZATION_ALLOWED_EXT", 40)) {
    /*                                      ^                       */
#ifdef GL_MULTISAMPLE_RASTERIZATION_ALLOWED_EXT
      *iv_return = GL_MULTISAMPLE_RASTERIZATION_ALLOWED_EXT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_QUERY_DEPTH_BOUNDS_FAIL_EVENT_BIT_AMD", 40)) {
    /*                                      ^                       */
#ifdef GL_QUERY_DEPTH_BOUNDS_FAIL_EVENT_BIT_AMD
      *iv_return = GL_QUERY_DEPTH_BOUNDS_FAIL_EVENT_BIT_AMD;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_TRANSFORM_FEEDBACK_VARYING_MAX_LENGTH", 40)) {
    /*                                      ^                       */
#ifdef GL_TRANSFORM_FEEDBACK_VARYING_MAX_LENGTH
      *iv_return = GL_TRANSFORM_FEEDBACK_VARYING_MAX_LENGTH;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case 'C':
    if (memEQ(name, "GL_MAX_VERTEX_SHADER_LOCAL_CONSTANTS_EXT", 40)) {
    /*                                      ^                       */
#ifdef GL_MAX_VERTEX_SHADER_LOCAL_CONSTANTS_EXT
      *iv_return = GL_MAX_VERTEX_SHADER_LOCAL_CONSTANTS_EXT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case 'D':
    if (memEQ(name, "GL_COMPRESSED_SIGNED_RED_GREEN_RGTC2_EXT", 40)) {
    /*                                      ^                       */
#ifdef GL_COMPRESSED_SIGNED_RED_GREEN_RGTC2_EXT
      *iv_return = GL_COMPRESSED_SIGNED_RED_GREEN_RGTC2_EXT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_UNSIGNED_INT_IMAGE_2D_MULTISAMPLE_EXT", 40)) {
    /*                                      ^                       */
#ifdef GL_UNSIGNED_INT_IMAGE_2D_MULTISAMPLE_EXT
      *iv_return = GL_UNSIGNED_INT_IMAGE_2D_MULTISAMPLE_EXT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case 'E':
    if (memEQ(name, "GL_PERFQUERY_GPA_EXTENDED_COUNTERS_INTEL", 40)) {
    /*                                      ^                       */
#ifdef GL_PERFQUERY_GPA_EXTENDED_COUNTERS_INTEL
      *iv_return = GL_PERFQUERY_GPA_EXTENDED_COUNTERS_INTEL;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case 'G':
    if (memEQ(name, "GL_MAX_PROGRAM_TEXTURE_GATHER_COMPONENTS", 40)) {
    /*                                      ^                       */
#ifdef GL_MAX_PROGRAM_TEXTURE_GATHER_COMPONENTS
      *iv_return = GL_MAX_PROGRAM_TEXTURE_GATHER_COMPONENTS;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_MAX_PROGRAM_TEXTURE_GATHER_OFFSET_ARB", 40)) {
    /*                                      ^                       */
#ifdef GL_MAX_PROGRAM_TEXTURE_GATHER_OFFSET_ARB
      *iv_return = GL_MAX_PROGRAM_TEXTURE_GATHER_OFFSET_ARB;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_MIN_PROGRAM_TEXTURE_GATHER_OFFSET_ARB", 40)) {
    /*                                      ^                       */
#ifdef GL_MIN_PROGRAM_TEXTURE_GATHER_OFFSET_ARB
      *iv_return = GL_MIN_PROGRAM_TEXTURE_GATHER_OFFSET_ARB;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case 'H':
    if (memEQ(name, "GL_COMPRESSED_SRGB8_ALPHA8_ASTC_10x5_KHR", 40)) {
    /*                                      ^                       */
#ifdef GL_COMPRESSED_SRGB8_ALPHA8_ASTC_10x5_KHR
      *iv_return = GL_COMPRESSED_SRGB8_ALPHA8_ASTC_10x5_KHR;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_COMPRESSED_SRGB8_ALPHA8_ASTC_10x6_KHR", 40)) {
    /*                                      ^                       */
#ifdef GL_COMPRESSED_SRGB8_ALPHA8_ASTC_10x6_KHR
      *iv_return = GL_COMPRESSED_SRGB8_ALPHA8_ASTC_10x6_KHR;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_COMPRESSED_SRGB8_ALPHA8_ASTC_10x8_KHR", 40)) {
    /*                                      ^                       */
#ifdef GL_COMPRESSED_SRGB8_ALPHA8_ASTC_10x8_KHR
      *iv_return = GL_COMPRESSED_SRGB8_ALPHA8_ASTC_10x8_KHR;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case 'I':
    if (memEQ(name, "GL_DEBUG_CATEGORY_UNDEFINED_BEHAVIOR_AMD", 40)) {
    /*                                      ^                       */
#ifdef GL_DEBUG_CATEGORY_UNDEFINED_BEHAVIOR_AMD
      *iv_return = GL_DEBUG_CATEGORY_UNDEFINED_BEHAVIOR_AMD;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_FRAGMENT_COLOR_MATERIAL_PARAMETER_EXT", 40)) {
    /*                                      ^                       */
#ifdef GL_FRAGMENT_COLOR_MATERIAL_PARAMETER_EXT
      *iv_return = GL_FRAGMENT_COLOR_MATERIAL_PARAMETER_EXT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case 'L':
    if (memEQ(name, "GL_SAMPLE_LOCATION_PIXEL_GRID_HEIGHT_ARB", 40)) {
    /*                                      ^                       */
#ifdef GL_SAMPLE_LOCATION_PIXEL_GRID_HEIGHT_ARB
      *iv_return = GL_SAMPLE_LOCATION_PIXEL_GRID_HEIGHT_ARB;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case 'M':
    if (memEQ(name, "GL_COMPRESSED_SIGNED_LUMINANCE_LATC1_EXT", 40)) {
    /*                                      ^                       */
#ifdef GL_COMPRESSED_SIGNED_LUMINANCE_LATC1_EXT
      *iv_return = GL_COMPRESSED_SIGNED_LUMINANCE_LATC1_EXT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_CONSERVATIVE_RASTER_MODE_POST_SNAP_NV", 40)) {
    /*                                      ^                       */
#ifdef GL_CONSERVATIVE_RASTER_MODE_POST_SNAP_NV
      *iv_return = GL_CONSERVATIVE_RASTER_MODE_POST_SNAP_NV;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case 'N':
    if (memEQ(name, "GL_FRAMEBUFFER_ATTACHMENT_COLOR_ENCODING", 40)) {
    /*                                      ^                       */
#ifdef GL_FRAMEBUFFER_ATTACHMENT_COLOR_ENCODING
      *iv_return = GL_FRAMEBUFFER_ATTACHMENT_COLOR_ENCODING;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_FRAMEBUFFER_ATTACHMENT_COMPONENT_TYPE", 40)) {
    /*                                      ^                       */
#ifdef GL_FRAMEBUFFER_ATTACHMENT_COMPONENT_TYPE
      *iv_return = GL_FRAMEBUFFER_ATTACHMENT_COMPONENT_TYPE;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_GLYPH_VERTICAL_BEARING_ADVANCE_BIT_NV", 40)) {
    /*                                      ^                       */
#ifdef GL_GLYPH_VERTICAL_BEARING_ADVANCE_BIT_NV
      *iv_return = GL_GLYPH_VERTICAL_BEARING_ADVANCE_BIT_NV;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case 'O':
    if (memEQ(name, "GL_MAX_TESS_EVALUATION_OUTPUT_COMPONENTS", 40)) {
    /*                                      ^                       */
#ifdef GL_MAX_TESS_EVALUATION_OUTPUT_COMPONENTS
      *iv_return = GL_MAX_TESS_EVALUATION_OUTPUT_COMPONENTS;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_NUM_INPUT_INTERPOLATOR_COMPONENTS_ATI", 40)) {
    /*                                      ^                       */
#ifdef GL_NUM_INPUT_INTERPOLATOR_COMPONENTS_ATI
      *iv_return = GL_NUM_INPUT_INTERPOLATOR_COMPONENTS_ATI;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case 'R':
    if (memEQ(name, "GL_PERFQUERY_COUNTER_DURATION_NORM_INTEL", 40)) {
    /*                                      ^                       */
#ifdef GL_PERFQUERY_COUNTER_DURATION_NORM_INTEL
      *iv_return = GL_PERFQUERY_COUNTER_DURATION_NORM_INTEL;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_RELATIVE_SMOOTH_QUADRATIC_CURVE_TO_NV", 40)) {
    /*                                      ^                       */
#ifdef GL_RELATIVE_SMOOTH_QUADRATIC_CURVE_TO_NV
      *iv_return = GL_RELATIVE_SMOOTH_QUADRATIC_CURVE_TO_NV;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_TRANSFORM_FEEDBACK_PRIMITIVES_WRITTEN", 40)) {
    /*                                      ^                       */
#ifdef GL_TRANSFORM_FEEDBACK_PRIMITIVES_WRITTEN
      *iv_return = GL_TRANSFORM_FEEDBACK_PRIMITIVES_WRITTEN;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case 'S':
    if (memEQ(name, "GL_TEXTURE_BUFFER_DATA_STORE_BINDING_ARB", 40)) {
    /*                                      ^                       */
#ifdef GL_TEXTURE_BUFFER_DATA_STORE_BINDING_ARB
      *iv_return = GL_TEXTURE_BUFFER_DATA_STORE_BINDING_ARB;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_TEXTURE_BUFFER_DATA_STORE_BINDING_EXT", 40)) {
    /*                                      ^                       */
#ifdef GL_TEXTURE_BUFFER_DATA_STORE_BINDING_EXT
      *iv_return = GL_TEXTURE_BUFFER_DATA_STORE_BINDING_EXT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case 'T':
    if (memEQ(name, "GL_FRAMEBUFFER_INCOMPLETE_ATTACHMENT_EXT", 40)) {
    /*                                      ^                       */
#ifdef GL_FRAMEBUFFER_INCOMPLETE_ATTACHMENT_EXT
      *iv_return = GL_FRAMEBUFFER_INCOMPLETE_ATTACHMENT_EXT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_FRAMEBUFFER_INCOMPLETE_DIMENSIONS_EXT", 40)) {
    /*                                      ^                       */
#ifdef GL_FRAMEBUFFER_INCOMPLETE_DIMENSIONS_EXT
      *iv_return = GL_FRAMEBUFFER_INCOMPLETE_DIMENSIONS_EXT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case 'U':
    if (memEQ(name, "GL_TRANSFORM_FEEDBACK_BUFFER_BINDING_EXT", 40)) {
    /*                                      ^                       */
#ifdef GL_TRANSFORM_FEEDBACK_BUFFER_BINDING_EXT
      *iv_return = GL_TRANSFORM_FEEDBACK_BUFFER_BINDING_EXT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_TRANSLATED_SHADER_SOURCE_LENGTH_ANGLE", 40)) {
    /*                                      ^                       */
#ifdef GL_TRANSLATED_SHADER_SOURCE_LENGTH_ANGLE
      *iv_return = GL_TRANSLATED_SHADER_SOURCE_LENGTH_ANGLE;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_UNSIGNED_INT_IMAGE_CUBE_MAP_ARRAY_EXT", 40)) {
    /*                                      ^                       */
#ifdef GL_UNSIGNED_INT_IMAGE_CUBE_MAP_ARRAY_EXT
      *iv_return = GL_UNSIGNED_INT_IMAGE_CUBE_MAP_ARRAY_EXT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case 'X':
    if (memEQ(name, "GL_OFFSET_PROJECTIVE_TEXTURE_2D_SCALE_NV", 40)) {
    /*                                      ^                       */
#ifdef GL_OFFSET_PROJECTIVE_TEXTURE_2D_SCALE_NV
      *iv_return = GL_OFFSET_PROJECTIVE_TEXTURE_2D_SCALE_NV;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case 'Y':
    if (memEQ(name, "GL_SECONDARY_COLOR_ARRAY_LIST_STRIDE_IBM", 40)) {
    /*                                      ^                       */
#ifdef GL_SECONDARY_COLOR_ARRAY_LIST_STRIDE_IBM
      *iv_return = GL_SECONDARY_COLOR_ARRAY_LIST_STRIDE_IBM;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case '_':
    if (memEQ(name, "GL_FRAGMENT_LIGHT_MODEL_LOCAL_VIEWER_EXT", 40)) {
    /*                                      ^                       */
#ifdef GL_FRAGMENT_LIGHT_MODEL_LOCAL_VIEWER_EXT
      *iv_return = GL_FRAGMENT_LIGHT_MODEL_LOCAL_VIEWER_EXT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_PERFQUERY_QUERY_NAME_LENGTH_MAX_INTEL", 40)) {
    /*                                      ^                       */
#ifdef GL_PERFQUERY_QUERY_NAME_LENGTH_MAX_INTEL
      *iv_return = GL_PERFQUERY_QUERY_NAME_LENGTH_MAX_INTEL;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_SIMULTANEOUS_TEXTURE_AND_STENCIL_TEST", 40)) {
    /*                                      ^                       */
#ifdef GL_SIMULTANEOUS_TEXTURE_AND_STENCIL_TEST
      *iv_return = GL_SIMULTANEOUS_TEXTURE_AND_STENCIL_TEST;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case 'a':
    if (memEQ(name, "GLEW_NV_blend_equation_advanced_coherent", 40)) {
    /*                                      ^                       */
#ifdef GLEW_NV_blend_equation_advanced_coherent
      *iv_return = GLEW_NV_blend_equation_advanced_coherent;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_NV_bindless_multi_draw_indirect_count", 40)) {
    /*                                      ^                       */
#ifdef GL_NV_bindless_multi_draw_indirect_count
      *iv_return = GL_NV_bindless_multi_draw_indirect_count;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glNamedRenderbufferStorageMultisampleEXT", 40)) {
    /*                                      ^                       */
#ifdef glNamedRenderbufferStorageMultisampleEXT
      *iv_return = glNamedRenderbufferStorageMultisampleEXT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case 'c':
    if (memEQ(name, "GL_ARB_transform_feedback_overflow_query", 40)) {
    /*                                      ^                       */
#ifdef GL_ARB_transform_feedback_overflow_query
      *iv_return = GL_ARB_transform_feedback_overflow_query;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glMultiDrawArraysIndirectBindlessCountNV", 40)) {
    /*                                      ^                       */
#ifdef glMultiDrawArraysIndirectBindlessCountNV
      *iv_return = glMultiDrawArraysIndirectBindlessCountNV;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case 'e':
    if (memEQ(name, "glGetFramebufferAttachmentParameterivEXT", 40)) {
    /*                                      ^                       */
#ifdef glGetFramebufferAttachmentParameterivEXT
      *iv_return = glGetFramebufferAttachmentParameterivEXT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case 'o':
    if (memEQ(name, "glReplacementCodeuiTexCoord2fVertex3fSUN", 40)) {
    /*                                      ^                       */
#ifdef glReplacementCodeuiTexCoord2fVertex3fSUN
      *iv_return = glReplacementCodeuiTexCoord2fVertex3fSUN;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case 't':
    if (memEQ(name, "GLEW_NV_framebuffer_multisample_coverage", 40)) {
    /*                                      ^                       */
#ifdef GLEW_NV_framebuffer_multisample_coverage
      *iv_return = GLEW_NV_framebuffer_multisample_coverage;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  }
  return PERL_constant_NOTFOUND;
}

static int
constant_41 (pTHX_ const char *name, IV *iv_return) {
  /* When generated this function returned values for the list of names given
     here.  However, subsequent manual editing may have added or removed some.
     GLEW_AMD_shader_explicit_vertex_parameter
     GLEW_ARB_compressed_texture_pixel_storage
     GLEW_ARB_robustness_application_isolation
     GLEW_ARB_robustness_share_group_isolation
     GLEW_ATIX_vertex_shader_output_point_size
     GLEW_EGL_NV_robustness_video_memory_purge
     GLEW_KHR_blend_equation_advanced_coherent
     GL_COMPRESSED_RGB_BPTC_UNSIGNED_FLOAT_ARB
     GL_COMPRESSED_SRGB8_ALPHA8_ASTC_10x10_KHR
     GL_COMPRESSED_SRGB8_ALPHA8_ASTC_12x10_KHR
     GL_COMPRESSED_SRGB8_ALPHA8_ASTC_12x12_KHR
     GL_FRAMEBUFFER_ATTACHMENT_OBJECT_NAME_EXT
     GL_FRAMEBUFFER_ATTACHMENT_OBJECT_TYPE_EXT
     GL_FRAMEBUFFER_INCOMPLETE_DRAW_BUFFER_EXT
     GL_FRAMEBUFFER_INCOMPLETE_LAYER_COUNT_ARB
     GL_FRAMEBUFFER_INCOMPLETE_LAYER_COUNT_EXT
     GL_FRAMEBUFFER_INCOMPLETE_MULTISAMPLE_EXT
     GL_FRAMEBUFFER_INCOMPLETE_READ_BUFFER_EXT
     GL_GEOMETRY_SHADER_PRIMITIVES_EMITTED_ARB
     GL_KHR_texture_compression_astc_sliced_3d
     GL_MAX_COMBINED_VERTEX_UNIFORM_COMPONENTS
     GL_MAX_OPTIMIZED_VERTEX_SHADER_LOCALS_EXT
     GL_MAX_PIXEL_TRANSFORM_2D_STACK_DEPTH_EXT
     GL_MAX_PN_TRIANGLES_TESSELATION_LEVEL_ATI
     GL_MAX_PROGRAM_TOTAL_OUTPUT_COMPONENTS_NV
     GL_MAX_TESS_CONTROL_SHADER_STORAGE_BLOCKS
     GL_MAX_TESS_EVALUATION_UNIFORM_COMPONENTS
     GL_MULTISAMPLE_LINE_WIDTH_GRANULARITY_ARB
     GL_OBJECT_ACTIVE_ATTRIBUTE_MAX_LENGTH_ARB
     GL_OFFSET_PROJECTIVE_TEXTURE_RECTANGLE_NV
     GL_PN_TRIANGLES_NORMAL_MODE_QUADRATIC_ATI
     GL_PROXY_POST_CONVOLUTION_COLOR_TABLE_SGI
     GL_SHADER_STORAGE_BUFFER_OFFSET_ALIGNMENT
     GL_SIMULTANEOUS_TEXTURE_AND_STENCIL_WRITE
     GL_TESS_EVALUATION_SHADER_INVOCATIONS_ARB
     GL_TEXTURE_COORD_ARRAY_BUFFER_BINDING_ARB
     GL_TRANSFORM_FEEDBACK_STREAM_OVERFLOW_ARB
     GL_VERTEX_ATTRIB_ARRAY_BUFFER_BINDING_ARB
     glMulticastFramebufferSampleLocationsfvNV
     glReplacementCodeuiTexCoord2fVertex3fvSUN */
  /* Offset 33 gives the best switch position.  */
  switch (name[33]) {
  case '0':
    if (memEQ(name, "GL_COMPRESSED_SRGB8_ALPHA8_ASTC_10x10_KHR", 41)) {
    /*                                                ^              */
#ifdef GL_COMPRESSED_SRGB8_ALPHA8_ASTC_10x10_KHR
      *iv_return = GL_COMPRESSED_SRGB8_ALPHA8_ASTC_10x10_KHR;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case '2':
    if (memEQ(name, "GL_COMPRESSED_SRGB8_ALPHA8_ASTC_12x10_KHR", 41)) {
    /*                                                ^              */
#ifdef GL_COMPRESSED_SRGB8_ALPHA8_ASTC_12x10_KHR
      *iv_return = GL_COMPRESSED_SRGB8_ALPHA8_ASTC_12x10_KHR;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_COMPRESSED_SRGB8_ALPHA8_ASTC_12x12_KHR", 41)) {
    /*                                                ^              */
#ifdef GL_COMPRESSED_SRGB8_ALPHA8_ASTC_12x12_KHR
      *iv_return = GL_COMPRESSED_SRGB8_ALPHA8_ASTC_12x12_KHR;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case 'A':
    if (memEQ(name, "GL_OFFSET_PROJECTIVE_TEXTURE_RECTANGLE_NV", 41)) {
    /*                                                ^              */
#ifdef GL_OFFSET_PROJECTIVE_TEXTURE_RECTANGLE_NV
      *iv_return = GL_OFFSET_PROJECTIVE_TEXTURE_RECTANGLE_NV;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_PN_TRIANGLES_NORMAL_MODE_QUADRATIC_ATI", 41)) {
    /*                                                ^              */
#ifdef GL_PN_TRIANGLES_NORMAL_MODE_QUADRATIC_ATI
      *iv_return = GL_PN_TRIANGLES_NORMAL_MODE_QUADRATIC_ATI;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_PROXY_POST_CONVOLUTION_COLOR_TABLE_SGI", 41)) {
    /*                                                ^              */
#ifdef GL_PROXY_POST_CONVOLUTION_COLOR_TABLE_SGI
      *iv_return = GL_PROXY_POST_CONVOLUTION_COLOR_TABLE_SGI;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case 'C':
    if (memEQ(name, "GL_MAX_OPTIMIZED_VERTEX_SHADER_LOCALS_EXT", 41)) {
    /*                                                ^              */
#ifdef GL_MAX_OPTIMIZED_VERTEX_SHADER_LOCALS_EXT
      *iv_return = GL_MAX_OPTIMIZED_VERTEX_SHADER_LOCALS_EXT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case 'D':
    if (memEQ(name, "GL_TEXTURE_COORD_ARRAY_BUFFER_BINDING_ARB", 41)) {
    /*                                                ^              */
#ifdef GL_TEXTURE_COORD_ARRAY_BUFFER_BINDING_ARB
      *iv_return = GL_TEXTURE_COORD_ARRAY_BUFFER_BINDING_ARB;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_VERTEX_ATTRIB_ARRAY_BUFFER_BINDING_ARB", 41)) {
    /*                                                ^              */
#ifdef GL_VERTEX_ATTRIB_ARRAY_BUFFER_BINDING_ARB
      *iv_return = GL_VERTEX_ATTRIB_ARRAY_BUFFER_BINDING_ARB;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case 'E':
    if (memEQ(name, "GL_MAX_PIXEL_TRANSFORM_2D_STACK_DEPTH_EXT", 41)) {
    /*                                                ^              */
#ifdef GL_MAX_PIXEL_TRANSFORM_2D_STACK_DEPTH_EXT
      *iv_return = GL_MAX_PIXEL_TRANSFORM_2D_STACK_DEPTH_EXT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_MAX_PN_TRIANGLES_TESSELATION_LEVEL_ATI", 41)) {
    /*                                                ^              */
#ifdef GL_MAX_PN_TRIANGLES_TESSELATION_LEVEL_ATI
      *iv_return = GL_MAX_PN_TRIANGLES_TESSELATION_LEVEL_ATI;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_MAX_TESS_CONTROL_SHADER_STORAGE_BLOCKS", 41)) {
    /*                                                ^              */
#ifdef GL_MAX_TESS_CONTROL_SHADER_STORAGE_BLOCKS
      *iv_return = GL_MAX_TESS_CONTROL_SHADER_STORAGE_BLOCKS;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case 'F':
    if (memEQ(name, "GL_FRAMEBUFFER_INCOMPLETE_DRAW_BUFFER_EXT", 41)) {
    /*                                                ^              */
#ifdef GL_FRAMEBUFFER_INCOMPLETE_DRAW_BUFFER_EXT
      *iv_return = GL_FRAMEBUFFER_INCOMPLETE_DRAW_BUFFER_EXT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_FRAMEBUFFER_INCOMPLETE_READ_BUFFER_EXT", 41)) {
    /*                                                ^              */
#ifdef GL_FRAMEBUFFER_INCOMPLETE_READ_BUFFER_EXT
      *iv_return = GL_FRAMEBUFFER_INCOMPLETE_READ_BUFFER_EXT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_TRANSFORM_FEEDBACK_STREAM_OVERFLOW_ARB", 41)) {
    /*                                                ^              */
#ifdef GL_TRANSFORM_FEEDBACK_STREAM_OVERFLOW_ARB
      *iv_return = GL_TRANSFORM_FEEDBACK_STREAM_OVERFLOW_ARB;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case 'I':
    if (memEQ(name, "GL_SIMULTANEOUS_TEXTURE_AND_STENCIL_WRITE", 41)) {
    /*                                                ^              */
#ifdef GL_SIMULTANEOUS_TEXTURE_AND_STENCIL_WRITE
      *iv_return = GL_SIMULTANEOUS_TEXTURE_AND_STENCIL_WRITE;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_TESS_EVALUATION_SHADER_INVOCATIONS_ARB", 41)) {
    /*                                                ^              */
#ifdef GL_TESS_EVALUATION_SHADER_INVOCATIONS_ARB
      *iv_return = GL_TESS_EVALUATION_SHADER_INVOCATIONS_ARB;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case 'L':
    if (memEQ(name, "GL_COMPRESSED_RGB_BPTC_UNSIGNED_FLOAT_ARB", 41)) {
    /*                                                ^              */
#ifdef GL_COMPRESSED_RGB_BPTC_UNSIGNED_FLOAT_ARB
      *iv_return = GL_COMPRESSED_RGB_BPTC_UNSIGNED_FLOAT_ARB;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_SHADER_STORAGE_BUFFER_OFFSET_ALIGNMENT", 41)) {
    /*                                                ^              */
#ifdef GL_SHADER_STORAGE_BUFFER_OFFSET_ALIGNMENT
      *iv_return = GL_SHADER_STORAGE_BUFFER_OFFSET_ALIGNMENT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case 'M':
    if (memEQ(name, "GL_FRAMEBUFFER_INCOMPLETE_MULTISAMPLE_EXT", 41)) {
    /*                                                ^              */
#ifdef GL_FRAMEBUFFER_INCOMPLETE_MULTISAMPLE_EXT
      *iv_return = GL_FRAMEBUFFER_INCOMPLETE_MULTISAMPLE_EXT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_MAX_COMBINED_VERTEX_UNIFORM_COMPONENTS", 41)) {
    /*                                                ^              */
#ifdef GL_MAX_COMBINED_VERTEX_UNIFORM_COMPONENTS
      *iv_return = GL_MAX_COMBINED_VERTEX_UNIFORM_COMPONENTS;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_MAX_TESS_EVALUATION_UNIFORM_COMPONENTS", 41)) {
    /*                                                ^              */
#ifdef GL_MAX_TESS_EVALUATION_UNIFORM_COMPONENTS
      *iv_return = GL_MAX_TESS_EVALUATION_UNIFORM_COMPONENTS;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case 'N':
    if (memEQ(name, "GL_FRAMEBUFFER_ATTACHMENT_OBJECT_NAME_EXT", 41)) {
    /*                                                ^              */
#ifdef GL_FRAMEBUFFER_ATTACHMENT_OBJECT_NAME_EXT
      *iv_return = GL_FRAMEBUFFER_ATTACHMENT_OBJECT_NAME_EXT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_MAX_PROGRAM_TOTAL_OUTPUT_COMPONENTS_NV", 41)) {
    /*                                                ^              */
#ifdef GL_MAX_PROGRAM_TOTAL_OUTPUT_COMPONENTS_NV
      *iv_return = GL_MAX_PROGRAM_TOTAL_OUTPUT_COMPONENTS_NV;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_OBJECT_ACTIVE_ATTRIBUTE_MAX_LENGTH_ARB", 41)) {
    /*                                                ^              */
#ifdef GL_OBJECT_ACTIVE_ATTRIBUTE_MAX_LENGTH_ARB
      *iv_return = GL_OBJECT_ACTIVE_ATTRIBUTE_MAX_LENGTH_ARB;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case 'O':
    if (memEQ(name, "GL_FRAMEBUFFER_INCOMPLETE_LAYER_COUNT_ARB", 41)) {
    /*                                                ^              */
#ifdef GL_FRAMEBUFFER_INCOMPLETE_LAYER_COUNT_ARB
      *iv_return = GL_FRAMEBUFFER_INCOMPLETE_LAYER_COUNT_ARB;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_FRAMEBUFFER_INCOMPLETE_LAYER_COUNT_EXT", 41)) {
    /*                                                ^              */
#ifdef GL_FRAMEBUFFER_INCOMPLETE_LAYER_COUNT_EXT
      *iv_return = GL_FRAMEBUFFER_INCOMPLETE_LAYER_COUNT_EXT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case 'R':
    if (memEQ(name, "GL_MULTISAMPLE_LINE_WIDTH_GRANULARITY_ARB", 41)) {
    /*                                                ^              */
#ifdef GL_MULTISAMPLE_LINE_WIDTH_GRANULARITY_ARB
      *iv_return = GL_MULTISAMPLE_LINE_WIDTH_GRANULARITY_ARB;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case 'T':
    if (memEQ(name, "GL_FRAMEBUFFER_ATTACHMENT_OBJECT_TYPE_EXT", 41)) {
    /*                                                ^              */
#ifdef GL_FRAMEBUFFER_ATTACHMENT_OBJECT_TYPE_EXT
      *iv_return = GL_FRAMEBUFFER_ATTACHMENT_OBJECT_TYPE_EXT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_GEOMETRY_SHADER_PRIMITIVES_EMITTED_ARB", 41)) {
    /*                                                ^              */
#ifdef GL_GEOMETRY_SHADER_PRIMITIVES_EMITTED_ARB
      *iv_return = GL_GEOMETRY_SHADER_PRIMITIVES_EMITTED_ARB;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case '_':
    if (memEQ(name, "GLEW_ARB_compressed_texture_pixel_storage", 41)) {
    /*                                                ^              */
#ifdef GLEW_ARB_compressed_texture_pixel_storage
      *iv_return = GLEW_ARB_compressed_texture_pixel_storage;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case 'a':
    if (memEQ(name, "GLEW_AMD_shader_explicit_vertex_parameter", 41)) {
    /*                                                ^              */
#ifdef GLEW_AMD_shader_explicit_vertex_parameter
      *iv_return = GLEW_AMD_shader_explicit_vertex_parameter;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case 'c':
    if (memEQ(name, "GLEW_KHR_blend_equation_advanced_coherent", 41)) {
    /*                                                ^              */
#ifdef GLEW_KHR_blend_equation_advanced_coherent
      *iv_return = GLEW_KHR_blend_equation_advanced_coherent;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case 'e':
    if (memEQ(name, "glReplacementCodeuiTexCoord2fVertex3fvSUN", 41)) {
    /*                                                ^              */
#ifdef glReplacementCodeuiTexCoord2fVertex3fvSUN
      *iv_return = glReplacementCodeuiTexCoord2fVertex3fvSUN;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case 'i':
    if (memEQ(name, "GLEW_ATIX_vertex_shader_output_point_size", 41)) {
    /*                                                ^              */
#ifdef GLEW_ATIX_vertex_shader_output_point_size
      *iv_return = GLEW_ATIX_vertex_shader_output_point_size;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glMulticastFramebufferSampleLocationsfvNV", 41)) {
    /*                                                ^              */
#ifdef glMulticastFramebufferSampleLocationsfvNV
      *iv_return = glMulticastFramebufferSampleLocationsfvNV;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case 'l':
    if (memEQ(name, "GL_KHR_texture_compression_astc_sliced_3d", 41)) {
    /*                                                ^              */
#ifdef GL_KHR_texture_compression_astc_sliced_3d
      *iv_return = GL_KHR_texture_compression_astc_sliced_3d;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case 'r':
    if (memEQ(name, "GLEW_EGL_NV_robustness_video_memory_purge", 41)) {
    /*                                                ^              */
#ifdef GLEW_EGL_NV_robustness_video_memory_purge
      *iv_return = GLEW_EGL_NV_robustness_video_memory_purge;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case 's':
    if (memEQ(name, "GLEW_ARB_robustness_application_isolation", 41)) {
    /*                                                ^              */
#ifdef GLEW_ARB_robustness_application_isolation
      *iv_return = GLEW_ARB_robustness_application_isolation;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GLEW_ARB_robustness_share_group_isolation", 41)) {
    /*                                                ^              */
#ifdef GLEW_ARB_robustness_share_group_isolation
      *iv_return = GLEW_ARB_robustness_share_group_isolation;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  }
  return PERL_constant_NOTFOUND;
}

static int
constant_42 (pTHX_ const char *name, IV *iv_return) {
  /* When generated this function returned values for the list of names given
     here.  However, subsequent manual editing may have added or removed some.
     GLEW_ARB_transform_feedback_overflow_query
     GLEW_NV_bindless_multi_draw_indirect_count
     GL_AMD_transform_feedback3_lines_triangles
     GL_EXT_framebuffer_multisample_blit_scaled
     GL_FOG_COORDINATE_ARRAY_BUFFER_BINDING_ARB
     GL_FRAMEBUFFER_INCOMPLETE_VIEW_TARGETS_OVR
     GL_GLYPH_HORIZONTAL_BEARING_ADVANCE_BIT_NV
     GL_LUMINANCE16_ALPHA16_EXTENDED_RANGE_SGIX
     GL_MAX_COMBINED_COMPUTE_UNIFORM_COMPONENTS
     GL_MAX_COMPUTE_FIXED_GROUP_INVOCATIONS_ARB
     GL_MAX_PROGRAM_NATIVE_ALU_INSTRUCTIONS_ARB
     GL_MAX_PROGRAM_NATIVE_TEX_INDIRECTIONS_ARB
     GL_MAX_PROGRAM_NATIVE_TEX_INSTRUCTIONS_ARB
     GL_MAX_TESS_CONTROL_ATOMIC_COUNTER_BUFFERS
     GL_MAX_TESS_EVALUATION_TEXTURE_IMAGE_UNITS
     GL_MAX_TRANSFORM_FEEDBACK_SEPARATE_ATTRIBS
     GL_PERFQUERY_COUNTER_DESC_LENGTH_MAX_INTEL
     GL_PERFQUERY_COUNTER_NAME_LENGTH_MAX_INTEL
     GL_PRIMITIVE_RESTART_FOR_PATCHES_SUPPORTED
     GL_PROXY_POST_COLOR_MATRIX_COLOR_TABLE_SGI
     GL_UNSIGNED_INT_IMAGE_2D_MULTISAMPLE_ARRAY
     GL_UNSIGNED_INT_SAMPLER_CUBE_MAP_ARRAY_ARB
     glGetNamedFramebufferAttachmentParameteriv
     glMultiDrawElementsIndirectBindlessCountNV
     glRenderbufferStorageMultisampleCoverageNV */
  /* Offset 31 gives the best switch position.  */
  switch (name[31]) {
  case 'A':
    if (memEQ(name, "GL_GLYPH_HORIZONTAL_BEARING_ADVANCE_BIT_NV", 42)) {
    /*                                              ^                 */
#ifdef GL_GLYPH_HORIZONTAL_BEARING_ADVANCE_BIT_NV
      *iv_return = GL_GLYPH_HORIZONTAL_BEARING_ADVANCE_BIT_NV;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_MAX_TRANSFORM_FEEDBACK_SEPARATE_ATTRIBS", 42)) {
    /*                                              ^                 */
#ifdef GL_MAX_TRANSFORM_FEEDBACK_SEPARATE_ATTRIBS
      *iv_return = GL_MAX_TRANSFORM_FEEDBACK_SEPARATE_ATTRIBS;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_UNSIGNED_INT_IMAGE_2D_MULTISAMPLE_ARRAY", 42)) {
    /*                                              ^                 */
#ifdef GL_UNSIGNED_INT_IMAGE_2D_MULTISAMPLE_ARRAY
      *iv_return = GL_UNSIGNED_INT_IMAGE_2D_MULTISAMPLE_ARRAY;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case 'B':
    if (memEQ(name, "GL_FOG_COORDINATE_ARRAY_BUFFER_BINDING_ARB", 42)) {
    /*                                              ^                 */
#ifdef GL_FOG_COORDINATE_ARRAY_BUFFER_BINDING_ARB
      *iv_return = GL_FOG_COORDINATE_ARRAY_BUFFER_BINDING_ARB;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case 'C':
    if (memEQ(name, "GL_MAX_COMPUTE_FIXED_GROUP_INVOCATIONS_ARB", 42)) {
    /*                                              ^                 */
#ifdef GL_MAX_COMPUTE_FIXED_GROUP_INVOCATIONS_ARB
      *iv_return = GL_MAX_COMPUTE_FIXED_GROUP_INVOCATIONS_ARB;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case 'E':
    if (memEQ(name, "GL_MAX_PROGRAM_NATIVE_TEX_INDIRECTIONS_ARB", 42)) {
    /*                                              ^                 */
#ifdef GL_MAX_PROGRAM_NATIVE_TEX_INDIRECTIONS_ARB
      *iv_return = GL_MAX_PROGRAM_NATIVE_TEX_INDIRECTIONS_ARB;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case 'H':
    if (memEQ(name, "GL_PERFQUERY_COUNTER_DESC_LENGTH_MAX_INTEL", 42)) {
    /*                                              ^                 */
#ifdef GL_PERFQUERY_COUNTER_DESC_LENGTH_MAX_INTEL
      *iv_return = GL_PERFQUERY_COUNTER_DESC_LENGTH_MAX_INTEL;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_PERFQUERY_COUNTER_NAME_LENGTH_MAX_INTEL", 42)) {
    /*                                              ^                 */
#ifdef GL_PERFQUERY_COUNTER_NAME_LENGTH_MAX_INTEL
      *iv_return = GL_PERFQUERY_COUNTER_NAME_LENGTH_MAX_INTEL;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case 'I':
    if (memEQ(name, "GL_MAX_TESS_EVALUATION_TEXTURE_IMAGE_UNITS", 42)) {
    /*                                              ^                 */
#ifdef GL_MAX_TESS_EVALUATION_TEXTURE_IMAGE_UNITS
      *iv_return = GL_MAX_TESS_EVALUATION_TEXTURE_IMAGE_UNITS;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case 'P':
    if (memEQ(name, "GL_UNSIGNED_INT_SAMPLER_CUBE_MAP_ARRAY_ARB", 42)) {
    /*                                              ^                 */
#ifdef GL_UNSIGNED_INT_SAMPLER_CUBE_MAP_ARRAY_ARB
      *iv_return = GL_UNSIGNED_INT_SAMPLER_CUBE_MAP_ARRAY_ARB;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "glGetNamedFramebufferAttachmentParameteriv", 42)) {
    /*                                              ^                 */
#ifdef glGetNamedFramebufferAttachmentParameteriv
      *iv_return = glGetNamedFramebufferAttachmentParameteriv;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case 'R':
    if (memEQ(name, "GL_PROXY_POST_COLOR_MATRIX_COLOR_TABLE_SGI", 42)) {
    /*                                              ^                 */
#ifdef GL_PROXY_POST_COLOR_MATRIX_COLOR_TABLE_SGI
      *iv_return = GL_PROXY_POST_COLOR_MATRIX_COLOR_TABLE_SGI;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case 'S':
    if (memEQ(name, "GL_PRIMITIVE_RESTART_FOR_PATCHES_SUPPORTED", 42)) {
    /*                                              ^                 */
#ifdef GL_PRIMITIVE_RESTART_FOR_PATCHES_SUPPORTED
      *iv_return = GL_PRIMITIVE_RESTART_FOR_PATCHES_SUPPORTED;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case 'T':
    if (memEQ(name, "GL_FRAMEBUFFER_INCOMPLETE_VIEW_TARGETS_OVR", 42)) {
    /*                                              ^                 */
#ifdef GL_FRAMEBUFFER_INCOMPLETE_VIEW_TARGETS_OVR
      *iv_return = GL_FRAMEBUFFER_INCOMPLETE_VIEW_TARGETS_OVR;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_MAX_TESS_CONTROL_ATOMIC_COUNTER_BUFFERS", 42)) {
    /*                                              ^                 */
#ifdef GL_MAX_TESS_CONTROL_ATOMIC_COUNTER_BUFFERS
      *iv_return = GL_MAX_TESS_CONTROL_ATOMIC_COUNTER_BUFFERS;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case 'U':
    if (memEQ(name, "GL_MAX_PROGRAM_NATIVE_ALU_INSTRUCTIONS_ARB", 42)) {
    /*                                              ^                 */
#ifdef GL_MAX_PROGRAM_NATIVE_ALU_INSTRUCTIONS_ARB
      *iv_return = GL_MAX_PROGRAM_NATIVE_ALU_INSTRUCTIONS_ARB;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_MAX_PROGRAM_NATIVE_TEX_INSTRUCTIONS_ARB", 42)) {
    /*                                              ^                 */
#ifdef GL_MAX_PROGRAM_NATIVE_TEX_INSTRUCTIONS_ARB
      *iv_return = GL_MAX_PROGRAM_NATIVE_TEX_INSTRUCTIONS_ARB;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case '_':
    if (memEQ(name, "GL_LUMINANCE16_ALPHA16_EXTENDED_RANGE_SGIX", 42)) {
    /*                                              ^                 */
#ifdef GL_LUMINANCE16_ALPHA16_EXTENDED_RANGE_SGIX
      *iv_return = GL_LUMINANCE16_ALPHA16_EXTENDED_RANGE_SGIX;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_MAX_COMBINED_COMPUTE_UNIFORM_COMPONENTS", 42)) {
    /*                                              ^                 */
#ifdef GL_MAX_COMBINED_COMPUTE_UNIFORM_COMPONENTS
      *iv_return = GL_MAX_COMBINED_COMPUTE_UNIFORM_COMPONENTS;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case 'b':
    if (memEQ(name, "GL_EXT_framebuffer_multisample_blit_scaled", 42)) {
    /*                                              ^                 */
#ifdef GL_EXT_framebuffer_multisample_blit_scaled
      *iv_return = GL_EXT_framebuffer_multisample_blit_scaled;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case 'e':
    if (memEQ(name, "glRenderbufferStorageMultisampleCoverageNV", 42)) {
    /*                                              ^                 */
#ifdef glRenderbufferStorageMultisampleCoverageNV
      *iv_return = glRenderbufferStorageMultisampleCoverageNV;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case 'i':
    if (memEQ(name, "GLEW_NV_bindless_multi_draw_indirect_count", 42)) {
    /*                                              ^                 */
#ifdef GLEW_NV_bindless_multi_draw_indirect_count
      *iv_return = GLEW_NV_bindless_multi_draw_indirect_count;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case 'l':
    if (memEQ(name, "glMultiDrawElementsIndirectBindlessCountNV", 42)) {
    /*                                              ^                 */
#ifdef glMultiDrawElementsIndirectBindlessCountNV
      *iv_return = glMultiDrawElementsIndirectBindlessCountNV;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case 'r':
    if (memEQ(name, "GLEW_ARB_transform_feedback_overflow_query", 42)) {
    /*                                              ^                 */
#ifdef GLEW_ARB_transform_feedback_overflow_query
      *iv_return = GLEW_ARB_transform_feedback_overflow_query;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case 's':
    if (memEQ(name, "GL_AMD_transform_feedback3_lines_triangles", 42)) {
    /*                                              ^                 */
#ifdef GL_AMD_transform_feedback3_lines_triangles
      *iv_return = GL_AMD_transform_feedback3_lines_triangles;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  }
  return PERL_constant_NOTFOUND;
}

static int
constant_43 (pTHX_ const char *name, IV *iv_return) {
  /* When generated this function returned values for the list of names given
     here.  However, subsequent manual editing may have added or removed some.
     GLEW_KHR_texture_compression_astc_sliced_3d
     GL_COMPRESSED_RGB8_PUNCHTHROUGH_ALPHA1_ETC2
     GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_LAYER_EXT
     GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_LEVEL_EXT
     GL_FRAMEBUFFER_INCOMPLETE_LAYER_TARGETS_ARB
     GL_FRAMEBUFFER_INCOMPLETE_LAYER_TARGETS_EXT
     GL_FRAMEBUFFER_INCOMPLETE_MULTISAMPLE_ANGLE
     GL_MAX_COMBINED_FRAGMENT_UNIFORM_COMPONENTS
     GL_MAX_COMBINED_GEOMETRY_UNIFORM_COMPONENTS
     GL_MAX_FRAGMENT_PROGRAM_LOCAL_PARAMETERS_NV
     GL_MAX_GEOMETRY_TOTAL_OUTPUT_COMPONENTS_ARB
     GL_MAX_GEOMETRY_TOTAL_OUTPUT_COMPONENTS_EXT
     GL_MAX_OPTIMIZED_VERTEX_SHADER_VARIANTS_EXT
     GL_MAX_PROGRAM_NATIVE_ADDRESS_REGISTERS_ARB
     GL_MAX_PROGRAM_PARAMETER_BUFFER_BINDINGS_NV
     GL_MAX_TESS_CONTROL_TOTAL_OUTPUT_COMPONENTS
     GL_QUADS_FOLLOW_PROVOKING_VERTEX_CONVENTION
     GL_SECONDARY_COLOR_ARRAY_BUFFER_BINDING_ARB
     GL_TESS_CONTROL_PROGRAM_PARAMETER_BUFFER_NV
     GL_TRANSFORM_FEEDBACK_PRIMITIVES_WRITTEN_NV
     GL_Z4Y12Z4CB12Z4A12Z4Y12Z4CR12Z4A12_4224_NV
     GL_Z6Y10Z6CB10Z6A10Z6Y10Z6CR10Z6A10_4224_NV */
  /* Offset 20 gives the best switch position.  */
  switch (name[20]) {
  case '4':
    if (memEQ(name, "GL_Z4Y12Z4CB12Z4A12Z4Y12Z4CR12Z4A12_4224_NV", 43)) {
    /*                                   ^                             */
#ifdef GL_Z4Y12Z4CB12Z4A12Z4Y12Z4CR12Z4A12_4224_NV
      *iv_return = GL_Z4Y12Z4CB12Z4A12Z4Y12Z4CR12Z4A12_4224_NV;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case '6':
    if (memEQ(name, "GL_Z6Y10Z6CB10Z6A10Z6Y10Z6CR10Z6A10_4224_NV", 43)) {
    /*                                   ^                             */
#ifdef GL_Z6Y10Z6CB10Z6A10Z6Y10Z6CR10Z6A10_4224_NV
      *iv_return = GL_Z6Y10Z6CB10Z6A10Z6Y10Z6CR10Z6A10_4224_NV;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case 'E':
    if (memEQ(name, "GL_MAX_COMBINED_GEOMETRY_UNIFORM_COMPONENTS", 43)) {
    /*                                   ^                             */
#ifdef GL_MAX_COMBINED_GEOMETRY_UNIFORM_COMPONENTS
      *iv_return = GL_MAX_COMBINED_GEOMETRY_UNIFORM_COMPONENTS;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_MAX_PROGRAM_NATIVE_ADDRESS_REGISTERS_ARB", 43)) {
    /*                                   ^                             */
#ifdef GL_MAX_PROGRAM_NATIVE_ADDRESS_REGISTERS_ARB
      *iv_return = GL_MAX_PROGRAM_NATIVE_ADDRESS_REGISTERS_ARB;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_MAX_PROGRAM_PARAMETER_BUFFER_BINDINGS_NV", 43)) {
    /*                                   ^                             */
#ifdef GL_MAX_PROGRAM_PARAMETER_BUFFER_BINDINGS_NV
      *iv_return = GL_MAX_PROGRAM_PARAMETER_BUFFER_BINDINGS_NV;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case 'H':
    if (memEQ(name, "GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_LAYER_EXT", 43)) {
    /*                                   ^                             */
#ifdef GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_LAYER_EXT
      *iv_return = GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_LAYER_EXT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_LEVEL_EXT", 43)) {
    /*                                   ^                             */
#ifdef GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_LEVEL_EXT
      *iv_return = GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_LEVEL_EXT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case 'K':
    if (memEQ(name, "GL_TRANSFORM_FEEDBACK_PRIMITIVES_WRITTEN_NV", 43)) {
    /*                                   ^                             */
#ifdef GL_TRANSFORM_FEEDBACK_PRIMITIVES_WRITTEN_NV
      *iv_return = GL_TRANSFORM_FEEDBACK_PRIMITIVES_WRITTEN_NV;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case 'L':
    if (memEQ(name, "GL_MAX_GEOMETRY_TOTAL_OUTPUT_COMPONENTS_ARB", 43)) {
    /*                                   ^                             */
#ifdef GL_MAX_GEOMETRY_TOTAL_OUTPUT_COMPONENTS_ARB
      *iv_return = GL_MAX_GEOMETRY_TOTAL_OUTPUT_COMPONENTS_ARB;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_MAX_GEOMETRY_TOTAL_OUTPUT_COMPONENTS_EXT", 43)) {
    /*                                   ^                             */
#ifdef GL_MAX_GEOMETRY_TOTAL_OUTPUT_COMPONENTS_EXT
      *iv_return = GL_MAX_GEOMETRY_TOTAL_OUTPUT_COMPONENTS_EXT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case 'M':
    if (memEQ(name, "GL_MAX_COMBINED_FRAGMENT_UNIFORM_COMPONENTS", 43)) {
    /*                                   ^                             */
#ifdef GL_MAX_COMBINED_FRAGMENT_UNIFORM_COMPONENTS
      *iv_return = GL_MAX_COMBINED_FRAGMENT_UNIFORM_COMPONENTS;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case 'O':
    if (memEQ(name, "GL_QUADS_FOLLOW_PROVOKING_VERTEX_CONVENTION", 43)) {
    /*                                   ^                             */
#ifdef GL_QUADS_FOLLOW_PROVOKING_VERTEX_CONVENTION
      *iv_return = GL_QUADS_FOLLOW_PROVOKING_VERTEX_CONVENTION;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case 'P':
    if (memEQ(name, "GL_FRAMEBUFFER_INCOMPLETE_LAYER_TARGETS_ARB", 43)) {
    /*                                   ^                             */
#ifdef GL_FRAMEBUFFER_INCOMPLETE_LAYER_TARGETS_ARB
      *iv_return = GL_FRAMEBUFFER_INCOMPLETE_LAYER_TARGETS_ARB;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_FRAMEBUFFER_INCOMPLETE_LAYER_TARGETS_EXT", 43)) {
    /*                                   ^                             */
#ifdef GL_FRAMEBUFFER_INCOMPLETE_LAYER_TARGETS_EXT
      *iv_return = GL_FRAMEBUFFER_INCOMPLETE_LAYER_TARGETS_EXT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_FRAMEBUFFER_INCOMPLETE_MULTISAMPLE_ANGLE", 43)) {
    /*                                   ^                             */
#ifdef GL_FRAMEBUFFER_INCOMPLETE_MULTISAMPLE_ANGLE
      *iv_return = GL_FRAMEBUFFER_INCOMPLETE_MULTISAMPLE_ANGLE;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case 'R':
    if (memEQ(name, "GL_MAX_FRAGMENT_PROGRAM_LOCAL_PARAMETERS_NV", 43)) {
    /*                                   ^                             */
#ifdef GL_MAX_FRAGMENT_PROGRAM_LOCAL_PARAMETERS_NV
      *iv_return = GL_MAX_FRAGMENT_PROGRAM_LOCAL_PARAMETERS_NV;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_SECONDARY_COLOR_ARRAY_BUFFER_BINDING_ARB", 43)) {
    /*                                   ^                             */
#ifdef GL_SECONDARY_COLOR_ARRAY_BUFFER_BINDING_ARB
      *iv_return = GL_SECONDARY_COLOR_ARRAY_BUFFER_BINDING_ARB;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_TESS_CONTROL_PROGRAM_PARAMETER_BUFFER_NV", 43)) {
    /*                                   ^                             */
#ifdef GL_TESS_CONTROL_PROGRAM_PARAMETER_BUFFER_NV
      *iv_return = GL_TESS_CONTROL_PROGRAM_PARAMETER_BUFFER_NV;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case 'T':
    if (memEQ(name, "GL_MAX_OPTIMIZED_VERTEX_SHADER_VARIANTS_EXT", 43)) {
    /*                                   ^                             */
#ifdef GL_MAX_OPTIMIZED_VERTEX_SHADER_VARIANTS_EXT
      *iv_return = GL_MAX_OPTIMIZED_VERTEX_SHADER_VARIANTS_EXT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_MAX_TESS_CONTROL_TOTAL_OUTPUT_COMPONENTS", 43)) {
    /*                                   ^                             */
#ifdef GL_MAX_TESS_CONTROL_TOTAL_OUTPUT_COMPONENTS
      *iv_return = GL_MAX_TESS_CONTROL_TOTAL_OUTPUT_COMPONENTS;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case 'U':
    if (memEQ(name, "GL_COMPRESSED_RGB8_PUNCHTHROUGH_ALPHA1_ETC2", 43)) {
    /*                                   ^                             */
#ifdef GL_COMPRESSED_RGB8_PUNCHTHROUGH_ALPHA1_ETC2
      *iv_return = GL_COMPRESSED_RGB8_PUNCHTHROUGH_ALPHA1_ETC2;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case 'p':
    if (memEQ(name, "GLEW_KHR_texture_compression_astc_sliced_3d", 43)) {
    /*                                   ^                             */
#ifdef GLEW_KHR_texture_compression_astc_sliced_3d
      *iv_return = GLEW_KHR_texture_compression_astc_sliced_3d;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  }
  return PERL_constant_NOTFOUND;
}

static int
constant_44 (pTHX_ const char *name, IV *iv_return) {
  /* When generated this function returned values for the list of names given
     here.  However, subsequent manual editing may have added or removed some.
     GLEW_AMD_transform_feedback3_lines_triangles
     GLEW_EXT_framebuffer_multisample_blit_scaled
     GL_COMPRESSED_SRGB8_PUNCHTHROUGH_ALPHA1_ETC2
     GL_CONSERVATIVE_RASTER_DILATE_GRANULARITY_NV
     GL_DOT_PRODUCT_CONST_EYE_REFLECT_CUBE_MAP_NV
     GL_FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT
     GL_FRAMEBUFFER_SAMPLE_LOCATION_PIXEL_GRID_NV
     GL_MAX_PROGRAM_TEXTURE_GATHER_COMPONENTS_ARB
     GL_MAX_TESS_EVALUATION_SHADER_STORAGE_BLOCKS
     GL_MULTICAST_PROGRAMMABLE_SAMPLE_LOCATION_NV
     GL_NV_conservative_raster_pre_snap_triangles
     GL_TRANSFORM_FEEDBACK_PRIMITIVES_WRITTEN_EXT
     GL_TRANSFORM_FEEDBACK_VARYING_MAX_LENGTH_EXT
     GL_UNIFORM_BLOCK_REFERENCED_BY_VERTEX_SHADER
     GL_UNSIGNED_INT_SAMPLER_2D_MULTISAMPLE_ARRAY */
  /* Offset 23 gives the best switch position.  */
  switch (name[23]) {
  case 'A':
    if (memEQ(name, "GL_TRANSFORM_FEEDBACK_VARYING_MAX_LENGTH_EXT", 44)) {
    /*                                      ^                           */
#ifdef GL_TRANSFORM_FEEDBACK_VARYING_MAX_LENGTH_EXT
      *iv_return = GL_TRANSFORM_FEEDBACK_VARYING_MAX_LENGTH_EXT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case 'C':
    if (memEQ(name, "GL_COMPRESSED_SRGB8_PUNCHTHROUGH_ALPHA1_ETC2", 44)) {
    /*                                      ^                           */
#ifdef GL_COMPRESSED_SRGB8_PUNCHTHROUGH_ALPHA1_ETC2
      *iv_return = GL_COMPRESSED_SRGB8_PUNCHTHROUGH_ALPHA1_ETC2;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case 'D':
    if (memEQ(name, "GL_CONSERVATIVE_RASTER_DILATE_GRANULARITY_NV", 44)) {
    /*                                      ^                           */
#ifdef GL_CONSERVATIVE_RASTER_DILATE_GRANULARITY_NV
      *iv_return = GL_CONSERVATIVE_RASTER_DILATE_GRANULARITY_NV;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case 'E':
    if (memEQ(name, "GL_DOT_PRODUCT_CONST_EYE_REFLECT_CUBE_MAP_NV", 44)) {
    /*                                      ^                           */
#ifdef GL_DOT_PRODUCT_CONST_EYE_REFLECT_CUBE_MAP_NV
      *iv_return = GL_DOT_PRODUCT_CONST_EYE_REFLECT_CUBE_MAP_NV;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case 'G':
    if (memEQ(name, "GL_MAX_PROGRAM_TEXTURE_GATHER_COMPONENTS_ARB", 44)) {
    /*                                      ^                           */
#ifdef GL_MAX_PROGRAM_TEXTURE_GATHER_COMPONENTS_ARB
      *iv_return = GL_MAX_PROGRAM_TEXTURE_GATHER_COMPONENTS_ARB;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case 'L':
    if (memEQ(name, "GL_MULTICAST_PROGRAMMABLE_SAMPLE_LOCATION_NV", 44)) {
    /*                                      ^                           */
#ifdef GL_MULTICAST_PROGRAMMABLE_SAMPLE_LOCATION_NV
      *iv_return = GL_MULTICAST_PROGRAMMABLE_SAMPLE_LOCATION_NV;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case 'N':
    if (memEQ(name, "GL_UNIFORM_BLOCK_REFERENCED_BY_VERTEX_SHADER", 44)) {
    /*                                      ^                           */
#ifdef GL_UNIFORM_BLOCK_REFERENCED_BY_VERTEX_SHADER
      *iv_return = GL_UNIFORM_BLOCK_REFERENCED_BY_VERTEX_SHADER;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case 'O':
    if (memEQ(name, "GL_FRAMEBUFFER_SAMPLE_LOCATION_PIXEL_GRID_NV", 44)) {
    /*                                      ^                           */
#ifdef GL_FRAMEBUFFER_SAMPLE_LOCATION_PIXEL_GRID_NV
      *iv_return = GL_FRAMEBUFFER_SAMPLE_LOCATION_PIXEL_GRID_NV;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case 'R':
    if (memEQ(name, "GL_TRANSFORM_FEEDBACK_PRIMITIVES_WRITTEN_EXT", 44)) {
    /*                                      ^                           */
#ifdef GL_TRANSFORM_FEEDBACK_PRIMITIVES_WRITTEN_EXT
      *iv_return = GL_TRANSFORM_FEEDBACK_PRIMITIVES_WRITTEN_EXT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case 'S':
    if (memEQ(name, "GL_MAX_TESS_EVALUATION_SHADER_STORAGE_BLOCKS", 44)) {
    /*                                      ^                           */
#ifdef GL_MAX_TESS_EVALUATION_SHADER_STORAGE_BLOCKS
      *iv_return = GL_MAX_TESS_EVALUATION_SHADER_STORAGE_BLOCKS;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case 'T':
    if (memEQ(name, "GL_FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT", 44)) {
    /*                                      ^                           */
#ifdef GL_FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT
      *iv_return = GL_FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case '_':
    if (memEQ(name, "GL_UNSIGNED_INT_SAMPLER_2D_MULTISAMPLE_ARRAY", 44)) {
    /*                                      ^                           */
#ifdef GL_UNSIGNED_INT_SAMPLER_2D_MULTISAMPLE_ARRAY
      *iv_return = GL_UNSIGNED_INT_SAMPLER_2D_MULTISAMPLE_ARRAY;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case 'b':
    if (memEQ(name, "GLEW_AMD_transform_feedback3_lines_triangles", 44)) {
    /*                                      ^                           */
#ifdef GLEW_AMD_transform_feedback3_lines_triangles
      *iv_return = GLEW_AMD_transform_feedback3_lines_triangles;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case 'e':
    if (memEQ(name, "GL_NV_conservative_raster_pre_snap_triangles", 44)) {
    /*                                      ^                           */
#ifdef GL_NV_conservative_raster_pre_snap_triangles
      *iv_return = GL_NV_conservative_raster_pre_snap_triangles;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case 'l':
    if (memEQ(name, "GLEW_EXT_framebuffer_multisample_blit_scaled", 44)) {
    /*                                      ^                           */
#ifdef GLEW_EXT_framebuffer_multisample_blit_scaled
      *iv_return = GLEW_EXT_framebuffer_multisample_blit_scaled;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  }
  return PERL_constant_NOTFOUND;
}

static int
constant_45 (pTHX_ const char *name, IV *iv_return) {
  /* When generated this function returned values for the list of names given
     here.  However, subsequent manual editing may have added or removed some.
     GL_FRAMEBUFFER_DEFAULT_FIXED_SAMPLE_LOCATIONS
     GL_FRAMEBUFFER_SAMPLE_LOCATION_PIXEL_GRID_ARB
     GL_GPU_MEMORY_INFO_TOTAL_AVAILABLE_MEMORY_NVX
     GL_MAX_COMPUTE_VARIABLE_GROUP_INVOCATIONS_ARB
     GL_MAX_OPTIMIZED_VERTEX_SHADER_INVARIANTS_EXT
     GL_MAX_TESS_EVALUATION_ATOMIC_COUNTER_BUFFERS
     GL_MAX_TRANSFORM_FEEDBACK_SEPARATE_ATTRIBS_NV
     GL_MAX_TRANSFORM_FEEDBACK_SEPARATE_COMPONENTS
     GL_PROGRAMMABLE_SAMPLE_LOCATION_TABLE_SIZE_NV
     GL_SPARSE_TEXTURE_FULL_ARRAY_CUBE_MIPMAPS_ARB
     GL_TEXTURE_RENDERBUFFER_DATA_STORE_BINDING_NV
     GL_UNIFORM_BLOCK_REFERENCED_BY_COMPUTE_SHADER
     glDrawElementsInstancedBaseVertexBaseInstance
     glGetNamedFramebufferAttachmentParameterivEXT
     glReplacementCodeuiColor4fNormal3fVertex3fSUN */
  /* Offset 15 gives the best switch position.  */
  switch (name[15]) {
  case 'D':
    if (memEQ(name, "GL_FRAMEBUFFER_DEFAULT_FIXED_SAMPLE_LOCATIONS", 45)) {
    /*                              ^                                    */
#ifdef GL_FRAMEBUFFER_DEFAULT_FIXED_SAMPLE_LOCATIONS
      *iv_return = GL_FRAMEBUFFER_DEFAULT_FIXED_SAMPLE_LOCATIONS;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_MAX_OPTIMIZED_VERTEX_SHADER_INVARIANTS_EXT", 45)) {
    /*                              ^                                    */
#ifdef GL_MAX_OPTIMIZED_VERTEX_SHADER_INVARIANTS_EXT
      *iv_return = GL_MAX_OPTIMIZED_VERTEX_SHADER_INVARIANTS_EXT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case 'E':
    if (memEQ(name, "GL_TEXTURE_RENDERBUFFER_DATA_STORE_BINDING_NV", 45)) {
    /*                              ^                                    */
#ifdef GL_TEXTURE_RENDERBUFFER_DATA_STORE_BINDING_NV
      *iv_return = GL_TEXTURE_RENDERBUFFER_DATA_STORE_BINDING_NV;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case 'K':
    if (memEQ(name, "GL_UNIFORM_BLOCK_REFERENCED_BY_COMPUTE_SHADER", 45)) {
    /*                              ^                                    */
#ifdef GL_UNIFORM_BLOCK_REFERENCED_BY_COMPUTE_SHADER
      *iv_return = GL_UNIFORM_BLOCK_REFERENCED_BY_COMPUTE_SHADER;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case 'L':
    if (memEQ(name, "GL_MAX_TESS_EVALUATION_ATOMIC_COUNTER_BUFFERS", 45)) {
    /*                              ^                                    */
#ifdef GL_MAX_TESS_EVALUATION_ATOMIC_COUNTER_BUFFERS
      *iv_return = GL_MAX_TESS_EVALUATION_ATOMIC_COUNTER_BUFFERS;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case 'M':
    if (memEQ(name, "GL_MAX_TRANSFORM_FEEDBACK_SEPARATE_ATTRIBS_NV", 45)) {
    /*                              ^                                    */
#ifdef GL_MAX_TRANSFORM_FEEDBACK_SEPARATE_ATTRIBS_NV
      *iv_return = GL_MAX_TRANSFORM_FEEDBACK_SEPARATE_ATTRIBS_NV;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_MAX_TRANSFORM_FEEDBACK_SEPARATE_COMPONENTS", 45)) {
    /*                              ^                                    */
#ifdef GL_MAX_TRANSFORM_FEEDBACK_SEPARATE_COMPONENTS
      *iv_return = GL_MAX_TRANSFORM_FEEDBACK_SEPARATE_COMPONENTS;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case 'N':
    if (memEQ(name, "GL_GPU_MEMORY_INFO_TOTAL_AVAILABLE_MEMORY_NVX", 45)) {
    /*                              ^                                    */
#ifdef GL_GPU_MEMORY_INFO_TOTAL_AVAILABLE_MEMORY_NVX
      *iv_return = GL_GPU_MEMORY_INFO_TOTAL_AVAILABLE_MEMORY_NVX;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case 'R':
    if (memEQ(name, "GL_SPARSE_TEXTURE_FULL_ARRAY_CUBE_MIPMAPS_ARB", 45)) {
    /*                              ^                                    */
#ifdef GL_SPARSE_TEXTURE_FULL_ARRAY_CUBE_MIPMAPS_ARB
      *iv_return = GL_SPARSE_TEXTURE_FULL_ARRAY_CUBE_MIPMAPS_ARB;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case 'S':
    if (memEQ(name, "GL_FRAMEBUFFER_SAMPLE_LOCATION_PIXEL_GRID_ARB", 45)) {
    /*                              ^                                    */
#ifdef GL_FRAMEBUFFER_SAMPLE_LOCATION_PIXEL_GRID_ARB
      *iv_return = GL_FRAMEBUFFER_SAMPLE_LOCATION_PIXEL_GRID_ARB;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case 'V':
    if (memEQ(name, "GL_MAX_COMPUTE_VARIABLE_GROUP_INVOCATIONS_ARB", 45)) {
    /*                              ^                                    */
#ifdef GL_MAX_COMPUTE_VARIABLE_GROUP_INVOCATIONS_ARB
      *iv_return = GL_MAX_COMPUTE_VARIABLE_GROUP_INVOCATIONS_ARB;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case '_':
    if (memEQ(name, "GL_PROGRAMMABLE_SAMPLE_LOCATION_TABLE_SIZE_NV", 45)) {
    /*                              ^                                    */
#ifdef GL_PROGRAMMABLE_SAMPLE_LOCATION_TABLE_SIZE_NV
      *iv_return = GL_PROGRAMMABLE_SAMPLE_LOCATION_TABLE_SIZE_NV;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case 'b':
    if (memEQ(name, "glGetNamedFramebufferAttachmentParameterivEXT", 45)) {
    /*                              ^                                    */
#ifdef glGetNamedFramebufferAttachmentParameterivEXT
      *iv_return = glGetNamedFramebufferAttachmentParameterivEXT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case 'd':
    if (memEQ(name, "glReplacementCodeuiColor4fNormal3fVertex3fSUN", 45)) {
    /*                              ^                                    */
#ifdef glReplacementCodeuiColor4fNormal3fVertex3fSUN
      *iv_return = glReplacementCodeuiColor4fNormal3fVertex3fSUN;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case 'n':
    if (memEQ(name, "glDrawElementsInstancedBaseVertexBaseInstance", 45)) {
    /*                              ^                                    */
#ifdef glDrawElementsInstancedBaseVertexBaseInstance
      *iv_return = glDrawElementsInstancedBaseVertexBaseInstance;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  }
  return PERL_constant_NOTFOUND;
}

static int
constant_46 (pTHX_ const char *name, IV *iv_return) {
  /* When generated this function returned values for the list of names given
     here.  However, subsequent manual editing may have added or removed some.
     GLEW_NV_conservative_raster_pre_snap_triangles
     GL_COMPRESSED_SIGNED_LUMINANCE_ALPHA_LATC2_EXT
     GL_EGL_GENERATE_RESET_ON_VIDEO_MEMORY_PURGE_NV
     GL_MAX_TRANSFORM_FEEDBACK_SEPARATE_ATTRIBS_EXT
     GL_OFFSET_HILO_PROJECTIVE_TEXTURE_RECTANGLE_NV
     GL_PROGRAMMABLE_SAMPLE_LOCATION_TABLE_SIZE_ARB
     GL_TESS_EVALUATION_PROGRAM_PARAMETER_BUFFER_NV
     GL_TEXTURE_COORD_ARRAY_PARALLEL_POINTERS_INTEL
     GL_UNIFORM_BLOCK_REFERENCED_BY_FRAGMENT_SHADER
     GL_UNIFORM_BLOCK_REFERENCED_BY_GEOMETRY_SHADER
     GL_UNSIGNED_INT_IMAGE_2D_MULTISAMPLE_ARRAY_EXT
     glReplacementCodeuiColor4fNormal3fVertex3fvSUN */
  /* Offset 34 gives the best switch position.  */
  switch (name[34]) {
  case 'B':
    if (memEQ(name, "GL_PROGRAMMABLE_SAMPLE_LOCATION_TABLE_SIZE_ARB", 46)) {
    /*                                                 ^                  */
#ifdef GL_PROGRAMMABLE_SAMPLE_LOCATION_TABLE_SIZE_ARB
      *iv_return = GL_PROGRAMMABLE_SAMPLE_LOCATION_TABLE_SIZE_ARB;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case 'E':
    if (memEQ(name, "GL_TESS_EVALUATION_PROGRAM_PARAMETER_BUFFER_NV", 46)) {
    /*                                                 ^                  */
#ifdef GL_TESS_EVALUATION_PROGRAM_PARAMETER_BUFFER_NV
      *iv_return = GL_TESS_EVALUATION_PROGRAM_PARAMETER_BUFFER_NV;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case 'G':
    if (memEQ(name, "GL_UNIFORM_BLOCK_REFERENCED_BY_FRAGMENT_SHADER", 46)) {
    /*                                                 ^                  */
#ifdef GL_UNIFORM_BLOCK_REFERENCED_BY_FRAGMENT_SHADER
      *iv_return = GL_UNIFORM_BLOCK_REFERENCED_BY_FRAGMENT_SHADER;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case 'H':
    if (memEQ(name, "GL_COMPRESSED_SIGNED_LUMINANCE_ALPHA_LATC2_EXT", 46)) {
    /*                                                 ^                  */
#ifdef GL_COMPRESSED_SIGNED_LUMINANCE_ALPHA_LATC2_EXT
      *iv_return = GL_COMPRESSED_SIGNED_LUMINANCE_ALPHA_LATC2_EXT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case 'I':
    if (memEQ(name, "GL_TEXTURE_COORD_ARRAY_PARALLEL_POINTERS_INTEL", 46)) {
    /*                                                 ^                  */
#ifdef GL_TEXTURE_COORD_ARRAY_PARALLEL_POINTERS_INTEL
      *iv_return = GL_TEXTURE_COORD_ARRAY_PARALLEL_POINTERS_INTEL;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case 'L':
    if (memEQ(name, "GL_UNSIGNED_INT_IMAGE_2D_MULTISAMPLE_ARRAY_EXT", 46)) {
    /*                                                 ^                  */
#ifdef GL_UNSIGNED_INT_IMAGE_2D_MULTISAMPLE_ARRAY_EXT
      *iv_return = GL_UNSIGNED_INT_IMAGE_2D_MULTISAMPLE_ARRAY_EXT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case 'M':
    if (memEQ(name, "GL_UNIFORM_BLOCK_REFERENCED_BY_GEOMETRY_SHADER", 46)) {
    /*                                                 ^                  */
#ifdef GL_UNIFORM_BLOCK_REFERENCED_BY_GEOMETRY_SHADER
      *iv_return = GL_UNIFORM_BLOCK_REFERENCED_BY_GEOMETRY_SHADER;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case 'O':
    if (memEQ(name, "GL_EGL_GENERATE_RESET_ON_VIDEO_MEMORY_PURGE_NV", 46)) {
    /*                                                 ^                  */
#ifdef GL_EGL_GENERATE_RESET_ON_VIDEO_MEMORY_PURGE_NV
      *iv_return = GL_EGL_GENERATE_RESET_ON_VIDEO_MEMORY_PURGE_NV;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case 'R':
    if (memEQ(name, "GL_OFFSET_HILO_PROJECTIVE_TEXTURE_RECTANGLE_NV", 46)) {
    /*                                                 ^                  */
#ifdef GL_OFFSET_HILO_PROJECTIVE_TEXTURE_RECTANGLE_NV
      *iv_return = GL_OFFSET_HILO_PROJECTIVE_TEXTURE_RECTANGLE_NV;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case 'V':
    if (memEQ(name, "glReplacementCodeuiColor4fNormal3fVertex3fvSUN", 46)) {
    /*                                                 ^                  */
#ifdef glReplacementCodeuiColor4fNormal3fVertex3fvSUN
      *iv_return = glReplacementCodeuiColor4fNormal3fVertex3fvSUN;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case '_':
    if (memEQ(name, "GL_MAX_TRANSFORM_FEEDBACK_SEPARATE_ATTRIBS_EXT", 46)) {
    /*                                                 ^                  */
#ifdef GL_MAX_TRANSFORM_FEEDBACK_SEPARATE_ATTRIBS_EXT
      *iv_return = GL_MAX_TRANSFORM_FEEDBACK_SEPARATE_ATTRIBS_EXT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case 'a':
    if (memEQ(name, "GLEW_NV_conservative_raster_pre_snap_triangles", 46)) {
    /*                                                 ^                  */
#ifdef GLEW_NV_conservative_raster_pre_snap_triangles
      *iv_return = GLEW_NV_conservative_raster_pre_snap_triangles;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  }
  return PERL_constant_NOTFOUND;
}

static int
constant_47 (pTHX_ const char *name, IV *iv_return) {
  /* When generated this function returned values for the list of names given
     here.  However, subsequent manual editing may have added or removed some.
     GL_ATOMIC_COUNTER_BUFFER_ACTIVE_ATOMIC_COUNTERS
     GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_CUBE_MAP_FACE
     GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_NUM_VIEWS_OVR
     GL_FRAMEBUFFER_PROGRAMMABLE_SAMPLE_LOCATIONS_NV
     GL_GPU_MEMORY_INFO_CURRENT_AVAILABLE_VIDMEM_NVX
     GL_MAX_COMBINED_TESS_CONTROL_UNIFORM_COMPONENTS
     GL_MAX_OPTIMIZED_VERTEX_SHADER_INSTRUCTIONS_EXT
     GL_OFFSET_PROJECTIVE_TEXTURE_RECTANGLE_SCALE_NV
     GL_QUADS_FOLLOW_PROVOKING_VERTEX_CONVENTION_EXT */
  /* Offset 36 gives the best switch position.  */
  switch (name[36]) {
  case 'B':
    if (memEQ(name, "GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_CUBE_MAP_FACE", 47)) {
    /*                                                   ^                 */
#ifdef GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_CUBE_MAP_FACE
      *iv_return = GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_CUBE_MAP_FACE;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case 'I':
    if (memEQ(name, "GL_ATOMIC_COUNTER_BUFFER_ACTIVE_ATOMIC_COUNTERS", 47)) {
    /*                                                   ^                 */
#ifdef GL_ATOMIC_COUNTER_BUFFER_ACTIVE_ATOMIC_COUNTERS
      *iv_return = GL_ATOMIC_COUNTER_BUFFER_ACTIVE_ATOMIC_COUNTERS;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case 'L':
    if (memEQ(name, "GL_OFFSET_PROJECTIVE_TEXTURE_RECTANGLE_SCALE_NV", 47)) {
    /*                                                   ^                 */
#ifdef GL_OFFSET_PROJECTIVE_TEXTURE_RECTANGLE_SCALE_NV
      *iv_return = GL_OFFSET_PROJECTIVE_TEXTURE_RECTANGLE_SCALE_NV;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case 'M':
    if (memEQ(name, "GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_NUM_VIEWS_OVR", 47)) {
    /*                                                   ^                 */
#ifdef GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_NUM_VIEWS_OVR
      *iv_return = GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_NUM_VIEWS_OVR;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case 'O':
    if (memEQ(name, "GL_FRAMEBUFFER_PROGRAMMABLE_SAMPLE_LOCATIONS_NV", 47)) {
    /*                                                   ^                 */
#ifdef GL_FRAMEBUFFER_PROGRAMMABLE_SAMPLE_LOCATIONS_NV
      *iv_return = GL_FRAMEBUFFER_PROGRAMMABLE_SAMPLE_LOCATIONS_NV;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case 'U':
    if (memEQ(name, "GL_MAX_OPTIMIZED_VERTEX_SHADER_INSTRUCTIONS_EXT", 47)) {
    /*                                                   ^                 */
#ifdef GL_MAX_OPTIMIZED_VERTEX_SHADER_INSTRUCTIONS_EXT
      *iv_return = GL_MAX_OPTIMIZED_VERTEX_SHADER_INSTRUCTIONS_EXT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case 'V':
    if (memEQ(name, "GL_QUADS_FOLLOW_PROVOKING_VERTEX_CONVENTION_EXT", 47)) {
    /*                                                   ^                 */
#ifdef GL_QUADS_FOLLOW_PROVOKING_VERTEX_CONVENTION_EXT
      *iv_return = GL_QUADS_FOLLOW_PROVOKING_VERTEX_CONVENTION_EXT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case '_':
    if (memEQ(name, "GL_GPU_MEMORY_INFO_CURRENT_AVAILABLE_VIDMEM_NVX", 47)) {
    /*                                                   ^                 */
#ifdef GL_GPU_MEMORY_INFO_CURRENT_AVAILABLE_VIDMEM_NVX
      *iv_return = GL_GPU_MEMORY_INFO_CURRENT_AVAILABLE_VIDMEM_NVX;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    if (memEQ(name, "GL_MAX_COMBINED_TESS_CONTROL_UNIFORM_COMPONENTS", 47)) {
    /*                                                   ^                 */
#ifdef GL_MAX_COMBINED_TESS_CONTROL_UNIFORM_COMPONENTS
      *iv_return = GL_MAX_COMBINED_TESS_CONTROL_UNIFORM_COMPONENTS;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  }
  return PERL_constant_NOTFOUND;
}

static int
constant_48 (pTHX_ const char *name, IV *iv_return) {
  /* When generated this function returned values for the list of names given
     here.  However, subsequent manual editing may have added or removed some.
     GL_FRAGMENT_LIGHT_MODEL_NORMAL_INTERPOLATION_EXT
     GL_FRAGMENT_PROGRAM_INTERPOLATION_OFFSET_BITS_NV
     GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_3D_ZOFFSET_EXT
     GL_FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT_EXT
     GL_FRAMEBUFFER_PROGRAMMABLE_SAMPLE_LOCATIONS_ARB
     GL_MAX_COMBINED_IMAGE_UNITS_AND_FRAGMENT_OUTPUTS
     GL_MAX_TRANSFORM_FEEDBACK_INTERLEAVED_COMPONENTS
     GL_MAX_TRANSFORM_FEEDBACK_SEPARATE_COMPONENTS_NV
     glNamedRenderbufferStorageMultisampleCoverageEXT
     glReplacementCodeuiTexCoord2fNormal3fVertex3fSUN */
  /* Offset 31 gives the best switch position.  */
  switch (name[31]) {
  case 'A':
    if (memEQ(name, "GL_MAX_TRANSFORM_FEEDBACK_SEPARATE_COMPONENTS_NV", 48)) {
    /*                                              ^                       */
#ifdef GL_MAX_TRANSFORM_FEEDBACK_SEPARATE_COMPONENTS_NV
      *iv_return = GL_MAX_TRANSFORM_FEEDBACK_SEPARATE_COMPONENTS_NV;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case 'I':
    if (memEQ(name, "GL_FRAGMENT_LIGHT_MODEL_NORMAL_INTERPOLATION_EXT", 48)) {
    /*                                              ^                       */
#ifdef GL_FRAGMENT_LIGHT_MODEL_NORMAL_INTERPOLATION_EXT
      *iv_return = GL_FRAGMENT_LIGHT_MODEL_NORMAL_INTERPOLATION_EXT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case 'L':
    if (memEQ(name, "GL_MAX_TRANSFORM_FEEDBACK_INTERLEAVED_COMPONENTS", 48)) {
    /*                                              ^                       */
#ifdef GL_MAX_TRANSFORM_FEEDBACK_INTERLEAVED_COMPONENTS
      *iv_return = GL_MAX_TRANSFORM_FEEDBACK_INTERLEAVED_COMPONENTS;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case 'N':
    if (memEQ(name, "GL_FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT_EXT", 48)) {
    /*                                              ^                       */
#ifdef GL_FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT_EXT
      *iv_return = GL_FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT_EXT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case 'O':
    if (memEQ(name, "GL_FRAGMENT_PROGRAM_INTERPOLATION_OFFSET_BITS_NV", 48)) {
    /*                                              ^                       */
#ifdef GL_FRAGMENT_PROGRAM_INTERPOLATION_OFFSET_BITS_NV
      *iv_return = GL_FRAGMENT_PROGRAM_INTERPOLATION_OFFSET_BITS_NV;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case 'P':
    if (memEQ(name, "GL_FRAMEBUFFER_PROGRAMMABLE_SAMPLE_LOCATIONS_ARB", 48)) {
    /*                                              ^                       */
#ifdef GL_FRAMEBUFFER_PROGRAMMABLE_SAMPLE_LOCATIONS_ARB
      *iv_return = GL_FRAMEBUFFER_PROGRAMMABLE_SAMPLE_LOCATIONS_ARB;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case 'R':
    if (memEQ(name, "GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_3D_ZOFFSET_EXT", 48)) {
    /*                                              ^                       */
#ifdef GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_3D_ZOFFSET_EXT
      *iv_return = GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_3D_ZOFFSET_EXT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case '_':
    if (memEQ(name, "GL_MAX_COMBINED_IMAGE_UNITS_AND_FRAGMENT_OUTPUTS", 48)) {
    /*                                              ^                       */
#ifdef GL_MAX_COMBINED_IMAGE_UNITS_AND_FRAGMENT_OUTPUTS
      *iv_return = GL_MAX_COMBINED_IMAGE_UNITS_AND_FRAGMENT_OUTPUTS;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case 'r':
    if (memEQ(name, "glReplacementCodeuiTexCoord2fNormal3fVertex3fSUN", 48)) {
    /*                                              ^                       */
#ifdef glReplacementCodeuiTexCoord2fNormal3fVertex3fSUN
      *iv_return = glReplacementCodeuiTexCoord2fNormal3fVertex3fSUN;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case 's':
    if (memEQ(name, "glNamedRenderbufferStorageMultisampleCoverageEXT", 48)) {
    /*                                              ^                       */
#ifdef glNamedRenderbufferStorageMultisampleCoverageEXT
      *iv_return = glNamedRenderbufferStorageMultisampleCoverageEXT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  }
  return PERL_constant_NOTFOUND;
}

static int
constant_49 (pTHX_ const char *name, IV *iv_return) {
  /* When generated this function returned values for the list of names given
     here.  However, subsequent manual editing may have added or removed some.
     GL_CONSERVATIVE_RASTER_MODE_PRE_SNAP_TRIANGLES_NV
     GL_MAX_TRANSFORM_FEEDBACK_SEPARATE_COMPONENTS_EXT
     GL_NVX_blend_equation_advanced_multi_draw_buffers
     glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN */
  /* Offset 16 gives the best switch position.  */
  switch (name[16]) {
  case 'R':
    if (memEQ(name, "GL_CONSERVATIVE_RASTER_MODE_PRE_SNAP_TRIANGLES_NV", 49)) {
    /*                               ^                                       */
#ifdef GL_CONSERVATIVE_RASTER_MODE_PRE_SNAP_TRIANGLES_NV
      *iv_return = GL_CONSERVATIVE_RASTER_MODE_PRE_SNAP_TRIANGLES_NV;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case '_':
    if (memEQ(name, "GL_MAX_TRANSFORM_FEEDBACK_SEPARATE_COMPONENTS_EXT", 49)) {
    /*                               ^                                       */
#ifdef GL_MAX_TRANSFORM_FEEDBACK_SEPARATE_COMPONENTS_EXT
      *iv_return = GL_MAX_TRANSFORM_FEEDBACK_SEPARATE_COMPONENTS_EXT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case 'a':
    if (memEQ(name, "GL_NVX_blend_equation_advanced_multi_draw_buffers", 49)) {
    /*                               ^                                       */
#ifdef GL_NVX_blend_equation_advanced_multi_draw_buffers
      *iv_return = GL_NVX_blend_equation_advanced_multi_draw_buffers;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case 'e':
    if (memEQ(name, "glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN", 49)) {
    /*                               ^                                       */
#ifdef glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN
      *iv_return = glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  }
  return PERL_constant_NOTFOUND;
}

static int
constant_50 (pTHX_ const char *name, IV *iv_return) {
  /* When generated this function returned values for the list of names given
     here.  However, subsequent manual editing may have added or removed some.
     GL_MAX_COMBINED_TESS_EVALUATION_UNIFORM_COMPONENTS
     GL_MAX_OPTIMIZED_VERTEX_SHADER_LOCAL_CONSTANTS_EXT
     GL_UNIFORM_BLOCK_REFERENCED_BY_TESS_CONTROL_SHADER */
  /* Offset 49 gives the best switch position.  */
  switch (name[49]) {
  case 'R':
    if (memEQ(name, "GL_UNIFORM_BLOCK_REFERENCED_BY_TESS_CONTROL_SHADE", 49)) {
    /*                                                                R      */
#ifdef GL_UNIFORM_BLOCK_REFERENCED_BY_TESS_CONTROL_SHADER
      *iv_return = GL_UNIFORM_BLOCK_REFERENCED_BY_TESS_CONTROL_SHADER;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case 'S':
    if (memEQ(name, "GL_MAX_COMBINED_TESS_EVALUATION_UNIFORM_COMPONENT", 49)) {
    /*                                                                S      */
#ifdef GL_MAX_COMBINED_TESS_EVALUATION_UNIFORM_COMPONENTS
      *iv_return = GL_MAX_COMBINED_TESS_EVALUATION_UNIFORM_COMPONENTS;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case 'T':
    if (memEQ(name, "GL_MAX_OPTIMIZED_VERTEX_SHADER_LOCAL_CONSTANTS_EX", 49)) {
    /*                                                                T      */
#ifdef GL_MAX_OPTIMIZED_VERTEX_SHADER_LOCAL_CONSTANTS_EXT
      *iv_return = GL_MAX_OPTIMIZED_VERTEX_SHADER_LOCAL_CONSTANTS_EXT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  }
  return PERL_constant_NOTFOUND;
}

static int
constant_51 (pTHX_ const char *name, IV *iv_return) {
  /* When generated this function returned values for the list of names given
     here.  However, subsequent manual editing may have added or removed some.
     GLEW_NVX_blend_equation_advanced_multi_draw_buffers
     GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_CUBE_MAP_FACE_EXT
     GL_MAX_TRANSFORM_FEEDBACK_INTERLEAVED_COMPONENTS_NV */
  /* Offset 3 gives the best switch position.  */
  switch (name[3]) {
  case 'F':
    if (memEQ(name, "GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_CUBE_MAP_FACE_EXT", 51)) {
    /*                  ^                                                      */
#ifdef GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_CUBE_MAP_FACE_EXT
      *iv_return = GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_CUBE_MAP_FACE_EXT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case 'M':
    if (memEQ(name, "GL_MAX_TRANSFORM_FEEDBACK_INTERLEAVED_COMPONENTS_NV", 51)) {
    /*                  ^                                                      */
#ifdef GL_MAX_TRANSFORM_FEEDBACK_INTERLEAVED_COMPONENTS_NV
      *iv_return = GL_MAX_TRANSFORM_FEEDBACK_INTERLEAVED_COMPONENTS_NV;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case 'W':
    if (memEQ(name, "GLEW_NVX_blend_equation_advanced_multi_draw_buffers", 51)) {
    /*                  ^                                                      */
#ifdef GLEW_NVX_blend_equation_advanced_multi_draw_buffers
      *iv_return = GLEW_NVX_blend_equation_advanced_multi_draw_buffers;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  }
  return PERL_constant_NOTFOUND;
}

static int
constant_52 (pTHX_ const char *name, IV *iv_return) {
  /* When generated this function returned values for the list of names given
     here.  However, subsequent manual editing may have added or removed some.
     GL_ATOMIC_COUNTER_BUFFER_REFERENCED_BY_VERTEX_SHADER
     GL_MAX_COMBINED_IMAGE_UNITS_AND_FRAGMENT_OUTPUTS_EXT
     GL_MAX_TRANSFORM_FEEDBACK_INTERLEAVED_COMPONENTS_EXT */
  /* Offset 20 gives the best switch position.  */
  switch (name[20]) {
  case 'D':
    if (memEQ(name, "GL_MAX_TRANSFORM_FEEDBACK_INTERLEAVED_COMPONENTS_EXT", 52)) {
    /*                                   ^                                      */
#ifdef GL_MAX_TRANSFORM_FEEDBACK_INTERLEAVED_COMPONENTS_EXT
      *iv_return = GL_MAX_TRANSFORM_FEEDBACK_INTERLEAVED_COMPONENTS_EXT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case 'E':
    if (memEQ(name, "GL_MAX_COMBINED_IMAGE_UNITS_AND_FRAGMENT_OUTPUTS_EXT", 52)) {
    /*                                   ^                                      */
#ifdef GL_MAX_COMBINED_IMAGE_UNITS_AND_FRAGMENT_OUTPUTS_EXT
      *iv_return = GL_MAX_COMBINED_IMAGE_UNITS_AND_FRAGMENT_OUTPUTS_EXT;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case 'F':
    if (memEQ(name, "GL_ATOMIC_COUNTER_BUFFER_REFERENCED_BY_VERTEX_SHADER", 52)) {
    /*                                   ^                                      */
#ifdef GL_ATOMIC_COUNTER_BUFFER_REFERENCED_BY_VERTEX_SHADER
      *iv_return = GL_ATOMIC_COUNTER_BUFFER_REFERENCED_BY_VERTEX_SHADER;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  }
  return PERL_constant_NOTFOUND;
}

static int
constant_53 (pTHX_ const char *name, IV *iv_return) {
  /* When generated this function returned values for the list of names given
     here.  However, subsequent manual editing may have added or removed some.
     GL_ATOMIC_COUNTER_BUFFER_REFERENCED_BY_COMPUTE_SHADER
     GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_BASE_VIEW_INDEX_OVR
     GL_UNIFORM_BLOCK_REFERENCED_BY_TESS_EVALUATION_SHADER */
  /* Offset 20 gives the best switch position.  */
  switch (name[20]) {
  case 'E':
    if (memEQ(name, "GL_UNIFORM_BLOCK_REFERENCED_BY_TESS_EVALUATION_SHADER", 53)) {
    /*                                   ^                                       */
#ifdef GL_UNIFORM_BLOCK_REFERENCED_BY_TESS_EVALUATION_SHADER
      *iv_return = GL_UNIFORM_BLOCK_REFERENCED_BY_TESS_EVALUATION_SHADER;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case 'F':
    if (memEQ(name, "GL_ATOMIC_COUNTER_BUFFER_REFERENCED_BY_COMPUTE_SHADER", 53)) {
    /*                                   ^                                       */
#ifdef GL_ATOMIC_COUNTER_BUFFER_REFERENCED_BY_COMPUTE_SHADER
      *iv_return = GL_ATOMIC_COUNTER_BUFFER_REFERENCED_BY_COMPUTE_SHADER;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case 'H':
    if (memEQ(name, "GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_BASE_VIEW_INDEX_OVR", 53)) {
    /*                                   ^                                       */
#ifdef GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_BASE_VIEW_INDEX_OVR
      *iv_return = GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_BASE_VIEW_INDEX_OVR;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  }
  return PERL_constant_NOTFOUND;
}

static int
constant_54 (pTHX_ const char *name, IV *iv_return) {
  /* When generated this function returned values for the list of names given
     here.  However, subsequent manual editing may have added or removed some.
     GL_ATOMIC_COUNTER_BUFFER_ACTIVE_ATOMIC_COUNTER_INDICES
     GL_ATOMIC_COUNTER_BUFFER_REFERENCED_BY_FRAGMENT_SHADER
     GL_ATOMIC_COUNTER_BUFFER_REFERENCED_BY_GEOMETRY_SHADER */
  /* Offset 39 gives the best switch position.  */
  switch (name[39]) {
  case 'C':
    if (memEQ(name, "GL_ATOMIC_COUNTER_BUFFER_ACTIVE_ATOMIC_COUNTER_INDICES", 54)) {
    /*                                                      ^                     */
#ifdef GL_ATOMIC_COUNTER_BUFFER_ACTIVE_ATOMIC_COUNTER_INDICES
      *iv_return = GL_ATOMIC_COUNTER_BUFFER_ACTIVE_ATOMIC_COUNTER_INDICES;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case 'F':
    if (memEQ(name, "GL_ATOMIC_COUNTER_BUFFER_REFERENCED_BY_FRAGMENT_SHADER", 54)) {
    /*                                                      ^                     */
#ifdef GL_ATOMIC_COUNTER_BUFFER_REFERENCED_BY_FRAGMENT_SHADER
      *iv_return = GL_ATOMIC_COUNTER_BUFFER_REFERENCED_BY_FRAGMENT_SHADER;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case 'G':
    if (memEQ(name, "GL_ATOMIC_COUNTER_BUFFER_REFERENCED_BY_GEOMETRY_SHADER", 54)) {
    /*                                                      ^                     */
#ifdef GL_ATOMIC_COUNTER_BUFFER_REFERENCED_BY_GEOMETRY_SHADER
      *iv_return = GL_ATOMIC_COUNTER_BUFFER_REFERENCED_BY_GEOMETRY_SHADER;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  }
  return PERL_constant_NOTFOUND;
}

static int
constant (pTHX_ const char *name, STRLEN len, IV *iv_return) {
  /* Initially switch on the length of the name.  */
  /* When generated this function returned values for the list of names given
     in this section of perl code.  Rather than manually editing these functions
     to add or remove constants, which would result in this comment and section
     of code becoming inaccurate, we recommend that you edit this section of
     code, and use it to regenerate a new set of constant functions which you
     then use to replace the originals.

     Regenerate these constant functions by feeding this entire source file to
     perl -x

#!C:\strawberry-perl-5.20.1.1-x64\perl\bin\perl.exe -w
use ExtUtils::Constant qw (constant_types C_constant XS_constant);

my $types = {map {($_, 1)} qw(IV)};
my @names = (qw(APIENTRY CALLBACK GLAPI GLAPIENTRY GLEWAPI GLEWAPIENTRY
	       GLEW_3DFX_multisample GLEW_3DFX_tbuffer
	       GLEW_3DFX_texture_compression_FXT1 GLEW_AMD_blend_minmax_factor
	       GLEW_AMD_conservative_depth GLEW_AMD_debug_output
	       GLEW_AMD_depth_clamp_separate GLEW_AMD_draw_buffers_blend
	       GLEW_AMD_gcn_shader GLEW_AMD_gpu_shader_int64
	       GLEW_AMD_interleaved_elements GLEW_AMD_multi_draw_indirect
	       GLEW_AMD_name_gen_delete GLEW_AMD_occlusion_query_event
	       GLEW_AMD_performance_monitor GLEW_AMD_pinned_memory
	       GLEW_AMD_query_buffer_object GLEW_AMD_sample_positions
	       GLEW_AMD_seamless_cubemap_per_texture
	       GLEW_AMD_shader_atomic_counter_ops
	       GLEW_AMD_shader_explicit_vertex_parameter
	       GLEW_AMD_shader_stencil_export
	       GLEW_AMD_shader_stencil_value_export
	       GLEW_AMD_shader_trinary_minmax GLEW_AMD_sparse_texture
	       GLEW_AMD_stencil_operation_extended GLEW_AMD_texture_texture4
	       GLEW_AMD_transform_feedback3_lines_triangles
	       GLEW_AMD_transform_feedback4 GLEW_AMD_vertex_shader_layer
	       GLEW_AMD_vertex_shader_tessellator
	       GLEW_AMD_vertex_shader_viewport_index GLEW_ANGLE_depth_texture
	       GLEW_ANGLE_framebuffer_blit GLEW_ANGLE_framebuffer_multisample
	       GLEW_ANGLE_instanced_arrays GLEW_ANGLE_pack_reverse_row_order
	       GLEW_ANGLE_program_binary GLEW_ANGLE_texture_compression_dxt1
	       GLEW_ANGLE_texture_compression_dxt3
	       GLEW_ANGLE_texture_compression_dxt5 GLEW_ANGLE_texture_usage
	       GLEW_ANGLE_timer_query GLEW_ANGLE_translated_shader_source
	       GLEW_APPLE_aux_depth_stencil GLEW_APPLE_client_storage
	       GLEW_APPLE_element_array GLEW_APPLE_fence
	       GLEW_APPLE_float_pixels GLEW_APPLE_flush_buffer_range
	       GLEW_APPLE_object_purgeable GLEW_APPLE_pixel_buffer
	       GLEW_APPLE_rgb_422 GLEW_APPLE_row_bytes
	       GLEW_APPLE_specular_vector GLEW_APPLE_texture_range
	       GLEW_APPLE_transform_hint GLEW_APPLE_vertex_array_object
	       GLEW_APPLE_vertex_array_range
	       GLEW_APPLE_vertex_program_evaluators GLEW_APPLE_ycbcr_422
	       GLEW_ARB_ES2_compatibility GLEW_ARB_ES3_1_compatibility
	       GLEW_ARB_ES3_2_compatibility GLEW_ARB_ES3_compatibility
	       GLEW_ARB_arrays_of_arrays GLEW_ARB_base_instance
	       GLEW_ARB_bindless_texture GLEW_ARB_blend_func_extended
	       GLEW_ARB_buffer_storage GLEW_ARB_cl_event
	       GLEW_ARB_clear_buffer_object GLEW_ARB_clear_texture
	       GLEW_ARB_clip_control GLEW_ARB_color_buffer_float
	       GLEW_ARB_compatibility GLEW_ARB_compressed_texture_pixel_storage
	       GLEW_ARB_compute_shader GLEW_ARB_compute_variable_group_size
	       GLEW_ARB_conditional_render_inverted GLEW_ARB_conservative_depth
	       GLEW_ARB_copy_buffer GLEW_ARB_copy_image GLEW_ARB_cull_distance
	       GLEW_ARB_debug_output GLEW_ARB_depth_buffer_float
	       GLEW_ARB_depth_clamp GLEW_ARB_depth_texture
	       GLEW_ARB_derivative_control GLEW_ARB_direct_state_access
	       GLEW_ARB_draw_buffers GLEW_ARB_draw_buffers_blend
	       GLEW_ARB_draw_elements_base_vertex GLEW_ARB_draw_indirect
	       GLEW_ARB_draw_instanced GLEW_ARB_enhanced_layouts
	       GLEW_ARB_explicit_attrib_location
	       GLEW_ARB_explicit_uniform_location
	       GLEW_ARB_fragment_coord_conventions
	       GLEW_ARB_fragment_layer_viewport GLEW_ARB_fragment_program
	       GLEW_ARB_fragment_program_shadow GLEW_ARB_fragment_shader
	       GLEW_ARB_fragment_shader_interlock
	       GLEW_ARB_framebuffer_no_attachments GLEW_ARB_framebuffer_object
	       GLEW_ARB_framebuffer_sRGB GLEW_ARB_geometry_shader4
	       GLEW_ARB_get_program_binary GLEW_ARB_get_texture_sub_image
	       GLEW_ARB_gl_spirv GLEW_ARB_gpu_shader5 GLEW_ARB_gpu_shader_fp64
	       GLEW_ARB_gpu_shader_int64 GLEW_ARB_half_float_pixel
	       GLEW_ARB_half_float_vertex GLEW_ARB_imaging
	       GLEW_ARB_indirect_parameters GLEW_ARB_instanced_arrays
	       GLEW_ARB_internalformat_query GLEW_ARB_internalformat_query2
	       GLEW_ARB_invalidate_subdata GLEW_ARB_map_buffer_alignment
	       GLEW_ARB_map_buffer_range GLEW_ARB_matrix_palette
	       GLEW_ARB_multi_bind GLEW_ARB_multi_draw_indirect
	       GLEW_ARB_multisample GLEW_ARB_multitexture
	       GLEW_ARB_occlusion_query GLEW_ARB_occlusion_query2
	       GLEW_ARB_parallel_shader_compile
	       GLEW_ARB_pipeline_statistics_query GLEW_ARB_pixel_buffer_object
	       GLEW_ARB_point_parameters GLEW_ARB_point_sprite
	       GLEW_ARB_post_depth_coverage GLEW_ARB_program_interface_query
	       GLEW_ARB_provoking_vertex GLEW_ARB_query_buffer_object
	       GLEW_ARB_robust_buffer_access_behavior GLEW_ARB_robustness
	       GLEW_ARB_robustness_application_isolation
	       GLEW_ARB_robustness_share_group_isolation
	       GLEW_ARB_sample_locations GLEW_ARB_sample_shading
	       GLEW_ARB_sampler_objects GLEW_ARB_seamless_cube_map
	       GLEW_ARB_seamless_cubemap_per_texture
	       GLEW_ARB_separate_shader_objects
	       GLEW_ARB_shader_atomic_counter_ops
	       GLEW_ARB_shader_atomic_counters GLEW_ARB_shader_ballot
	       GLEW_ARB_shader_bit_encoding GLEW_ARB_shader_clock
	       GLEW_ARB_shader_draw_parameters GLEW_ARB_shader_group_vote
	       GLEW_ARB_shader_image_load_store GLEW_ARB_shader_image_size
	       GLEW_ARB_shader_objects GLEW_ARB_shader_precision
	       GLEW_ARB_shader_stencil_export
	       GLEW_ARB_shader_storage_buffer_object GLEW_ARB_shader_subroutine
	       GLEW_ARB_shader_texture_image_samples
	       GLEW_ARB_shader_texture_lod GLEW_ARB_shader_viewport_layer_array
	       GLEW_ARB_shading_language_100 GLEW_ARB_shading_language_420pack
	       GLEW_ARB_shading_language_include
	       GLEW_ARB_shading_language_packing GLEW_ARB_shadow
	       GLEW_ARB_shadow_ambient GLEW_ARB_sparse_buffer
	       GLEW_ARB_sparse_texture GLEW_ARB_sparse_texture2
	       GLEW_ARB_sparse_texture_clamp GLEW_ARB_stencil_texturing
	       GLEW_ARB_sync GLEW_ARB_tessellation_shader
	       GLEW_ARB_texture_barrier GLEW_ARB_texture_border_clamp
	       GLEW_ARB_texture_buffer_object
	       GLEW_ARB_texture_buffer_object_rgb32
	       GLEW_ARB_texture_buffer_range GLEW_ARB_texture_compression
	       GLEW_ARB_texture_compression_bptc
	       GLEW_ARB_texture_compression_rgtc GLEW_ARB_texture_cube_map
	       GLEW_ARB_texture_cube_map_array GLEW_ARB_texture_env_add
	       GLEW_ARB_texture_env_combine GLEW_ARB_texture_env_crossbar
	       GLEW_ARB_texture_env_dot3 GLEW_ARB_texture_filter_minmax
	       GLEW_ARB_texture_float GLEW_ARB_texture_gather
	       GLEW_ARB_texture_mirror_clamp_to_edge
	       GLEW_ARB_texture_mirrored_repeat GLEW_ARB_texture_multisample
	       GLEW_ARB_texture_non_power_of_two GLEW_ARB_texture_query_levels
	       GLEW_ARB_texture_query_lod GLEW_ARB_texture_rectangle
	       GLEW_ARB_texture_rg GLEW_ARB_texture_rgb10_a2ui
	       GLEW_ARB_texture_stencil8 GLEW_ARB_texture_storage
	       GLEW_ARB_texture_storage_multisample GLEW_ARB_texture_swizzle
	       GLEW_ARB_texture_view GLEW_ARB_timer_query
	       GLEW_ARB_transform_feedback2 GLEW_ARB_transform_feedback3
	       GLEW_ARB_transform_feedback_instanced
	       GLEW_ARB_transform_feedback_overflow_query
	       GLEW_ARB_transpose_matrix GLEW_ARB_uniform_buffer_object
	       GLEW_ARB_vertex_array_bgra GLEW_ARB_vertex_array_object
	       GLEW_ARB_vertex_attrib_64bit GLEW_ARB_vertex_attrib_binding
	       GLEW_ARB_vertex_blend GLEW_ARB_vertex_buffer_object
	       GLEW_ARB_vertex_program GLEW_ARB_vertex_shader
	       GLEW_ARB_vertex_type_10f_11f_11f_rev
	       GLEW_ARB_vertex_type_2_10_10_10_rev GLEW_ARB_viewport_array
	       GLEW_ARB_window_pos GLEW_ATIX_point_sprites
	       GLEW_ATIX_texture_env_combine3 GLEW_ATIX_texture_env_route
	       GLEW_ATIX_vertex_shader_output_point_size GLEW_ATI_draw_buffers
	       GLEW_ATI_element_array GLEW_ATI_envmap_bumpmap
	       GLEW_ATI_fragment_shader GLEW_ATI_map_object_buffer
	       GLEW_ATI_meminfo GLEW_ATI_pn_triangles GLEW_ATI_separate_stencil
	       GLEW_ATI_shader_texture_lod GLEW_ATI_text_fragment_shader
	       GLEW_ATI_texture_compression_3dc GLEW_ATI_texture_env_combine3
	       GLEW_ATI_texture_float GLEW_ATI_texture_mirror_once
	       GLEW_ATI_vertex_array_object GLEW_ATI_vertex_attrib_array_object
	       GLEW_ATI_vertex_streams
	       GLEW_EGL_NV_robustness_video_memory_purge
	       GLEW_ERROR_GLX_VERSION_11_ONLY GLEW_ERROR_GL_VERSION_10_ONLY
	       GLEW_ERROR_NO_GL_VERSION GLEW_EXT_422_pixels GLEW_EXT_Cg_shader
	       GLEW_EXT_abgr GLEW_EXT_bgra GLEW_EXT_bindable_uniform
	       GLEW_EXT_blend_color GLEW_EXT_blend_equation_separate
	       GLEW_EXT_blend_func_separate GLEW_EXT_blend_logic_op
	       GLEW_EXT_blend_minmax GLEW_EXT_blend_subtract
	       GLEW_EXT_clip_volume_hint GLEW_EXT_cmyka GLEW_EXT_color_subtable
	       GLEW_EXT_compiled_vertex_array GLEW_EXT_convolution
	       GLEW_EXT_coordinate_frame GLEW_EXT_copy_texture
	       GLEW_EXT_cull_vertex GLEW_EXT_debug_label GLEW_EXT_debug_marker
	       GLEW_EXT_depth_bounds_test GLEW_EXT_direct_state_access
	       GLEW_EXT_draw_buffers2 GLEW_EXT_draw_instanced
	       GLEW_EXT_draw_range_elements GLEW_EXT_fog_coord
	       GLEW_EXT_fragment_lighting GLEW_EXT_framebuffer_blit
	       GLEW_EXT_framebuffer_multisample
	       GLEW_EXT_framebuffer_multisample_blit_scaled
	       GLEW_EXT_framebuffer_object GLEW_EXT_framebuffer_sRGB
	       GLEW_EXT_geometry_shader4 GLEW_EXT_gpu_program_parameters
	       GLEW_EXT_gpu_shader4 GLEW_EXT_histogram
	       GLEW_EXT_index_array_formats GLEW_EXT_index_func
	       GLEW_EXT_index_material GLEW_EXT_index_texture
	       GLEW_EXT_light_texture GLEW_EXT_misc_attribute
	       GLEW_EXT_multi_draw_arrays GLEW_EXT_multisample
	       GLEW_EXT_packed_depth_stencil GLEW_EXT_packed_float
	       GLEW_EXT_packed_pixels GLEW_EXT_paletted_texture
	       GLEW_EXT_pixel_buffer_object GLEW_EXT_pixel_transform
	       GLEW_EXT_pixel_transform_color_table GLEW_EXT_point_parameters
	       GLEW_EXT_polygon_offset GLEW_EXT_polygon_offset_clamp
	       GLEW_EXT_post_depth_coverage GLEW_EXT_provoking_vertex
	       GLEW_EXT_raster_multisample GLEW_EXT_rescale_normal
	       GLEW_EXT_scene_marker GLEW_EXT_secondary_color
	       GLEW_EXT_separate_shader_objects
	       GLEW_EXT_separate_specular_color
	       GLEW_EXT_shader_image_load_formatted
	       GLEW_EXT_shader_image_load_store GLEW_EXT_shader_integer_mix
	       GLEW_EXT_shadow_funcs GLEW_EXT_shared_texture_palette
	       GLEW_EXT_sparse_texture2 GLEW_EXT_stencil_clear_tag
	       GLEW_EXT_stencil_two_side GLEW_EXT_stencil_wrap
	       GLEW_EXT_subtexture GLEW_EXT_texture GLEW_EXT_texture3D
	       GLEW_EXT_texture_array GLEW_EXT_texture_buffer_object
	       GLEW_EXT_texture_compression_dxt1
	       GLEW_EXT_texture_compression_latc
	       GLEW_EXT_texture_compression_rgtc
	       GLEW_EXT_texture_compression_s3tc GLEW_EXT_texture_cube_map
	       GLEW_EXT_texture_edge_clamp GLEW_EXT_texture_env
	       GLEW_EXT_texture_env_add GLEW_EXT_texture_env_combine
	       GLEW_EXT_texture_env_dot3 GLEW_EXT_texture_filter_anisotropic
	       GLEW_EXT_texture_filter_minmax GLEW_EXT_texture_integer
	       GLEW_EXT_texture_lod_bias GLEW_EXT_texture_mirror_clamp
	       GLEW_EXT_texture_object GLEW_EXT_texture_perturb_normal
	       GLEW_EXT_texture_rectangle GLEW_EXT_texture_sRGB
	       GLEW_EXT_texture_sRGB_decode GLEW_EXT_texture_shared_exponent
	       GLEW_EXT_texture_snorm GLEW_EXT_texture_swizzle
	       GLEW_EXT_timer_query GLEW_EXT_transform_feedback
	       GLEW_EXT_vertex_array GLEW_EXT_vertex_array_bgra
	       GLEW_EXT_vertex_attrib_64bit GLEW_EXT_vertex_shader
	       GLEW_EXT_vertex_weighting GLEW_EXT_window_rectangles
	       GLEW_EXT_x11_sync_object GLEW_FUN_EXPORT
	       GLEW_GREMEDY_frame_terminator GLEW_GREMEDY_string_marker
	       GLEW_HP_convolution_border_modes GLEW_HP_image_transform
	       GLEW_HP_occlusion_test GLEW_HP_texture_lighting
	       GLEW_IBM_cull_vertex GLEW_IBM_multimode_draw_arrays
	       GLEW_IBM_rasterpos_clip GLEW_IBM_static_data
	       GLEW_IBM_texture_mirrored_repeat GLEW_IBM_vertex_array_lists
	       GLEW_INGR_color_clamp GLEW_INGR_interlace_read
	       GLEW_INTEL_conservative_rasterization
	       GLEW_INTEL_fragment_shader_ordering GLEW_INTEL_framebuffer_CMAA
	       GLEW_INTEL_map_texture GLEW_INTEL_parallel_arrays
	       GLEW_INTEL_performance_query GLEW_INTEL_texture_scissor
	       GLEW_KHR_blend_equation_advanced
	       GLEW_KHR_blend_equation_advanced_coherent
	       GLEW_KHR_context_flush_control GLEW_KHR_debug GLEW_KHR_no_error
	       GLEW_KHR_robust_buffer_access_behavior GLEW_KHR_robustness
	       GLEW_KHR_texture_compression_astc_hdr
	       GLEW_KHR_texture_compression_astc_ldr
	       GLEW_KHR_texture_compression_astc_sliced_3d
	       GLEW_KTX_buffer_region GLEW_MESAX_texture_stack
	       GLEW_MESA_pack_invert GLEW_MESA_resize_buffers
	       GLEW_MESA_shader_integer_functions GLEW_MESA_window_pos
	       GLEW_MESA_ycbcr_texture GLEW_NO_ERROR
	       GLEW_NVX_blend_equation_advanced_multi_draw_buffers
	       GLEW_NVX_conditional_render GLEW_NVX_gpu_memory_info
	       GLEW_NVX_linked_gpu_multicast
	       GLEW_NV_bindless_multi_draw_indirect
	       GLEW_NV_bindless_multi_draw_indirect_count
	       GLEW_NV_bindless_texture GLEW_NV_blend_equation_advanced
	       GLEW_NV_blend_equation_advanced_coherent GLEW_NV_blend_square
	       GLEW_NV_clip_space_w_scaling GLEW_NV_command_list
	       GLEW_NV_compute_program5 GLEW_NV_conditional_render
	       GLEW_NV_conservative_raster GLEW_NV_conservative_raster_dilate
	       GLEW_NV_conservative_raster_pre_snap_triangles
	       GLEW_NV_copy_depth_to_color GLEW_NV_copy_image
	       GLEW_NV_deep_texture3D GLEW_NV_depth_buffer_float
	       GLEW_NV_depth_clamp GLEW_NV_depth_range_unclamped
	       GLEW_NV_draw_texture GLEW_NV_draw_vulkan_image
	       GLEW_NV_evaluators GLEW_NV_explicit_multisample GLEW_NV_fence
	       GLEW_NV_fill_rectangle GLEW_NV_float_buffer GLEW_NV_fog_distance
	       GLEW_NV_fragment_coverage_to_color GLEW_NV_fragment_program
	       GLEW_NV_fragment_program2 GLEW_NV_fragment_program4
	       GLEW_NV_fragment_program_option
	       GLEW_NV_fragment_shader_interlock
	       GLEW_NV_framebuffer_mixed_samples
	       GLEW_NV_framebuffer_multisample_coverage
	       GLEW_NV_geometry_program4 GLEW_NV_geometry_shader4
	       GLEW_NV_geometry_shader_passthrough GLEW_NV_gpu_multicast
	       GLEW_NV_gpu_program4 GLEW_NV_gpu_program5
	       GLEW_NV_gpu_program5_mem_extended GLEW_NV_gpu_program_fp64
	       GLEW_NV_gpu_shader5 GLEW_NV_half_float
	       GLEW_NV_internalformat_sample_query GLEW_NV_light_max_exponent
	       GLEW_NV_multisample_coverage GLEW_NV_multisample_filter_hint
	       GLEW_NV_occlusion_query GLEW_NV_packed_depth_stencil
	       GLEW_NV_parameter_buffer_object GLEW_NV_parameter_buffer_object2
	       GLEW_NV_path_rendering GLEW_NV_path_rendering_shared_edge
	       GLEW_NV_pixel_data_range GLEW_NV_point_sprite
	       GLEW_NV_present_video GLEW_NV_primitive_restart
	       GLEW_NV_register_combiners GLEW_NV_register_combiners2
	       GLEW_NV_robustness_video_memory_purge GLEW_NV_sample_locations
	       GLEW_NV_sample_mask_override_coverage
	       GLEW_NV_shader_atomic_counters GLEW_NV_shader_atomic_float
	       GLEW_NV_shader_atomic_float64 GLEW_NV_shader_atomic_fp16_vector
	       GLEW_NV_shader_atomic_int64 GLEW_NV_shader_buffer_load
	       GLEW_NV_shader_storage_buffer_object GLEW_NV_shader_thread_group
	       GLEW_NV_shader_thread_shuffle GLEW_NV_stereo_view_rendering
	       GLEW_NV_tessellation_program5 GLEW_NV_texgen_emboss
	       GLEW_NV_texgen_reflection GLEW_NV_texture_barrier
	       GLEW_NV_texture_compression_vtc GLEW_NV_texture_env_combine4
	       GLEW_NV_texture_expand_normal GLEW_NV_texture_multisample
	       GLEW_NV_texture_rectangle GLEW_NV_texture_shader
	       GLEW_NV_texture_shader2 GLEW_NV_texture_shader3
	       GLEW_NV_transform_feedback GLEW_NV_transform_feedback2
	       GLEW_NV_uniform_buffer_unified_memory GLEW_NV_vdpau_interop
	       GLEW_NV_vertex_array_range GLEW_NV_vertex_array_range2
	       GLEW_NV_vertex_attrib_integer_64bit
	       GLEW_NV_vertex_buffer_unified_memory GLEW_NV_vertex_program
	       GLEW_NV_vertex_program1_1 GLEW_NV_vertex_program2
	       GLEW_NV_vertex_program2_option GLEW_NV_vertex_program3
	       GLEW_NV_vertex_program4 GLEW_NV_video_capture
	       GLEW_NV_viewport_array2 GLEW_NV_viewport_swizzle
	       GLEW_OES_byte_coordinates GLEW_OES_compressed_paletted_texture
	       GLEW_OES_read_format GLEW_OES_single_precision GLEW_OK
	       GLEW_OML_interlace GLEW_OML_resample GLEW_OML_subsample
	       GLEW_OVR_multiview GLEW_OVR_multiview2 GLEW_PGI_misc_hints
	       GLEW_PGI_vertex_hints GLEW_REGAL_ES1_0_compatibility
	       GLEW_REGAL_ES1_1_compatibility GLEW_REGAL_enable
	       GLEW_REGAL_error_string GLEW_REGAL_extension_query
	       GLEW_REGAL_log GLEW_REGAL_proc_address
	       GLEW_REND_screen_coordinates GLEW_S3_s3tc GLEW_SGIS_color_range
	       GLEW_SGIS_detail_texture GLEW_SGIS_fog_function
	       GLEW_SGIS_generate_mipmap GLEW_SGIS_multisample
	       GLEW_SGIS_pixel_texture GLEW_SGIS_point_line_texgen
	       GLEW_SGIS_sharpen_texture GLEW_SGIS_texture4D
	       GLEW_SGIS_texture_border_clamp GLEW_SGIS_texture_edge_clamp
	       GLEW_SGIS_texture_filter4 GLEW_SGIS_texture_lod
	       GLEW_SGIS_texture_select GLEW_SGIX_async
	       GLEW_SGIX_async_histogram GLEW_SGIX_async_pixel
	       GLEW_SGIX_blend_alpha_minmax GLEW_SGIX_clipmap
	       GLEW_SGIX_convolution_accuracy GLEW_SGIX_depth_texture
	       GLEW_SGIX_flush_raster GLEW_SGIX_fog_offset
	       GLEW_SGIX_fog_texture GLEW_SGIX_fragment_specular_lighting
	       GLEW_SGIX_framezoom GLEW_SGIX_interlace GLEW_SGIX_ir_instrument1
	       GLEW_SGIX_list_priority GLEW_SGIX_pixel_texture
	       GLEW_SGIX_pixel_texture_bits GLEW_SGIX_reference_plane
	       GLEW_SGIX_resample GLEW_SGIX_shadow GLEW_SGIX_shadow_ambient
	       GLEW_SGIX_sprite GLEW_SGIX_tag_sample_buffer
	       GLEW_SGIX_texture_add_env GLEW_SGIX_texture_coordinate_clamp
	       GLEW_SGIX_texture_lod_bias GLEW_SGIX_texture_multi_buffer
	       GLEW_SGIX_texture_range GLEW_SGIX_texture_scale_bias
	       GLEW_SGIX_vertex_preclip GLEW_SGIX_vertex_preclip_hint
	       GLEW_SGIX_ycrcb GLEW_SGI_color_matrix GLEW_SGI_color_table
	       GLEW_SGI_texture_color_table GLEW_SUNX_constant_data
	       GLEW_SUN_convolution_border_modes GLEW_SUN_global_alpha
	       GLEW_SUN_mesh_array GLEW_SUN_read_video_pixels
	       GLEW_SUN_slice_accum GLEW_SUN_triangle_list GLEW_SUN_vertex
	       GLEW_VAR_EXPORT GLEW_VERSION GLEW_VERSION_1_1 GLEW_VERSION_1_2
	       GLEW_VERSION_1_2_1 GLEW_VERSION_1_3 GLEW_VERSION_1_4
	       GLEW_VERSION_1_5 GLEW_VERSION_2_0 GLEW_VERSION_2_1
	       GLEW_VERSION_3_0 GLEW_VERSION_3_1 GLEW_VERSION_3_2
	       GLEW_VERSION_3_3 GLEW_VERSION_4_0 GLEW_VERSION_4_1
	       GLEW_VERSION_4_2 GLEW_VERSION_4_3 GLEW_VERSION_4_4
	       GLEW_VERSION_4_5 GLEW_VERSION_MAJOR GLEW_VERSION_MICRO
	       GLEW_VERSION_MINOR GLEW_WIN_phong_shading GLEW_WIN_specular_fog
	       GLEW_WIN_swap_hint GL_1PASS_EXT GL_1PASS_SGIS GL_2D
	       GL_2PASS_0_EXT GL_2PASS_0_SGIS GL_2PASS_1_EXT GL_2PASS_1_SGIS
	       GL_2X_BIT_ATI GL_2_BYTES GL_3D GL_3DFX_multisample
	       GL_3DFX_tbuffer GL_3DFX_texture_compression_FXT1 GL_3D_COLOR
	       GL_3D_COLOR_TEXTURE GL_3_BYTES GL_422_AVERAGE_EXT GL_422_EXT
	       GL_422_REV_AVERAGE_EXT GL_422_REV_EXT GL_4D_COLOR_TEXTURE
	       GL_4PASS_0_EXT GL_4PASS_0_SGIS GL_4PASS_1_EXT GL_4PASS_1_SGIS
	       GL_4PASS_2_EXT GL_4PASS_2_SGIS GL_4PASS_3_EXT GL_4PASS_3_SGIS
	       GL_4X_BIT_ATI GL_4_BYTES GL_8X_BIT_ATI GL_ABGR_EXT GL_ACCUM
	       GL_ACCUM_ADJACENT_PAIRS_NV GL_ACCUM_ALPHA_BITS
	       GL_ACCUM_BLUE_BITS GL_ACCUM_BUFFER_BIT GL_ACCUM_CLEAR_VALUE
	       GL_ACCUM_GREEN_BITS GL_ACCUM_RED_BITS
	       GL_ACTIVE_ATOMIC_COUNTER_BUFFERS GL_ACTIVE_ATTRIBUTES
	       GL_ACTIVE_ATTRIBUTE_MAX_LENGTH GL_ACTIVE_PROGRAM
	       GL_ACTIVE_PROGRAM_EXT GL_ACTIVE_RESOURCES
	       GL_ACTIVE_STENCIL_FACE_EXT GL_ACTIVE_SUBROUTINES
	       GL_ACTIVE_SUBROUTINE_MAX_LENGTH GL_ACTIVE_SUBROUTINE_UNIFORMS
	       GL_ACTIVE_SUBROUTINE_UNIFORM_LOCATIONS
	       GL_ACTIVE_SUBROUTINE_UNIFORM_MAX_LENGTH GL_ACTIVE_TEXTURE
	       GL_ACTIVE_TEXTURE_ARB GL_ACTIVE_UNIFORMS
	       GL_ACTIVE_UNIFORM_BLOCKS GL_ACTIVE_UNIFORM_BLOCK_MAX_NAME_LENGTH
	       GL_ACTIVE_UNIFORM_MAX_LENGTH GL_ACTIVE_VARIABLES
	       GL_ACTIVE_VARYINGS_NV GL_ACTIVE_VARYING_MAX_LENGTH_NV
	       GL_ACTIVE_VERTEX_UNITS_ARB GL_ADD GL_ADD_ATI GL_ADD_SIGNED
	       GL_ADD_SIGNED_ARB GL_ADD_SIGNED_EXT GL_ADJACENT_PAIRS_NV
	       GL_AFFINE_2D_NV GL_AFFINE_3D_NV GL_ALIASED_LINE_WIDTH_RANGE
	       GL_ALIASED_POINT_SIZE_RANGE GL_ALLOW_DRAW_FRG_HINT_PGI
	       GL_ALLOW_DRAW_MEM_HINT_PGI GL_ALLOW_DRAW_OBJ_HINT_PGI
	       GL_ALLOW_DRAW_WIN_HINT_PGI GL_ALL_ATTRIB_BITS
	       GL_ALL_BARRIER_BITS GL_ALL_BARRIER_BITS_EXT GL_ALL_COMPLETED_NV
	       GL_ALL_SHADER_BITS GL_ALL_STATIC_DATA_IBM GL_ALPHA GL_ALPHA12
	       GL_ALPHA12_EXT GL_ALPHA16 GL_ALPHA16F_ARB GL_ALPHA16I_EXT
	       GL_ALPHA16UI_EXT GL_ALPHA16_EXT GL_ALPHA16_EXTENDED_RANGE_SGIX
	       GL_ALPHA16_SIGNED_SGIX GL_ALPHA16_SNORM GL_ALPHA32F_ARB
	       GL_ALPHA32I_EXT GL_ALPHA32UI_EXT GL_ALPHA4 GL_ALPHA4_EXT
	       GL_ALPHA8 GL_ALPHA8I_EXT GL_ALPHA8UI_EXT GL_ALPHA8_EXT
	       GL_ALPHA8_SNORM GL_ALPHA_BIAS GL_ALPHA_BITS
	       GL_ALPHA_EXTENDED_RANGE_SGIX GL_ALPHA_FLOAT16_APPLE
	       GL_ALPHA_FLOAT16_ATI GL_ALPHA_FLOAT32_APPLE GL_ALPHA_FLOAT32_ATI
	       GL_ALPHA_INTEGER GL_ALPHA_INTEGER_EXT GL_ALPHA_MAX_CLAMP_INGR
	       GL_ALPHA_MAX_SGIX GL_ALPHA_MIN_CLAMP_INGR GL_ALPHA_MIN_SGIX
	       GL_ALPHA_REF_COMMAND_NV GL_ALPHA_SCALE GL_ALPHA_SIGNED_SGIX
	       GL_ALPHA_SNORM GL_ALPHA_TEST GL_ALPHA_TEST_FUNC
	       GL_ALPHA_TEST_REF GL_ALREADY_SIGNALED GL_ALWAYS
	       GL_ALWAYS_FAST_HINT_PGI GL_ALWAYS_SOFT_HINT_PGI GL_AMBIENT
	       GL_AMBIENT_AND_DIFFUSE GL_AMD_blend_minmax_factor
	       GL_AMD_conservative_depth GL_AMD_debug_output
	       GL_AMD_depth_clamp_separate GL_AMD_draw_buffers_blend
	       GL_AMD_gcn_shader GL_AMD_gpu_shader_int64
	       GL_AMD_interleaved_elements GL_AMD_multi_draw_indirect
	       GL_AMD_name_gen_delete GL_AMD_occlusion_query_event
	       GL_AMD_performance_monitor GL_AMD_pinned_memory
	       GL_AMD_query_buffer_object GL_AMD_sample_positions
	       GL_AMD_seamless_cubemap_per_texture
	       GL_AMD_shader_atomic_counter_ops
	       GL_AMD_shader_explicit_vertex_parameter
	       GL_AMD_shader_stencil_export GL_AMD_shader_stencil_value_export
	       GL_AMD_shader_trinary_minmax GL_AMD_sparse_texture
	       GL_AMD_stencil_operation_extended GL_AMD_texture_texture4
	       GL_AMD_transform_feedback3_lines_triangles
	       GL_AMD_transform_feedback4 GL_AMD_vertex_shader_layer
	       GL_AMD_vertex_shader_tessellator
	       GL_AMD_vertex_shader_viewport_index GL_AND GL_AND_INVERTED
	       GL_AND_REVERSE GL_ANGLE_depth_texture GL_ANGLE_framebuffer_blit
	       GL_ANGLE_framebuffer_multisample GL_ANGLE_instanced_arrays
	       GL_ANGLE_pack_reverse_row_order GL_ANGLE_program_binary
	       GL_ANGLE_texture_compression_dxt1
	       GL_ANGLE_texture_compression_dxt3
	       GL_ANGLE_texture_compression_dxt5 GL_ANGLE_texture_usage
	       GL_ANGLE_timer_query GL_ANGLE_translated_shader_source
	       GL_ANY_SAMPLES_PASSED GL_ANY_SAMPLES_PASSED_CONSERVATIVE
	       GL_APPLE_aux_depth_stencil GL_APPLE_client_storage
	       GL_APPLE_element_array GL_APPLE_fence GL_APPLE_float_pixels
	       GL_APPLE_flush_buffer_range GL_APPLE_object_purgeable
	       GL_APPLE_pixel_buffer GL_APPLE_rgb_422 GL_APPLE_row_bytes
	       GL_APPLE_specular_vector GL_APPLE_texture_range
	       GL_APPLE_transform_hint GL_APPLE_vertex_array_object
	       GL_APPLE_vertex_array_range GL_APPLE_vertex_program_evaluators
	       GL_APPLE_ycbcr_422 GL_ARB_ES2_compatibility
	       GL_ARB_ES3_1_compatibility GL_ARB_ES3_2_compatibility
	       GL_ARB_ES3_compatibility GL_ARB_arrays_of_arrays
	       GL_ARB_base_instance GL_ARB_bindless_texture
	       GL_ARB_blend_func_extended GL_ARB_buffer_storage GL_ARB_cl_event
	       GL_ARB_clear_buffer_object GL_ARB_clear_texture
	       GL_ARB_clip_control GL_ARB_color_buffer_float
	       GL_ARB_compatibility GL_ARB_compressed_texture_pixel_storage
	       GL_ARB_compute_shader GL_ARB_compute_variable_group_size
	       GL_ARB_conditional_render_inverted GL_ARB_conservative_depth
	       GL_ARB_copy_buffer GL_ARB_copy_image GL_ARB_cull_distance
	       GL_ARB_debug_output GL_ARB_depth_buffer_float GL_ARB_depth_clamp
	       GL_ARB_depth_texture GL_ARB_derivative_control
	       GL_ARB_direct_state_access GL_ARB_draw_buffers
	       GL_ARB_draw_buffers_blend GL_ARB_draw_elements_base_vertex
	       GL_ARB_draw_indirect GL_ARB_draw_instanced
	       GL_ARB_enhanced_layouts GL_ARB_explicit_attrib_location
	       GL_ARB_explicit_uniform_location
	       GL_ARB_fragment_coord_conventions GL_ARB_fragment_layer_viewport
	       GL_ARB_fragment_program GL_ARB_fragment_program_shadow
	       GL_ARB_fragment_shader GL_ARB_fragment_shader_interlock
	       GL_ARB_framebuffer_no_attachments GL_ARB_framebuffer_object
	       GL_ARB_framebuffer_sRGB GL_ARB_geometry_shader4
	       GL_ARB_get_program_binary GL_ARB_get_texture_sub_image
	       GL_ARB_gl_spirv GL_ARB_gpu_shader5 GL_ARB_gpu_shader_fp64
	       GL_ARB_gpu_shader_int64 GL_ARB_half_float_pixel
	       GL_ARB_half_float_vertex GL_ARB_imaging
	       GL_ARB_indirect_parameters GL_ARB_instanced_arrays
	       GL_ARB_internalformat_query GL_ARB_internalformat_query2
	       GL_ARB_invalidate_subdata GL_ARB_map_buffer_alignment
	       GL_ARB_map_buffer_range GL_ARB_matrix_palette GL_ARB_multi_bind
	       GL_ARB_multi_draw_indirect GL_ARB_multisample
	       GL_ARB_multitexture GL_ARB_occlusion_query
	       GL_ARB_occlusion_query2 GL_ARB_parallel_shader_compile
	       GL_ARB_pipeline_statistics_query GL_ARB_pixel_buffer_object
	       GL_ARB_point_parameters GL_ARB_point_sprite
	       GL_ARB_post_depth_coverage GL_ARB_program_interface_query
	       GL_ARB_provoking_vertex GL_ARB_query_buffer_object
	       GL_ARB_robust_buffer_access_behavior GL_ARB_robustness
	       GL_ARB_robustness_application_isolation
	       GL_ARB_robustness_share_group_isolation GL_ARB_sample_locations
	       GL_ARB_sample_shading GL_ARB_sampler_objects
	       GL_ARB_seamless_cube_map GL_ARB_seamless_cubemap_per_texture
	       GL_ARB_separate_shader_objects GL_ARB_shader_atomic_counter_ops
	       GL_ARB_shader_atomic_counters GL_ARB_shader_ballot
	       GL_ARB_shader_bit_encoding GL_ARB_shader_clock
	       GL_ARB_shader_draw_parameters GL_ARB_shader_group_vote
	       GL_ARB_shader_image_load_store GL_ARB_shader_image_size
	       GL_ARB_shader_objects GL_ARB_shader_precision
	       GL_ARB_shader_stencil_export GL_ARB_shader_storage_buffer_object
	       GL_ARB_shader_subroutine GL_ARB_shader_texture_image_samples
	       GL_ARB_shader_texture_lod GL_ARB_shader_viewport_layer_array
	       GL_ARB_shading_language_100 GL_ARB_shading_language_420pack
	       GL_ARB_shading_language_include GL_ARB_shading_language_packing
	       GL_ARB_shadow GL_ARB_shadow_ambient GL_ARB_sparse_buffer
	       GL_ARB_sparse_texture GL_ARB_sparse_texture2
	       GL_ARB_sparse_texture_clamp GL_ARB_stencil_texturing GL_ARB_sync
	       GL_ARB_tessellation_shader GL_ARB_texture_barrier
	       GL_ARB_texture_border_clamp GL_ARB_texture_buffer_object
	       GL_ARB_texture_buffer_object_rgb32 GL_ARB_texture_buffer_range
	       GL_ARB_texture_compression GL_ARB_texture_compression_bptc
	       GL_ARB_texture_compression_rgtc GL_ARB_texture_cube_map
	       GL_ARB_texture_cube_map_array GL_ARB_texture_env_add
	       GL_ARB_texture_env_combine GL_ARB_texture_env_crossbar
	       GL_ARB_texture_env_dot3 GL_ARB_texture_filter_minmax
	       GL_ARB_texture_float GL_ARB_texture_gather
	       GL_ARB_texture_mirror_clamp_to_edge
	       GL_ARB_texture_mirrored_repeat GL_ARB_texture_multisample
	       GL_ARB_texture_non_power_of_two GL_ARB_texture_query_levels
	       GL_ARB_texture_query_lod GL_ARB_texture_rectangle
	       GL_ARB_texture_rg GL_ARB_texture_rgb10_a2ui
	       GL_ARB_texture_stencil8 GL_ARB_texture_storage
	       GL_ARB_texture_storage_multisample GL_ARB_texture_swizzle
	       GL_ARB_texture_view GL_ARB_timer_query
	       GL_ARB_transform_feedback2 GL_ARB_transform_feedback3
	       GL_ARB_transform_feedback_instanced
	       GL_ARB_transform_feedback_overflow_query GL_ARB_transpose_matrix
	       GL_ARB_uniform_buffer_object GL_ARB_vertex_array_bgra
	       GL_ARB_vertex_array_object GL_ARB_vertex_attrib_64bit
	       GL_ARB_vertex_attrib_binding GL_ARB_vertex_blend
	       GL_ARB_vertex_buffer_object GL_ARB_vertex_program
	       GL_ARB_vertex_shader GL_ARB_vertex_type_10f_11f_11f_rev
	       GL_ARB_vertex_type_2_10_10_10_rev GL_ARB_viewport_array
	       GL_ARB_window_pos GL_ARC_TO_NV GL_ARRAY_BUFFER
	       GL_ARRAY_BUFFER_ARB GL_ARRAY_BUFFER_BINDING
	       GL_ARRAY_BUFFER_BINDING_ARB GL_ARRAY_ELEMENT_LOCK_COUNT_EXT
	       GL_ARRAY_ELEMENT_LOCK_FIRST_EXT GL_ARRAY_OBJECT_BUFFER_ATI
	       GL_ARRAY_OBJECT_OFFSET_ATI GL_ARRAY_SIZE GL_ARRAY_STRIDE
	       GL_ASYNC_DRAW_PIXELS_SGIX GL_ASYNC_HISTOGRAM_SGIX
	       GL_ASYNC_MARKER_SGIX GL_ASYNC_READ_PIXELS_SGIX
	       GL_ASYNC_TEX_IMAGE_SGIX GL_ATIX_point_sprites
	       GL_ATIX_texture_env_combine3 GL_ATIX_texture_env_route
	       GL_ATIX_vertex_shader_output_point_size GL_ATI_draw_buffers
	       GL_ATI_element_array GL_ATI_envmap_bumpmap
	       GL_ATI_fragment_shader GL_ATI_map_object_buffer GL_ATI_meminfo
	       GL_ATI_pn_triangles GL_ATI_separate_stencil
	       GL_ATI_shader_texture_lod GL_ATI_text_fragment_shader
	       GL_ATI_texture_compression_3dc GL_ATI_texture_env_combine3
	       GL_ATI_texture_float GL_ATI_texture_mirror_once
	       GL_ATI_vertex_array_object GL_ATI_vertex_attrib_array_object
	       GL_ATI_vertex_streams GL_ATOMIC_COUNTER_BARRIER_BIT
	       GL_ATOMIC_COUNTER_BARRIER_BIT_EXT GL_ATOMIC_COUNTER_BUFFER
	       GL_ATOMIC_COUNTER_BUFFER_ACTIVE_ATOMIC_COUNTERS
	       GL_ATOMIC_COUNTER_BUFFER_ACTIVE_ATOMIC_COUNTER_INDICES
	       GL_ATOMIC_COUNTER_BUFFER_BINDING
	       GL_ATOMIC_COUNTER_BUFFER_DATA_SIZE
	       GL_ATOMIC_COUNTER_BUFFER_INDEX
	       GL_ATOMIC_COUNTER_BUFFER_REFERENCED_BY_COMPUTE_SHADER
	       GL_ATOMIC_COUNTER_BUFFER_REFERENCED_BY_FRAGMENT_SHADER
	       GL_ATOMIC_COUNTER_BUFFER_REFERENCED_BY_GEOMETRY_SHADER
	       GL_ATOMIC_COUNTER_BUFFER_REFERENCED_BY_TESS_CONTROL_SHADER
	       GL_ATOMIC_COUNTER_BUFFER_REFERENCED_BY_TESS_EVALUATION_SHADER
	       GL_ATOMIC_COUNTER_BUFFER_REFERENCED_BY_VERTEX_SHADER
	       GL_ATOMIC_COUNTER_BUFFER_SIZE GL_ATOMIC_COUNTER_BUFFER_START
	       GL_ATTACHED_SHADERS GL_ATTENUATION_EXT
	       GL_ATTRIBUTE_ADDRESS_COMMAND_NV GL_ATTRIB_ARRAY_POINTER_NV
	       GL_ATTRIB_ARRAY_SIZE_NV GL_ATTRIB_ARRAY_STRIDE_NV
	       GL_ATTRIB_ARRAY_TYPE_NV GL_ATTRIB_STACK_DEPTH
	       GL_AUTO_GENERATE_MIPMAP GL_AUTO_NORMAL GL_AUX0 GL_AUX1 GL_AUX2
	       GL_AUX3 GL_AUX_BUFFERS GL_AUX_DEPTH_STENCIL_APPLE GL_AVERAGE_EXT
	       GL_BACK GL_BACK_LEFT GL_BACK_NORMALS_HINT_PGI
	       GL_BACK_PRIMARY_COLOR_NV GL_BACK_RIGHT
	       GL_BACK_SECONDARY_COLOR_NV GL_BEVEL_NV GL_BGR GL_BGRA
	       GL_BGRA_EXT GL_BGRA_INTEGER GL_BGRA_INTEGER_EXT GL_BGR_EXT
	       GL_BGR_INTEGER GL_BGR_INTEGER_EXT GL_BIAS_BIT_ATI
	       GL_BIAS_BY_NEGATIVE_ONE_HALF_NV GL_BINORMAL_ARRAY_EXT
	       GL_BINORMAL_ARRAY_POINTER_EXT GL_BINORMAL_ARRAY_STRIDE_EXT
	       GL_BINORMAL_ARRAY_TYPE_EXT GL_BITMAP GL_BITMAP_TOKEN GL_BLEND
	       GL_BLEND_ADVANCED_COHERENT_KHR GL_BLEND_ADVANCED_COHERENT_NV
	       GL_BLEND_COLOR GL_BLEND_COLOR_COMMAND_NV GL_BLEND_COLOR_EXT
	       GL_BLEND_DST GL_BLEND_DST_ALPHA GL_BLEND_DST_ALPHA_EXT
	       GL_BLEND_DST_RGB GL_BLEND_DST_RGB_EXT GL_BLEND_EQUATION
	       GL_BLEND_EQUATION_ALPHA GL_BLEND_EQUATION_ALPHA_EXT
	       GL_BLEND_EQUATION_EXT GL_BLEND_EQUATION_RGB
	       GL_BLEND_EQUATION_RGB_EXT GL_BLEND_OVERLAP_NV
	       GL_BLEND_PREMULTIPLIED_SRC_NV GL_BLEND_SRC GL_BLEND_SRC_ALPHA
	       GL_BLEND_SRC_ALPHA_EXT GL_BLEND_SRC_RGB GL_BLEND_SRC_RGB_EXT
	       GL_BLOCK_INDEX GL_BLUE GL_BLUE_BIAS GL_BLUE_BITS GL_BLUE_BIT_ATI
	       GL_BLUE_INTEGER GL_BLUE_INTEGER_EXT GL_BLUE_MAX_CLAMP_INGR
	       GL_BLUE_MIN_CLAMP_INGR GL_BLUE_NV GL_BLUE_SCALE GL_BOLD_BIT_NV
	       GL_BOOL GL_BOOL_ARB GL_BOOL_VEC2 GL_BOOL_VEC2_ARB GL_BOOL_VEC3
	       GL_BOOL_VEC3_ARB GL_BOOL_VEC4 GL_BOOL_VEC4_ARB
	       GL_BOUNDING_BOX_NV GL_BOUNDING_BOX_OF_BOUNDING_BOXES_NV
	       GL_BUFFER GL_BUFFER_ACCESS GL_BUFFER_ACCESS_ARB
	       GL_BUFFER_ACCESS_FLAGS GL_BUFFER_BINDING GL_BUFFER_DATA_SIZE
	       GL_BUFFER_FLUSHING_UNMAP_APPLE GL_BUFFER_GPU_ADDRESS_NV
	       GL_BUFFER_IMMUTABLE_STORAGE GL_BUFFER_MAPPED
	       GL_BUFFER_MAPPED_ARB GL_BUFFER_MAP_LENGTH GL_BUFFER_MAP_OFFSET
	       GL_BUFFER_MAP_POINTER GL_BUFFER_MAP_POINTER_ARB
	       GL_BUFFER_OBJECT_APPLE GL_BUFFER_OBJECT_EXT
	       GL_BUFFER_SERIALIZED_MODIFY_APPLE GL_BUFFER_SIZE
	       GL_BUFFER_SIZE_ARB GL_BUFFER_STORAGE_FLAGS
	       GL_BUFFER_UPDATE_BARRIER_BIT GL_BUFFER_UPDATE_BARRIER_BIT_EXT
	       GL_BUFFER_USAGE GL_BUFFER_USAGE_ARB GL_BUFFER_VARIABLE
	       GL_BUMP_ENVMAP_ATI GL_BUMP_NUM_TEX_UNITS_ATI
	       GL_BUMP_ROT_MATRIX_ATI GL_BUMP_ROT_MATRIX_SIZE_ATI
	       GL_BUMP_TARGET_ATI GL_BUMP_TEX_UNITS_ATI GL_BYTE GL_C3F_V3F
	       GL_C4F_N3F_V3F GL_C4UB_V2F GL_C4UB_V3F GL_CACHE_REGAL
	       GL_CAVEAT_SUPPORT GL_CCW GL_CG_FRAGMENT_SHADER_EXT
	       GL_CG_VERTEX_SHADER_EXT GL_CIRCULAR_CCW_ARC_TO_NV
	       GL_CIRCULAR_CW_ARC_TO_NV GL_CIRCULAR_TANGENT_ARC_TO_NV GL_CLAMP
	       GL_CLAMP_FRAGMENT_COLOR GL_CLAMP_FRAGMENT_COLOR_ARB
	       GL_CLAMP_READ_COLOR GL_CLAMP_READ_COLOR_ARB GL_CLAMP_TO_BORDER
	       GL_CLAMP_TO_BORDER_ARB GL_CLAMP_TO_BORDER_SGIS GL_CLAMP_TO_EDGE
	       GL_CLAMP_TO_EDGE_EXT GL_CLAMP_TO_EDGE_SGIS GL_CLAMP_VERTEX_COLOR
	       GL_CLAMP_VERTEX_COLOR_ARB GL_CLEAR GL_CLEAR_BUFFER
	       GL_CLEAR_TEXTURE GL_CLIENT_ACTIVE_TEXTURE
	       GL_CLIENT_ACTIVE_TEXTURE_ARB GL_CLIENT_ALL_ATTRIB_BITS
	       GL_CLIENT_ATTRIB_STACK_DEPTH GL_CLIENT_MAPPED_BUFFER_BARRIER_BIT
	       GL_CLIENT_PIXEL_STORE_BIT GL_CLIENT_STORAGE_BIT
	       GL_CLIENT_VERTEX_ARRAY_BIT GL_CLIPPING_INPUT_PRIMITIVES_ARB
	       GL_CLIPPING_OUTPUT_PRIMITIVES_ARB GL_CLIP_DEPTH_MODE
	       GL_CLIP_DISTANCE0 GL_CLIP_DISTANCE1 GL_CLIP_DISTANCE2
	       GL_CLIP_DISTANCE3 GL_CLIP_DISTANCE4 GL_CLIP_DISTANCE5
	       GL_CLIP_DISTANCE_NV GL_CLIP_FAR_HINT_PGI GL_CLIP_NEAR_HINT_PGI
	       GL_CLIP_ORIGIN GL_CLIP_PLANE0 GL_CLIP_PLANE1 GL_CLIP_PLANE2
	       GL_CLIP_PLANE3 GL_CLIP_PLANE4 GL_CLIP_PLANE5
	       GL_CLIP_VOLUME_CLIPPING_HINT_EXT GL_CLOSE_PATH_NV GL_CMYKA_EXT
	       GL_CMYK_EXT GL_CND0_ATI GL_CND_ATI GL_CODE_REGAL GL_COEFF
	       GL_COLOR GL_COLOR3_BIT_PGI GL_COLOR4_BIT_PGI GL_COLORBURN_KHR
	       GL_COLORBURN_NV GL_COLORDODGE_KHR GL_COLORDODGE_NV
	       GL_COLOR_ALPHA_PAIRING_ATI GL_COLOR_ARRAY
	       GL_COLOR_ARRAY_ADDRESS_NV GL_COLOR_ARRAY_BUFFER_BINDING
	       GL_COLOR_ARRAY_BUFFER_BINDING_ARB GL_COLOR_ARRAY_COUNT_EXT
	       GL_COLOR_ARRAY_EXT GL_COLOR_ARRAY_LENGTH_NV
	       GL_COLOR_ARRAY_LIST_IBM GL_COLOR_ARRAY_LIST_STRIDE_IBM
	       GL_COLOR_ARRAY_PARALLEL_POINTERS_INTEL GL_COLOR_ARRAY_POINTER
	       GL_COLOR_ARRAY_POINTER_EXT GL_COLOR_ARRAY_SIZE
	       GL_COLOR_ARRAY_SIZE_EXT GL_COLOR_ARRAY_STRIDE
	       GL_COLOR_ARRAY_STRIDE_EXT GL_COLOR_ARRAY_TYPE
	       GL_COLOR_ARRAY_TYPE_EXT GL_COLOR_ATTACHMENT0
	       GL_COLOR_ATTACHMENT0_EXT GL_COLOR_ATTACHMENT1
	       GL_COLOR_ATTACHMENT10 GL_COLOR_ATTACHMENT10_EXT
	       GL_COLOR_ATTACHMENT11 GL_COLOR_ATTACHMENT11_EXT
	       GL_COLOR_ATTACHMENT12 GL_COLOR_ATTACHMENT12_EXT
	       GL_COLOR_ATTACHMENT13 GL_COLOR_ATTACHMENT13_EXT
	       GL_COLOR_ATTACHMENT14 GL_COLOR_ATTACHMENT14_EXT
	       GL_COLOR_ATTACHMENT15 GL_COLOR_ATTACHMENT15_EXT
	       GL_COLOR_ATTACHMENT1_EXT GL_COLOR_ATTACHMENT2
	       GL_COLOR_ATTACHMENT2_EXT GL_COLOR_ATTACHMENT3
	       GL_COLOR_ATTACHMENT3_EXT GL_COLOR_ATTACHMENT4
	       GL_COLOR_ATTACHMENT4_EXT GL_COLOR_ATTACHMENT5
	       GL_COLOR_ATTACHMENT5_EXT GL_COLOR_ATTACHMENT6
	       GL_COLOR_ATTACHMENT6_EXT GL_COLOR_ATTACHMENT7
	       GL_COLOR_ATTACHMENT7_EXT GL_COLOR_ATTACHMENT8
	       GL_COLOR_ATTACHMENT8_EXT GL_COLOR_ATTACHMENT9
	       GL_COLOR_ATTACHMENT9_EXT GL_COLOR_BUFFER_BIT
	       GL_COLOR_CLEAR_VALUE GL_COLOR_COMPONENTS GL_COLOR_ENCODING
	       GL_COLOR_FLOAT_APPLE GL_COLOR_INDEX GL_COLOR_INDEX12_EXT
	       GL_COLOR_INDEX16_EXT GL_COLOR_INDEX1_EXT GL_COLOR_INDEX2_EXT
	       GL_COLOR_INDEX4_EXT GL_COLOR_INDEX8_EXT GL_COLOR_INDEXES
	       GL_COLOR_LOGIC_OP GL_COLOR_MATERIAL GL_COLOR_MATERIAL_FACE
	       GL_COLOR_MATERIAL_PARAMETER GL_COLOR_MATRIX GL_COLOR_MATRIX_SGI
	       GL_COLOR_MATRIX_STACK_DEPTH GL_COLOR_MATRIX_STACK_DEPTH_SGI
	       GL_COLOR_RENDERABLE GL_COLOR_SAMPLES_NV GL_COLOR_SUM
	       GL_COLOR_SUM_ARB GL_COLOR_SUM_CLAMP_NV GL_COLOR_SUM_EXT
	       GL_COLOR_TABLE GL_COLOR_TABLE_ALPHA_SIZE
	       GL_COLOR_TABLE_ALPHA_SIZE_EXT GL_COLOR_TABLE_ALPHA_SIZE_SGI
	       GL_COLOR_TABLE_BIAS GL_COLOR_TABLE_BIAS_SGI
	       GL_COLOR_TABLE_BLUE_SIZE GL_COLOR_TABLE_BLUE_SIZE_EXT
	       GL_COLOR_TABLE_BLUE_SIZE_SGI GL_COLOR_TABLE_FORMAT
	       GL_COLOR_TABLE_FORMAT_EXT GL_COLOR_TABLE_FORMAT_SGI
	       GL_COLOR_TABLE_GREEN_SIZE GL_COLOR_TABLE_GREEN_SIZE_EXT
	       GL_COLOR_TABLE_GREEN_SIZE_SGI GL_COLOR_TABLE_INTENSITY_SIZE
	       GL_COLOR_TABLE_INTENSITY_SIZE_EXT
	       GL_COLOR_TABLE_INTENSITY_SIZE_SGI GL_COLOR_TABLE_LUMINANCE_SIZE
	       GL_COLOR_TABLE_LUMINANCE_SIZE_EXT
	       GL_COLOR_TABLE_LUMINANCE_SIZE_SGI GL_COLOR_TABLE_RED_SIZE
	       GL_COLOR_TABLE_RED_SIZE_EXT GL_COLOR_TABLE_RED_SIZE_SGI
	       GL_COLOR_TABLE_SCALE GL_COLOR_TABLE_SCALE_SGI GL_COLOR_TABLE_SGI
	       GL_COLOR_TABLE_WIDTH GL_COLOR_TABLE_WIDTH_EXT
	       GL_COLOR_TABLE_WIDTH_SGI GL_COLOR_WRITEMASK GL_COMBINE
	       GL_COMBINE4_NV GL_COMBINER0_NV GL_COMBINER1_NV GL_COMBINER2_NV
	       GL_COMBINER3_NV GL_COMBINER4_NV GL_COMBINER5_NV GL_COMBINER6_NV
	       GL_COMBINER7_NV GL_COMBINER_AB_DOT_PRODUCT_NV
	       GL_COMBINER_AB_OUTPUT_NV GL_COMBINER_BIAS_NV
	       GL_COMBINER_CD_DOT_PRODUCT_NV GL_COMBINER_CD_OUTPUT_NV
	       GL_COMBINER_COMPONENT_USAGE_NV GL_COMBINER_INPUT_NV
	       GL_COMBINER_MAPPING_NV GL_COMBINER_MUX_SUM_NV
	       GL_COMBINER_SCALE_NV GL_COMBINER_SUM_OUTPUT_NV GL_COMBINE_ALPHA
	       GL_COMBINE_ALPHA_ARB GL_COMBINE_ALPHA_EXT GL_COMBINE_ARB
	       GL_COMBINE_EXT GL_COMBINE_RGB GL_COMBINE_RGB_ARB
	       GL_COMBINE_RGB_EXT GL_COMMAND_BARRIER_BIT
	       GL_COMMAND_BARRIER_BIT_EXT GL_COMPARE_REF_DEPTH_TO_TEXTURE_EXT
	       GL_COMPARE_REF_TO_TEXTURE GL_COMPARE_R_TO_TEXTURE
	       GL_COMPARE_R_TO_TEXTURE_ARB GL_COMPATIBLE_SUBROUTINES GL_COMPILE
	       GL_COMPILE_AND_EXECUTE GL_COMPILE_STATUS
	       GL_COMPLETION_STATUS_ARB GL_COMPRESSED_ALPHA
	       GL_COMPRESSED_ALPHA_ARB GL_COMPRESSED_INTENSITY
	       GL_COMPRESSED_INTENSITY_ARB GL_COMPRESSED_LUMINANCE
	       GL_COMPRESSED_LUMINANCE_ALPHA
	       GL_COMPRESSED_LUMINANCE_ALPHA_3DC_ATI
	       GL_COMPRESSED_LUMINANCE_ALPHA_ARB
	       GL_COMPRESSED_LUMINANCE_ALPHA_LATC2_EXT
	       GL_COMPRESSED_LUMINANCE_ARB GL_COMPRESSED_LUMINANCE_LATC1_EXT
	       GL_COMPRESSED_R11_EAC GL_COMPRESSED_RED
	       GL_COMPRESSED_RED_GREEN_RGTC2_EXT GL_COMPRESSED_RED_RGTC1
	       GL_COMPRESSED_RED_RGTC1_EXT GL_COMPRESSED_RG
	       GL_COMPRESSED_RG11_EAC GL_COMPRESSED_RGB GL_COMPRESSED_RGB8_ETC2
	       GL_COMPRESSED_RGB8_PUNCHTHROUGH_ALPHA1_ETC2 GL_COMPRESSED_RGBA
	       GL_COMPRESSED_RGBA8_ETC2_EAC GL_COMPRESSED_RGBA_ARB
	       GL_COMPRESSED_RGBA_ASTC_10x10_KHR
	       GL_COMPRESSED_RGBA_ASTC_10x5_KHR
	       GL_COMPRESSED_RGBA_ASTC_10x6_KHR
	       GL_COMPRESSED_RGBA_ASTC_10x8_KHR
	       GL_COMPRESSED_RGBA_ASTC_12x10_KHR
	       GL_COMPRESSED_RGBA_ASTC_12x12_KHR
	       GL_COMPRESSED_RGBA_ASTC_4x4_KHR GL_COMPRESSED_RGBA_ASTC_5x4_KHR
	       GL_COMPRESSED_RGBA_ASTC_5x5_KHR GL_COMPRESSED_RGBA_ASTC_6x5_KHR
	       GL_COMPRESSED_RGBA_ASTC_6x6_KHR GL_COMPRESSED_RGBA_ASTC_8x5_KHR
	       GL_COMPRESSED_RGBA_ASTC_8x6_KHR GL_COMPRESSED_RGBA_ASTC_8x8_KHR
	       GL_COMPRESSED_RGBA_BPTC_UNORM GL_COMPRESSED_RGBA_BPTC_UNORM_ARB
	       GL_COMPRESSED_RGBA_FXT1_3DFX GL_COMPRESSED_RGBA_S3TC_DXT1_ANGLE
	       GL_COMPRESSED_RGBA_S3TC_DXT1_EXT
	       GL_COMPRESSED_RGBA_S3TC_DXT3_ANGLE
	       GL_COMPRESSED_RGBA_S3TC_DXT3_EXT
	       GL_COMPRESSED_RGBA_S3TC_DXT5_ANGLE
	       GL_COMPRESSED_RGBA_S3TC_DXT5_EXT GL_COMPRESSED_RGB_ARB
	       GL_COMPRESSED_RGB_BPTC_SIGNED_FLOAT
	       GL_COMPRESSED_RGB_BPTC_SIGNED_FLOAT_ARB
	       GL_COMPRESSED_RGB_BPTC_UNSIGNED_FLOAT
	       GL_COMPRESSED_RGB_BPTC_UNSIGNED_FLOAT_ARB
	       GL_COMPRESSED_RGB_FXT1_3DFX GL_COMPRESSED_RGB_S3TC_DXT1_ANGLE
	       GL_COMPRESSED_RGB_S3TC_DXT1_EXT GL_COMPRESSED_RG_RGTC2
	       GL_COMPRESSED_SIGNED_LUMINANCE_ALPHA_LATC2_EXT
	       GL_COMPRESSED_SIGNED_LUMINANCE_LATC1_EXT
	       GL_COMPRESSED_SIGNED_R11_EAC
	       GL_COMPRESSED_SIGNED_RED_GREEN_RGTC2_EXT
	       GL_COMPRESSED_SIGNED_RED_RGTC1
	       GL_COMPRESSED_SIGNED_RED_RGTC1_EXT GL_COMPRESSED_SIGNED_RG11_EAC
	       GL_COMPRESSED_SIGNED_RG_RGTC2 GL_COMPRESSED_SLUMINANCE
	       GL_COMPRESSED_SLUMINANCE_ALPHA
	       GL_COMPRESSED_SLUMINANCE_ALPHA_EXT GL_COMPRESSED_SLUMINANCE_EXT
	       GL_COMPRESSED_SRGB GL_COMPRESSED_SRGB8_ALPHA8_ASTC_10x10_KHR
	       GL_COMPRESSED_SRGB8_ALPHA8_ASTC_10x5_KHR
	       GL_COMPRESSED_SRGB8_ALPHA8_ASTC_10x6_KHR
	       GL_COMPRESSED_SRGB8_ALPHA8_ASTC_10x8_KHR
	       GL_COMPRESSED_SRGB8_ALPHA8_ASTC_12x10_KHR
	       GL_COMPRESSED_SRGB8_ALPHA8_ASTC_12x12_KHR
	       GL_COMPRESSED_SRGB8_ALPHA8_ASTC_4x4_KHR
	       GL_COMPRESSED_SRGB8_ALPHA8_ASTC_5x4_KHR
	       GL_COMPRESSED_SRGB8_ALPHA8_ASTC_5x5_KHR
	       GL_COMPRESSED_SRGB8_ALPHA8_ASTC_6x5_KHR
	       GL_COMPRESSED_SRGB8_ALPHA8_ASTC_6x6_KHR
	       GL_COMPRESSED_SRGB8_ALPHA8_ASTC_8x5_KHR
	       GL_COMPRESSED_SRGB8_ALPHA8_ASTC_8x6_KHR
	       GL_COMPRESSED_SRGB8_ALPHA8_ASTC_8x8_KHR
	       GL_COMPRESSED_SRGB8_ALPHA8_ETC2_EAC GL_COMPRESSED_SRGB8_ETC2
	       GL_COMPRESSED_SRGB8_PUNCHTHROUGH_ALPHA1_ETC2
	       GL_COMPRESSED_SRGB_ALPHA GL_COMPRESSED_SRGB_ALPHA_BPTC_UNORM
	       GL_COMPRESSED_SRGB_ALPHA_BPTC_UNORM_ARB
	       GL_COMPRESSED_SRGB_ALPHA_EXT
	       GL_COMPRESSED_SRGB_ALPHA_S3TC_DXT1_EXT
	       GL_COMPRESSED_SRGB_ALPHA_S3TC_DXT3_EXT
	       GL_COMPRESSED_SRGB_ALPHA_S3TC_DXT5_EXT GL_COMPRESSED_SRGB_EXT
	       GL_COMPRESSED_SRGB_S3TC_DXT1_EXT GL_COMPRESSED_TEXTURE_FORMATS
	       GL_COMPRESSED_TEXTURE_FORMATS_ARB GL_COMPUTE_PROGRAM_NV
	       GL_COMPUTE_PROGRAM_PARAMETER_BUFFER_NV GL_COMPUTE_SHADER
	       GL_COMPUTE_SHADER_BIT GL_COMPUTE_SHADER_INVOCATIONS_ARB
	       GL_COMPUTE_SUBROUTINE GL_COMPUTE_SUBROUTINE_UNIFORM
	       GL_COMPUTE_TEXTURE GL_COMPUTE_WORK_GROUP_SIZE GL_COMP_BIT_ATI
	       GL_CONDITION_SATISFIED GL_CONFORMANT_NV GL_CONIC_CURVE_TO_NV
	       GL_CONJOINT_NV GL_CONSERVATIVE_RASTERIZATION_INTEL
	       GL_CONSERVATIVE_RASTERIZATION_NV
	       GL_CONSERVATIVE_RASTER_DILATE_GRANULARITY_NV
	       GL_CONSERVATIVE_RASTER_DILATE_NV
	       GL_CONSERVATIVE_RASTER_DILATE_RANGE_NV
	       GL_CONSERVATIVE_RASTER_MODE_NV
	       GL_CONSERVATIVE_RASTER_MODE_POST_SNAP_NV
	       GL_CONSERVATIVE_RASTER_MODE_PRE_SNAP_TRIANGLES_NV
	       GL_CONSERVE_MEMORY_HINT_PGI GL_CONSTANT GL_CONSTANT_ALPHA
	       GL_CONSTANT_ALPHA_EXT GL_CONSTANT_ARB GL_CONSTANT_ATTENUATION
	       GL_CONSTANT_BORDER GL_CONSTANT_COLOR GL_CONSTANT_COLOR0_NV
	       GL_CONSTANT_COLOR1_NV GL_CONSTANT_COLOR_EXT GL_CONSTANT_EXT
	       GL_CONST_EYE_NV GL_CONTEXT_COMPATIBILITY_PROFILE_BIT
	       GL_CONTEXT_CORE_PROFILE_BIT GL_CONTEXT_FLAGS
	       GL_CONTEXT_FLAG_DEBUG_BIT GL_CONTEXT_FLAG_FORWARD_COMPATIBLE_BIT
	       GL_CONTEXT_FLAG_NO_ERROR_BIT_KHR
	       GL_CONTEXT_FLAG_ROBUST_ACCESS_BIT
	       GL_CONTEXT_FLAG_ROBUST_ACCESS_BIT_ARB GL_CONTEXT_LOST
	       GL_CONTEXT_PROFILE_MASK GL_CONTEXT_RELEASE_BEHAVIOR
	       GL_CONTEXT_RELEASE_BEHAVIOR_FLUSH GL_CONTEXT_ROBUST_ACCESS
	       GL_CONTINUOUS_AMD GL_CONTRAST_NV GL_CONVEX_HULL_NV
	       GL_CONVOLUTION_1D GL_CONVOLUTION_1D_EXT GL_CONVOLUTION_2D
	       GL_CONVOLUTION_2D_EXT GL_CONVOLUTION_BORDER_COLOR
	       GL_CONVOLUTION_BORDER_MODE GL_CONVOLUTION_BORDER_MODE_EXT
	       GL_CONVOLUTION_FILTER_BIAS GL_CONVOLUTION_FILTER_BIAS_EXT
	       GL_CONVOLUTION_FILTER_SCALE GL_CONVOLUTION_FILTER_SCALE_EXT
	       GL_CONVOLUTION_FORMAT GL_CONVOLUTION_FORMAT_EXT
	       GL_CONVOLUTION_HEIGHT GL_CONVOLUTION_HEIGHT_EXT
	       GL_CONVOLUTION_HINT_SGIX GL_CONVOLUTION_WIDTH
	       GL_CONVOLUTION_WIDTH_EXT GL_CON_0_ATI GL_CON_1_ATI GL_CON_2_ATI
	       GL_CON_3_ATI GL_CON_4_ATI GL_CON_5_ATI GL_CON_6_ATI GL_CON_7_ATI
	       GL_COORD_REPLACE GL_COORD_REPLACE_ARB GL_COORD_REPLACE_NV
	       GL_COPY GL_COPY_INVERTED GL_COPY_PIXEL_TOKEN GL_COPY_READ_BUFFER
	       GL_COPY_READ_BUFFER_BINDING GL_COPY_WRITE_BUFFER
	       GL_COPY_WRITE_BUFFER_BINDING GL_COUNTER_RANGE_AMD
	       GL_COUNTER_TYPE_AMD GL_COUNT_DOWN_NV GL_COUNT_UP_NV
	       GL_COVERAGE_MODULATION_NV GL_COVERAGE_MODULATION_TABLE_NV
	       GL_COVERAGE_MODULATION_TABLE_SIZE_NV GL_CUBIC_CURVE_TO_NV
	       GL_CUBIC_EXT GL_CULL_FACE GL_CULL_FACE_MODE GL_CULL_FRAGMENT_NV
	       GL_CULL_MODES_NV GL_CULL_VERTEX_EXT
	       GL_CULL_VERTEX_EYE_POSITION_EXT GL_CULL_VERTEX_IBM
	       GL_CULL_VERTEX_OBJECT_POSITION_EXT GL_CURRENT_ATTRIB_NV
	       GL_CURRENT_BINORMAL_EXT GL_CURRENT_BIT GL_CURRENT_COLOR
	       GL_CURRENT_FOG_COORD GL_CURRENT_FOG_COORDINATE
	       GL_CURRENT_FOG_COORDINATE_EXT GL_CURRENT_INDEX
	       GL_CURRENT_MATRIX_ARB GL_CURRENT_MATRIX_INDEX_ARB
	       GL_CURRENT_MATRIX_NV GL_CURRENT_MATRIX_STACK_DEPTH_ARB
	       GL_CURRENT_MATRIX_STACK_DEPTH_NV GL_CURRENT_NORMAL
	       GL_CURRENT_OCCLUSION_QUERY_ID_NV GL_CURRENT_PALETTE_MATRIX_ARB
	       GL_CURRENT_PROGRAM GL_CURRENT_QUERY GL_CURRENT_QUERY_ANGLE
	       GL_CURRENT_QUERY_ARB GL_CURRENT_RASTER_COLOR
	       GL_CURRENT_RASTER_DISTANCE GL_CURRENT_RASTER_INDEX
	       GL_CURRENT_RASTER_NORMAL_EXT GL_CURRENT_RASTER_POSITION
	       GL_CURRENT_RASTER_POSITION_VALID
	       GL_CURRENT_RASTER_SECONDARY_COLOR
	       GL_CURRENT_RASTER_TEXTURE_COORDS
	       GL_CURRENT_SAMPLE_COUNT_QUERY_NV GL_CURRENT_SECONDARY_COLOR
	       GL_CURRENT_SECONDARY_COLOR_EXT GL_CURRENT_TANGENT_EXT
	       GL_CURRENT_TEXTURE_COORDS GL_CURRENT_TIME_NV
	       GL_CURRENT_VERTEX_ATTRIB GL_CURRENT_VERTEX_ATTRIB_ARB
	       GL_CURRENT_VERTEX_EXT GL_CURRENT_VERTEX_WEIGHT_EXT
	       GL_CURRENT_WEIGHT_ARB GL_CW GL_DARKEN_KHR GL_DARKEN_NV
	       GL_DATA_BUFFER_AMD GL_DEBUG_CALLBACK_FUNCTION
	       GL_DEBUG_CALLBACK_FUNCTION_ARB GL_DEBUG_CALLBACK_USER_PARAM
	       GL_DEBUG_CALLBACK_USER_PARAM_ARB GL_DEBUG_CATEGORY_API_ERROR_AMD
	       GL_DEBUG_CATEGORY_APPLICATION_AMD
	       GL_DEBUG_CATEGORY_DEPRECATION_AMD GL_DEBUG_CATEGORY_OTHER_AMD
	       GL_DEBUG_CATEGORY_PERFORMANCE_AMD
	       GL_DEBUG_CATEGORY_SHADER_COMPILER_AMD
	       GL_DEBUG_CATEGORY_UNDEFINED_BEHAVIOR_AMD
	       GL_DEBUG_CATEGORY_WINDOW_SYSTEM_AMD GL_DEBUG_GROUP_STACK_DEPTH
	       GL_DEBUG_LOGGED_MESSAGES GL_DEBUG_LOGGED_MESSAGES_AMD
	       GL_DEBUG_LOGGED_MESSAGES_ARB GL_DEBUG_NEXT_LOGGED_MESSAGE_LENGTH
	       GL_DEBUG_NEXT_LOGGED_MESSAGE_LENGTH_ARB GL_DEBUG_OUTPUT
	       GL_DEBUG_OUTPUT_SYNCHRONOUS GL_DEBUG_OUTPUT_SYNCHRONOUS_ARB
	       GL_DEBUG_REGAL GL_DEBUG_SEVERITY_HIGH GL_DEBUG_SEVERITY_HIGH_AMD
	       GL_DEBUG_SEVERITY_HIGH_ARB GL_DEBUG_SEVERITY_LOW
	       GL_DEBUG_SEVERITY_LOW_AMD GL_DEBUG_SEVERITY_LOW_ARB
	       GL_DEBUG_SEVERITY_MEDIUM GL_DEBUG_SEVERITY_MEDIUM_AMD
	       GL_DEBUG_SEVERITY_MEDIUM_ARB GL_DEBUG_SEVERITY_NOTIFICATION
	       GL_DEBUG_SOURCE_API GL_DEBUG_SOURCE_API_ARB
	       GL_DEBUG_SOURCE_APPLICATION GL_DEBUG_SOURCE_APPLICATION_ARB
	       GL_DEBUG_SOURCE_OTHER GL_DEBUG_SOURCE_OTHER_ARB
	       GL_DEBUG_SOURCE_SHADER_COMPILER
	       GL_DEBUG_SOURCE_SHADER_COMPILER_ARB GL_DEBUG_SOURCE_THIRD_PARTY
	       GL_DEBUG_SOURCE_THIRD_PARTY_ARB GL_DEBUG_SOURCE_WINDOW_SYSTEM
	       GL_DEBUG_SOURCE_WINDOW_SYSTEM_ARB
	       GL_DEBUG_TYPE_DEPRECATED_BEHAVIOR
	       GL_DEBUG_TYPE_DEPRECATED_BEHAVIOR_ARB GL_DEBUG_TYPE_ERROR
	       GL_DEBUG_TYPE_ERROR_ARB GL_DEBUG_TYPE_MARKER GL_DEBUG_TYPE_OTHER
	       GL_DEBUG_TYPE_OTHER_ARB GL_DEBUG_TYPE_PERFORMANCE
	       GL_DEBUG_TYPE_PERFORMANCE_ARB GL_DEBUG_TYPE_POP_GROUP
	       GL_DEBUG_TYPE_PORTABILITY GL_DEBUG_TYPE_PORTABILITY_ARB
	       GL_DEBUG_TYPE_PUSH_GROUP GL_DEBUG_TYPE_UNDEFINED_BEHAVIOR
	       GL_DEBUG_TYPE_UNDEFINED_BEHAVIOR_ARB GL_DECAL GL_DECODE_EXT
	       GL_DECR GL_DECR_WRAP GL_DECR_WRAP_EXT GL_DELETE_STATUS
	       GL_DEPENDENT_AR_TEXTURE_2D_NV GL_DEPENDENT_GB_TEXTURE_2D_NV
	       GL_DEPENDENT_HILO_TEXTURE_2D_NV GL_DEPENDENT_RGB_TEXTURE_3D_NV
	       GL_DEPENDENT_RGB_TEXTURE_CUBE_MAP_NV GL_DEPTH
	       GL_DEPTH24_STENCIL8 GL_DEPTH24_STENCIL8_EXT GL_DEPTH32F_STENCIL8
	       GL_DEPTH32F_STENCIL8_NV GL_DEPTH_ATTACHMENT
	       GL_DEPTH_ATTACHMENT_EXT GL_DEPTH_BIAS GL_DEPTH_BITS
	       GL_DEPTH_BOUNDS_EXT GL_DEPTH_BOUNDS_TEST_EXT GL_DEPTH_BUFFER
	       GL_DEPTH_BUFFER_BIT GL_DEPTH_BUFFER_FLOAT_MODE_NV GL_DEPTH_CLAMP
	       GL_DEPTH_CLAMP_FAR_AMD GL_DEPTH_CLAMP_NEAR_AMD GL_DEPTH_CLAMP_NV
	       GL_DEPTH_CLEAR_VALUE GL_DEPTH_COMPONENT GL_DEPTH_COMPONENT16
	       GL_DEPTH_COMPONENT16_ARB GL_DEPTH_COMPONENT16_SGIX
	       GL_DEPTH_COMPONENT24 GL_DEPTH_COMPONENT24_ARB
	       GL_DEPTH_COMPONENT24_SGIX GL_DEPTH_COMPONENT32
	       GL_DEPTH_COMPONENT32F GL_DEPTH_COMPONENT32F_NV
	       GL_DEPTH_COMPONENT32_ARB GL_DEPTH_COMPONENT32_SGIX
	       GL_DEPTH_COMPONENTS GL_DEPTH_FUNC GL_DEPTH_RANGE
	       GL_DEPTH_RENDERABLE GL_DEPTH_SAMPLES_NV GL_DEPTH_SCALE
	       GL_DEPTH_STENCIL GL_DEPTH_STENCIL_ATTACHMENT
	       GL_DEPTH_STENCIL_EXT GL_DEPTH_STENCIL_NV
	       GL_DEPTH_STENCIL_TEXTURE_MODE GL_DEPTH_STENCIL_TO_BGRA_NV
	       GL_DEPTH_STENCIL_TO_RGBA_NV GL_DEPTH_TEST GL_DEPTH_TEXTURE_MODE
	       GL_DEPTH_TEXTURE_MODE_ARB GL_DEPTH_WRITEMASK GL_DIFFERENCE_KHR
	       GL_DIFFERENCE_NV GL_DIFFUSE GL_DISCARD_ATI GL_DISCARD_NV
	       GL_DISCRETE_AMD GL_DISJOINT_NV GL_DISPATCH_INDIRECT_BUFFER
	       GL_DISPATCH_INDIRECT_BUFFER_BINDING GL_DISPLAY_LIST
	       GL_DISTANCE_ATTENUATION_EXT GL_DITHER GL_DOMAIN GL_DONT_CARE
	       GL_DOT2_ADD_ATI GL_DOT3_ATI GL_DOT3_RGB GL_DOT3_RGBA
	       GL_DOT3_RGBA_ARB GL_DOT3_RGBA_EXT GL_DOT3_RGB_ARB
	       GL_DOT3_RGB_EXT GL_DOT4_ATI
	       GL_DOT_PRODUCT_AFFINE_DEPTH_REPLACE_NV
	       GL_DOT_PRODUCT_CONST_EYE_REFLECT_CUBE_MAP_NV
	       GL_DOT_PRODUCT_DEPTH_REPLACE_NV
	       GL_DOT_PRODUCT_DIFFUSE_CUBE_MAP_NV GL_DOT_PRODUCT_NV
	       GL_DOT_PRODUCT_PASS_THROUGH_NV
	       GL_DOT_PRODUCT_REFLECT_CUBE_MAP_NV GL_DOT_PRODUCT_TEXTURE_1D_NV
	       GL_DOT_PRODUCT_TEXTURE_2D_NV GL_DOT_PRODUCT_TEXTURE_3D_NV
	       GL_DOT_PRODUCT_TEXTURE_CUBE_MAP_NV
	       GL_DOT_PRODUCT_TEXTURE_RECTANGLE_NV GL_DOUBLE GL_DOUBLEBUFFER
	       GL_DOUBLE_EXT GL_DOUBLE_MAT2 GL_DOUBLE_MAT2_EXT GL_DOUBLE_MAT2x3
	       GL_DOUBLE_MAT2x3_EXT GL_DOUBLE_MAT2x4 GL_DOUBLE_MAT2x4_EXT
	       GL_DOUBLE_MAT3 GL_DOUBLE_MAT3_EXT GL_DOUBLE_MAT3x2
	       GL_DOUBLE_MAT3x2_EXT GL_DOUBLE_MAT3x4 GL_DOUBLE_MAT3x4_EXT
	       GL_DOUBLE_MAT4 GL_DOUBLE_MAT4_EXT GL_DOUBLE_MAT4x2
	       GL_DOUBLE_MAT4x2_EXT GL_DOUBLE_MAT4x3 GL_DOUBLE_MAT4x3_EXT
	       GL_DOUBLE_VEC2 GL_DOUBLE_VEC2_EXT GL_DOUBLE_VEC3
	       GL_DOUBLE_VEC3_EXT GL_DOUBLE_VEC4 GL_DOUBLE_VEC4_EXT
	       GL_DRAW_ARRAYS_COMMAND_NV GL_DRAW_ARRAYS_INSTANCED_COMMAND_NV
	       GL_DRAW_ARRAYS_STRIP_COMMAND_NV GL_DRAW_BUFFER GL_DRAW_BUFFER0
	       GL_DRAW_BUFFER0_ARB GL_DRAW_BUFFER0_ATI GL_DRAW_BUFFER1
	       GL_DRAW_BUFFER10 GL_DRAW_BUFFER10_ARB GL_DRAW_BUFFER10_ATI
	       GL_DRAW_BUFFER11 GL_DRAW_BUFFER11_ARB GL_DRAW_BUFFER11_ATI
	       GL_DRAW_BUFFER12 GL_DRAW_BUFFER12_ARB GL_DRAW_BUFFER12_ATI
	       GL_DRAW_BUFFER13 GL_DRAW_BUFFER13_ARB GL_DRAW_BUFFER13_ATI
	       GL_DRAW_BUFFER14 GL_DRAW_BUFFER14_ARB GL_DRAW_BUFFER14_ATI
	       GL_DRAW_BUFFER15 GL_DRAW_BUFFER15_ARB GL_DRAW_BUFFER15_ATI
	       GL_DRAW_BUFFER1_ARB GL_DRAW_BUFFER1_ATI GL_DRAW_BUFFER2
	       GL_DRAW_BUFFER2_ARB GL_DRAW_BUFFER2_ATI GL_DRAW_BUFFER3
	       GL_DRAW_BUFFER3_ARB GL_DRAW_BUFFER3_ATI GL_DRAW_BUFFER4
	       GL_DRAW_BUFFER4_ARB GL_DRAW_BUFFER4_ATI GL_DRAW_BUFFER5
	       GL_DRAW_BUFFER5_ARB GL_DRAW_BUFFER5_ATI GL_DRAW_BUFFER6
	       GL_DRAW_BUFFER6_ARB GL_DRAW_BUFFER6_ATI GL_DRAW_BUFFER7
	       GL_DRAW_BUFFER7_ARB GL_DRAW_BUFFER7_ATI GL_DRAW_BUFFER8
	       GL_DRAW_BUFFER8_ARB GL_DRAW_BUFFER8_ATI GL_DRAW_BUFFER9
	       GL_DRAW_BUFFER9_ARB GL_DRAW_BUFFER9_ATI
	       GL_DRAW_ELEMENTS_COMMAND_NV
	       GL_DRAW_ELEMENTS_INSTANCED_COMMAND_NV
	       GL_DRAW_ELEMENTS_STRIP_COMMAND_NV GL_DRAW_FRAMEBUFFER
	       GL_DRAW_FRAMEBUFFER_ANGLE GL_DRAW_FRAMEBUFFER_BINDING
	       GL_DRAW_FRAMEBUFFER_BINDING_ANGLE
	       GL_DRAW_FRAMEBUFFER_BINDING_EXT GL_DRAW_FRAMEBUFFER_EXT
	       GL_DRAW_INDIRECT_ADDRESS_NV GL_DRAW_INDIRECT_BUFFER
	       GL_DRAW_INDIRECT_BUFFER_BINDING GL_DRAW_INDIRECT_LENGTH_NV
	       GL_DRAW_INDIRECT_UNIFIED_NV GL_DRAW_PIXELS_APPLE
	       GL_DRAW_PIXEL_TOKEN GL_DRIVER_REGAL GL_DSDT8_MAG8_INTENSITY8_NV
	       GL_DSDT8_MAG8_NV GL_DSDT8_NV GL_DSDT_MAG_INTENSITY_NV
	       GL_DSDT_MAG_NV GL_DSDT_MAG_VIB_NV GL_DSDT_NV GL_DST_ALPHA
	       GL_DST_ATOP_NV GL_DST_COLOR GL_DST_IN_NV GL_DST_NV GL_DST_OUT_NV
	       GL_DST_OVER_NV GL_DS_BIAS_NV GL_DS_SCALE_NV GL_DT_BIAS_NV
	       GL_DT_SCALE_NV GL_DU8DV8_ATI GL_DUDV_ATI
	       GL_DUP_FIRST_CUBIC_CURVE_TO_NV GL_DUP_LAST_CUBIC_CURVE_TO_NV
	       GL_DYNAMIC_ATI GL_DYNAMIC_COPY GL_DYNAMIC_COPY_ARB
	       GL_DYNAMIC_DRAW GL_DYNAMIC_DRAW_ARB GL_DYNAMIC_READ
	       GL_DYNAMIC_READ_ARB GL_DYNAMIC_STORAGE_BIT GL_EDGEFLAG_BIT_PGI
	       GL_EDGE_FLAG GL_EDGE_FLAG_ARRAY GL_EDGE_FLAG_ARRAY_ADDRESS_NV
	       GL_EDGE_FLAG_ARRAY_BUFFER_BINDING
	       GL_EDGE_FLAG_ARRAY_BUFFER_BINDING_ARB
	       GL_EDGE_FLAG_ARRAY_COUNT_EXT GL_EDGE_FLAG_ARRAY_EXT
	       GL_EDGE_FLAG_ARRAY_LENGTH_NV GL_EDGE_FLAG_ARRAY_LIST_IBM
	       GL_EDGE_FLAG_ARRAY_LIST_STRIDE_IBM GL_EDGE_FLAG_ARRAY_POINTER
	       GL_EDGE_FLAG_ARRAY_POINTER_EXT GL_EDGE_FLAG_ARRAY_STRIDE
	       GL_EDGE_FLAG_ARRAY_STRIDE_EXT GL_EFFECTIVE_RASTER_SAMPLES_EXT
	       GL_EGL_GENERATE_RESET_ON_VIDEO_MEMORY_PURGE_NV
	       GL_EGL_NV_robustness_video_memory_purge GL_EIGHTH_BIT_ATI
	       GL_ELEMENT_ADDRESS_COMMAND_NV GL_ELEMENT_ARRAY_ADDRESS_NV
	       GL_ELEMENT_ARRAY_APPLE GL_ELEMENT_ARRAY_ATI
	       GL_ELEMENT_ARRAY_BARRIER_BIT GL_ELEMENT_ARRAY_BARRIER_BIT_EXT
	       GL_ELEMENT_ARRAY_BUFFER GL_ELEMENT_ARRAY_BUFFER_ARB
	       GL_ELEMENT_ARRAY_BUFFER_BINDING
	       GL_ELEMENT_ARRAY_BUFFER_BINDING_ARB GL_ELEMENT_ARRAY_LENGTH_NV
	       GL_ELEMENT_ARRAY_POINTER_APPLE GL_ELEMENT_ARRAY_POINTER_ATI
	       GL_ELEMENT_ARRAY_TYPE_APPLE GL_ELEMENT_ARRAY_TYPE_ATI
	       GL_ELEMENT_ARRAY_UNIFIED_NV GL_EMBOSS_CONSTANT_NV
	       GL_EMBOSS_LIGHT_NV GL_EMBOSS_MAP_NV GL_EMISSION
	       GL_EMULATION_REGAL GL_ENABLE_BIT GL_EQUAL GL_EQUIV
	       GL_ERROR_REGAL GL_EVAL_2D_NV GL_EVAL_BIT
	       GL_EVAL_FRACTIONAL_TESSELLATION_NV GL_EVAL_TRIANGULAR_2D_NV
	       GL_EVAL_VERTEX_ATTRIB0_NV GL_EVAL_VERTEX_ATTRIB10_NV
	       GL_EVAL_VERTEX_ATTRIB11_NV GL_EVAL_VERTEX_ATTRIB12_NV
	       GL_EVAL_VERTEX_ATTRIB13_NV GL_EVAL_VERTEX_ATTRIB14_NV
	       GL_EVAL_VERTEX_ATTRIB15_NV GL_EVAL_VERTEX_ATTRIB1_NV
	       GL_EVAL_VERTEX_ATTRIB2_NV GL_EVAL_VERTEX_ATTRIB3_NV
	       GL_EVAL_VERTEX_ATTRIB4_NV GL_EVAL_VERTEX_ATTRIB5_NV
	       GL_EVAL_VERTEX_ATTRIB6_NV GL_EVAL_VERTEX_ATTRIB7_NV
	       GL_EVAL_VERTEX_ATTRIB8_NV GL_EVAL_VERTEX_ATTRIB9_NV
	       GL_EXCLUSION_KHR GL_EXCLUSION_NV GL_EXCLUSIVE_EXT GL_EXP GL_EXP2
	       GL_EXPAND_NEGATE_NV GL_EXPAND_NORMAL_NV GL_EXTENDED_RANGE_SGIS
	       GL_EXTENSIONS GL_EXTERNAL_VIRTUAL_MEMORY_BUFFER_AMD
	       GL_EXT_422_pixels GL_EXT_Cg_shader GL_EXT_abgr GL_EXT_bgra
	       GL_EXT_bindable_uniform GL_EXT_blend_color
	       GL_EXT_blend_equation_separate GL_EXT_blend_func_separate
	       GL_EXT_blend_logic_op GL_EXT_blend_minmax GL_EXT_blend_subtract
	       GL_EXT_clip_volume_hint GL_EXT_cmyka GL_EXT_color_subtable
	       GL_EXT_compiled_vertex_array GL_EXT_convolution
	       GL_EXT_coordinate_frame GL_EXT_copy_texture GL_EXT_cull_vertex
	       GL_EXT_debug_label GL_EXT_debug_marker GL_EXT_depth_bounds_test
	       GL_EXT_direct_state_access GL_EXT_draw_buffers2
	       GL_EXT_draw_instanced GL_EXT_draw_range_elements
	       GL_EXT_fog_coord GL_EXT_fragment_lighting
	       GL_EXT_framebuffer_blit GL_EXT_framebuffer_multisample
	       GL_EXT_framebuffer_multisample_blit_scaled
	       GL_EXT_framebuffer_object GL_EXT_framebuffer_sRGB
	       GL_EXT_geometry_shader4 GL_EXT_gpu_program_parameters
	       GL_EXT_gpu_shader4 GL_EXT_histogram GL_EXT_index_array_formats
	       GL_EXT_index_func GL_EXT_index_material GL_EXT_index_texture
	       GL_EXT_light_texture GL_EXT_misc_attribute
	       GL_EXT_multi_draw_arrays GL_EXT_multisample
	       GL_EXT_packed_depth_stencil GL_EXT_packed_float
	       GL_EXT_packed_pixels GL_EXT_paletted_texture
	       GL_EXT_pixel_buffer_object GL_EXT_pixel_transform
	       GL_EXT_pixel_transform_color_table GL_EXT_point_parameters
	       GL_EXT_polygon_offset GL_EXT_polygon_offset_clamp
	       GL_EXT_post_depth_coverage GL_EXT_provoking_vertex
	       GL_EXT_raster_multisample GL_EXT_rescale_normal
	       GL_EXT_scene_marker GL_EXT_secondary_color
	       GL_EXT_separate_shader_objects GL_EXT_separate_specular_color
	       GL_EXT_shader_image_load_formatted
	       GL_EXT_shader_image_load_store GL_EXT_shader_integer_mix
	       GL_EXT_shadow_funcs GL_EXT_shared_texture_palette
	       GL_EXT_sparse_texture2 GL_EXT_stencil_clear_tag
	       GL_EXT_stencil_two_side GL_EXT_stencil_wrap GL_EXT_subtexture
	       GL_EXT_texture GL_EXT_texture3D GL_EXT_texture_array
	       GL_EXT_texture_buffer_object GL_EXT_texture_compression_dxt1
	       GL_EXT_texture_compression_latc GL_EXT_texture_compression_rgtc
	       GL_EXT_texture_compression_s3tc GL_EXT_texture_cube_map
	       GL_EXT_texture_edge_clamp GL_EXT_texture_env
	       GL_EXT_texture_env_add GL_EXT_texture_env_combine
	       GL_EXT_texture_env_dot3 GL_EXT_texture_filter_anisotropic
	       GL_EXT_texture_filter_minmax GL_EXT_texture_integer
	       GL_EXT_texture_lod_bias GL_EXT_texture_mirror_clamp
	       GL_EXT_texture_object GL_EXT_texture_perturb_normal
	       GL_EXT_texture_rectangle GL_EXT_texture_sRGB
	       GL_EXT_texture_sRGB_decode GL_EXT_texture_shared_exponent
	       GL_EXT_texture_snorm GL_EXT_texture_swizzle GL_EXT_timer_query
	       GL_EXT_transform_feedback GL_EXT_vertex_array
	       GL_EXT_vertex_array_bgra GL_EXT_vertex_attrib_64bit
	       GL_EXT_vertex_shader GL_EXT_vertex_weighting
	       GL_EXT_window_rectangles GL_EXT_x11_sync_object
	       GL_EYE_DISTANCE_TO_LINE_SGIS GL_EYE_DISTANCE_TO_POINT_SGIS
	       GL_EYE_LINEAR GL_EYE_LINE_SGIS GL_EYE_PLANE
	       GL_EYE_PLANE_ABSOLUTE_NV GL_EYE_POINT_SGIS GL_EYE_RADIAL_NV
	       GL_E_TIMES_F_NV GL_FACTOR_MAX_AMD GL_FACTOR_MIN_AMD
	       GL_FAILURE_NV GL_FALSE GL_FASTEST GL_FEEDBACK
	       GL_FEEDBACK_BUFFER_POINTER GL_FEEDBACK_BUFFER_SIZE
	       GL_FEEDBACK_BUFFER_TYPE GL_FENCE_APPLE GL_FENCE_CONDITION_NV
	       GL_FENCE_STATUS_NV GL_FIELDS_NV GL_FIELD_LOWER_NV
	       GL_FIELD_UPPER_NV GL_FILE_NAME_NV GL_FILL GL_FILL_RECTANGLE_NV
	       GL_FILTER GL_FIRST_TO_REST_NV GL_FIRST_VERTEX_CONVENTION
	       GL_FIRST_VERTEX_CONVENTION_EXT GL_FIXED GL_FIXED_ONLY
	       GL_FIXED_ONLY_ARB GL_FLAT GL_FLOAT GL_FLOAT16_NV
	       GL_FLOAT16_VEC2_NV GL_FLOAT16_VEC3_NV GL_FLOAT16_VEC4_NV
	       GL_FLOAT_32_UNSIGNED_INT_24_8_REV
	       GL_FLOAT_32_UNSIGNED_INT_24_8_REV_NV
	       GL_FLOAT_CLEAR_COLOR_VALUE_NV GL_FLOAT_MAT2 GL_FLOAT_MAT2_ARB
	       GL_FLOAT_MAT2x3 GL_FLOAT_MAT2x4 GL_FLOAT_MAT3 GL_FLOAT_MAT3_ARB
	       GL_FLOAT_MAT3x2 GL_FLOAT_MAT3x4 GL_FLOAT_MAT4 GL_FLOAT_MAT4_ARB
	       GL_FLOAT_MAT4x2 GL_FLOAT_MAT4x3 GL_FLOAT_R16_NV GL_FLOAT_R32_NV
	       GL_FLOAT_RG16_NV GL_FLOAT_RG32_NV GL_FLOAT_RGB16_NV
	       GL_FLOAT_RGB32_NV GL_FLOAT_RGBA16_NV GL_FLOAT_RGBA32_NV
	       GL_FLOAT_RGBA_MODE_NV GL_FLOAT_RGBA_NV GL_FLOAT_RGB_NV
	       GL_FLOAT_RG_NV GL_FLOAT_R_NV GL_FLOAT_VEC2 GL_FLOAT_VEC2_ARB
	       GL_FLOAT_VEC3 GL_FLOAT_VEC3_ARB GL_FLOAT_VEC4 GL_FLOAT_VEC4_ARB
	       GL_FOG GL_FOG_BIT GL_FOG_COLOR GL_FOG_COORD GL_FOG_COORDINATE
	       GL_FOG_COORDINATE_ARRAY GL_FOG_COORDINATE_ARRAY_BUFFER_BINDING
	       GL_FOG_COORDINATE_ARRAY_BUFFER_BINDING_ARB
	       GL_FOG_COORDINATE_ARRAY_EXT GL_FOG_COORDINATE_ARRAY_LIST_IBM
	       GL_FOG_COORDINATE_ARRAY_LIST_STRIDE_IBM
	       GL_FOG_COORDINATE_ARRAY_POINTER
	       GL_FOG_COORDINATE_ARRAY_POINTER_EXT
	       GL_FOG_COORDINATE_ARRAY_STRIDE
	       GL_FOG_COORDINATE_ARRAY_STRIDE_EXT GL_FOG_COORDINATE_ARRAY_TYPE
	       GL_FOG_COORDINATE_ARRAY_TYPE_EXT GL_FOG_COORDINATE_EXT
	       GL_FOG_COORDINATE_SOURCE GL_FOG_COORDINATE_SOURCE_EXT
	       GL_FOG_COORD_ARRAY GL_FOG_COORD_ARRAY_ADDRESS_NV
	       GL_FOG_COORD_ARRAY_BUFFER_BINDING GL_FOG_COORD_ARRAY_LENGTH_NV
	       GL_FOG_COORD_ARRAY_POINTER GL_FOG_COORD_ARRAY_STRIDE
	       GL_FOG_COORD_ARRAY_TYPE GL_FOG_COORD_SRC GL_FOG_DENSITY
	       GL_FOG_DISTANCE_MODE_NV GL_FOG_END GL_FOG_HINT GL_FOG_INDEX
	       GL_FOG_MODE GL_FOG_OFFSET_SGIX GL_FOG_OFFSET_VALUE_SGIX
	       GL_FOG_SPECULAR_TEXTURE_WIN GL_FOG_START GL_FONT_ASCENDER_BIT_NV
	       GL_FONT_DESCENDER_BIT_NV GL_FONT_GLYPHS_AVAILABLE_NV
	       GL_FONT_HAS_KERNING_BIT_NV GL_FONT_HEIGHT_BIT_NV
	       GL_FONT_MAX_ADVANCE_HEIGHT_BIT_NV
	       GL_FONT_MAX_ADVANCE_WIDTH_BIT_NV
	       GL_FONT_NUM_GLYPH_INDICES_BIT_NV GL_FONT_TARGET_UNAVAILABLE_NV
	       GL_FONT_UNAVAILABLE_NV GL_FONT_UNDERLINE_POSITION_BIT_NV
	       GL_FONT_UNDERLINE_THICKNESS_BIT_NV GL_FONT_UNINTELLIGIBLE_NV
	       GL_FONT_UNITS_PER_EM_BIT_NV GL_FONT_X_MAX_BOUNDS_BIT_NV
	       GL_FONT_X_MIN_BOUNDS_BIT_NV GL_FONT_Y_MAX_BOUNDS_BIT_NV
	       GL_FONT_Y_MIN_BOUNDS_BIT_NV GL_FORCE_BLUE_TO_ONE_NV
	       GL_FORMAT_SUBSAMPLE_244_244_OML GL_FORMAT_SUBSAMPLE_24_24_OML
	       GL_FRACTIONAL_EVEN GL_FRACTIONAL_ODD GL_FRAGMENT_COLOR_EXT
	       GL_FRAGMENT_COLOR_MATERIAL_EXT
	       GL_FRAGMENT_COLOR_MATERIAL_FACE_EXT
	       GL_FRAGMENT_COLOR_MATERIAL_PARAMETER_EXT
	       GL_FRAGMENT_COVERAGE_COLOR_NV GL_FRAGMENT_COVERAGE_TO_COLOR_NV
	       GL_FRAGMENT_DEPTH GL_FRAGMENT_DEPTH_EXT GL_FRAGMENT_INPUT_NV
	       GL_FRAGMENT_INTERPOLATION_OFFSET_BITS GL_FRAGMENT_LIGHT0_EXT
	       GL_FRAGMENT_LIGHT7_EXT GL_FRAGMENT_LIGHTING_EXT
	       GL_FRAGMENT_LIGHT_MODEL_AMBIENT_EXT
	       GL_FRAGMENT_LIGHT_MODEL_LOCAL_VIEWER_EXT
	       GL_FRAGMENT_LIGHT_MODEL_NORMAL_INTERPOLATION_EXT
	       GL_FRAGMENT_LIGHT_MODEL_TWO_SIDE_EXT GL_FRAGMENT_MATERIAL_EXT
	       GL_FRAGMENT_NORMAL_EXT GL_FRAGMENT_PROGRAM_ARB
	       GL_FRAGMENT_PROGRAM_BINDING_NV
	       GL_FRAGMENT_PROGRAM_INTERPOLATION_OFFSET_BITS_NV
	       GL_FRAGMENT_PROGRAM_NV GL_FRAGMENT_PROGRAM_PARAMETER_BUFFER_NV
	       GL_FRAGMENT_SHADER GL_FRAGMENT_SHADER_ARB GL_FRAGMENT_SHADER_ATI
	       GL_FRAGMENT_SHADER_BIT GL_FRAGMENT_SHADER_DERIVATIVE_HINT
	       GL_FRAGMENT_SHADER_DERIVATIVE_HINT_ARB
	       GL_FRAGMENT_SHADER_INVOCATIONS_ARB GL_FRAGMENT_SUBROUTINE
	       GL_FRAGMENT_SUBROUTINE_UNIFORM GL_FRAGMENT_TEXTURE
	       GL_FRAMEBUFFER GL_FRAMEBUFFER_ATTACHMENT_ALPHA_SIZE
	       GL_FRAMEBUFFER_ATTACHMENT_ANGLE
	       GL_FRAMEBUFFER_ATTACHMENT_BLUE_SIZE
	       GL_FRAMEBUFFER_ATTACHMENT_COLOR_ENCODING
	       GL_FRAMEBUFFER_ATTACHMENT_COMPONENT_TYPE
	       GL_FRAMEBUFFER_ATTACHMENT_DEPTH_SIZE
	       GL_FRAMEBUFFER_ATTACHMENT_GREEN_SIZE
	       GL_FRAMEBUFFER_ATTACHMENT_LAYERED
	       GL_FRAMEBUFFER_ATTACHMENT_LAYERED_ARB
	       GL_FRAMEBUFFER_ATTACHMENT_LAYERED_EXT
	       GL_FRAMEBUFFER_ATTACHMENT_OBJECT_NAME
	       GL_FRAMEBUFFER_ATTACHMENT_OBJECT_NAME_EXT
	       GL_FRAMEBUFFER_ATTACHMENT_OBJECT_TYPE
	       GL_FRAMEBUFFER_ATTACHMENT_OBJECT_TYPE_EXT
	       GL_FRAMEBUFFER_ATTACHMENT_RED_SIZE
	       GL_FRAMEBUFFER_ATTACHMENT_STENCIL_SIZE
	       GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_3D_ZOFFSET_EXT
	       GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_BASE_VIEW_INDEX_OVR
	       GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_CUBE_MAP_FACE
	       GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_CUBE_MAP_FACE_EXT
	       GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_LAYER
	       GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_LAYER_EXT
	       GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_LEVEL
	       GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_LEVEL_EXT
	       GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_NUM_VIEWS_OVR
	       GL_FRAMEBUFFER_BARRIER_BIT GL_FRAMEBUFFER_BARRIER_BIT_EXT
	       GL_FRAMEBUFFER_BINDING GL_FRAMEBUFFER_BINDING_EXT
	       GL_FRAMEBUFFER_BLEND GL_FRAMEBUFFER_COMPLETE
	       GL_FRAMEBUFFER_COMPLETE_EXT GL_FRAMEBUFFER_DEFAULT
	       GL_FRAMEBUFFER_DEFAULT_FIXED_SAMPLE_LOCATIONS
	       GL_FRAMEBUFFER_DEFAULT_HEIGHT GL_FRAMEBUFFER_DEFAULT_LAYERS
	       GL_FRAMEBUFFER_DEFAULT_SAMPLES GL_FRAMEBUFFER_DEFAULT_WIDTH
	       GL_FRAMEBUFFER_EXT GL_FRAMEBUFFER_INCOMPLETE_ATTACHMENT
	       GL_FRAMEBUFFER_INCOMPLETE_ATTACHMENT_EXT
	       GL_FRAMEBUFFER_INCOMPLETE_DIMENSIONS_EXT
	       GL_FRAMEBUFFER_INCOMPLETE_DRAW_BUFFER
	       GL_FRAMEBUFFER_INCOMPLETE_DRAW_BUFFER_EXT
	       GL_FRAMEBUFFER_INCOMPLETE_FORMATS_EXT
	       GL_FRAMEBUFFER_INCOMPLETE_LAYER_COUNT_ARB
	       GL_FRAMEBUFFER_INCOMPLETE_LAYER_COUNT_EXT
	       GL_FRAMEBUFFER_INCOMPLETE_LAYER_TARGETS
	       GL_FRAMEBUFFER_INCOMPLETE_LAYER_TARGETS_ARB
	       GL_FRAMEBUFFER_INCOMPLETE_LAYER_TARGETS_EXT
	       GL_FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT
	       GL_FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT_EXT
	       GL_FRAMEBUFFER_INCOMPLETE_MULTISAMPLE
	       GL_FRAMEBUFFER_INCOMPLETE_MULTISAMPLE_ANGLE
	       GL_FRAMEBUFFER_INCOMPLETE_MULTISAMPLE_EXT
	       GL_FRAMEBUFFER_INCOMPLETE_READ_BUFFER
	       GL_FRAMEBUFFER_INCOMPLETE_READ_BUFFER_EXT
	       GL_FRAMEBUFFER_INCOMPLETE_VIEW_TARGETS_OVR
	       GL_FRAMEBUFFER_PROGRAMMABLE_SAMPLE_LOCATIONS_ARB
	       GL_FRAMEBUFFER_PROGRAMMABLE_SAMPLE_LOCATIONS_NV
	       GL_FRAMEBUFFER_RENDERABLE GL_FRAMEBUFFER_RENDERABLE_LAYERED
	       GL_FRAMEBUFFER_SAMPLE_LOCATION_PIXEL_GRID_ARB
	       GL_FRAMEBUFFER_SAMPLE_LOCATION_PIXEL_GRID_NV GL_FRAMEBUFFER_SRGB
	       GL_FRAMEBUFFER_SRGB_CAPABLE_EXT GL_FRAMEBUFFER_SRGB_EXT
	       GL_FRAMEBUFFER_UNDEFINED GL_FRAMEBUFFER_UNSUPPORTED
	       GL_FRAMEBUFFER_UNSUPPORTED_EXT GL_FRAME_NV GL_FRONT
	       GL_FRONT_AND_BACK GL_FRONT_FACE GL_FRONT_FACE_COMMAND_NV
	       GL_FRONT_LEFT GL_FRONT_RIGHT GL_FULL_RANGE_EXT
	       GL_FULL_STIPPLE_HINT_PGI GL_FULL_SUPPORT GL_FUNC_ADD
	       GL_FUNC_ADD_EXT GL_FUNC_REVERSE_SUBTRACT
	       GL_FUNC_REVERSE_SUBTRACT_EXT GL_FUNC_SUBTRACT
	       GL_FUNC_SUBTRACT_EXT GL_GENERATE_MIPMAP GL_GENERATE_MIPMAP_HINT
	       GL_GENERATE_MIPMAP_HINT_SGIS GL_GENERATE_MIPMAP_SGIS
	       GL_GENERIC_ATTRIB_NV GL_GEOMETRY_INPUT_TYPE
	       GL_GEOMETRY_INPUT_TYPE_ARB GL_GEOMETRY_INPUT_TYPE_EXT
	       GL_GEOMETRY_OUTPUT_TYPE GL_GEOMETRY_OUTPUT_TYPE_ARB
	       GL_GEOMETRY_OUTPUT_TYPE_EXT GL_GEOMETRY_PROGRAM_NV
	       GL_GEOMETRY_PROGRAM_PARAMETER_BUFFER_NV GL_GEOMETRY_SHADER
	       GL_GEOMETRY_SHADER_ARB GL_GEOMETRY_SHADER_BIT
	       GL_GEOMETRY_SHADER_EXT GL_GEOMETRY_SHADER_INVOCATIONS
	       GL_GEOMETRY_SHADER_PRIMITIVES_EMITTED_ARB GL_GEOMETRY_SUBROUTINE
	       GL_GEOMETRY_SUBROUTINE_UNIFORM GL_GEOMETRY_TEXTURE
	       GL_GEOMETRY_VERTICES_OUT GL_GEOMETRY_VERTICES_OUT_ARB
	       GL_GEOMETRY_VERTICES_OUT_EXT GL_GEQUAL
	       GL_GET_TEXTURE_IMAGE_FORMAT GL_GET_TEXTURE_IMAGE_TYPE
	       GL_GLOBAL_ALPHA_FACTOR_SUN GL_GLOBAL_ALPHA_SUN
	       GL_GLYPH_HAS_KERNING_BIT_NV GL_GLYPH_HEIGHT_BIT_NV
	       GL_GLYPH_HORIZONTAL_BEARING_ADVANCE_BIT_NV
	       GL_GLYPH_HORIZONTAL_BEARING_X_BIT_NV
	       GL_GLYPH_HORIZONTAL_BEARING_Y_BIT_NV
	       GL_GLYPH_VERTICAL_BEARING_ADVANCE_BIT_NV
	       GL_GLYPH_VERTICAL_BEARING_X_BIT_NV
	       GL_GLYPH_VERTICAL_BEARING_Y_BIT_NV GL_GLYPH_WIDTH_BIT_NV
	       GL_GPU_ADDRESS_NV
	       GL_GPU_MEMORY_INFO_CURRENT_AVAILABLE_VIDMEM_NVX
	       GL_GPU_MEMORY_INFO_DEDICATED_VIDMEM_NVX
	       GL_GPU_MEMORY_INFO_EVICTED_MEMORY_NVX
	       GL_GPU_MEMORY_INFO_EVICTION_COUNT_NVX
	       GL_GPU_MEMORY_INFO_TOTAL_AVAILABLE_MEMORY_NVX GL_GREATER
	       GL_GREEN GL_GREEN_BIAS GL_GREEN_BITS GL_GREEN_BIT_ATI
	       GL_GREEN_INTEGER GL_GREEN_INTEGER_EXT GL_GREEN_MAX_CLAMP_INGR
	       GL_GREEN_MIN_CLAMP_INGR GL_GREEN_NV GL_GREEN_SCALE
	       GL_GREMEDY_frame_terminator GL_GREMEDY_string_marker
	       GL_GUILTY_CONTEXT_RESET GL_GUILTY_CONTEXT_RESET_ARB
	       GL_HALF_APPLE GL_HALF_BIAS_NEGATE_NV GL_HALF_BIAS_NORMAL_NV
	       GL_HALF_BIT_ATI GL_HALF_FLOAT GL_HALF_FLOAT_ARB GL_HALF_FLOAT_NV
	       GL_HARDLIGHT_KHR GL_HARDLIGHT_NV GL_HARDMIX_NV GL_HIGH_FLOAT
	       GL_HIGH_INT GL_HILO16_NV GL_HILO8_NV GL_HILO_NV GL_HINT_BIT
	       GL_HISTOGRAM GL_HISTOGRAM_ALPHA_SIZE GL_HISTOGRAM_ALPHA_SIZE_EXT
	       GL_HISTOGRAM_BLUE_SIZE GL_HISTOGRAM_BLUE_SIZE_EXT
	       GL_HISTOGRAM_EXT GL_HISTOGRAM_FORMAT GL_HISTOGRAM_FORMAT_EXT
	       GL_HISTOGRAM_GREEN_SIZE GL_HISTOGRAM_GREEN_SIZE_EXT
	       GL_HISTOGRAM_LUMINANCE_SIZE GL_HISTOGRAM_LUMINANCE_SIZE_EXT
	       GL_HISTOGRAM_RED_SIZE GL_HISTOGRAM_RED_SIZE_EXT
	       GL_HISTOGRAM_SINK GL_HISTOGRAM_SINK_EXT GL_HISTOGRAM_WIDTH
	       GL_HISTOGRAM_WIDTH_EXT GL_HI_BIAS_NV GL_HI_SCALE_NV
	       GL_HORIZONTAL_LINE_TO_NV GL_HP_convolution_border_modes
	       GL_HP_image_transform GL_HP_occlusion_test
	       GL_HP_texture_lighting GL_HSL_COLOR_KHR GL_HSL_COLOR_NV
	       GL_HSL_HUE_KHR GL_HSL_HUE_NV GL_HSL_LUMINOSITY_KHR
	       GL_HSL_LUMINOSITY_NV GL_HSL_SATURATION_KHR GL_HSL_SATURATION_NV
	       GL_IBM_cull_vertex GL_IBM_multimode_draw_arrays
	       GL_IBM_rasterpos_clip GL_IBM_static_data
	       GL_IBM_texture_mirrored_repeat GL_IBM_vertex_array_lists
	       GL_IDENTITY_NV GL_IGNORE_BORDER GL_IMAGE_1D GL_IMAGE_1D_ARRAY
	       GL_IMAGE_1D_ARRAY_EXT GL_IMAGE_1D_EXT GL_IMAGE_2D
	       GL_IMAGE_2D_ARRAY GL_IMAGE_2D_ARRAY_EXT GL_IMAGE_2D_EXT
	       GL_IMAGE_2D_MULTISAMPLE GL_IMAGE_2D_MULTISAMPLE_ARRAY
	       GL_IMAGE_2D_MULTISAMPLE_ARRAY_EXT GL_IMAGE_2D_MULTISAMPLE_EXT
	       GL_IMAGE_2D_RECT GL_IMAGE_2D_RECT_EXT GL_IMAGE_3D
	       GL_IMAGE_3D_EXT GL_IMAGE_BINDING_ACCESS
	       GL_IMAGE_BINDING_ACCESS_EXT GL_IMAGE_BINDING_FORMAT
	       GL_IMAGE_BINDING_FORMAT_EXT GL_IMAGE_BINDING_LAYER
	       GL_IMAGE_BINDING_LAYERED GL_IMAGE_BINDING_LAYERED_EXT
	       GL_IMAGE_BINDING_LAYER_EXT GL_IMAGE_BINDING_LEVEL
	       GL_IMAGE_BINDING_LEVEL_EXT GL_IMAGE_BINDING_NAME
	       GL_IMAGE_BINDING_NAME_EXT GL_IMAGE_BUFFER GL_IMAGE_BUFFER_EXT
	       GL_IMAGE_CLASS_10_10_10_2 GL_IMAGE_CLASS_11_11_10
	       GL_IMAGE_CLASS_1_X_16 GL_IMAGE_CLASS_1_X_32 GL_IMAGE_CLASS_1_X_8
	       GL_IMAGE_CLASS_2_X_16 GL_IMAGE_CLASS_2_X_32 GL_IMAGE_CLASS_2_X_8
	       GL_IMAGE_CLASS_4_X_16 GL_IMAGE_CLASS_4_X_32 GL_IMAGE_CLASS_4_X_8
	       GL_IMAGE_COMPATIBILITY_CLASS GL_IMAGE_CUBE GL_IMAGE_CUBE_EXT
	       GL_IMAGE_CUBE_MAP_ARRAY GL_IMAGE_CUBE_MAP_ARRAY_EXT
	       GL_IMAGE_FORMAT_COMPATIBILITY_BY_CLASS
	       GL_IMAGE_FORMAT_COMPATIBILITY_BY_SIZE
	       GL_IMAGE_FORMAT_COMPATIBILITY_TYPE GL_IMAGE_PIXEL_FORMAT
	       GL_IMAGE_PIXEL_TYPE GL_IMAGE_TEXEL_SIZE
	       GL_IMPLEMENTATION_COLOR_READ_FORMAT
	       GL_IMPLEMENTATION_COLOR_READ_FORMAT_OES
	       GL_IMPLEMENTATION_COLOR_READ_TYPE
	       GL_IMPLEMENTATION_COLOR_READ_TYPE_OES GL_INCLUSIVE_EXT GL_INCR
	       GL_INCR_WRAP GL_INCR_WRAP_EXT GL_INDEX GL_INDEX_ARRAY
	       GL_INDEX_ARRAY_ADDRESS_NV GL_INDEX_ARRAY_BUFFER_BINDING
	       GL_INDEX_ARRAY_BUFFER_BINDING_ARB GL_INDEX_ARRAY_COUNT_EXT
	       GL_INDEX_ARRAY_EXT GL_INDEX_ARRAY_LENGTH_NV
	       GL_INDEX_ARRAY_LIST_IBM GL_INDEX_ARRAY_LIST_STRIDE_IBM
	       GL_INDEX_ARRAY_POINTER GL_INDEX_ARRAY_POINTER_EXT
	       GL_INDEX_ARRAY_STRIDE GL_INDEX_ARRAY_STRIDE_EXT
	       GL_INDEX_ARRAY_TYPE GL_INDEX_ARRAY_TYPE_EXT GL_INDEX_BITS
	       GL_INDEX_BIT_PGI GL_INDEX_CLEAR_VALUE GL_INDEX_LOGIC_OP
	       GL_INDEX_MODE GL_INDEX_OFFSET GL_INDEX_SHIFT GL_INDEX_WRITEMASK
	       GL_INFO_LOG_LENGTH GL_INGR_color_clamp GL_INGR_interlace_read
	       GL_INNOCENT_CONTEXT_RESET GL_INNOCENT_CONTEXT_RESET_ARB GL_INT
	       GL_INT16_NV GL_INT16_VEC2_NV GL_INT16_VEC3_NV GL_INT16_VEC4_NV
	       GL_INT64_ARB GL_INT64_NV GL_INT64_VEC2_ARB GL_INT64_VEC2_NV
	       GL_INT64_VEC3_ARB GL_INT64_VEC3_NV GL_INT64_VEC4_ARB
	       GL_INT64_VEC4_NV GL_INT8_NV GL_INT8_VEC2_NV GL_INT8_VEC3_NV
	       GL_INT8_VEC4_NV GL_INTEL_conservative_rasterization
	       GL_INTEL_fragment_shader_ordering GL_INTEL_framebuffer_CMAA
	       GL_INTEL_map_texture GL_INTEL_parallel_arrays
	       GL_INTEL_performance_query GL_INTEL_texture_scissor GL_INTENSITY
	       GL_INTENSITY12 GL_INTENSITY12_EXT GL_INTENSITY16
	       GL_INTENSITY16F_ARB GL_INTENSITY16I_EXT GL_INTENSITY16UI_EXT
	       GL_INTENSITY16_EXT GL_INTENSITY16_EXTENDED_RANGE_SGIX
	       GL_INTENSITY16_SIGNED_SGIX GL_INTENSITY16_SNORM
	       GL_INTENSITY32F_ARB GL_INTENSITY32I_EXT GL_INTENSITY32UI_EXT
	       GL_INTENSITY4 GL_INTENSITY4_EXT GL_INTENSITY8 GL_INTENSITY8I_EXT
	       GL_INTENSITY8UI_EXT GL_INTENSITY8_EXT GL_INTENSITY8_SNORM
	       GL_INTENSITY_EXT GL_INTENSITY_EXTENDED_RANGE_SGIX
	       GL_INTENSITY_FLOAT16_APPLE GL_INTENSITY_FLOAT16_ATI
	       GL_INTENSITY_FLOAT32_APPLE GL_INTENSITY_FLOAT32_ATI
	       GL_INTENSITY_SIGNED_SGIX GL_INTENSITY_SNORM GL_INTERLACE_OML
	       GL_INTERLACE_READ_INGR GL_INTERLACE_READ_OML GL_INTERLACE_SGIX
	       GL_INTERLEAVED_ATTRIBS GL_INTERLEAVED_ATTRIBS_EXT
	       GL_INTERLEAVED_ATTRIBS_NV GL_INTERNALFORMAT_ALPHA_SIZE
	       GL_INTERNALFORMAT_ALPHA_TYPE GL_INTERNALFORMAT_BLUE_SIZE
	       GL_INTERNALFORMAT_BLUE_TYPE GL_INTERNALFORMAT_DEPTH_SIZE
	       GL_INTERNALFORMAT_DEPTH_TYPE GL_INTERNALFORMAT_GREEN_SIZE
	       GL_INTERNALFORMAT_GREEN_TYPE GL_INTERNALFORMAT_PREFERRED
	       GL_INTERNALFORMAT_RED_SIZE GL_INTERNALFORMAT_RED_TYPE
	       GL_INTERNALFORMAT_SHARED_SIZE GL_INTERNALFORMAT_STENCIL_SIZE
	       GL_INTERNALFORMAT_STENCIL_TYPE GL_INTERNALFORMAT_SUPPORTED
	       GL_INTERPOLATE GL_INTERPOLATE_ARB GL_INTERPOLATE_EXT
	       GL_INT_2_10_10_10_REV GL_INT_IMAGE_1D GL_INT_IMAGE_1D_ARRAY
	       GL_INT_IMAGE_1D_ARRAY_EXT GL_INT_IMAGE_1D_EXT GL_INT_IMAGE_2D
	       GL_INT_IMAGE_2D_ARRAY GL_INT_IMAGE_2D_ARRAY_EXT
	       GL_INT_IMAGE_2D_EXT GL_INT_IMAGE_2D_MULTISAMPLE
	       GL_INT_IMAGE_2D_MULTISAMPLE_ARRAY
	       GL_INT_IMAGE_2D_MULTISAMPLE_ARRAY_EXT
	       GL_INT_IMAGE_2D_MULTISAMPLE_EXT GL_INT_IMAGE_2D_RECT
	       GL_INT_IMAGE_2D_RECT_EXT GL_INT_IMAGE_3D GL_INT_IMAGE_3D_EXT
	       GL_INT_IMAGE_BUFFER GL_INT_IMAGE_BUFFER_EXT GL_INT_IMAGE_CUBE
	       GL_INT_IMAGE_CUBE_EXT GL_INT_IMAGE_CUBE_MAP_ARRAY
	       GL_INT_IMAGE_CUBE_MAP_ARRAY_EXT GL_INT_SAMPLER_1D
	       GL_INT_SAMPLER_1D_ARRAY GL_INT_SAMPLER_1D_ARRAY_EXT
	       GL_INT_SAMPLER_1D_EXT GL_INT_SAMPLER_2D GL_INT_SAMPLER_2D_ARRAY
	       GL_INT_SAMPLER_2D_ARRAY_EXT GL_INT_SAMPLER_2D_EXT
	       GL_INT_SAMPLER_2D_MULTISAMPLE
	       GL_INT_SAMPLER_2D_MULTISAMPLE_ARRAY GL_INT_SAMPLER_2D_RECT
	       GL_INT_SAMPLER_2D_RECT_EXT GL_INT_SAMPLER_3D
	       GL_INT_SAMPLER_3D_EXT GL_INT_SAMPLER_BUFFER
	       GL_INT_SAMPLER_BUFFER_AMD GL_INT_SAMPLER_BUFFER_EXT
	       GL_INT_SAMPLER_CUBE GL_INT_SAMPLER_CUBE_EXT
	       GL_INT_SAMPLER_CUBE_MAP_ARRAY GL_INT_SAMPLER_CUBE_MAP_ARRAY_ARB
	       GL_INT_SAMPLER_RENDERBUFFER_NV GL_INT_VEC2 GL_INT_VEC2_ARB
	       GL_INT_VEC3 GL_INT_VEC3_ARB GL_INT_VEC4 GL_INT_VEC4_ARB
	       GL_INVALID_ENUM GL_INVALID_FRAMEBUFFER_OPERATION
	       GL_INVALID_FRAMEBUFFER_OPERATION_EXT GL_INVALID_INDEX
	       GL_INVALID_OPERATION GL_INVALID_VALUE GL_INVARIANT_DATATYPE_EXT
	       GL_INVARIANT_EXT GL_INVARIANT_VALUE_EXT GL_INVERSE_NV
	       GL_INVERSE_TRANSPOSE_NV GL_INVERT GL_INVERTED_SCREEN_W_REND
	       GL_INVERT_OVG_NV GL_INVERT_RGB_NV GL_ISOLINES GL_IS_PER_PATCH
	       GL_IS_ROW_MAJOR GL_ITALIC_BIT_NV GL_KEEP
	       GL_KHR_blend_equation_advanced
	       GL_KHR_blend_equation_advanced_coherent
	       GL_KHR_context_flush_control GL_KHR_debug GL_KHR_no_error
	       GL_KHR_robust_buffer_access_behavior GL_KHR_robustness
	       GL_KHR_texture_compression_astc_hdr
	       GL_KHR_texture_compression_astc_ldr
	       GL_KHR_texture_compression_astc_sliced_3d GL_KTX_BACK_REGION
	       GL_KTX_FRONT_REGION GL_KTX_STENCIL_REGION GL_KTX_Z_REGION
	       GL_KTX_buffer_region GL_LARGE_CCW_ARC_TO_NV
	       GL_LARGE_CW_ARC_TO_NV GL_LAST_VERTEX_CONVENTION
	       GL_LAST_VERTEX_CONVENTION_EXT GL_LAST_VIDEO_CAPTURE_STATUS_NV
	       GL_LAYER_PROVOKING_VERTEX GL_LAYOUT_DEFAULT_INTEL
	       GL_LAYOUT_LINEAR_CPU_CACHED_INTEL GL_LAYOUT_LINEAR_INTEL GL_LEFT
	       GL_LEQUAL GL_LERP_ATI GL_LESS GL_LGPU_SEPARATE_STORAGE_BIT_NVX
	       GL_LIGHT0 GL_LIGHT1 GL_LIGHT2 GL_LIGHT3 GL_LIGHT4 GL_LIGHT5
	       GL_LIGHT6 GL_LIGHT7 GL_LIGHTEN_KHR GL_LIGHTEN_NV GL_LIGHTING
	       GL_LIGHTING_BIT GL_LIGHT_ENV_MODE_EXT GL_LIGHT_MODEL_AMBIENT
	       GL_LIGHT_MODEL_COLOR_CONTROL GL_LIGHT_MODEL_COLOR_CONTROL_EXT
	       GL_LIGHT_MODEL_LOCAL_VIEWER GL_LIGHT_MODEL_SPECULAR_VECTOR_APPLE
	       GL_LIGHT_MODEL_TWO_SIDE GL_LINE GL_LINEAR GL_LINEARBURN_NV
	       GL_LINEARDODGE_NV GL_LINEARLIGHT_NV GL_LINEAR_ATTENUATION
	       GL_LINEAR_MIPMAP_LINEAR GL_LINEAR_MIPMAP_NEAREST GL_LINES
	       GL_LINES_ADJACENCY GL_LINES_ADJACENCY_ARB GL_LINES_ADJACENCY_EXT
	       GL_LINE_BIT GL_LINE_LOOP GL_LINE_RESET_TOKEN GL_LINE_SMOOTH
	       GL_LINE_SMOOTH_HINT GL_LINE_STIPPLE GL_LINE_STIPPLE_PATTERN
	       GL_LINE_STIPPLE_REPEAT GL_LINE_STRIP GL_LINE_STRIP_ADJACENCY
	       GL_LINE_STRIP_ADJACENCY_ARB GL_LINE_STRIP_ADJACENCY_EXT
	       GL_LINE_TOKEN GL_LINE_TO_NV GL_LINE_WIDTH
	       GL_LINE_WIDTH_COMMAND_NV GL_LINE_WIDTH_GRANULARITY
	       GL_LINE_WIDTH_RANGE GL_LINK_STATUS GL_LIST_BASE GL_LIST_BIT
	       GL_LIST_INDEX GL_LIST_MODE GL_LOAD
	       GL_LOCAL_CONSTANT_DATATYPE_EXT GL_LOCAL_CONSTANT_EXT
	       GL_LOCAL_CONSTANT_VALUE_EXT GL_LOCAL_EXT GL_LOCATION
	       GL_LOCATION_COMPONENT GL_LOCATION_INDEX GL_LOGIC_OP
	       GL_LOGIC_OP_MODE GL_LOG_APP_REGAL GL_LOG_DEBUG_REGAL
	       GL_LOG_DRIVER_REGAL GL_LOG_ERROR_REGAL GL_LOG_HTTP_REGAL
	       GL_LOG_INFO_REGAL GL_LOG_INTERNAL_REGAL GL_LOG_REGAL
	       GL_LOG_STATUS_REGAL GL_LOG_WARNING_REGAL
	       GL_LOSE_CONTEXT_ON_RESET GL_LOSE_CONTEXT_ON_RESET_ARB
	       GL_LOWER_LEFT GL_LOW_FLOAT GL_LOW_INT GL_LO_BIAS_NV
	       GL_LO_SCALE_NV GL_LUMINANCE GL_LUMINANCE12
	       GL_LUMINANCE12_ALPHA12 GL_LUMINANCE12_ALPHA12_EXT
	       GL_LUMINANCE12_ALPHA4 GL_LUMINANCE12_ALPHA4_EXT
	       GL_LUMINANCE12_EXT GL_LUMINANCE16 GL_LUMINANCE16F_ARB
	       GL_LUMINANCE16I_EXT GL_LUMINANCE16UI_EXT GL_LUMINANCE16_ALPHA16
	       GL_LUMINANCE16_ALPHA16_EXT
	       GL_LUMINANCE16_ALPHA16_EXTENDED_RANGE_SGIX
	       GL_LUMINANCE16_ALPHA16_SIGNED_SGIX GL_LUMINANCE16_ALPHA16_SNORM
	       GL_LUMINANCE16_EXT GL_LUMINANCE16_EXTENDED_RANGE_SGIX
	       GL_LUMINANCE16_SIGNED_SGIX GL_LUMINANCE16_SNORM
	       GL_LUMINANCE32F_ARB GL_LUMINANCE32I_EXT GL_LUMINANCE32UI_EXT
	       GL_LUMINANCE4 GL_LUMINANCE4_ALPHA4 GL_LUMINANCE4_ALPHA4_EXT
	       GL_LUMINANCE4_EXT GL_LUMINANCE6_ALPHA2 GL_LUMINANCE6_ALPHA2_EXT
	       GL_LUMINANCE8 GL_LUMINANCE8I_EXT GL_LUMINANCE8UI_EXT
	       GL_LUMINANCE8_ALPHA8 GL_LUMINANCE8_ALPHA8_EXT
	       GL_LUMINANCE8_ALPHA8_SNORM GL_LUMINANCE8_EXT GL_LUMINANCE8_SNORM
	       GL_LUMINANCE_ALPHA GL_LUMINANCE_ALPHA16F_ARB
	       GL_LUMINANCE_ALPHA16I_EXT GL_LUMINANCE_ALPHA16UI_EXT
	       GL_LUMINANCE_ALPHA32F_ARB GL_LUMINANCE_ALPHA32I_EXT
	       GL_LUMINANCE_ALPHA32UI_EXT GL_LUMINANCE_ALPHA8I_EXT
	       GL_LUMINANCE_ALPHA8UI_EXT GL_LUMINANCE_ALPHA_EXTENDED_RANGE_SGIX
	       GL_LUMINANCE_ALPHA_FLOAT16_APPLE GL_LUMINANCE_ALPHA_FLOAT16_ATI
	       GL_LUMINANCE_ALPHA_FLOAT32_APPLE GL_LUMINANCE_ALPHA_FLOAT32_ATI
	       GL_LUMINANCE_ALPHA_INTEGER_EXT GL_LUMINANCE_ALPHA_SIGNED_SGIX
	       GL_LUMINANCE_ALPHA_SNORM GL_LUMINANCE_EXTENDED_RANGE_SGIX
	       GL_LUMINANCE_FLOAT16_APPLE GL_LUMINANCE_FLOAT16_ATI
	       GL_LUMINANCE_FLOAT32_APPLE GL_LUMINANCE_FLOAT32_ATI
	       GL_LUMINANCE_INTEGER_EXT GL_LUMINANCE_SIGNED_SGIX
	       GL_LUMINANCE_SNORM GL_MAD_ATI GL_MAGNITUDE_BIAS_NV
	       GL_MAGNITUDE_SCALE_NV GL_MAJOR_VERSION GL_MANUAL_GENERATE_MIPMAP
	       GL_MAP1_BINORMAL_EXT GL_MAP1_COLOR_4 GL_MAP1_GRID_DOMAIN
	       GL_MAP1_GRID_SEGMENTS GL_MAP1_INDEX GL_MAP1_NORMAL
	       GL_MAP1_TANGENT_EXT GL_MAP1_TEXTURE_COORD_1
	       GL_MAP1_TEXTURE_COORD_2 GL_MAP1_TEXTURE_COORD_3
	       GL_MAP1_TEXTURE_COORD_4 GL_MAP1_VERTEX_3 GL_MAP1_VERTEX_4
	       GL_MAP1_VERTEX_ATTRIB0_4_NV GL_MAP1_VERTEX_ATTRIB10_4_NV
	       GL_MAP1_VERTEX_ATTRIB11_4_NV GL_MAP1_VERTEX_ATTRIB12_4_NV
	       GL_MAP1_VERTEX_ATTRIB13_4_NV GL_MAP1_VERTEX_ATTRIB14_4_NV
	       GL_MAP1_VERTEX_ATTRIB15_4_NV GL_MAP1_VERTEX_ATTRIB1_4_NV
	       GL_MAP1_VERTEX_ATTRIB2_4_NV GL_MAP1_VERTEX_ATTRIB3_4_NV
	       GL_MAP1_VERTEX_ATTRIB4_4_NV GL_MAP1_VERTEX_ATTRIB5_4_NV
	       GL_MAP1_VERTEX_ATTRIB6_4_NV GL_MAP1_VERTEX_ATTRIB7_4_NV
	       GL_MAP1_VERTEX_ATTRIB8_4_NV GL_MAP1_VERTEX_ATTRIB9_4_NV
	       GL_MAP2_BINORMAL_EXT GL_MAP2_COLOR_4 GL_MAP2_GRID_DOMAIN
	       GL_MAP2_GRID_SEGMENTS GL_MAP2_INDEX GL_MAP2_NORMAL
	       GL_MAP2_TANGENT_EXT GL_MAP2_TEXTURE_COORD_1
	       GL_MAP2_TEXTURE_COORD_2 GL_MAP2_TEXTURE_COORD_3
	       GL_MAP2_TEXTURE_COORD_4 GL_MAP2_VERTEX_3 GL_MAP2_VERTEX_4
	       GL_MAP2_VERTEX_ATTRIB0_4_NV GL_MAP2_VERTEX_ATTRIB10_4_NV
	       GL_MAP2_VERTEX_ATTRIB11_4_NV GL_MAP2_VERTEX_ATTRIB12_4_NV
	       GL_MAP2_VERTEX_ATTRIB13_4_NV GL_MAP2_VERTEX_ATTRIB14_4_NV
	       GL_MAP2_VERTEX_ATTRIB15_4_NV GL_MAP2_VERTEX_ATTRIB1_4_NV
	       GL_MAP2_VERTEX_ATTRIB2_4_NV GL_MAP2_VERTEX_ATTRIB3_4_NV
	       GL_MAP2_VERTEX_ATTRIB4_4_NV GL_MAP2_VERTEX_ATTRIB5_4_NV
	       GL_MAP2_VERTEX_ATTRIB6_4_NV GL_MAP2_VERTEX_ATTRIB7_4_NV
	       GL_MAP2_VERTEX_ATTRIB8_4_NV GL_MAP2_VERTEX_ATTRIB9_4_NV
	       GL_MAP_ATTRIB_U_ORDER_NV GL_MAP_ATTRIB_V_ORDER_NV
	       GL_MAP_COHERENT_BIT GL_MAP_COLOR GL_MAP_FLUSH_EXPLICIT_BIT
	       GL_MAP_INVALIDATE_BUFFER_BIT GL_MAP_INVALIDATE_RANGE_BIT
	       GL_MAP_PERSISTENT_BIT GL_MAP_READ_BIT GL_MAP_STENCIL
	       GL_MAP_TESSELLATION_NV GL_MAP_UNSYNCHRONIZED_BIT
	       GL_MAP_WRITE_BIT GL_MATERIAL_SIDE_HINT_PGI GL_MATRIX0_ARB
	       GL_MATRIX0_NV GL_MATRIX10_ARB GL_MATRIX11_ARB GL_MATRIX12_ARB
	       GL_MATRIX13_ARB GL_MATRIX14_ARB GL_MATRIX15_ARB GL_MATRIX16_ARB
	       GL_MATRIX17_ARB GL_MATRIX18_ARB GL_MATRIX19_ARB GL_MATRIX1_ARB
	       GL_MATRIX1_NV GL_MATRIX20_ARB GL_MATRIX21_ARB GL_MATRIX22_ARB
	       GL_MATRIX23_ARB GL_MATRIX24_ARB GL_MATRIX25_ARB GL_MATRIX26_ARB
	       GL_MATRIX27_ARB GL_MATRIX28_ARB GL_MATRIX29_ARB GL_MATRIX2_ARB
	       GL_MATRIX2_NV GL_MATRIX30_ARB GL_MATRIX31_ARB GL_MATRIX3_ARB
	       GL_MATRIX3_NV GL_MATRIX4_ARB GL_MATRIX4_NV GL_MATRIX5_ARB
	       GL_MATRIX5_NV GL_MATRIX6_ARB GL_MATRIX6_NV GL_MATRIX7_ARB
	       GL_MATRIX7_NV GL_MATRIX8_ARB GL_MATRIX9_ARB GL_MATRIX_EXT
	       GL_MATRIX_INDEX_ARRAY_ARB GL_MATRIX_INDEX_ARRAY_POINTER_ARB
	       GL_MATRIX_INDEX_ARRAY_SIZE_ARB GL_MATRIX_INDEX_ARRAY_STRIDE_ARB
	       GL_MATRIX_INDEX_ARRAY_TYPE_ARB GL_MATRIX_MODE
	       GL_MATRIX_PALETTE_ARB GL_MATRIX_STRIDE
	       GL_MAT_AMBIENT_AND_DIFFUSE_BIT_PGI GL_MAT_AMBIENT_BIT_PGI
	       GL_MAT_COLOR_INDEXES_BIT_PGI GL_MAT_DIFFUSE_BIT_PGI
	       GL_MAT_EMISSION_BIT_PGI GL_MAT_SHININESS_BIT_PGI
	       GL_MAT_SPECULAR_BIT_PGI GL_MAX GL_MAX_3D_TEXTURE_SIZE
	       GL_MAX_3D_TEXTURE_SIZE_EXT GL_MAX_ACTIVE_LIGHTS_EXT
	       GL_MAX_ALPHA_SGIS GL_MAX_ARRAY_TEXTURE_LAYERS
	       GL_MAX_ARRAY_TEXTURE_LAYERS_EXT GL_MAX_ASYNC_DRAW_PIXELS_SGIX
	       GL_MAX_ASYNC_HISTOGRAM_SGIX GL_MAX_ASYNC_READ_PIXELS_SGIX
	       GL_MAX_ASYNC_TEX_IMAGE_SGIX
	       GL_MAX_ATOMIC_COUNTER_BUFFER_BINDINGS
	       GL_MAX_ATOMIC_COUNTER_BUFFER_SIZE GL_MAX_ATTRIB_STACK_DEPTH
	       GL_MAX_BINDABLE_UNIFORM_SIZE_EXT GL_MAX_BLUE_SGIS
	       GL_MAX_CLIENT_ATTRIB_STACK_DEPTH GL_MAX_CLIP_DISTANCES
	       GL_MAX_CLIP_PLANES GL_MAX_COLOR_ATTACHMENTS
	       GL_MAX_COLOR_ATTACHMENTS_EXT GL_MAX_COLOR_MATRIX_STACK_DEPTH
	       GL_MAX_COLOR_MATRIX_STACK_DEPTH_SGI GL_MAX_COLOR_TEXTURE_SAMPLES
	       GL_MAX_COMBINED_ATOMIC_COUNTERS
	       GL_MAX_COMBINED_ATOMIC_COUNTER_BUFFERS
	       GL_MAX_COMBINED_CLIP_AND_CULL_DISTANCES
	       GL_MAX_COMBINED_COMPUTE_UNIFORM_COMPONENTS
	       GL_MAX_COMBINED_DIMENSIONS
	       GL_MAX_COMBINED_FRAGMENT_UNIFORM_COMPONENTS
	       GL_MAX_COMBINED_GEOMETRY_UNIFORM_COMPONENTS
	       GL_MAX_COMBINED_IMAGE_UNIFORMS
	       GL_MAX_COMBINED_IMAGE_UNITS_AND_FRAGMENT_OUTPUTS
	       GL_MAX_COMBINED_IMAGE_UNITS_AND_FRAGMENT_OUTPUTS_EXT
	       GL_MAX_COMBINED_SHADER_OUTPUT_RESOURCES
	       GL_MAX_COMBINED_SHADER_STORAGE_BLOCKS
	       GL_MAX_COMBINED_TESS_CONTROL_UNIFORM_COMPONENTS
	       GL_MAX_COMBINED_TESS_EVALUATION_UNIFORM_COMPONENTS
	       GL_MAX_COMBINED_TEXTURE_IMAGE_UNITS
	       GL_MAX_COMBINED_TEXTURE_IMAGE_UNITS_ARB
	       GL_MAX_COMBINED_UNIFORM_BLOCKS
	       GL_MAX_COMBINED_VERTEX_UNIFORM_COMPONENTS
	       GL_MAX_COMPUTE_ATOMIC_COUNTERS
	       GL_MAX_COMPUTE_ATOMIC_COUNTER_BUFFERS
	       GL_MAX_COMPUTE_FIXED_GROUP_INVOCATIONS_ARB
	       GL_MAX_COMPUTE_FIXED_GROUP_SIZE_ARB
	       GL_MAX_COMPUTE_IMAGE_UNIFORMS
	       GL_MAX_COMPUTE_SHADER_STORAGE_BLOCKS
	       GL_MAX_COMPUTE_SHARED_MEMORY_SIZE
	       GL_MAX_COMPUTE_TEXTURE_IMAGE_UNITS GL_MAX_COMPUTE_UNIFORM_BLOCKS
	       GL_MAX_COMPUTE_UNIFORM_COMPONENTS
	       GL_MAX_COMPUTE_VARIABLE_GROUP_INVOCATIONS_ARB
	       GL_MAX_COMPUTE_VARIABLE_GROUP_SIZE_ARB
	       GL_MAX_COMPUTE_WORK_GROUP_COUNT
	       GL_MAX_COMPUTE_WORK_GROUP_INVOCATIONS
	       GL_MAX_COMPUTE_WORK_GROUP_SIZE GL_MAX_CONVOLUTION_HEIGHT
	       GL_MAX_CONVOLUTION_HEIGHT_EXT GL_MAX_CONVOLUTION_WIDTH
	       GL_MAX_CONVOLUTION_WIDTH_EXT GL_MAX_CUBE_MAP_TEXTURE_SIZE
	       GL_MAX_CUBE_MAP_TEXTURE_SIZE_ARB
	       GL_MAX_CUBE_MAP_TEXTURE_SIZE_EXT GL_MAX_CULL_DISTANCES
	       GL_MAX_DEBUG_GROUP_STACK_DEPTH GL_MAX_DEBUG_LOGGED_MESSAGES
	       GL_MAX_DEBUG_LOGGED_MESSAGES_AMD
	       GL_MAX_DEBUG_LOGGED_MESSAGES_ARB GL_MAX_DEBUG_MESSAGE_LENGTH
	       GL_MAX_DEBUG_MESSAGE_LENGTH_AMD GL_MAX_DEBUG_MESSAGE_LENGTH_ARB
	       GL_MAX_DEEP_3D_TEXTURE_DEPTH_NV
	       GL_MAX_DEEP_3D_TEXTURE_WIDTH_HEIGHT_NV GL_MAX_DEPTH
	       GL_MAX_DEPTH_TEXTURE_SAMPLES GL_MAX_DRAW_BUFFERS
	       GL_MAX_DRAW_BUFFERS_ARB GL_MAX_DRAW_BUFFERS_ATI
	       GL_MAX_DUAL_SOURCE_DRAW_BUFFERS GL_MAX_ELEMENTS_INDICES
	       GL_MAX_ELEMENTS_INDICES_EXT GL_MAX_ELEMENTS_VERTICES
	       GL_MAX_ELEMENTS_VERTICES_EXT GL_MAX_ELEMENT_INDEX
	       GL_MAX_EVAL_ORDER GL_MAX_EXT GL_MAX_FRAGMENT_ATOMIC_COUNTERS
	       GL_MAX_FRAGMENT_ATOMIC_COUNTER_BUFFERS
	       GL_MAX_FRAGMENT_BINDABLE_UNIFORMS_EXT
	       GL_MAX_FRAGMENT_IMAGE_UNIFORMS GL_MAX_FRAGMENT_INPUT_COMPONENTS
	       GL_MAX_FRAGMENT_INTERPOLATION_OFFSET
	       GL_MAX_FRAGMENT_INTERPOLATION_OFFSET_NV
	       GL_MAX_FRAGMENT_LIGHTS_EXT
	       GL_MAX_FRAGMENT_PROGRAM_LOCAL_PARAMETERS_NV
	       GL_MAX_FRAGMENT_SHADER_STORAGE_BLOCKS
	       GL_MAX_FRAGMENT_UNIFORM_BLOCKS
	       GL_MAX_FRAGMENT_UNIFORM_COMPONENTS
	       GL_MAX_FRAGMENT_UNIFORM_COMPONENTS_ARB
	       GL_MAX_FRAGMENT_UNIFORM_VECTORS GL_MAX_FRAMEBUFFER_HEIGHT
	       GL_MAX_FRAMEBUFFER_LAYERS GL_MAX_FRAMEBUFFER_SAMPLES
	       GL_MAX_FRAMEBUFFER_WIDTH GL_MAX_GENERAL_COMBINERS_NV
	       GL_MAX_GEOMETRY_ATOMIC_COUNTERS
	       GL_MAX_GEOMETRY_ATOMIC_COUNTER_BUFFERS
	       GL_MAX_GEOMETRY_BINDABLE_UNIFORMS_EXT
	       GL_MAX_GEOMETRY_IMAGE_UNIFORMS GL_MAX_GEOMETRY_INPUT_COMPONENTS
	       GL_MAX_GEOMETRY_OUTPUT_COMPONENTS
	       GL_MAX_GEOMETRY_OUTPUT_VERTICES
	       GL_MAX_GEOMETRY_OUTPUT_VERTICES_ARB
	       GL_MAX_GEOMETRY_OUTPUT_VERTICES_EXT
	       GL_MAX_GEOMETRY_PROGRAM_INVOCATIONS_NV
	       GL_MAX_GEOMETRY_SHADER_INVOCATIONS
	       GL_MAX_GEOMETRY_SHADER_STORAGE_BLOCKS
	       GL_MAX_GEOMETRY_TEXTURE_IMAGE_UNITS
	       GL_MAX_GEOMETRY_TEXTURE_IMAGE_UNITS_ARB
	       GL_MAX_GEOMETRY_TEXTURE_IMAGE_UNITS_EXT
	       GL_MAX_GEOMETRY_TOTAL_OUTPUT_COMPONENTS
	       GL_MAX_GEOMETRY_TOTAL_OUTPUT_COMPONENTS_ARB
	       GL_MAX_GEOMETRY_TOTAL_OUTPUT_COMPONENTS_EXT
	       GL_MAX_GEOMETRY_UNIFORM_BLOCKS
	       GL_MAX_GEOMETRY_UNIFORM_COMPONENTS
	       GL_MAX_GEOMETRY_UNIFORM_COMPONENTS_ARB
	       GL_MAX_GEOMETRY_UNIFORM_COMPONENTS_EXT
	       GL_MAX_GEOMETRY_VARYING_COMPONENTS_ARB
	       GL_MAX_GEOMETRY_VARYING_COMPONENTS_EXT GL_MAX_GREEN_SGIS
	       GL_MAX_HEIGHT GL_MAX_IMAGE_SAMPLES GL_MAX_IMAGE_SAMPLES_EXT
	       GL_MAX_IMAGE_UNITS GL_MAX_IMAGE_UNITS_EXT GL_MAX_INTEGER_SAMPLES
	       GL_MAX_INTENSITY_SGIS GL_MAX_LABEL_LENGTH GL_MAX_LAYERS
	       GL_MAX_LGPU_GPUS_NVX GL_MAX_LIGHTS GL_MAX_LIST_NESTING
	       GL_MAX_LUMINANCE_SGIS GL_MAX_MAP_TESSELLATION_NV
	       GL_MAX_MATRIX_PALETTE_STACK_DEPTH_ARB
	       GL_MAX_MODELVIEW_STACK_DEPTH
	       GL_MAX_MULTISAMPLE_COVERAGE_MODES_NV GL_MAX_NAME_LENGTH
	       GL_MAX_NAME_STACK_DEPTH GL_MAX_NUM_ACTIVE_VARIABLES
	       GL_MAX_NUM_COMPATIBLE_SUBROUTINES
	       GL_MAX_OPTIMIZED_VERTEX_SHADER_INSTRUCTIONS_EXT
	       GL_MAX_OPTIMIZED_VERTEX_SHADER_INVARIANTS_EXT
	       GL_MAX_OPTIMIZED_VERTEX_SHADER_LOCALS_EXT
	       GL_MAX_OPTIMIZED_VERTEX_SHADER_LOCAL_CONSTANTS_EXT
	       GL_MAX_OPTIMIZED_VERTEX_SHADER_VARIANTS_EXT
	       GL_MAX_PALETTE_MATRICES_ARB GL_MAX_PATCH_VERTICES
	       GL_MAX_PIXEL_MAP_TABLE GL_MAX_PIXEL_TRANSFORM_2D_STACK_DEPTH_EXT
	       GL_MAX_PN_TRIANGLES_TESSELATION_LEVEL_ATI
	       GL_MAX_PROGRAM_ADDRESS_REGISTERS_ARB
	       GL_MAX_PROGRAM_ALU_INSTRUCTIONS_ARB GL_MAX_PROGRAM_ATTRIBS_ARB
	       GL_MAX_PROGRAM_ATTRIB_COMPONENTS_NV GL_MAX_PROGRAM_CALL_DEPTH_NV
	       GL_MAX_PROGRAM_ENV_PARAMETERS_ARB
	       GL_MAX_PROGRAM_EXEC_INSTRUCTIONS_NV
	       GL_MAX_PROGRAM_GENERIC_ATTRIBS_NV
	       GL_MAX_PROGRAM_GENERIC_RESULTS_NV GL_MAX_PROGRAM_IF_DEPTH_NV
	       GL_MAX_PROGRAM_INSTRUCTIONS_ARB
	       GL_MAX_PROGRAM_LOCAL_PARAMETERS_ARB GL_MAX_PROGRAM_LOOP_COUNT_NV
	       GL_MAX_PROGRAM_LOOP_DEPTH_NV GL_MAX_PROGRAM_MATRICES_ARB
	       GL_MAX_PROGRAM_MATRIX_STACK_DEPTH_ARB
	       GL_MAX_PROGRAM_NATIVE_ADDRESS_REGISTERS_ARB
	       GL_MAX_PROGRAM_NATIVE_ALU_INSTRUCTIONS_ARB
	       GL_MAX_PROGRAM_NATIVE_ATTRIBS_ARB
	       GL_MAX_PROGRAM_NATIVE_INSTRUCTIONS_ARB
	       GL_MAX_PROGRAM_NATIVE_PARAMETERS_ARB
	       GL_MAX_PROGRAM_NATIVE_TEMPORARIES_ARB
	       GL_MAX_PROGRAM_NATIVE_TEX_INDIRECTIONS_ARB
	       GL_MAX_PROGRAM_NATIVE_TEX_INSTRUCTIONS_ARB
	       GL_MAX_PROGRAM_OUTPUT_VERTICES_NV GL_MAX_PROGRAM_PARAMETERS_ARB
	       GL_MAX_PROGRAM_PARAMETER_BUFFER_BINDINGS_NV
	       GL_MAX_PROGRAM_PARAMETER_BUFFER_SIZE_NV
	       GL_MAX_PROGRAM_PATCH_ATTRIBS_NV
	       GL_MAX_PROGRAM_RESULT_COMPONENTS_NV
	       GL_MAX_PROGRAM_TEMPORARIES_ARB GL_MAX_PROGRAM_TEXEL_OFFSET
	       GL_MAX_PROGRAM_TEXEL_OFFSET_NV
	       GL_MAX_PROGRAM_TEXTURE_GATHER_COMPONENTS
	       GL_MAX_PROGRAM_TEXTURE_GATHER_COMPONENTS_ARB
	       GL_MAX_PROGRAM_TEXTURE_GATHER_OFFSET
	       GL_MAX_PROGRAM_TEXTURE_GATHER_OFFSET_ARB
	       GL_MAX_PROGRAM_TEXTURE_GATHER_OFFSET_NV
	       GL_MAX_PROGRAM_TEX_INDIRECTIONS_ARB
	       GL_MAX_PROGRAM_TEX_INSTRUCTIONS_ARB
	       GL_MAX_PROGRAM_TOTAL_OUTPUT_COMPONENTS_NV
	       GL_MAX_PROJECTION_STACK_DEPTH GL_MAX_RASTER_SAMPLES_EXT
	       GL_MAX_RATIONAL_EVAL_ORDER_NV GL_MAX_RECTANGLE_TEXTURE_SIZE
	       GL_MAX_RECTANGLE_TEXTURE_SIZE_ARB
	       GL_MAX_RECTANGLE_TEXTURE_SIZE_EXT
	       GL_MAX_RECTANGLE_TEXTURE_SIZE_NV GL_MAX_RED_SGIS
	       GL_MAX_RENDERBUFFER_SIZE GL_MAX_RENDERBUFFER_SIZE_EXT
	       GL_MAX_SAMPLES GL_MAX_SAMPLES_ANGLE GL_MAX_SAMPLES_EXT
	       GL_MAX_SAMPLE_MASK_WORDS GL_MAX_SAMPLE_MASK_WORDS_NV
	       GL_MAX_SERVER_WAIT_TIMEOUT GL_MAX_SHADER_BUFFER_ADDRESS_NV
	       GL_MAX_SHADER_COMPILER_THREADS_ARB
	       GL_MAX_SHADER_STORAGE_BLOCK_SIZE
	       GL_MAX_SHADER_STORAGE_BUFFER_BINDINGS GL_MAX_SHININESS_NV
	       GL_MAX_SPARSE_3D_TEXTURE_SIZE_AMD
	       GL_MAX_SPARSE_3D_TEXTURE_SIZE_ARB
	       GL_MAX_SPARSE_ARRAY_TEXTURE_LAYERS
	       GL_MAX_SPARSE_ARRAY_TEXTURE_LAYERS_ARB
	       GL_MAX_SPARSE_TEXTURE_SIZE_AMD GL_MAX_SPARSE_TEXTURE_SIZE_ARB
	       GL_MAX_SPOT_EXPONENT_NV GL_MAX_SUBPIXEL_PRECISION_BIAS_BITS_NV
	       GL_MAX_SUBROUTINES GL_MAX_SUBROUTINE_UNIFORM_LOCATIONS
	       GL_MAX_TESS_CONTROL_ATOMIC_COUNTERS
	       GL_MAX_TESS_CONTROL_ATOMIC_COUNTER_BUFFERS
	       GL_MAX_TESS_CONTROL_IMAGE_UNIFORMS
	       GL_MAX_TESS_CONTROL_INPUT_COMPONENTS
	       GL_MAX_TESS_CONTROL_OUTPUT_COMPONENTS
	       GL_MAX_TESS_CONTROL_SHADER_STORAGE_BLOCKS
	       GL_MAX_TESS_CONTROL_TEXTURE_IMAGE_UNITS
	       GL_MAX_TESS_CONTROL_TOTAL_OUTPUT_COMPONENTS
	       GL_MAX_TESS_CONTROL_UNIFORM_BLOCKS
	       GL_MAX_TESS_CONTROL_UNIFORM_COMPONENTS
	       GL_MAX_TESS_EVALUATION_ATOMIC_COUNTERS
	       GL_MAX_TESS_EVALUATION_ATOMIC_COUNTER_BUFFERS
	       GL_MAX_TESS_EVALUATION_IMAGE_UNIFORMS
	       GL_MAX_TESS_EVALUATION_INPUT_COMPONENTS
	       GL_MAX_TESS_EVALUATION_OUTPUT_COMPONENTS
	       GL_MAX_TESS_EVALUATION_SHADER_STORAGE_BLOCKS
	       GL_MAX_TESS_EVALUATION_TEXTURE_IMAGE_UNITS
	       GL_MAX_TESS_EVALUATION_UNIFORM_BLOCKS
	       GL_MAX_TESS_EVALUATION_UNIFORM_COMPONENTS GL_MAX_TESS_GEN_LEVEL
	       GL_MAX_TESS_PATCH_COMPONENTS GL_MAX_TEXTURE_BUFFER_SIZE
	       GL_MAX_TEXTURE_BUFFER_SIZE_ARB GL_MAX_TEXTURE_BUFFER_SIZE_EXT
	       GL_MAX_TEXTURE_COORDS GL_MAX_TEXTURE_COORDS_ARB
	       GL_MAX_TEXTURE_COORDS_NV GL_MAX_TEXTURE_IMAGE_UNITS
	       GL_MAX_TEXTURE_IMAGE_UNITS_ARB GL_MAX_TEXTURE_IMAGE_UNITS_NV
	       GL_MAX_TEXTURE_LOD_BIAS GL_MAX_TEXTURE_LOD_BIAS_EXT
	       GL_MAX_TEXTURE_MAX_ANISOTROPY_EXT GL_MAX_TEXTURE_SIZE
	       GL_MAX_TEXTURE_STACK_DEPTH GL_MAX_TEXTURE_UNITS
	       GL_MAX_TEXTURE_UNITS_ARB GL_MAX_TRACK_MATRICES_NV
	       GL_MAX_TRACK_MATRIX_STACK_DEPTH_NV
	       GL_MAX_TRANSFORM_FEEDBACK_BUFFERS
	       GL_MAX_TRANSFORM_FEEDBACK_INTERLEAVED_COMPONENTS
	       GL_MAX_TRANSFORM_FEEDBACK_INTERLEAVED_COMPONENTS_EXT
	       GL_MAX_TRANSFORM_FEEDBACK_INTERLEAVED_COMPONENTS_NV
	       GL_MAX_TRANSFORM_FEEDBACK_SEPARATE_ATTRIBS
	       GL_MAX_TRANSFORM_FEEDBACK_SEPARATE_ATTRIBS_EXT
	       GL_MAX_TRANSFORM_FEEDBACK_SEPARATE_ATTRIBS_NV
	       GL_MAX_TRANSFORM_FEEDBACK_SEPARATE_COMPONENTS
	       GL_MAX_TRANSFORM_FEEDBACK_SEPARATE_COMPONENTS_EXT
	       GL_MAX_TRANSFORM_FEEDBACK_SEPARATE_COMPONENTS_NV
	       GL_MAX_UNIFORM_BLOCK_SIZE GL_MAX_UNIFORM_BUFFER_BINDINGS
	       GL_MAX_UNIFORM_LOCATIONS GL_MAX_VARYING_COMPONENTS
	       GL_MAX_VARYING_COMPONENTS_EXT GL_MAX_VARYING_FLOATS
	       GL_MAX_VARYING_FLOATS_ARB GL_MAX_VARYING_VECTORS
	       GL_MAX_VERTEX_ARRAY_RANGE_ELEMENT_APPLE
	       GL_MAX_VERTEX_ARRAY_RANGE_ELEMENT_NV
	       GL_MAX_VERTEX_ATOMIC_COUNTERS
	       GL_MAX_VERTEX_ATOMIC_COUNTER_BUFFERS GL_MAX_VERTEX_ATTRIBS
	       GL_MAX_VERTEX_ATTRIBS_ARB GL_MAX_VERTEX_ATTRIB_BINDINGS
	       GL_MAX_VERTEX_ATTRIB_RELATIVE_OFFSET GL_MAX_VERTEX_ATTRIB_STRIDE
	       GL_MAX_VERTEX_BINDABLE_UNIFORMS_EXT GL_MAX_VERTEX_HINT_PGI
	       GL_MAX_VERTEX_IMAGE_UNIFORMS GL_MAX_VERTEX_OUTPUT_COMPONENTS
	       GL_MAX_VERTEX_SHADER_INSTRUCTIONS_EXT
	       GL_MAX_VERTEX_SHADER_INVARIANTS_EXT
	       GL_MAX_VERTEX_SHADER_LOCALS_EXT
	       GL_MAX_VERTEX_SHADER_LOCAL_CONSTANTS_EXT
	       GL_MAX_VERTEX_SHADER_STORAGE_BLOCKS
	       GL_MAX_VERTEX_SHADER_VARIANTS_EXT GL_MAX_VERTEX_STREAMS
	       GL_MAX_VERTEX_STREAMS_ATI GL_MAX_VERTEX_TEXTURE_IMAGE_UNITS
	       GL_MAX_VERTEX_TEXTURE_IMAGE_UNITS_ARB
	       GL_MAX_VERTEX_UNIFORM_BLOCKS GL_MAX_VERTEX_UNIFORM_COMPONENTS
	       GL_MAX_VERTEX_UNIFORM_COMPONENTS_ARB
	       GL_MAX_VERTEX_UNIFORM_VECTORS GL_MAX_VERTEX_UNITS_ARB
	       GL_MAX_VERTEX_VARYING_COMPONENTS_ARB
	       GL_MAX_VERTEX_VARYING_COMPONENTS_EXT GL_MAX_VIEWPORTS
	       GL_MAX_VIEWPORT_DIMS GL_MAX_VIEWS_OVR GL_MAX_WIDTH
	       GL_MAX_WINDOW_RECTANGLES_EXT GL_MEDIUM_FLOAT GL_MEDIUM_INT
	       GL_MESAX_texture_stack GL_MESA_pack_invert
	       GL_MESA_resize_buffers GL_MESA_shader_integer_functions
	       GL_MESA_window_pos GL_MESA_ycbcr_texture GL_MIN GL_MINMAX
	       GL_MINMAX_EXT GL_MINMAX_FORMAT GL_MINMAX_FORMAT_EXT
	       GL_MINMAX_SINK GL_MINMAX_SINK_EXT GL_MINOR_VERSION
	       GL_MINUS_CLAMPED_NV GL_MINUS_NV GL_MIN_ALPHA_SGIS
	       GL_MIN_BLUE_SGIS GL_MIN_EXT GL_MIN_FRAGMENT_INTERPOLATION_OFFSET
	       GL_MIN_FRAGMENT_INTERPOLATION_OFFSET_NV GL_MIN_GREEN_SGIS
	       GL_MIN_INTENSITY_SGIS GL_MIN_LOD_WARNING_AMD
	       GL_MIN_LUMINANCE_SGIS GL_MIN_MAP_BUFFER_ALIGNMENT
	       GL_MIN_PBUFFER_VIEWPORT_DIMS_APPLE GL_MIN_PROGRAM_TEXEL_OFFSET
	       GL_MIN_PROGRAM_TEXEL_OFFSET_NV
	       GL_MIN_PROGRAM_TEXTURE_GATHER_OFFSET
	       GL_MIN_PROGRAM_TEXTURE_GATHER_OFFSET_ARB
	       GL_MIN_PROGRAM_TEXTURE_GATHER_OFFSET_NV GL_MIN_RED_SGIS
	       GL_MIN_SAMPLE_SHADING_VALUE GL_MIN_SAMPLE_SHADING_VALUE_ARB
	       GL_MIN_SPARSE_LEVEL_AMD GL_MIPMAP GL_MIRRORED_REPEAT
	       GL_MIRRORED_REPEAT_ARB GL_MIRRORED_REPEAT_IBM
	       GL_MIRROR_CLAMP_ATI GL_MIRROR_CLAMP_EXT
	       GL_MIRROR_CLAMP_TO_BORDER_EXT GL_MIRROR_CLAMP_TO_EDGE
	       GL_MIRROR_CLAMP_TO_EDGE_ATI GL_MIRROR_CLAMP_TO_EDGE_EXT
	       GL_MISSING_REGAL GL_MITER_REVERT_NV GL_MITER_TRUNCATE_NV
	       GL_MIXED_DEPTH_SAMPLES_SUPPORTED_NV
	       GL_MIXED_STENCIL_SAMPLES_SUPPORTED_NV GL_MODELVIEW
	       GL_MODELVIEW0_ARB GL_MODELVIEW0_EXT GL_MODELVIEW0_MATRIX_EXT
	       GL_MODELVIEW0_STACK_DEPTH_EXT GL_MODELVIEW10_ARB
	       GL_MODELVIEW11_ARB GL_MODELVIEW12_ARB GL_MODELVIEW13_ARB
	       GL_MODELVIEW14_ARB GL_MODELVIEW15_ARB GL_MODELVIEW16_ARB
	       GL_MODELVIEW17_ARB GL_MODELVIEW18_ARB GL_MODELVIEW19_ARB
	       GL_MODELVIEW1_ARB GL_MODELVIEW1_EXT GL_MODELVIEW1_MATRIX_EXT
	       GL_MODELVIEW1_STACK_DEPTH_EXT GL_MODELVIEW20_ARB
	       GL_MODELVIEW21_ARB GL_MODELVIEW22_ARB GL_MODELVIEW23_ARB
	       GL_MODELVIEW24_ARB GL_MODELVIEW25_ARB GL_MODELVIEW26_ARB
	       GL_MODELVIEW27_ARB GL_MODELVIEW28_ARB GL_MODELVIEW29_ARB
	       GL_MODELVIEW2_ARB GL_MODELVIEW30_ARB GL_MODELVIEW31_ARB
	       GL_MODELVIEW3_ARB GL_MODELVIEW4_ARB GL_MODELVIEW5_ARB
	       GL_MODELVIEW6_ARB GL_MODELVIEW7_ARB GL_MODELVIEW8_ARB
	       GL_MODELVIEW9_ARB GL_MODELVIEW_MATRIX GL_MODELVIEW_PROJECTION_NV
	       GL_MODELVIEW_STACK_DEPTH GL_MODULATE GL_MODULATE_ADD_ATI
	       GL_MODULATE_ADD_ATIX GL_MODULATE_SIGNED_ADD_ATI
	       GL_MODULATE_SIGNED_ADD_ATIX GL_MODULATE_SUBTRACT_ATI
	       GL_MODULATE_SUBTRACT_ATIX GL_MOVE_TO_CONTINUES_NV GL_MOVE_TO_NV
	       GL_MOVE_TO_RESETS_NV GL_MOV_ATI GL_MULT GL_MULTICAST_GPUS_NV
	       GL_MULTICAST_PROGRAMMABLE_SAMPLE_LOCATION_NV GL_MULTIPLY_KHR
	       GL_MULTIPLY_NV GL_MULTISAMPLE GL_MULTISAMPLES_NV
	       GL_MULTISAMPLE_3DFX GL_MULTISAMPLE_ARB GL_MULTISAMPLE_BIT
	       GL_MULTISAMPLE_BIT_3DFX GL_MULTISAMPLE_BIT_ARB
	       GL_MULTISAMPLE_BIT_EXT GL_MULTISAMPLE_COVERAGE_MODES_NV
	       GL_MULTISAMPLE_EXT GL_MULTISAMPLE_FILTER_HINT_NV
	       GL_MULTISAMPLE_LINE_WIDTH_GRANULARITY_ARB
	       GL_MULTISAMPLE_LINE_WIDTH_RANGE_ARB
	       GL_MULTISAMPLE_RASTERIZATION_ALLOWED_EXT GL_MULTISAMPLE_SGIS
	       GL_MUL_ATI GL_MVP_MATRIX_EXT GL_N3F_V3F
	       GL_NAMED_STRING_LENGTH_ARB GL_NAMED_STRING_TYPE_ARB
	       GL_NAME_LENGTH GL_NAME_STACK_DEPTH GL_NAND
	       GL_NATIVE_GRAPHICS_BEGIN_HINT_PGI
	       GL_NATIVE_GRAPHICS_END_HINT_PGI GL_NATIVE_GRAPHICS_HANDLE_PGI
	       GL_NEAREST GL_NEAREST_MIPMAP_LINEAR GL_NEAREST_MIPMAP_NEAREST
	       GL_NEGATE_BIT_ATI GL_NEGATIVE_ONE_EXT GL_NEGATIVE_ONE_TO_ONE
	       GL_NEGATIVE_W_EXT GL_NEGATIVE_X_EXT GL_NEGATIVE_Y_EXT
	       GL_NEGATIVE_Z_EXT GL_NEVER
	       GL_NEXT_VIDEO_CAPTURE_BUFFER_STATUS_NV GL_NICEST GL_NONE GL_NOOP
	       GL_NOP_COMMAND_NV GL_NOR GL_NORMALIZE GL_NORMALIZED_RANGE_EXT
	       GL_NORMAL_ARRAY GL_NORMAL_ARRAY_ADDRESS_NV
	       GL_NORMAL_ARRAY_BUFFER_BINDING
	       GL_NORMAL_ARRAY_BUFFER_BINDING_ARB GL_NORMAL_ARRAY_COUNT_EXT
	       GL_NORMAL_ARRAY_EXT GL_NORMAL_ARRAY_LENGTH_NV
	       GL_NORMAL_ARRAY_LIST_IBM GL_NORMAL_ARRAY_LIST_STRIDE_IBM
	       GL_NORMAL_ARRAY_PARALLEL_POINTERS_INTEL GL_NORMAL_ARRAY_POINTER
	       GL_NORMAL_ARRAY_POINTER_EXT GL_NORMAL_ARRAY_STRIDE
	       GL_NORMAL_ARRAY_STRIDE_EXT GL_NORMAL_ARRAY_TYPE
	       GL_NORMAL_ARRAY_TYPE_EXT GL_NORMAL_BIT_PGI GL_NORMAL_MAP
	       GL_NORMAL_MAP_ARB GL_NORMAL_MAP_EXT GL_NORMAL_MAP_NV GL_NOTEQUAL
	       GL_NO_ERROR GL_NO_RESET_NOTIFICATION
	       GL_NO_RESET_NOTIFICATION_ARB GL_NUM_ACTIVE_VARIABLES
	       GL_NUM_COMPATIBLE_SUBROUTINES GL_NUM_COMPRESSED_TEXTURE_FORMATS
	       GL_NUM_COMPRESSED_TEXTURE_FORMATS_ARB GL_NUM_EXTENSIONS
	       GL_NUM_FILL_STREAMS_NV GL_NUM_FRAGMENT_CONSTANTS_ATI
	       GL_NUM_FRAGMENT_REGISTERS_ATI GL_NUM_GENERAL_COMBINERS_NV
	       GL_NUM_INPUT_INTERPOLATOR_COMPONENTS_ATI
	       GL_NUM_INSTRUCTIONS_PER_PASS_ATI GL_NUM_INSTRUCTIONS_TOTAL_ATI
	       GL_NUM_LOOPBACK_COMPONENTS_ATI GL_NUM_PASSES_ATI
	       GL_NUM_PROGRAM_BINARY_FORMATS GL_NUM_SAMPLE_COUNTS
	       GL_NUM_SHADER_BINARY_FORMATS GL_NUM_SHADING_LANGUAGE_VERSIONS
	       GL_NUM_SPARSE_LEVELS_ARB GL_NUM_VIDEO_CAPTURE_STREAMS_NV
	       GL_NUM_VIRTUAL_PAGE_SIZES_ARB GL_NUM_WINDOW_RECTANGLES_EXT
	       GL_NVX_blend_equation_advanced_multi_draw_buffers
	       GL_NVX_conditional_render GL_NVX_gpu_memory_info
	       GL_NVX_linked_gpu_multicast GL_NV_bindless_multi_draw_indirect
	       GL_NV_bindless_multi_draw_indirect_count GL_NV_bindless_texture
	       GL_NV_blend_equation_advanced
	       GL_NV_blend_equation_advanced_coherent GL_NV_blend_square
	       GL_NV_clip_space_w_scaling GL_NV_command_list
	       GL_NV_compute_program5 GL_NV_conditional_render
	       GL_NV_conservative_raster GL_NV_conservative_raster_dilate
	       GL_NV_conservative_raster_pre_snap_triangles
	       GL_NV_copy_depth_to_color GL_NV_copy_image GL_NV_deep_texture3D
	       GL_NV_depth_buffer_float GL_NV_depth_clamp
	       GL_NV_depth_range_unclamped GL_NV_draw_texture
	       GL_NV_draw_vulkan_image GL_NV_evaluators
	       GL_NV_explicit_multisample GL_NV_fence GL_NV_fill_rectangle
	       GL_NV_float_buffer GL_NV_fog_distance
	       GL_NV_fragment_coverage_to_color GL_NV_fragment_program
	       GL_NV_fragment_program2 GL_NV_fragment_program4
	       GL_NV_fragment_program_option GL_NV_fragment_shader_interlock
	       GL_NV_framebuffer_mixed_samples
	       GL_NV_framebuffer_multisample_coverage GL_NV_geometry_program4
	       GL_NV_geometry_shader4 GL_NV_geometry_shader_passthrough
	       GL_NV_gpu_multicast GL_NV_gpu_program4 GL_NV_gpu_program5
	       GL_NV_gpu_program5_mem_extended GL_NV_gpu_program_fp64
	       GL_NV_gpu_shader5 GL_NV_half_float
	       GL_NV_internalformat_sample_query GL_NV_light_max_exponent
	       GL_NV_multisample_coverage GL_NV_multisample_filter_hint
	       GL_NV_occlusion_query GL_NV_packed_depth_stencil
	       GL_NV_parameter_buffer_object GL_NV_parameter_buffer_object2
	       GL_NV_path_rendering GL_NV_path_rendering_shared_edge
	       GL_NV_pixel_data_range GL_NV_point_sprite GL_NV_present_video
	       GL_NV_primitive_restart GL_NV_register_combiners
	       GL_NV_register_combiners2 GL_NV_robustness_video_memory_purge
	       GL_NV_sample_locations GL_NV_sample_mask_override_coverage
	       GL_NV_shader_atomic_counters GL_NV_shader_atomic_float
	       GL_NV_shader_atomic_float64 GL_NV_shader_atomic_fp16_vector
	       GL_NV_shader_atomic_int64 GL_NV_shader_buffer_load
	       GL_NV_shader_storage_buffer_object GL_NV_shader_thread_group
	       GL_NV_shader_thread_shuffle GL_NV_stereo_view_rendering
	       GL_NV_tessellation_program5 GL_NV_texgen_emboss
	       GL_NV_texgen_reflection GL_NV_texture_barrier
	       GL_NV_texture_compression_vtc GL_NV_texture_env_combine4
	       GL_NV_texture_expand_normal GL_NV_texture_multisample
	       GL_NV_texture_rectangle GL_NV_texture_shader
	       GL_NV_texture_shader2 GL_NV_texture_shader3
	       GL_NV_transform_feedback GL_NV_transform_feedback2
	       GL_NV_uniform_buffer_unified_memory GL_NV_vdpau_interop
	       GL_NV_vertex_array_range GL_NV_vertex_array_range2
	       GL_NV_vertex_attrib_integer_64bit
	       GL_NV_vertex_buffer_unified_memory GL_NV_vertex_program
	       GL_NV_vertex_program1_1 GL_NV_vertex_program2
	       GL_NV_vertex_program2_option GL_NV_vertex_program3
	       GL_NV_vertex_program4 GL_NV_video_capture GL_NV_viewport_array2
	       GL_NV_viewport_swizzle GL_OBJECT_ACTIVE_ATTRIBUTES_ARB
	       GL_OBJECT_ACTIVE_ATTRIBUTE_MAX_LENGTH_ARB
	       GL_OBJECT_ACTIVE_UNIFORMS_ARB
	       GL_OBJECT_ACTIVE_UNIFORM_MAX_LENGTH_ARB
	       GL_OBJECT_ATTACHED_OBJECTS_ARB GL_OBJECT_BUFFER_SIZE_ATI
	       GL_OBJECT_BUFFER_USAGE_ATI GL_OBJECT_COMPILE_STATUS_ARB
	       GL_OBJECT_DELETE_STATUS_ARB GL_OBJECT_DISTANCE_TO_LINE_SGIS
	       GL_OBJECT_DISTANCE_TO_POINT_SGIS GL_OBJECT_INFO_LOG_LENGTH_ARB
	       GL_OBJECT_LINEAR GL_OBJECT_LINE_SGIS GL_OBJECT_LINK_STATUS_ARB
	       GL_OBJECT_PLANE GL_OBJECT_POINT_SGIS
	       GL_OBJECT_SHADER_SOURCE_LENGTH_ARB GL_OBJECT_SUBTYPE_ARB
	       GL_OBJECT_TYPE GL_OBJECT_TYPE_ARB GL_OBJECT_VALIDATE_STATUS_ARB
	       GL_OCCLUSION_QUERY_EVENT_MASK_AMD GL_OES_byte_coordinates
	       GL_OES_compressed_paletted_texture GL_OES_read_format
	       GL_OES_single_precision GL_OFFSET
	       GL_OFFSET_HILO_PROJECTIVE_TEXTURE_2D_NV
	       GL_OFFSET_HILO_PROJECTIVE_TEXTURE_RECTANGLE_NV
	       GL_OFFSET_HILO_TEXTURE_2D_NV GL_OFFSET_HILO_TEXTURE_RECTANGLE_NV
	       GL_OFFSET_PROJECTIVE_TEXTURE_2D_NV
	       GL_OFFSET_PROJECTIVE_TEXTURE_2D_SCALE_NV
	       GL_OFFSET_PROJECTIVE_TEXTURE_RECTANGLE_NV
	       GL_OFFSET_PROJECTIVE_TEXTURE_RECTANGLE_SCALE_NV
	       GL_OFFSET_TEXTURE_2D_BIAS_NV GL_OFFSET_TEXTURE_2D_MATRIX_NV
	       GL_OFFSET_TEXTURE_2D_NV GL_OFFSET_TEXTURE_2D_SCALE_NV
	       GL_OFFSET_TEXTURE_BIAS_NV GL_OFFSET_TEXTURE_MATRIX_NV
	       GL_OFFSET_TEXTURE_RECTANGLE_NV
	       GL_OFFSET_TEXTURE_RECTANGLE_SCALE_NV GL_OFFSET_TEXTURE_SCALE_NV
	       GL_OML_interlace GL_OML_resample GL_OML_subsample GL_ONE
	       GL_ONE_EXT GL_ONE_MINUS_CONSTANT_ALPHA
	       GL_ONE_MINUS_CONSTANT_ALPHA_EXT GL_ONE_MINUS_CONSTANT_COLOR
	       GL_ONE_MINUS_CONSTANT_COLOR_EXT GL_ONE_MINUS_DST_ALPHA
	       GL_ONE_MINUS_DST_COLOR GL_ONE_MINUS_SRC1_ALPHA
	       GL_ONE_MINUS_SRC1_COLOR GL_ONE_MINUS_SRC_ALPHA
	       GL_ONE_MINUS_SRC_COLOR GL_OPERAND0_ALPHA GL_OPERAND0_ALPHA_ARB
	       GL_OPERAND0_ALPHA_EXT GL_OPERAND0_RGB GL_OPERAND0_RGB_ARB
	       GL_OPERAND0_RGB_EXT GL_OPERAND1_ALPHA GL_OPERAND1_ALPHA_ARB
	       GL_OPERAND1_ALPHA_EXT GL_OPERAND1_RGB GL_OPERAND1_RGB_ARB
	       GL_OPERAND1_RGB_EXT GL_OPERAND2_ALPHA GL_OPERAND2_ALPHA_ARB
	       GL_OPERAND2_ALPHA_EXT GL_OPERAND2_RGB GL_OPERAND2_RGB_ARB
	       GL_OPERAND2_RGB_EXT GL_OPERAND3_ALPHA_NV GL_OPERAND3_RGB_NV
	       GL_OP_ADD_EXT GL_OP_CLAMP_EXT GL_OP_CROSS_PRODUCT_EXT
	       GL_OP_DOT3_EXT GL_OP_DOT4_EXT GL_OP_EXP_BASE_2_EXT
	       GL_OP_FLOOR_EXT GL_OP_FRAC_EXT GL_OP_INDEX_EXT
	       GL_OP_LOG_BASE_2_EXT GL_OP_MADD_EXT GL_OP_MAX_EXT GL_OP_MIN_EXT
	       GL_OP_MOV_EXT GL_OP_MULTIPLY_MATRIX_EXT GL_OP_MUL_EXT
	       GL_OP_NEGATE_EXT GL_OP_POWER_EXT GL_OP_RECIP_EXT
	       GL_OP_RECIP_SQRT_EXT GL_OP_ROUND_EXT GL_OP_SET_GE_EXT
	       GL_OP_SET_LT_EXT GL_OP_SUB_EXT GL_OR GL_ORDER GL_OR_INVERTED
	       GL_OR_REVERSE GL_OUTPUT_COLOR0_EXT GL_OUTPUT_COLOR1_EXT
	       GL_OUTPUT_FOG_EXT GL_OUTPUT_POINT_SIZE_ATIX
	       GL_OUTPUT_TEXTURE_COORD0_EXT GL_OUTPUT_TEXTURE_COORD10_EXT
	       GL_OUTPUT_TEXTURE_COORD11_EXT GL_OUTPUT_TEXTURE_COORD12_EXT
	       GL_OUTPUT_TEXTURE_COORD13_EXT GL_OUTPUT_TEXTURE_COORD14_EXT
	       GL_OUTPUT_TEXTURE_COORD15_EXT GL_OUTPUT_TEXTURE_COORD16_EXT
	       GL_OUTPUT_TEXTURE_COORD17_EXT GL_OUTPUT_TEXTURE_COORD18_EXT
	       GL_OUTPUT_TEXTURE_COORD19_EXT GL_OUTPUT_TEXTURE_COORD1_EXT
	       GL_OUTPUT_TEXTURE_COORD20_EXT GL_OUTPUT_TEXTURE_COORD21_EXT
	       GL_OUTPUT_TEXTURE_COORD22_EXT GL_OUTPUT_TEXTURE_COORD23_EXT
	       GL_OUTPUT_TEXTURE_COORD24_EXT GL_OUTPUT_TEXTURE_COORD25_EXT
	       GL_OUTPUT_TEXTURE_COORD26_EXT GL_OUTPUT_TEXTURE_COORD27_EXT
	       GL_OUTPUT_TEXTURE_COORD28_EXT GL_OUTPUT_TEXTURE_COORD29_EXT
	       GL_OUTPUT_TEXTURE_COORD2_EXT GL_OUTPUT_TEXTURE_COORD30_EXT
	       GL_OUTPUT_TEXTURE_COORD31_EXT GL_OUTPUT_TEXTURE_COORD3_EXT
	       GL_OUTPUT_TEXTURE_COORD4_EXT GL_OUTPUT_TEXTURE_COORD5_EXT
	       GL_OUTPUT_TEXTURE_COORD6_EXT GL_OUTPUT_TEXTURE_COORD7_EXT
	       GL_OUTPUT_TEXTURE_COORD8_EXT GL_OUTPUT_TEXTURE_COORD9_EXT
	       GL_OUTPUT_VERTEX_EXT GL_OUT_OF_MEMORY GL_OVERLAY_KHR
	       GL_OVERLAY_NV GL_OVR_multiview GL_OVR_multiview2
	       GL_PACK_ALIGNMENT GL_PACK_CMYK_HINT_EXT
	       GL_PACK_COMPRESSED_BLOCK_DEPTH GL_PACK_COMPRESSED_BLOCK_HEIGHT
	       GL_PACK_COMPRESSED_BLOCK_SIZE GL_PACK_COMPRESSED_BLOCK_WIDTH
	       GL_PACK_IMAGE_HEIGHT GL_PACK_IMAGE_HEIGHT_EXT
	       GL_PACK_INVERT_MESA GL_PACK_LSB_FIRST GL_PACK_RESAMPLE_OML
	       GL_PACK_RESAMPLE_SGIX GL_PACK_REVERSE_ROW_ORDER_ANGLE
	       GL_PACK_ROW_BYTES_APPLE GL_PACK_ROW_LENGTH GL_PACK_SKIP_IMAGES
	       GL_PACK_SKIP_IMAGES_EXT GL_PACK_SKIP_PIXELS GL_PACK_SKIP_ROWS
	       GL_PACK_SWAP_BYTES GL_PALETTE4_R5_G6_B5_OES
	       GL_PALETTE4_RGB5_A1_OES GL_PALETTE4_RGB8_OES
	       GL_PALETTE4_RGBA4_OES GL_PALETTE4_RGBA8_OES
	       GL_PALETTE8_R5_G6_B5_OES GL_PALETTE8_RGB5_A1_OES
	       GL_PALETTE8_RGB8_OES GL_PALETTE8_RGBA4_OES GL_PALETTE8_RGBA8_OES
	       GL_PARALLEL_ARRAYS_INTEL GL_PARAMETER_BUFFER_ARB
	       GL_PARAMETER_BUFFER_BINDING_ARB GL_PARTIAL_SUCCESS_NV
	       GL_PASS_THROUGH_NV GL_PASS_THROUGH_TOKEN GL_PATCHES
	       GL_PATCH_DEFAULT_INNER_LEVEL GL_PATCH_DEFAULT_OUTER_LEVEL
	       GL_PATCH_VERTICES GL_PATH_CLIENT_LENGTH_NV
	       GL_PATH_COMMAND_COUNT_NV GL_PATH_COMPUTED_LENGTH_NV
	       GL_PATH_COORD_COUNT_NV GL_PATH_COVER_DEPTH_FUNC_NV
	       GL_PATH_DASH_ARRAY_COUNT_NV GL_PATH_DASH_CAPS_NV
	       GL_PATH_DASH_OFFSET_NV GL_PATH_DASH_OFFSET_RESET_NV
	       GL_PATH_END_CAPS_NV GL_PATH_ERROR_POSITION_NV
	       GL_PATH_FILL_BOUNDING_BOX_NV GL_PATH_FILL_COVER_MODE_NV
	       GL_PATH_FILL_MASK_NV GL_PATH_FILL_MODE_NV
	       GL_PATH_FOG_GEN_MODE_NV GL_PATH_FORMAT_PS_NV
	       GL_PATH_FORMAT_SVG_NV GL_PATH_GEN_COEFF_NV
	       GL_PATH_GEN_COLOR_FORMAT_NV GL_PATH_GEN_COMPONENTS_NV
	       GL_PATH_GEN_MODE_NV GL_PATH_INITIAL_DASH_CAP_NV
	       GL_PATH_INITIAL_END_CAP_NV GL_PATH_JOIN_STYLE_NV
	       GL_PATH_MITER_LIMIT_NV GL_PATH_OBJECT_BOUNDING_BOX_NV
	       GL_PATH_STENCIL_DEPTH_OFFSET_FACTOR_NV
	       GL_PATH_STENCIL_DEPTH_OFFSET_UNITS_NV GL_PATH_STENCIL_FUNC_NV
	       GL_PATH_STENCIL_REF_NV GL_PATH_STENCIL_VALUE_MASK_NV
	       GL_PATH_STROKE_BOUNDING_BOX_NV GL_PATH_STROKE_BOUND_NV
	       GL_PATH_STROKE_COVER_MODE_NV GL_PATH_STROKE_MASK_NV
	       GL_PATH_STROKE_WIDTH_NV GL_PATH_TERMINAL_DASH_CAP_NV
	       GL_PATH_TERMINAL_END_CAP_NV GL_PERCENTAGE_AMD
	       GL_PERFMON_RESULT_AMD GL_PERFMON_RESULT_AVAILABLE_AMD
	       GL_PERFMON_RESULT_SIZE_AMD GL_PERFORMANCE_MONITOR_AMD
	       GL_PERFQUERY_COUNTER_DATA_BOOL32_INTEL
	       GL_PERFQUERY_COUNTER_DATA_DOUBLE_INTEL
	       GL_PERFQUERY_COUNTER_DATA_FLOAT_INTEL
	       GL_PERFQUERY_COUNTER_DATA_UINT32_INTEL
	       GL_PERFQUERY_COUNTER_DATA_UINT64_INTEL
	       GL_PERFQUERY_COUNTER_DESC_LENGTH_MAX_INTEL
	       GL_PERFQUERY_COUNTER_DURATION_NORM_INTEL
	       GL_PERFQUERY_COUNTER_DURATION_RAW_INTEL
	       GL_PERFQUERY_COUNTER_EVENT_INTEL
	       GL_PERFQUERY_COUNTER_NAME_LENGTH_MAX_INTEL
	       GL_PERFQUERY_COUNTER_RAW_INTEL
	       GL_PERFQUERY_COUNTER_THROUGHPUT_INTEL
	       GL_PERFQUERY_COUNTER_TIMESTAMP_INTEL
	       GL_PERFQUERY_DONOT_FLUSH_INTEL GL_PERFQUERY_FLUSH_INTEL
	       GL_PERFQUERY_GLOBAL_CONTEXT_INTEL
	       GL_PERFQUERY_GPA_EXTENDED_COUNTERS_INTEL
	       GL_PERFQUERY_QUERY_NAME_LENGTH_MAX_INTEL
	       GL_PERFQUERY_SINGLE_CONTEXT_INTEL GL_PERFQUERY_WAIT_INTEL
	       GL_PERSPECTIVE_CORRECTION_HINT GL_PERTURB_EXT
	       GL_PER_GPU_STORAGE_BIT_NV GL_PER_GPU_STORAGE_NV
	       GL_PER_STAGE_CONSTANTS_NV GL_PGI_misc_hints GL_PGI_vertex_hints
	       GL_PHONG_HINT_WIN GL_PHONG_WIN GL_PINLIGHT_NV
	       GL_PIXEL_BUFFER_BARRIER_BIT GL_PIXEL_BUFFER_BARRIER_BIT_EXT
	       GL_PIXEL_COUNTER_BITS_NV GL_PIXEL_COUNT_AVAILABLE_NV
	       GL_PIXEL_COUNT_NV GL_PIXEL_CUBIC_WEIGHT_EXT
	       GL_PIXEL_MAG_FILTER_EXT GL_PIXEL_MAP_A_TO_A
	       GL_PIXEL_MAP_A_TO_A_SIZE GL_PIXEL_MAP_B_TO_B
	       GL_PIXEL_MAP_B_TO_B_SIZE GL_PIXEL_MAP_G_TO_G
	       GL_PIXEL_MAP_G_TO_G_SIZE GL_PIXEL_MAP_I_TO_A
	       GL_PIXEL_MAP_I_TO_A_SIZE GL_PIXEL_MAP_I_TO_B
	       GL_PIXEL_MAP_I_TO_B_SIZE GL_PIXEL_MAP_I_TO_G
	       GL_PIXEL_MAP_I_TO_G_SIZE GL_PIXEL_MAP_I_TO_I
	       GL_PIXEL_MAP_I_TO_I_SIZE GL_PIXEL_MAP_I_TO_R
	       GL_PIXEL_MAP_I_TO_R_SIZE GL_PIXEL_MAP_R_TO_R
	       GL_PIXEL_MAP_R_TO_R_SIZE GL_PIXEL_MAP_S_TO_S
	       GL_PIXEL_MAP_S_TO_S_SIZE GL_PIXEL_MIN_FILTER_EXT
	       GL_PIXEL_MODE_BIT GL_PIXEL_PACK_BUFFER GL_PIXEL_PACK_BUFFER_ARB
	       GL_PIXEL_PACK_BUFFER_BINDING GL_PIXEL_PACK_BUFFER_BINDING_ARB
	       GL_PIXEL_PACK_BUFFER_BINDING_EXT GL_PIXEL_PACK_BUFFER_EXT
	       GL_PIXEL_TRANSFORM_2D_EXT GL_PIXEL_TRANSFORM_2D_MATRIX_EXT
	       GL_PIXEL_TRANSFORM_2D_STACK_DEPTH_EXT GL_PIXEL_UNPACK_BUFFER
	       GL_PIXEL_UNPACK_BUFFER_ARB GL_PIXEL_UNPACK_BUFFER_BINDING
	       GL_PIXEL_UNPACK_BUFFER_BINDING_ARB
	       GL_PIXEL_UNPACK_BUFFER_BINDING_EXT GL_PIXEL_UNPACK_BUFFER_EXT
	       GL_PLUS_CLAMPED_ALPHA_NV GL_PLUS_CLAMPED_NV GL_PLUS_DARKER_NV
	       GL_PLUS_NV GL_PN_TRIANGLES_ATI GL_PN_TRIANGLES_NORMAL_MODE_ATI
	       GL_PN_TRIANGLES_NORMAL_MODE_LINEAR_ATI
	       GL_PN_TRIANGLES_NORMAL_MODE_QUADRATIC_ATI
	       GL_PN_TRIANGLES_POINT_MODE_ATI
	       GL_PN_TRIANGLES_POINT_MODE_CUBIC_ATI
	       GL_PN_TRIANGLES_POINT_MODE_LINEAR_ATI
	       GL_PN_TRIANGLES_TESSELATION_LEVEL_ATI GL_POINT GL_POINTS
	       GL_POINT_BIT GL_POINT_DISTANCE_ATTENUATION
	       GL_POINT_DISTANCE_ATTENUATION_ARB GL_POINT_FADE_THRESHOLD_SIZE
	       GL_POINT_FADE_THRESHOLD_SIZE_ARB
	       GL_POINT_FADE_THRESHOLD_SIZE_EXT GL_POINT_SIZE
	       GL_POINT_SIZE_GRANULARITY GL_POINT_SIZE_MAX
	       GL_POINT_SIZE_MAX_ARB GL_POINT_SIZE_MAX_EXT GL_POINT_SIZE_MIN
	       GL_POINT_SIZE_MIN_ARB GL_POINT_SIZE_MIN_EXT GL_POINT_SIZE_RANGE
	       GL_POINT_SMOOTH GL_POINT_SMOOTH_HINT GL_POINT_SPRITE
	       GL_POINT_SPRITE_ARB GL_POINT_SPRITE_COORD_ORIGIN
	       GL_POINT_SPRITE_CULL_CENTER_ATIX GL_POINT_SPRITE_CULL_CLIP_ATIX
	       GL_POINT_SPRITE_CULL_MODE_ATIX GL_POINT_SPRITE_NV
	       GL_POINT_SPRITE_R_MODE_NV GL_POINT_TOKEN GL_POLYGON
	       GL_POLYGON_BIT GL_POLYGON_MODE GL_POLYGON_OFFSET_BIAS_EXT
	       GL_POLYGON_OFFSET_CLAMP_EXT GL_POLYGON_OFFSET_COMMAND_NV
	       GL_POLYGON_OFFSET_EXT GL_POLYGON_OFFSET_FACTOR
	       GL_POLYGON_OFFSET_FACTOR_EXT GL_POLYGON_OFFSET_FILL
	       GL_POLYGON_OFFSET_LINE GL_POLYGON_OFFSET_POINT
	       GL_POLYGON_OFFSET_UNITS GL_POLYGON_SMOOTH GL_POLYGON_SMOOTH_HINT
	       GL_POLYGON_STIPPLE GL_POLYGON_STIPPLE_BIT GL_POLYGON_TOKEN
	       GL_POSITION GL_POST_COLOR_MATRIX_ALPHA_BIAS
	       GL_POST_COLOR_MATRIX_ALPHA_BIAS_SGI
	       GL_POST_COLOR_MATRIX_ALPHA_SCALE
	       GL_POST_COLOR_MATRIX_ALPHA_SCALE_SGI
	       GL_POST_COLOR_MATRIX_BLUE_BIAS
	       GL_POST_COLOR_MATRIX_BLUE_BIAS_SGI
	       GL_POST_COLOR_MATRIX_BLUE_SCALE
	       GL_POST_COLOR_MATRIX_BLUE_SCALE_SGI
	       GL_POST_COLOR_MATRIX_COLOR_TABLE
	       GL_POST_COLOR_MATRIX_COLOR_TABLE_SGI
	       GL_POST_COLOR_MATRIX_GREEN_BIAS
	       GL_POST_COLOR_MATRIX_GREEN_BIAS_SGI
	       GL_POST_COLOR_MATRIX_GREEN_SCALE
	       GL_POST_COLOR_MATRIX_GREEN_SCALE_SGI
	       GL_POST_COLOR_MATRIX_RED_BIAS GL_POST_COLOR_MATRIX_RED_BIAS_SGI
	       GL_POST_COLOR_MATRIX_RED_SCALE
	       GL_POST_COLOR_MATRIX_RED_SCALE_SGI
	       GL_POST_CONVOLUTION_ALPHA_BIAS
	       GL_POST_CONVOLUTION_ALPHA_BIAS_EXT
	       GL_POST_CONVOLUTION_ALPHA_SCALE
	       GL_POST_CONVOLUTION_ALPHA_SCALE_EXT
	       GL_POST_CONVOLUTION_BLUE_BIAS GL_POST_CONVOLUTION_BLUE_BIAS_EXT
	       GL_POST_CONVOLUTION_BLUE_SCALE
	       GL_POST_CONVOLUTION_BLUE_SCALE_EXT
	       GL_POST_CONVOLUTION_COLOR_TABLE
	       GL_POST_CONVOLUTION_COLOR_TABLE_SGI
	       GL_POST_CONVOLUTION_GREEN_BIAS
	       GL_POST_CONVOLUTION_GREEN_BIAS_EXT
	       GL_POST_CONVOLUTION_GREEN_SCALE
	       GL_POST_CONVOLUTION_GREEN_SCALE_EXT GL_POST_CONVOLUTION_RED_BIAS
	       GL_POST_CONVOLUTION_RED_BIAS_EXT GL_POST_CONVOLUTION_RED_SCALE
	       GL_POST_CONVOLUTION_RED_SCALE_EXT
	       GL_POST_TEXTURE_FILTER_BIAS_RANGE_SGIX
	       GL_POST_TEXTURE_FILTER_BIAS_SGIX
	       GL_POST_TEXTURE_FILTER_SCALE_RANGE_SGIX
	       GL_POST_TEXTURE_FILTER_SCALE_SGIX
	       GL_PREFER_DOUBLEBUFFER_HINT_PGI GL_PRESENT_DURATION_NV
	       GL_PRESENT_TIME_NV GL_PRESERVE_ATI GL_PREVIOUS GL_PREVIOUS_ARB
	       GL_PREVIOUS_EXT GL_PREVIOUS_TEXTURE_INPUT_NV GL_PRIMARY_COLOR
	       GL_PRIMARY_COLOR_ARB GL_PRIMARY_COLOR_EXT GL_PRIMARY_COLOR_NV
	       GL_PRIMITIVES_GENERATED GL_PRIMITIVES_GENERATED_EXT
	       GL_PRIMITIVES_GENERATED_NV GL_PRIMITIVES_SUBMITTED_ARB
	       GL_PRIMITIVE_BOUNDING_BOX_ARB GL_PRIMITIVE_ID_NV
	       GL_PRIMITIVE_RESTART GL_PRIMITIVE_RESTART_FIXED_INDEX
	       GL_PRIMITIVE_RESTART_FOR_PATCHES_SUPPORTED
	       GL_PRIMITIVE_RESTART_INDEX GL_PRIMITIVE_RESTART_INDEX_NV
	       GL_PRIMITIVE_RESTART_NV GL_PROGRAM
	       GL_PROGRAMMABLE_SAMPLE_LOCATION_ARB
	       GL_PROGRAMMABLE_SAMPLE_LOCATION_NV
	       GL_PROGRAMMABLE_SAMPLE_LOCATION_TABLE_SIZE_ARB
	       GL_PROGRAMMABLE_SAMPLE_LOCATION_TABLE_SIZE_NV
	       GL_PROGRAM_ADDRESS_REGISTERS_ARB GL_PROGRAM_ALU_INSTRUCTIONS_ARB
	       GL_PROGRAM_ATTRIBS_ARB GL_PROGRAM_ATTRIB_COMPONENTS_NV
	       GL_PROGRAM_BINARY_ANGLE GL_PROGRAM_BINARY_FORMATS
	       GL_PROGRAM_BINARY_LENGTH GL_PROGRAM_BINARY_RETRIEVABLE_HINT
	       GL_PROGRAM_BINDING_ARB GL_PROGRAM_ERROR_POSITION_ARB
	       GL_PROGRAM_ERROR_POSITION_NV GL_PROGRAM_ERROR_STRING_ARB
	       GL_PROGRAM_ERROR_STRING_NV GL_PROGRAM_FORMAT_ARB
	       GL_PROGRAM_FORMAT_ASCII_ARB GL_PROGRAM_INPUT
	       GL_PROGRAM_INSTRUCTIONS_ARB GL_PROGRAM_LENGTH_ARB
	       GL_PROGRAM_LENGTH_NV GL_PROGRAM_MATRIX_EXT
	       GL_PROGRAM_MATRIX_STACK_DEPTH_EXT
	       GL_PROGRAM_NATIVE_ADDRESS_REGISTERS_ARB
	       GL_PROGRAM_NATIVE_ALU_INSTRUCTIONS_ARB
	       GL_PROGRAM_NATIVE_ATTRIBS_ARB GL_PROGRAM_NATIVE_INSTRUCTIONS_ARB
	       GL_PROGRAM_NATIVE_PARAMETERS_ARB
	       GL_PROGRAM_NATIVE_TEMPORARIES_ARB
	       GL_PROGRAM_NATIVE_TEX_INDIRECTIONS_ARB
	       GL_PROGRAM_NATIVE_TEX_INSTRUCTIONS_ARB GL_PROGRAM_OBJECT_ARB
	       GL_PROGRAM_OBJECT_EXT GL_PROGRAM_OUTPUT
	       GL_PROGRAM_PARAMETERS_ARB GL_PROGRAM_PARAMETER_NV
	       GL_PROGRAM_PIPELINE GL_PROGRAM_PIPELINE_BINDING
	       GL_PROGRAM_PIPELINE_OBJECT_EXT GL_PROGRAM_POINT_SIZE
	       GL_PROGRAM_POINT_SIZE_ARB GL_PROGRAM_POINT_SIZE_EXT
	       GL_PROGRAM_RESIDENT_NV GL_PROGRAM_RESULT_COMPONENTS_NV
	       GL_PROGRAM_SEPARABLE GL_PROGRAM_STRING_ARB GL_PROGRAM_STRING_NV
	       GL_PROGRAM_TARGET_NV GL_PROGRAM_TEMPORARIES_ARB
	       GL_PROGRAM_TEX_INDIRECTIONS_ARB GL_PROGRAM_TEX_INSTRUCTIONS_ARB
	       GL_PROGRAM_UNDER_NATIVE_LIMITS_ARB GL_PROJECTION
	       GL_PROJECTION_MATRIX GL_PROJECTION_STACK_DEPTH
	       GL_PROVOKING_VERTEX GL_PROVOKING_VERTEX_EXT GL_PROXY_COLOR_TABLE
	       GL_PROXY_COLOR_TABLE_SGI GL_PROXY_HISTOGRAM
	       GL_PROXY_HISTOGRAM_EXT GL_PROXY_POST_COLOR_MATRIX_COLOR_TABLE
	       GL_PROXY_POST_COLOR_MATRIX_COLOR_TABLE_SGI
	       GL_PROXY_POST_CONVOLUTION_COLOR_TABLE
	       GL_PROXY_POST_CONVOLUTION_COLOR_TABLE_SGI GL_PROXY_TEXTURE_1D
	       GL_PROXY_TEXTURE_1D_ARRAY GL_PROXY_TEXTURE_1D_ARRAY_EXT
	       GL_PROXY_TEXTURE_1D_EXT GL_PROXY_TEXTURE_1D_STACK_MESAX
	       GL_PROXY_TEXTURE_2D GL_PROXY_TEXTURE_2D_ARRAY
	       GL_PROXY_TEXTURE_2D_ARRAY_EXT GL_PROXY_TEXTURE_2D_EXT
	       GL_PROXY_TEXTURE_2D_MULTISAMPLE
	       GL_PROXY_TEXTURE_2D_MULTISAMPLE_ARRAY
	       GL_PROXY_TEXTURE_2D_STACK_MESAX GL_PROXY_TEXTURE_3D
	       GL_PROXY_TEXTURE_3D_EXT GL_PROXY_TEXTURE_COLOR_TABLE_SGI
	       GL_PROXY_TEXTURE_CUBE_MAP GL_PROXY_TEXTURE_CUBE_MAP_ARB
	       GL_PROXY_TEXTURE_CUBE_MAP_ARRAY
	       GL_PROXY_TEXTURE_CUBE_MAP_ARRAY_ARB
	       GL_PROXY_TEXTURE_CUBE_MAP_EXT GL_PROXY_TEXTURE_RECTANGLE
	       GL_PROXY_TEXTURE_RECTANGLE_ARB GL_PROXY_TEXTURE_RECTANGLE_EXT
	       GL_PROXY_TEXTURE_RECTANGLE_NV GL_PURGEABLE_APPLE
	       GL_PURGED_CONTEXT_RESET_NV GL_Q GL_QUADRATIC_ATTENUATION
	       GL_QUADRATIC_CURVE_TO_NV GL_QUADS
	       GL_QUADS_FOLLOW_PROVOKING_VERTEX_CONVENTION
	       GL_QUADS_FOLLOW_PROVOKING_VERTEX_CONVENTION_EXT GL_QUAD_MESH_SUN
	       GL_QUAD_STRIP GL_QUARTER_BIT_ATI GL_QUERY
	       GL_QUERY_ALL_EVENT_BITS_AMD GL_QUERY_BUFFER GL_QUERY_BUFFER_AMD
	       GL_QUERY_BUFFER_BARRIER_BIT GL_QUERY_BUFFER_BINDING
	       GL_QUERY_BUFFER_BINDING_AMD GL_QUERY_BY_REGION_NO_WAIT
	       GL_QUERY_BY_REGION_NO_WAIT_INVERTED
	       GL_QUERY_BY_REGION_NO_WAIT_NV GL_QUERY_BY_REGION_WAIT
	       GL_QUERY_BY_REGION_WAIT_INVERTED GL_QUERY_BY_REGION_WAIT_NV
	       GL_QUERY_COUNTER_BITS GL_QUERY_COUNTER_BITS_ANGLE
	       GL_QUERY_COUNTER_BITS_ARB
	       GL_QUERY_DEPTH_BOUNDS_FAIL_EVENT_BIT_AMD
	       GL_QUERY_DEPTH_FAIL_EVENT_BIT_AMD
	       GL_QUERY_DEPTH_PASS_EVENT_BIT_AMD GL_QUERY_NO_WAIT
	       GL_QUERY_NO_WAIT_INVERTED GL_QUERY_NO_WAIT_NV
	       GL_QUERY_OBJECT_AMD GL_QUERY_OBJECT_EXT GL_QUERY_RESULT
	       GL_QUERY_RESULT_ANGLE GL_QUERY_RESULT_ARB
	       GL_QUERY_RESULT_AVAILABLE GL_QUERY_RESULT_AVAILABLE_ANGLE
	       GL_QUERY_RESULT_AVAILABLE_ARB GL_QUERY_RESULT_AVAILABLE_NV
	       GL_QUERY_RESULT_NO_WAIT GL_QUERY_RESULT_NO_WAIT_AMD
	       GL_QUERY_RESULT_NV GL_QUERY_STENCIL_FAIL_EVENT_BIT_AMD
	       GL_QUERY_TARGET GL_QUERY_WAIT GL_QUERY_WAIT_INVERTED
	       GL_QUERY_WAIT_NV GL_R GL_R11F_G11F_B10F GL_R11F_G11F_B10F_EXT
	       GL_R16 GL_R16F GL_R16I GL_R16UI GL_R16_SNORM GL_R1UI_C3F_V3F_SUN
	       GL_R1UI_C4F_N3F_V3F_SUN GL_R1UI_C4UB_V3F_SUN GL_R1UI_N3F_V3F_SUN
	       GL_R1UI_T2F_C4F_N3F_V3F_SUN GL_R1UI_T2F_N3F_V3F_SUN
	       GL_R1UI_T2F_V3F_SUN GL_R1UI_V3F_SUN GL_R32F GL_R32I GL_R32UI
	       GL_R3_G3_B2 GL_R8 GL_R8I GL_R8UI GL_R8_SNORM
	       GL_RASTERIZER_DISCARD GL_RASTERIZER_DISCARD_EXT
	       GL_RASTERIZER_DISCARD_NV GL_RASTER_FIXED_SAMPLE_LOCATIONS_EXT
	       GL_RASTER_MULTISAMPLE_EXT GL_RASTER_POSITION_UNCLIPPED_IBM
	       GL_RASTER_SAMPLES_EXT GL_READ_BUFFER GL_READ_FRAMEBUFFER
	       GL_READ_FRAMEBUFFER_ANGLE GL_READ_FRAMEBUFFER_BINDING
	       GL_READ_FRAMEBUFFER_BINDING_ANGLE
	       GL_READ_FRAMEBUFFER_BINDING_EXT GL_READ_FRAMEBUFFER_EXT
	       GL_READ_ONLY GL_READ_ONLY_ARB GL_READ_PIXELS
	       GL_READ_PIXELS_FORMAT GL_READ_PIXELS_TYPE
	       GL_READ_PIXEL_DATA_RANGE_LENGTH_NV GL_READ_PIXEL_DATA_RANGE_NV
	       GL_READ_PIXEL_DATA_RANGE_POINTER_NV GL_READ_WRITE
	       GL_READ_WRITE_ARB GL_RECLAIM_MEMORY_HINT_PGI GL_RECT_NV GL_RED
	       GL_REDUCE GL_REDUCE_EXT GL_RED_BIAS GL_RED_BITS GL_RED_BIT_ATI
	       GL_RED_INTEGER GL_RED_INTEGER_EXT GL_RED_MAX_CLAMP_INGR
	       GL_RED_MIN_CLAMP_INGR GL_RED_NV GL_RED_SCALE GL_RED_SNORM
	       GL_REFERENCED_BY_COMPUTE_SHADER GL_REFERENCED_BY_FRAGMENT_SHADER
	       GL_REFERENCED_BY_GEOMETRY_SHADER
	       GL_REFERENCED_BY_TESS_CONTROL_SHADER
	       GL_REFERENCED_BY_TESS_EVALUATION_SHADER
	       GL_REFERENCED_BY_VERTEX_SHADER GL_REFLECTION_MAP
	       GL_REFLECTION_MAP_ARB GL_REFLECTION_MAP_EXT GL_REFLECTION_MAP_NV
	       GL_REGAL_ES1_0_compatibility GL_REGAL_ES1_1_compatibility
	       GL_REGAL_enable GL_REGAL_error_string GL_REGAL_extension_query
	       GL_REGAL_log GL_REGAL_proc_address GL_REGISTER_COMBINERS_NV
	       GL_REG_0_ATI GL_REG_1_ATI GL_REG_2_ATI GL_REG_3_ATI GL_REG_4_ATI
	       GL_REG_5_ATI GL_RELATIVE_ARC_TO_NV GL_RELATIVE_CONIC_CURVE_TO_NV
	       GL_RELATIVE_CUBIC_CURVE_TO_NV GL_RELATIVE_HORIZONTAL_LINE_TO_NV
	       GL_RELATIVE_LARGE_CCW_ARC_TO_NV GL_RELATIVE_LARGE_CW_ARC_TO_NV
	       GL_RELATIVE_LINE_TO_NV GL_RELATIVE_MOVE_TO_NV
	       GL_RELATIVE_QUADRATIC_CURVE_TO_NV GL_RELATIVE_RECT_NV
	       GL_RELATIVE_ROUNDED_RECT2_NV GL_RELATIVE_ROUNDED_RECT4_NV
	       GL_RELATIVE_ROUNDED_RECT8_NV GL_RELATIVE_ROUNDED_RECT_NV
	       GL_RELATIVE_SMALL_CCW_ARC_TO_NV GL_RELATIVE_SMALL_CW_ARC_TO_NV
	       GL_RELATIVE_SMOOTH_CUBIC_CURVE_TO_NV
	       GL_RELATIVE_SMOOTH_QUADRATIC_CURVE_TO_NV
	       GL_RELATIVE_VERTICAL_LINE_TO_NV GL_RELEASED_APPLE GL_RENDER
	       GL_RENDERBUFFER GL_RENDERBUFFER_ALPHA_SIZE
	       GL_RENDERBUFFER_ALPHA_SIZE_EXT GL_RENDERBUFFER_BINDING
	       GL_RENDERBUFFER_BINDING_EXT GL_RENDERBUFFER_BLUE_SIZE
	       GL_RENDERBUFFER_BLUE_SIZE_EXT GL_RENDERBUFFER_COLOR_SAMPLES_NV
	       GL_RENDERBUFFER_COVERAGE_SAMPLES_NV GL_RENDERBUFFER_DEPTH_SIZE
	       GL_RENDERBUFFER_DEPTH_SIZE_EXT GL_RENDERBUFFER_EXT
	       GL_RENDERBUFFER_FREE_MEMORY_ATI GL_RENDERBUFFER_GREEN_SIZE
	       GL_RENDERBUFFER_GREEN_SIZE_EXT GL_RENDERBUFFER_HEIGHT
	       GL_RENDERBUFFER_HEIGHT_EXT GL_RENDERBUFFER_INTERNAL_FORMAT
	       GL_RENDERBUFFER_INTERNAL_FORMAT_EXT GL_RENDERBUFFER_RED_SIZE
	       GL_RENDERBUFFER_RED_SIZE_EXT GL_RENDERBUFFER_SAMPLES
	       GL_RENDERBUFFER_SAMPLES_ANGLE GL_RENDERBUFFER_SAMPLES_EXT
	       GL_RENDERBUFFER_STENCIL_SIZE GL_RENDERBUFFER_STENCIL_SIZE_EXT
	       GL_RENDERBUFFER_WIDTH GL_RENDERBUFFER_WIDTH_EXT GL_RENDERER
	       GL_RENDER_GPU_MASK_NV GL_RENDER_MODE GL_REND_screen_coordinates
	       GL_REPEAT GL_REPLACE GL_REPLACEMENT_CODE_ARRAY_POINTER_SUN
	       GL_REPLACEMENT_CODE_ARRAY_STRIDE_SUN
	       GL_REPLACEMENT_CODE_ARRAY_SUN GL_REPLACEMENT_CODE_ARRAY_TYPE_SUN
	       GL_REPLACEMENT_CODE_SUN GL_REPLACE_EXT GL_REPLACE_MIDDLE_SUN
	       GL_REPLACE_OLDEST_SUN GL_REPLACE_VALUE_AMD GL_REPLICATE_BORDER
	       GL_RESAMPLE_AVERAGE_OML GL_RESAMPLE_DECIMATE_OML
	       GL_RESAMPLE_DECIMATE_SGIX GL_RESAMPLE_REPLICATE_OML
	       GL_RESAMPLE_REPLICATE_SGIX GL_RESAMPLE_ZERO_FILL_OML
	       GL_RESAMPLE_ZERO_FILL_SGIX GL_RESCALE_NORMAL
	       GL_RESCALE_NORMAL_EXT GL_RESET_NOTIFICATION_STRATEGY
	       GL_RESET_NOTIFICATION_STRATEGY_ARB GL_RESTART_PATH_NV
	       GL_RESTART_SUN GL_RETAINED_APPLE GL_RETURN GL_RG GL_RG16
	       GL_RG16F GL_RG16I GL_RG16UI GL_RG16_SNORM GL_RG32F GL_RG32I
	       GL_RG32UI GL_RG8 GL_RG8I GL_RG8UI GL_RG8_SNORM GL_RGB GL_RGB10
	       GL_RGB10_A2 GL_RGB10_A2UI GL_RGB10_A2_EXT GL_RGB10_EXT GL_RGB12
	       GL_RGB12_EXT GL_RGB16 GL_RGB16F GL_RGB16F_ARB GL_RGB16I
	       GL_RGB16I_EXT GL_RGB16UI GL_RGB16UI_EXT GL_RGB16_EXT
	       GL_RGB16_EXTENDED_RANGE_SGIX GL_RGB16_SIGNED_SGIX GL_RGB16_SNORM
	       GL_RGB2_EXT GL_RGB32F GL_RGB32F_ARB GL_RGB32I GL_RGB32I_EXT
	       GL_RGB32UI GL_RGB32UI_EXT GL_RGB4 GL_RGB4_EXT GL_RGB4_S3TC
	       GL_RGB5 GL_RGB565 GL_RGB5_A1 GL_RGB5_A1_EXT GL_RGB5_EXT GL_RGB8
	       GL_RGB8I GL_RGB8I_EXT GL_RGB8UI GL_RGB8UI_EXT GL_RGB8_EXT
	       GL_RGB8_SNORM GL_RGB9_E5 GL_RGB9_E5_EXT GL_RGBA GL_RGBA12
	       GL_RGBA12_EXT GL_RGBA16 GL_RGBA16F GL_RGBA16F_ARB GL_RGBA16I
	       GL_RGBA16I_EXT GL_RGBA16UI GL_RGBA16UI_EXT GL_RGBA16_EXT
	       GL_RGBA16_EXTENDED_RANGE_SGIX GL_RGBA16_SIGNED_SGIX
	       GL_RGBA16_SNORM GL_RGBA2 GL_RGBA2_EXT GL_RGBA32F GL_RGBA32F_ARB
	       GL_RGBA32I GL_RGBA32I_EXT GL_RGBA32UI GL_RGBA32UI_EXT GL_RGBA4
	       GL_RGBA4_DXT5_S3TC GL_RGBA4_EXT GL_RGBA4_S3TC GL_RGBA8 GL_RGBA8I
	       GL_RGBA8I_EXT GL_RGBA8UI GL_RGBA8UI_EXT GL_RGBA8_EXT
	       GL_RGBA8_SNORM GL_RGBA_DXT5_S3TC GL_RGBA_EXTENDED_RANGE_SGIX
	       GL_RGBA_FLOAT16_APPLE GL_RGBA_FLOAT16_ATI GL_RGBA_FLOAT32_APPLE
	       GL_RGBA_FLOAT32_ATI GL_RGBA_FLOAT_MODE_ARB GL_RGBA_INTEGER
	       GL_RGBA_INTEGER_EXT GL_RGBA_INTEGER_MODE_EXT GL_RGBA_MODE
	       GL_RGBA_S3TC GL_RGBA_SIGNED_COMPONENTS_EXT GL_RGBA_SIGNED_SGIX
	       GL_RGBA_SNORM GL_RGBA_UNSIGNED_DOT_PRODUCT_MAPPING_NV
	       GL_RGB_422_APPLE GL_RGB_EXTENDED_RANGE_SGIX GL_RGB_FLOAT16_APPLE
	       GL_RGB_FLOAT16_ATI GL_RGB_FLOAT32_APPLE GL_RGB_FLOAT32_ATI
	       GL_RGB_INTEGER GL_RGB_INTEGER_EXT GL_RGB_RAW_422_APPLE
	       GL_RGB_S3TC GL_RGB_SCALE GL_RGB_SCALE_ARB GL_RGB_SCALE_EXT
	       GL_RGB_SIGNED_SGIX GL_RGB_SNORM GL_RG_INTEGER GL_RG_SNORM
	       GL_RIGHT GL_ROUNDED_RECT2_NV GL_ROUNDED_RECT4_NV
	       GL_ROUNDED_RECT8_NV GL_ROUNDED_RECT_NV GL_ROUND_NV GL_S
	       GL_S3_s3tc GL_SAMPLER GL_SAMPLER_1D GL_SAMPLER_1D_ARB
	       GL_SAMPLER_1D_ARRAY GL_SAMPLER_1D_ARRAY_EXT
	       GL_SAMPLER_1D_ARRAY_SHADOW GL_SAMPLER_1D_ARRAY_SHADOW_EXT
	       GL_SAMPLER_1D_SHADOW GL_SAMPLER_1D_SHADOW_ARB GL_SAMPLER_2D
	       GL_SAMPLER_2D_ARB GL_SAMPLER_2D_ARRAY GL_SAMPLER_2D_ARRAY_EXT
	       GL_SAMPLER_2D_ARRAY_SHADOW GL_SAMPLER_2D_ARRAY_SHADOW_EXT
	       GL_SAMPLER_2D_MULTISAMPLE GL_SAMPLER_2D_MULTISAMPLE_ARRAY
	       GL_SAMPLER_2D_RECT GL_SAMPLER_2D_RECT_ARB
	       GL_SAMPLER_2D_RECT_SHADOW GL_SAMPLER_2D_RECT_SHADOW_ARB
	       GL_SAMPLER_2D_SHADOW GL_SAMPLER_2D_SHADOW_ARB GL_SAMPLER_3D
	       GL_SAMPLER_3D_ARB GL_SAMPLER_BINDING GL_SAMPLER_BUFFER
	       GL_SAMPLER_BUFFER_AMD GL_SAMPLER_BUFFER_EXT GL_SAMPLER_CUBE
	       GL_SAMPLER_CUBE_ARB GL_SAMPLER_CUBE_MAP_ARRAY
	       GL_SAMPLER_CUBE_MAP_ARRAY_ARB GL_SAMPLER_CUBE_MAP_ARRAY_SHADOW
	       GL_SAMPLER_CUBE_MAP_ARRAY_SHADOW_ARB GL_SAMPLER_CUBE_SHADOW
	       GL_SAMPLER_CUBE_SHADOW_EXT GL_SAMPLER_OBJECT_AMD
	       GL_SAMPLER_RENDERBUFFER_NV GL_SAMPLES GL_SAMPLES_3DFX
	       GL_SAMPLES_ARB GL_SAMPLES_EXT GL_SAMPLES_PASSED
	       GL_SAMPLES_PASSED_ARB GL_SAMPLES_SGIS
	       GL_SAMPLE_ALPHA_TO_COVERAGE GL_SAMPLE_ALPHA_TO_COVERAGE_ARB
	       GL_SAMPLE_ALPHA_TO_MASK_EXT GL_SAMPLE_ALPHA_TO_MASK_SGIS
	       GL_SAMPLE_ALPHA_TO_ONE GL_SAMPLE_ALPHA_TO_ONE_ARB
	       GL_SAMPLE_ALPHA_TO_ONE_EXT GL_SAMPLE_ALPHA_TO_ONE_SGIS
	       GL_SAMPLE_BUFFERS GL_SAMPLE_BUFFERS_3DFX GL_SAMPLE_BUFFERS_ARB
	       GL_SAMPLE_BUFFERS_EXT GL_SAMPLE_BUFFERS_SGIS
	       GL_SAMPLE_COUNT_BITS_NV GL_SAMPLE_COUNT_NV GL_SAMPLE_COVERAGE
	       GL_SAMPLE_COVERAGE_ARB GL_SAMPLE_COVERAGE_INVERT
	       GL_SAMPLE_COVERAGE_INVERT_ARB GL_SAMPLE_COVERAGE_VALUE
	       GL_SAMPLE_COVERAGE_VALUE_ARB GL_SAMPLE_LOCATION_ARB
	       GL_SAMPLE_LOCATION_NV GL_SAMPLE_LOCATION_PIXEL_GRID_HEIGHT_ARB
	       GL_SAMPLE_LOCATION_PIXEL_GRID_HEIGHT_NV
	       GL_SAMPLE_LOCATION_PIXEL_GRID_WIDTH_ARB
	       GL_SAMPLE_LOCATION_PIXEL_GRID_WIDTH_NV
	       GL_SAMPLE_LOCATION_SUBPIXEL_BITS_ARB
	       GL_SAMPLE_LOCATION_SUBPIXEL_BITS_NV GL_SAMPLE_MASK
	       GL_SAMPLE_MASK_EXT GL_SAMPLE_MASK_INVERT_EXT
	       GL_SAMPLE_MASK_INVERT_SGIS GL_SAMPLE_MASK_NV GL_SAMPLE_MASK_SGIS
	       GL_SAMPLE_MASK_VALUE GL_SAMPLE_MASK_VALUE_EXT
	       GL_SAMPLE_MASK_VALUE_NV GL_SAMPLE_MASK_VALUE_SGIS
	       GL_SAMPLE_PATTERN_EXT GL_SAMPLE_PATTERN_SGIS GL_SAMPLE_POSITION
	       GL_SAMPLE_POSITION_NV GL_SAMPLE_SHADING GL_SAMPLE_SHADING_ARB
	       GL_SATURATE_BIT_ATI GL_SCALAR_EXT GL_SCALED_RESOLVE_FASTEST_EXT
	       GL_SCALED_RESOLVE_NICEST_EXT GL_SCALE_BY_FOUR_NV
	       GL_SCALE_BY_ONE_HALF_NV GL_SCALE_BY_TWO_NV GL_SCISSOR_BIT
	       GL_SCISSOR_BOX GL_SCISSOR_COMMAND_NV GL_SCISSOR_TEST
	       GL_SCREEN_COORDINATES_REND GL_SCREEN_KHR GL_SCREEN_NV
	       GL_SECONDARY_COLOR_ARRAY GL_SECONDARY_COLOR_ARRAY_ADDRESS_NV
	       GL_SECONDARY_COLOR_ARRAY_BUFFER_BINDING
	       GL_SECONDARY_COLOR_ARRAY_BUFFER_BINDING_ARB
	       GL_SECONDARY_COLOR_ARRAY_EXT GL_SECONDARY_COLOR_ARRAY_LENGTH_NV
	       GL_SECONDARY_COLOR_ARRAY_LIST_IBM
	       GL_SECONDARY_COLOR_ARRAY_LIST_STRIDE_IBM
	       GL_SECONDARY_COLOR_ARRAY_POINTER
	       GL_SECONDARY_COLOR_ARRAY_POINTER_EXT
	       GL_SECONDARY_COLOR_ARRAY_SIZE GL_SECONDARY_COLOR_ARRAY_SIZE_EXT
	       GL_SECONDARY_COLOR_ARRAY_STRIDE
	       GL_SECONDARY_COLOR_ARRAY_STRIDE_EXT
	       GL_SECONDARY_COLOR_ARRAY_TYPE GL_SECONDARY_COLOR_ARRAY_TYPE_EXT
	       GL_SECONDARY_COLOR_ATIX GL_SECONDARY_COLOR_NV
	       GL_SECONDARY_INTERPOLATOR_ATI GL_SELECT
	       GL_SELECTION_BUFFER_POINTER GL_SELECTION_BUFFER_SIZE
	       GL_SEPARABLE_2D GL_SEPARABLE_2D_EXT GL_SEPARATE_ATTRIBS
	       GL_SEPARATE_ATTRIBS_EXT GL_SEPARATE_ATTRIBS_NV
	       GL_SEPARATE_SPECULAR_COLOR GL_SEPARATE_SPECULAR_COLOR_EXT GL_SET
	       GL_SET_AMD GL_SGIS_color_range GL_SGIS_detail_texture
	       GL_SGIS_fog_function GL_SGIS_generate_mipmap GL_SGIS_multisample
	       GL_SGIS_pixel_texture GL_SGIS_point_line_texgen
	       GL_SGIS_sharpen_texture GL_SGIS_texture4D
	       GL_SGIS_texture_border_clamp GL_SGIS_texture_edge_clamp
	       GL_SGIS_texture_filter4 GL_SGIS_texture_lod
	       GL_SGIS_texture_select GL_SGIX_async GL_SGIX_async_histogram
	       GL_SGIX_async_pixel GL_SGIX_blend_alpha_minmax GL_SGIX_clipmap
	       GL_SGIX_convolution_accuracy GL_SGIX_depth_texture
	       GL_SGIX_flush_raster GL_SGIX_fog_offset GL_SGIX_fog_texture
	       GL_SGIX_fragment_specular_lighting GL_SGIX_framezoom
	       GL_SGIX_interlace GL_SGIX_ir_instrument1 GL_SGIX_list_priority
	       GL_SGIX_pixel_texture GL_SGIX_pixel_texture_bits
	       GL_SGIX_reference_plane GL_SGIX_resample GL_SGIX_shadow
	       GL_SGIX_shadow_ambient GL_SGIX_sprite GL_SGIX_tag_sample_buffer
	       GL_SGIX_texture_add_env GL_SGIX_texture_coordinate_clamp
	       GL_SGIX_texture_lod_bias GL_SGIX_texture_multi_buffer
	       GL_SGIX_texture_range GL_SGIX_texture_scale_bias
	       GL_SGIX_vertex_preclip GL_SGIX_vertex_preclip_hint GL_SGIX_ycrcb
	       GL_SGI_color_matrix GL_SGI_color_table
	       GL_SGI_texture_color_table GL_SHADER GL_SHADER_BINARY_FORMATS
	       GL_SHADER_BINARY_FORMAT_SPIR_V_ARB GL_SHADER_COMPILER
	       GL_SHADER_CONSISTENT_NV GL_SHADER_IMAGE_ACCESS_BARRIER_BIT
	       GL_SHADER_IMAGE_ACCESS_BARRIER_BIT_EXT GL_SHADER_IMAGE_ATOMIC
	       GL_SHADER_IMAGE_LOAD GL_SHADER_IMAGE_STORE GL_SHADER_INCLUDE_ARB
	       GL_SHADER_OBJECT_ARB GL_SHADER_OBJECT_EXT GL_SHADER_OPERATION_NV
	       GL_SHADER_SOURCE_LENGTH GL_SHADER_STORAGE_BARRIER_BIT
	       GL_SHADER_STORAGE_BLOCK GL_SHADER_STORAGE_BUFFER
	       GL_SHADER_STORAGE_BUFFER_BINDING
	       GL_SHADER_STORAGE_BUFFER_OFFSET_ALIGNMENT
	       GL_SHADER_STORAGE_BUFFER_SIZE GL_SHADER_STORAGE_BUFFER_START
	       GL_SHADER_TYPE GL_SHADE_MODEL GL_SHADING_LANGUAGE_VERSION
	       GL_SHADING_LANGUAGE_VERSION_ARB GL_SHADOW_AMBIENT_SGIX
	       GL_SHADOW_ATTENUATION_EXT GL_SHARED_EDGE_NV
	       GL_SHARED_TEXTURE_PALETTE_EXT GL_SHININESS GL_SHORT GL_SIGNALED
	       GL_SIGNED_ALPHA8_NV GL_SIGNED_ALPHA_NV GL_SIGNED_HILO16_NV
	       GL_SIGNED_HILO8_NV GL_SIGNED_HILO_NV GL_SIGNED_IDENTITY_NV
	       GL_SIGNED_INTENSITY8_NV GL_SIGNED_INTENSITY_NV
	       GL_SIGNED_LUMINANCE8_ALPHA8_NV GL_SIGNED_LUMINANCE8_NV
	       GL_SIGNED_LUMINANCE_ALPHA_NV GL_SIGNED_LUMINANCE_NV
	       GL_SIGNED_NEGATE_NV GL_SIGNED_NORMALIZED GL_SIGNED_RGB8_NV
	       GL_SIGNED_RGB8_UNSIGNED_ALPHA8_NV GL_SIGNED_RGBA8_NV
	       GL_SIGNED_RGBA_NV GL_SIGNED_RGB_NV
	       GL_SIGNED_RGB_UNSIGNED_ALPHA_NV
	       GL_SIMULTANEOUS_TEXTURE_AND_DEPTH_TEST
	       GL_SIMULTANEOUS_TEXTURE_AND_DEPTH_WRITE
	       GL_SIMULTANEOUS_TEXTURE_AND_STENCIL_TEST
	       GL_SIMULTANEOUS_TEXTURE_AND_STENCIL_WRITE GL_SINGLE_COLOR
	       GL_SINGLE_COLOR_EXT GL_SKIP_DECODE_EXT GL_SKIP_MISSING_GLYPH_NV
	       GL_SLICE_ACCUM_SUN GL_SLUMINANCE GL_SLUMINANCE8
	       GL_SLUMINANCE8_ALPHA8 GL_SLUMINANCE8_ALPHA8_EXT
	       GL_SLUMINANCE8_EXT GL_SLUMINANCE_ALPHA GL_SLUMINANCE_ALPHA_EXT
	       GL_SLUMINANCE_EXT GL_SMALL_CCW_ARC_TO_NV GL_SMALL_CW_ARC_TO_NV
	       GL_SMOOTH GL_SMOOTH_CUBIC_CURVE_TO_NV
	       GL_SMOOTH_LINE_WIDTH_GRANULARITY GL_SMOOTH_LINE_WIDTH_RANGE
	       GL_SMOOTH_POINT_SIZE_GRANULARITY GL_SMOOTH_POINT_SIZE_RANGE
	       GL_SMOOTH_QUADRATIC_CURVE_TO_NV GL_SM_COUNT_NV GL_SOFTLIGHT_KHR
	       GL_SOFTLIGHT_NV GL_SOURCE0_ALPHA GL_SOURCE0_ALPHA_ARB
	       GL_SOURCE0_ALPHA_EXT GL_SOURCE0_RGB GL_SOURCE0_RGB_ARB
	       GL_SOURCE0_RGB_EXT GL_SOURCE1_ALPHA GL_SOURCE1_ALPHA_ARB
	       GL_SOURCE1_ALPHA_EXT GL_SOURCE1_RGB GL_SOURCE1_RGB_ARB
	       GL_SOURCE1_RGB_EXT GL_SOURCE2_ALPHA GL_SOURCE2_ALPHA_ARB
	       GL_SOURCE2_ALPHA_EXT GL_SOURCE2_RGB GL_SOURCE2_RGB_ARB
	       GL_SOURCE2_RGB_EXT GL_SOURCE3_ALPHA_NV GL_SOURCE3_RGB_NV
	       GL_SPARE0_NV GL_SPARE0_PLUS_SECONDARY_COLOR_NV GL_SPARE1_NV
	       GL_SPARSE_BUFFER_PAGE_SIZE_ARB GL_SPARSE_STORAGE_BIT_ARB
	       GL_SPARSE_TEXTURE_FULL_ARRAY_CUBE_MIPMAPS_ARB GL_SPECULAR
	       GL_SPHERE_MAP GL_SPIR_V_BINARY_ARB GL_SPOT_CUTOFF
	       GL_SPOT_DIRECTION GL_SPOT_EXPONENT GL_SQUARE_NV GL_SRC0_ALPHA
	       GL_SRC0_RGB GL_SRC1_ALPHA GL_SRC1_COLOR GL_SRC1_RGB
	       GL_SRC2_ALPHA GL_SRC2_RGB GL_SRC_ALPHA GL_SRC_ALPHA_SATURATE
	       GL_SRC_ATOP_NV GL_SRC_COLOR GL_SRC_IN_NV GL_SRC_NV GL_SRC_OUT_NV
	       GL_SRC_OVER_NV GL_SRGB GL_SRGB8 GL_SRGB8_ALPHA8
	       GL_SRGB8_ALPHA8_EXT GL_SRGB8_EXT GL_SRGB_ALPHA GL_SRGB_ALPHA_EXT
	       GL_SRGB_DECODE_ARB GL_SRGB_EXT GL_SRGB_READ GL_SRGB_WRITE
	       GL_STACK_OVERFLOW GL_STACK_UNDERFLOW GL_STANDARD_FONT_FORMAT_NV
	       GL_STANDARD_FONT_NAME_NV GL_STATIC_ATI GL_STATIC_COPY
	       GL_STATIC_COPY_ARB GL_STATIC_DRAW GL_STATIC_DRAW_ARB
	       GL_STATIC_READ GL_STATIC_READ_ARB GL_STATIC_VERTEX_ARRAY_IBM
	       GL_STATISTICS_REGAL GL_STENCIL GL_STENCIL_ATTACHMENT
	       GL_STENCIL_ATTACHMENT_EXT GL_STENCIL_BACK_FAIL
	       GL_STENCIL_BACK_FAIL_ATI GL_STENCIL_BACK_FUNC
	       GL_STENCIL_BACK_FUNC_ATI GL_STENCIL_BACK_OP_VALUE_AMD
	       GL_STENCIL_BACK_PASS_DEPTH_FAIL
	       GL_STENCIL_BACK_PASS_DEPTH_FAIL_ATI
	       GL_STENCIL_BACK_PASS_DEPTH_PASS
	       GL_STENCIL_BACK_PASS_DEPTH_PASS_ATI GL_STENCIL_BACK_REF
	       GL_STENCIL_BACK_VALUE_MASK GL_STENCIL_BACK_WRITEMASK
	       GL_STENCIL_BITS GL_STENCIL_BUFFER GL_STENCIL_BUFFER_BIT
	       GL_STENCIL_CLEAR_TAG_VALUE_EXT GL_STENCIL_CLEAR_VALUE
	       GL_STENCIL_COMPONENTS GL_STENCIL_FAIL GL_STENCIL_FUNC
	       GL_STENCIL_INDEX GL_STENCIL_INDEX1 GL_STENCIL_INDEX16
	       GL_STENCIL_INDEX16_EXT GL_STENCIL_INDEX1_EXT GL_STENCIL_INDEX4
	       GL_STENCIL_INDEX4_EXT GL_STENCIL_INDEX8 GL_STENCIL_INDEX8_EXT
	       GL_STENCIL_OP_VALUE_AMD GL_STENCIL_PASS_DEPTH_FAIL
	       GL_STENCIL_PASS_DEPTH_PASS GL_STENCIL_REF
	       GL_STENCIL_REF_COMMAND_NV GL_STENCIL_RENDERABLE
	       GL_STENCIL_SAMPLES_NV GL_STENCIL_TAG_BITS_EXT GL_STENCIL_TEST
	       GL_STENCIL_TEST_TWO_SIDE_EXT GL_STENCIL_VALUE_MASK
	       GL_STENCIL_WRITEMASK GL_STEREO GL_STORAGE_CACHED_APPLE
	       GL_STORAGE_CLIENT_APPLE GL_STORAGE_PRIVATE_APPLE
	       GL_STORAGE_SHARED_APPLE GL_STREAM_COPY GL_STREAM_COPY_ARB
	       GL_STREAM_DRAW GL_STREAM_DRAW_ARB GL_STREAM_RASTERIZATION_AMD
	       GL_STREAM_READ GL_STREAM_READ_ARB GL_STRICT_DEPTHFUNC_HINT_PGI
	       GL_STRICT_LIGHTING_HINT_PGI GL_STRICT_SCISSOR_HINT_PGI
	       GL_SUBPIXEL_BITS GL_SUBPIXEL_PRECISION_BIAS_X_BITS_NV
	       GL_SUBPIXEL_PRECISION_BIAS_Y_BITS_NV GL_SUBSAMPLE_DISTANCE_AMD
	       GL_SUBTRACT GL_SUBTRACT_ARB GL_SUB_ATI GL_SUCCESS_NV
	       GL_SUNX_constant_data GL_SUN_convolution_border_modes
	       GL_SUN_global_alpha GL_SUN_mesh_array GL_SUN_read_video_pixels
	       GL_SUN_slice_accum GL_SUN_triangle_list GL_SUN_vertex
	       GL_SUPERSAMPLE_SCALE_X_NV GL_SUPERSAMPLE_SCALE_Y_NV
	       GL_SURFACE_MAPPED_NV GL_SURFACE_REGISTERED_NV
	       GL_SURFACE_STATE_NV GL_SWIZZLE_STQ_ATI GL_SWIZZLE_STQ_DQ_ATI
	       GL_SWIZZLE_STRQ_ATI GL_SWIZZLE_STRQ_DQ_ATI GL_SWIZZLE_STR_ATI
	       GL_SWIZZLE_STR_DR_ATI GL_SYNC_CL_EVENT_ARB
	       GL_SYNC_CL_EVENT_COMPLETE_ARB GL_SYNC_CONDITION GL_SYNC_FENCE
	       GL_SYNC_FLAGS GL_SYNC_FLUSH_COMMANDS_BIT
	       GL_SYNC_GPU_COMMANDS_COMPLETE GL_SYNC_STATUS
	       GL_SYNC_X11_FENCE_EXT GL_SYSTEM_FONT_NAME_NV GL_T GL_T2F_C3F_V3F
	       GL_T2F_C4F_N3F_V3F GL_T2F_C4UB_V3F GL_T2F_N3F_V3F GL_T2F_V3F
	       GL_T4F_C4F_N3F_V4F GL_T4F_V4F GL_TABLE_TOO_LARGE
	       GL_TANGENT_ARRAY_EXT GL_TANGENT_ARRAY_POINTER_EXT
	       GL_TANGENT_ARRAY_STRIDE_EXT GL_TANGENT_ARRAY_TYPE_EXT
	       GL_TERMINATE_SEQUENCE_COMMAND_NV GL_TESSELLATION_FACTOR_AMD
	       GL_TESSELLATION_MODE_AMD GL_TESS_CONTROL_OUTPUT_VERTICES
	       GL_TESS_CONTROL_PROGRAM_NV
	       GL_TESS_CONTROL_PROGRAM_PARAMETER_BUFFER_NV
	       GL_TESS_CONTROL_SHADER GL_TESS_CONTROL_SHADER_BIT
	       GL_TESS_CONTROL_SHADER_PATCHES_ARB GL_TESS_CONTROL_SUBROUTINE
	       GL_TESS_CONTROL_SUBROUTINE_UNIFORM GL_TESS_CONTROL_TEXTURE
	       GL_TESS_EVALUATION_PROGRAM_NV
	       GL_TESS_EVALUATION_PROGRAM_PARAMETER_BUFFER_NV
	       GL_TESS_EVALUATION_SHADER GL_TESS_EVALUATION_SHADER_BIT
	       GL_TESS_EVALUATION_SHADER_INVOCATIONS_ARB
	       GL_TESS_EVALUATION_SUBROUTINE
	       GL_TESS_EVALUATION_SUBROUTINE_UNIFORM GL_TESS_EVALUATION_TEXTURE
	       GL_TESS_GEN_MODE GL_TESS_GEN_POINT_MODE GL_TESS_GEN_SPACING
	       GL_TESS_GEN_VERTEX_ORDER GL_TEXCOORD1_BIT_PGI
	       GL_TEXCOORD2_BIT_PGI GL_TEXCOORD3_BIT_PGI GL_TEXCOORD4_BIT_PGI
	       GL_TEXTURE GL_TEXTURE0 GL_TEXTURE0_ARB GL_TEXTURE1 GL_TEXTURE10
	       GL_TEXTURE10_ARB GL_TEXTURE11 GL_TEXTURE11_ARB GL_TEXTURE12
	       GL_TEXTURE12_ARB GL_TEXTURE13 GL_TEXTURE13_ARB GL_TEXTURE14
	       GL_TEXTURE14_ARB GL_TEXTURE15 GL_TEXTURE15_ARB GL_TEXTURE16
	       GL_TEXTURE16_ARB GL_TEXTURE17 GL_TEXTURE17_ARB GL_TEXTURE18
	       GL_TEXTURE18_ARB GL_TEXTURE19 GL_TEXTURE19_ARB GL_TEXTURE1_ARB
	       GL_TEXTURE2 GL_TEXTURE20 GL_TEXTURE20_ARB GL_TEXTURE21
	       GL_TEXTURE21_ARB GL_TEXTURE22 GL_TEXTURE22_ARB GL_TEXTURE23
	       GL_TEXTURE23_ARB GL_TEXTURE24 GL_TEXTURE24_ARB GL_TEXTURE25
	       GL_TEXTURE25_ARB GL_TEXTURE26 GL_TEXTURE26_ARB GL_TEXTURE27
	       GL_TEXTURE27_ARB GL_TEXTURE28 GL_TEXTURE28_ARB GL_TEXTURE29
	       GL_TEXTURE29_ARB GL_TEXTURE2_ARB GL_TEXTURE3 GL_TEXTURE30
	       GL_TEXTURE30_ARB GL_TEXTURE31 GL_TEXTURE31_ARB GL_TEXTURE3_ARB
	       GL_TEXTURE4 GL_TEXTURE4_ARB GL_TEXTURE5 GL_TEXTURE5_ARB
	       GL_TEXTURE6 GL_TEXTURE6_ARB GL_TEXTURE7 GL_TEXTURE7_ARB
	       GL_TEXTURE8 GL_TEXTURE8_ARB GL_TEXTURE9 GL_TEXTURE9_ARB
	       GL_TEXTURE_1D GL_TEXTURE_1D_ARRAY GL_TEXTURE_1D_ARRAY_EXT
	       GL_TEXTURE_1D_BINDING_EXT GL_TEXTURE_1D_STACK_BINDING_MESAX
	       GL_TEXTURE_1D_STACK_MESAX GL_TEXTURE_2D GL_TEXTURE_2D_ARRAY
	       GL_TEXTURE_2D_ARRAY_EXT GL_TEXTURE_2D_BINDING_EXT
	       GL_TEXTURE_2D_MULTISAMPLE GL_TEXTURE_2D_MULTISAMPLE_ARRAY
	       GL_TEXTURE_2D_STACK_BINDING_MESAX GL_TEXTURE_2D_STACK_MESAX
	       GL_TEXTURE_3D GL_TEXTURE_3D_BINDING_EXT GL_TEXTURE_3D_EXT
	       GL_TEXTURE_ALPHA_SIZE GL_TEXTURE_ALPHA_SIZE_EXT
	       GL_TEXTURE_ALPHA_TYPE GL_TEXTURE_ALPHA_TYPE_ARB
	       GL_TEXTURE_APPLICATION_MODE_EXT GL_TEXTURE_BASE_LEVEL
	       GL_TEXTURE_BASE_LEVEL_SGIS GL_TEXTURE_BINDING_1D
	       GL_TEXTURE_BINDING_1D_ARRAY GL_TEXTURE_BINDING_1D_ARRAY_EXT
	       GL_TEXTURE_BINDING_2D GL_TEXTURE_BINDING_2D_ARRAY
	       GL_TEXTURE_BINDING_2D_ARRAY_EXT
	       GL_TEXTURE_BINDING_2D_MULTISAMPLE
	       GL_TEXTURE_BINDING_2D_MULTISAMPLE_ARRAY GL_TEXTURE_BINDING_3D
	       GL_TEXTURE_BINDING_BUFFER GL_TEXTURE_BINDING_BUFFER_ARB
	       GL_TEXTURE_BINDING_BUFFER_EXT GL_TEXTURE_BINDING_CUBE_MAP
	       GL_TEXTURE_BINDING_CUBE_MAP_ARB
	       GL_TEXTURE_BINDING_CUBE_MAP_ARRAY
	       GL_TEXTURE_BINDING_CUBE_MAP_ARRAY_ARB
	       GL_TEXTURE_BINDING_CUBE_MAP_EXT GL_TEXTURE_BINDING_RECTANGLE
	       GL_TEXTURE_BINDING_RECTANGLE_ARB
	       GL_TEXTURE_BINDING_RECTANGLE_EXT GL_TEXTURE_BINDING_RECTANGLE_NV
	       GL_TEXTURE_BINDING_RENDERBUFFER_NV GL_TEXTURE_BIT
	       GL_TEXTURE_BLUE_SIZE GL_TEXTURE_BLUE_SIZE_EXT
	       GL_TEXTURE_BLUE_TYPE GL_TEXTURE_BLUE_TYPE_ARB GL_TEXTURE_BORDER
	       GL_TEXTURE_BORDER_COLOR GL_TEXTURE_BORDER_VALUES_NV
	       GL_TEXTURE_BUFFER GL_TEXTURE_BUFFER_ARB
	       GL_TEXTURE_BUFFER_BINDING GL_TEXTURE_BUFFER_DATA_STORE_BINDING
	       GL_TEXTURE_BUFFER_DATA_STORE_BINDING_ARB
	       GL_TEXTURE_BUFFER_DATA_STORE_BINDING_EXT GL_TEXTURE_BUFFER_EXT
	       GL_TEXTURE_BUFFER_FORMAT GL_TEXTURE_BUFFER_FORMAT_ARB
	       GL_TEXTURE_BUFFER_FORMAT_EXT GL_TEXTURE_BUFFER_OFFSET
	       GL_TEXTURE_BUFFER_OFFSET_ALIGNMENT GL_TEXTURE_BUFFER_SIZE
	       GL_TEXTURE_COLOR_SAMPLES_NV GL_TEXTURE_COLOR_TABLE_SGI
	       GL_TEXTURE_COMPARE_FAIL_VALUE_ARB GL_TEXTURE_COMPARE_FUNC
	       GL_TEXTURE_COMPARE_FUNC_ARB GL_TEXTURE_COMPARE_MODE
	       GL_TEXTURE_COMPARE_MODE_ARB GL_TEXTURE_COMPARE_OPERATOR_SGIX
	       GL_TEXTURE_COMPARE_SGIX GL_TEXTURE_COMPONENTS
	       GL_TEXTURE_COMPRESSED GL_TEXTURE_COMPRESSED_ARB
	       GL_TEXTURE_COMPRESSED_BLOCK_HEIGHT
	       GL_TEXTURE_COMPRESSED_BLOCK_SIZE
	       GL_TEXTURE_COMPRESSED_BLOCK_WIDTH
	       GL_TEXTURE_COMPRESSED_IMAGE_SIZE
	       GL_TEXTURE_COMPRESSED_IMAGE_SIZE_ARB GL_TEXTURE_COMPRESSION_HINT
	       GL_TEXTURE_COMPRESSION_HINT_ARB GL_TEXTURE_CONSTANT_DATA_SUNX
	       GL_TEXTURE_COORD_ARRAY GL_TEXTURE_COORD_ARRAY_ADDRESS_NV
	       GL_TEXTURE_COORD_ARRAY_BUFFER_BINDING
	       GL_TEXTURE_COORD_ARRAY_BUFFER_BINDING_ARB
	       GL_TEXTURE_COORD_ARRAY_COUNT_EXT GL_TEXTURE_COORD_ARRAY_EXT
	       GL_TEXTURE_COORD_ARRAY_LENGTH_NV GL_TEXTURE_COORD_ARRAY_LIST_IBM
	       GL_TEXTURE_COORD_ARRAY_LIST_STRIDE_IBM
	       GL_TEXTURE_COORD_ARRAY_PARALLEL_POINTERS_INTEL
	       GL_TEXTURE_COORD_ARRAY_POINTER
	       GL_TEXTURE_COORD_ARRAY_POINTER_EXT GL_TEXTURE_COORD_ARRAY_SIZE
	       GL_TEXTURE_COORD_ARRAY_SIZE_EXT GL_TEXTURE_COORD_ARRAY_STRIDE
	       GL_TEXTURE_COORD_ARRAY_STRIDE_EXT GL_TEXTURE_COORD_ARRAY_TYPE
	       GL_TEXTURE_COORD_ARRAY_TYPE_EXT GL_TEXTURE_COORD_NV
	       GL_TEXTURE_COVERAGE_SAMPLES_NV GL_TEXTURE_CUBE_MAP
	       GL_TEXTURE_CUBE_MAP_ARB GL_TEXTURE_CUBE_MAP_ARRAY
	       GL_TEXTURE_CUBE_MAP_ARRAY_ARB GL_TEXTURE_CUBE_MAP_EXT
	       GL_TEXTURE_CUBE_MAP_NEGATIVE_X
	       GL_TEXTURE_CUBE_MAP_NEGATIVE_X_ARB
	       GL_TEXTURE_CUBE_MAP_NEGATIVE_X_EXT
	       GL_TEXTURE_CUBE_MAP_NEGATIVE_Y
	       GL_TEXTURE_CUBE_MAP_NEGATIVE_Y_ARB
	       GL_TEXTURE_CUBE_MAP_NEGATIVE_Y_EXT
	       GL_TEXTURE_CUBE_MAP_NEGATIVE_Z
	       GL_TEXTURE_CUBE_MAP_NEGATIVE_Z_ARB
	       GL_TEXTURE_CUBE_MAP_NEGATIVE_Z_EXT
	       GL_TEXTURE_CUBE_MAP_POSITIVE_X
	       GL_TEXTURE_CUBE_MAP_POSITIVE_X_ARB
	       GL_TEXTURE_CUBE_MAP_POSITIVE_X_EXT
	       GL_TEXTURE_CUBE_MAP_POSITIVE_Y
	       GL_TEXTURE_CUBE_MAP_POSITIVE_Y_ARB
	       GL_TEXTURE_CUBE_MAP_POSITIVE_Y_EXT
	       GL_TEXTURE_CUBE_MAP_POSITIVE_Z
	       GL_TEXTURE_CUBE_MAP_POSITIVE_Z_ARB
	       GL_TEXTURE_CUBE_MAP_POSITIVE_Z_EXT GL_TEXTURE_CUBE_MAP_SEAMLESS
	       GL_TEXTURE_CUBE_MAP_SEAMLESS_ARB GL_TEXTURE_DEPTH
	       GL_TEXTURE_DEPTH_EXT GL_TEXTURE_DEPTH_SIZE
	       GL_TEXTURE_DEPTH_SIZE_ARB GL_TEXTURE_DEPTH_TYPE
	       GL_TEXTURE_DEPTH_TYPE_ARB GL_TEXTURE_DS_SIZE_NV
	       GL_TEXTURE_DT_SIZE_NV GL_TEXTURE_ENV GL_TEXTURE_ENV_COLOR
	       GL_TEXTURE_ENV_MODE GL_TEXTURE_FETCH_BARRIER_BIT
	       GL_TEXTURE_FETCH_BARRIER_BIT_EXT GL_TEXTURE_FILTER_CONTROL
	       GL_TEXTURE_FILTER_CONTROL_EXT GL_TEXTURE_FIXED_SAMPLE_LOCATIONS
	       GL_TEXTURE_FLOAT_COMPONENTS_NV GL_TEXTURE_FREE_MEMORY_ATI
	       GL_TEXTURE_GATHER GL_TEXTURE_GATHER_SHADOW GL_TEXTURE_GEN_MODE
	       GL_TEXTURE_GEN_Q GL_TEXTURE_GEN_R GL_TEXTURE_GEN_S
	       GL_TEXTURE_GEN_T GL_TEXTURE_GEQUAL_R_SGIX GL_TEXTURE_GREEN_SIZE
	       GL_TEXTURE_GREEN_SIZE_EXT GL_TEXTURE_GREEN_TYPE
	       GL_TEXTURE_GREEN_TYPE_ARB GL_TEXTURE_HEIGHT
	       GL_TEXTURE_HI_SIZE_NV GL_TEXTURE_IMAGE_FORMAT
	       GL_TEXTURE_IMAGE_TYPE GL_TEXTURE_IMMUTABLE_FORMAT
	       GL_TEXTURE_IMMUTABLE_LEVELS GL_TEXTURE_INDEX_SIZE_EXT
	       GL_TEXTURE_INTENSITY_SIZE GL_TEXTURE_INTENSITY_SIZE_EXT
	       GL_TEXTURE_INTENSITY_TYPE GL_TEXTURE_INTENSITY_TYPE_ARB
	       GL_TEXTURE_INTERNAL_FORMAT GL_TEXTURE_LEQUAL_R_SGIX
	       GL_TEXTURE_LIGHT_EXT GL_TEXTURE_LOD_BIAS GL_TEXTURE_LOD_BIAS_EXT
	       GL_TEXTURE_LO_SIZE_NV GL_TEXTURE_LUMINANCE_SIZE
	       GL_TEXTURE_LUMINANCE_SIZE_EXT GL_TEXTURE_LUMINANCE_TYPE
	       GL_TEXTURE_LUMINANCE_TYPE_ARB GL_TEXTURE_MAG_FILTER
	       GL_TEXTURE_MAG_SIZE_NV GL_TEXTURE_MATERIAL_FACE_EXT
	       GL_TEXTURE_MATERIAL_PARAMETER_EXT GL_TEXTURE_MATRIX
	       GL_TEXTURE_MAX_ANISOTROPY_EXT GL_TEXTURE_MAX_CLAMP_R_SGIX
	       GL_TEXTURE_MAX_CLAMP_S_SGIX GL_TEXTURE_MAX_CLAMP_T_SGIX
	       GL_TEXTURE_MAX_LEVEL GL_TEXTURE_MAX_LEVEL_SGIS
	       GL_TEXTURE_MAX_LOD GL_TEXTURE_MAX_LOD_SGIS
	       GL_TEXTURE_MEMORY_LAYOUT_INTEL GL_TEXTURE_MIN_FILTER
	       GL_TEXTURE_MIN_LOD GL_TEXTURE_MIN_LOD_SGIS
	       GL_TEXTURE_MULTI_BUFFER_HINT_SGIX GL_TEXTURE_NORMAL_EXT
	       GL_TEXTURE_OUTPUT_ALPHA_ATIX GL_TEXTURE_OUTPUT_RGB_ATIX
	       GL_TEXTURE_POINT_MODE_ATIX GL_TEXTURE_POINT_ONE_COORD_ATIX
	       GL_TEXTURE_POINT_SPRITE_ATIX GL_TEXTURE_PRIORITY
	       GL_TEXTURE_PRIORITY_EXT GL_TEXTURE_RANGE_LENGTH_APPLE
	       GL_TEXTURE_RANGE_POINTER_APPLE GL_TEXTURE_RECTANGLE
	       GL_TEXTURE_RECTANGLE_ARB GL_TEXTURE_RECTANGLE_EXT
	       GL_TEXTURE_RECTANGLE_NV GL_TEXTURE_REDUCTION_MODE_ARB
	       GL_TEXTURE_REDUCTION_MODE_EXT GL_TEXTURE_RED_SIZE
	       GL_TEXTURE_RED_SIZE_EXT GL_TEXTURE_RED_TYPE
	       GL_TEXTURE_RED_TYPE_ARB
	       GL_TEXTURE_RENDERBUFFER_DATA_STORE_BINDING_NV
	       GL_TEXTURE_RENDERBUFFER_NV GL_TEXTURE_RESIDENT
	       GL_TEXTURE_RESIDENT_EXT GL_TEXTURE_SAMPLES GL_TEXTURE_SHADER_NV
	       GL_TEXTURE_SHADOW GL_TEXTURE_SHARED_SIZE
	       GL_TEXTURE_SHARED_SIZE_EXT GL_TEXTURE_SPARSE_ARB
	       GL_TEXTURE_SRGB_DECODE_EXT GL_TEXTURE_STACK_DEPTH
	       GL_TEXTURE_STENCIL_SIZE GL_TEXTURE_STENCIL_SIZE_EXT
	       GL_TEXTURE_STORAGE_HINT_APPLE GL_TEXTURE_STORAGE_SPARSE_BIT_AMD
	       GL_TEXTURE_SWIZZLE_A GL_TEXTURE_SWIZZLE_A_EXT
	       GL_TEXTURE_SWIZZLE_B GL_TEXTURE_SWIZZLE_B_EXT
	       GL_TEXTURE_SWIZZLE_G GL_TEXTURE_SWIZZLE_G_EXT
	       GL_TEXTURE_SWIZZLE_R GL_TEXTURE_SWIZZLE_RGBA
	       GL_TEXTURE_SWIZZLE_RGBA_EXT GL_TEXTURE_SWIZZLE_R_EXT
	       GL_TEXTURE_TARGET GL_TEXTURE_UNSIGNED_REMAP_MODE_NV
	       GL_TEXTURE_UPDATE_BARRIER_BIT GL_TEXTURE_UPDATE_BARRIER_BIT_EXT
	       GL_TEXTURE_USAGE_ANGLE GL_TEXTURE_VIEW GL_TEXTURE_VIEW_MIN_LAYER
	       GL_TEXTURE_VIEW_MIN_LEVEL GL_TEXTURE_VIEW_NUM_LAYERS
	       GL_TEXTURE_VIEW_NUM_LEVELS GL_TEXTURE_WIDTH GL_TEXTURE_WRAP_R
	       GL_TEXTURE_WRAP_R_EXT GL_TEXTURE_WRAP_S GL_TEXTURE_WRAP_T
	       GL_TEXT_FRAGMENT_SHADER_ATI GL_TIMEOUT_EXPIRED
	       GL_TIMEOUT_IGNORED GL_TIMESTAMP GL_TIMESTAMP_ANGLE
	       GL_TIME_ELAPSED GL_TIME_ELAPSED_ANGLE GL_TIME_ELAPSED_EXT
	       GL_TOP_LEVEL_ARRAY_SIZE GL_TOP_LEVEL_ARRAY_STRIDE GL_TRACE_REGAL
	       GL_TRACK_MATRIX_NV GL_TRACK_MATRIX_TRANSFORM_NV GL_TRANSFORM_BIT
	       GL_TRANSFORM_FEEDBACK GL_TRANSFORM_FEEDBACK_ACTIVE
	       GL_TRANSFORM_FEEDBACK_ATTRIBS_NV
	       GL_TRANSFORM_FEEDBACK_BARRIER_BIT
	       GL_TRANSFORM_FEEDBACK_BARRIER_BIT_EXT
	       GL_TRANSFORM_FEEDBACK_BINDING GL_TRANSFORM_FEEDBACK_BINDING_NV
	       GL_TRANSFORM_FEEDBACK_BUFFER GL_TRANSFORM_FEEDBACK_BUFFER_ACTIVE
	       GL_TRANSFORM_FEEDBACK_BUFFER_ACTIVE_NV
	       GL_TRANSFORM_FEEDBACK_BUFFER_BINDING
	       GL_TRANSFORM_FEEDBACK_BUFFER_BINDING_EXT
	       GL_TRANSFORM_FEEDBACK_BUFFER_BINDING_NV
	       GL_TRANSFORM_FEEDBACK_BUFFER_EXT
	       GL_TRANSFORM_FEEDBACK_BUFFER_INDEX
	       GL_TRANSFORM_FEEDBACK_BUFFER_MODE
	       GL_TRANSFORM_FEEDBACK_BUFFER_MODE_EXT
	       GL_TRANSFORM_FEEDBACK_BUFFER_MODE_NV
	       GL_TRANSFORM_FEEDBACK_BUFFER_NV
	       GL_TRANSFORM_FEEDBACK_BUFFER_PAUSED
	       GL_TRANSFORM_FEEDBACK_BUFFER_PAUSED_NV
	       GL_TRANSFORM_FEEDBACK_BUFFER_SIZE
	       GL_TRANSFORM_FEEDBACK_BUFFER_SIZE_EXT
	       GL_TRANSFORM_FEEDBACK_BUFFER_SIZE_NV
	       GL_TRANSFORM_FEEDBACK_BUFFER_START
	       GL_TRANSFORM_FEEDBACK_BUFFER_START_EXT
	       GL_TRANSFORM_FEEDBACK_BUFFER_START_NV
	       GL_TRANSFORM_FEEDBACK_BUFFER_STRIDE GL_TRANSFORM_FEEDBACK_NV
	       GL_TRANSFORM_FEEDBACK_OVERFLOW_ARB GL_TRANSFORM_FEEDBACK_PAUSED
	       GL_TRANSFORM_FEEDBACK_PRIMITIVES_WRITTEN
	       GL_TRANSFORM_FEEDBACK_PRIMITIVES_WRITTEN_EXT
	       GL_TRANSFORM_FEEDBACK_PRIMITIVES_WRITTEN_NV
	       GL_TRANSFORM_FEEDBACK_RECORD_NV
	       GL_TRANSFORM_FEEDBACK_STREAM_OVERFLOW_ARB
	       GL_TRANSFORM_FEEDBACK_VARYING GL_TRANSFORM_FEEDBACK_VARYINGS
	       GL_TRANSFORM_FEEDBACK_VARYINGS_EXT
	       GL_TRANSFORM_FEEDBACK_VARYINGS_NV
	       GL_TRANSFORM_FEEDBACK_VARYING_MAX_LENGTH
	       GL_TRANSFORM_FEEDBACK_VARYING_MAX_LENGTH_EXT
	       GL_TRANSFORM_HINT_APPLE GL_TRANSLATED_SHADER_SOURCE_LENGTH_ANGLE
	       GL_TRANSLATE_2D_NV GL_TRANSLATE_3D_NV GL_TRANSLATE_X_NV
	       GL_TRANSLATE_Y_NV GL_TRANSPOSE_AFFINE_2D_NV
	       GL_TRANSPOSE_AFFINE_3D_NV GL_TRANSPOSE_COLOR_MATRIX
	       GL_TRANSPOSE_COLOR_MATRIX_ARB GL_TRANSPOSE_CURRENT_MATRIX_ARB
	       GL_TRANSPOSE_MODELVIEW_MATRIX GL_TRANSPOSE_MODELVIEW_MATRIX_ARB
	       GL_TRANSPOSE_NV GL_TRANSPOSE_PROGRAM_MATRIX_EXT
	       GL_TRANSPOSE_PROJECTION_MATRIX
	       GL_TRANSPOSE_PROJECTION_MATRIX_ARB GL_TRANSPOSE_TEXTURE_MATRIX
	       GL_TRANSPOSE_TEXTURE_MATRIX_ARB GL_TRIANGLES
	       GL_TRIANGLES_ADJACENCY GL_TRIANGLES_ADJACENCY_ARB
	       GL_TRIANGLES_ADJACENCY_EXT GL_TRIANGLE_FAN GL_TRIANGLE_LIST_SUN
	       GL_TRIANGLE_MESH_SUN GL_TRIANGLE_STRIP
	       GL_TRIANGLE_STRIP_ADJACENCY GL_TRIANGLE_STRIP_ADJACENCY_ARB
	       GL_TRIANGLE_STRIP_ADJACENCY_EXT GL_TRIANGULAR_NV GL_TRUE GL_TYPE
	       GL_UNCORRELATED_NV GL_UNDEFINED_APPLE GL_UNDEFINED_VERTEX
	       GL_UNIFORM GL_UNIFORM_ADDRESS_COMMAND_NV GL_UNIFORM_ARRAY_STRIDE
	       GL_UNIFORM_ATOMIC_COUNTER_BUFFER_INDEX GL_UNIFORM_BARRIER_BIT
	       GL_UNIFORM_BARRIER_BIT_EXT GL_UNIFORM_BLOCK
	       GL_UNIFORM_BLOCK_ACTIVE_UNIFORMS
	       GL_UNIFORM_BLOCK_ACTIVE_UNIFORM_INDICES GL_UNIFORM_BLOCK_BINDING
	       GL_UNIFORM_BLOCK_DATA_SIZE GL_UNIFORM_BLOCK_INDEX
	       GL_UNIFORM_BLOCK_NAME_LENGTH
	       GL_UNIFORM_BLOCK_REFERENCED_BY_COMPUTE_SHADER
	       GL_UNIFORM_BLOCK_REFERENCED_BY_FRAGMENT_SHADER
	       GL_UNIFORM_BLOCK_REFERENCED_BY_GEOMETRY_SHADER
	       GL_UNIFORM_BLOCK_REFERENCED_BY_TESS_CONTROL_SHADER
	       GL_UNIFORM_BLOCK_REFERENCED_BY_TESS_EVALUATION_SHADER
	       GL_UNIFORM_BLOCK_REFERENCED_BY_VERTEX_SHADER GL_UNIFORM_BUFFER
	       GL_UNIFORM_BUFFER_ADDRESS_NV GL_UNIFORM_BUFFER_BINDING
	       GL_UNIFORM_BUFFER_BINDING_EXT GL_UNIFORM_BUFFER_EXT
	       GL_UNIFORM_BUFFER_LENGTH_NV GL_UNIFORM_BUFFER_OFFSET_ALIGNMENT
	       GL_UNIFORM_BUFFER_SIZE GL_UNIFORM_BUFFER_START
	       GL_UNIFORM_BUFFER_UNIFIED_NV GL_UNIFORM_IS_ROW_MAJOR
	       GL_UNIFORM_MATRIX_STRIDE GL_UNIFORM_NAME_LENGTH
	       GL_UNIFORM_OFFSET GL_UNIFORM_SIZE GL_UNIFORM_TYPE
	       GL_UNKNOWN_CONTEXT_RESET GL_UNKNOWN_CONTEXT_RESET_ARB
	       GL_UNPACK_ALIGNMENT GL_UNPACK_CLIENT_STORAGE_APPLE
	       GL_UNPACK_CMYK_HINT_EXT GL_UNPACK_COMPRESSED_BLOCK_DEPTH
	       GL_UNPACK_COMPRESSED_BLOCK_HEIGHT
	       GL_UNPACK_COMPRESSED_BLOCK_SIZE GL_UNPACK_COMPRESSED_BLOCK_WIDTH
	       GL_UNPACK_CONSTANT_DATA_SUNX GL_UNPACK_IMAGE_HEIGHT
	       GL_UNPACK_IMAGE_HEIGHT_EXT GL_UNPACK_LSB_FIRST
	       GL_UNPACK_RESAMPLE_OML GL_UNPACK_RESAMPLE_SGIX
	       GL_UNPACK_ROW_BYTES_APPLE GL_UNPACK_ROW_LENGTH
	       GL_UNPACK_SKIP_IMAGES GL_UNPACK_SKIP_IMAGES_EXT
	       GL_UNPACK_SKIP_PIXELS GL_UNPACK_SKIP_ROWS GL_UNPACK_SWAP_BYTES
	       GL_UNSIGNALED GL_UNSIGNED_BYTE GL_UNSIGNED_BYTE_2_3_3_REV
	       GL_UNSIGNED_BYTE_3_3_2 GL_UNSIGNED_BYTE_3_3_2_EXT
	       GL_UNSIGNED_IDENTITY_NV GL_UNSIGNED_INT GL_UNSIGNED_INT16_NV
	       GL_UNSIGNED_INT16_VEC2_NV GL_UNSIGNED_INT16_VEC3_NV
	       GL_UNSIGNED_INT16_VEC4_NV GL_UNSIGNED_INT64_AMD
	       GL_UNSIGNED_INT64_ARB GL_UNSIGNED_INT64_NV
	       GL_UNSIGNED_INT64_VEC2_ARB GL_UNSIGNED_INT64_VEC2_NV
	       GL_UNSIGNED_INT64_VEC3_ARB GL_UNSIGNED_INT64_VEC3_NV
	       GL_UNSIGNED_INT64_VEC4_ARB GL_UNSIGNED_INT64_VEC4_NV
	       GL_UNSIGNED_INT8_NV GL_UNSIGNED_INT8_VEC2_NV
	       GL_UNSIGNED_INT8_VEC3_NV GL_UNSIGNED_INT8_VEC4_NV
	       GL_UNSIGNED_INT_10F_11F_11F_REV
	       GL_UNSIGNED_INT_10F_11F_11F_REV_EXT GL_UNSIGNED_INT_10_10_10_2
	       GL_UNSIGNED_INT_10_10_10_2_EXT GL_UNSIGNED_INT_24_8
	       GL_UNSIGNED_INT_24_8_EXT GL_UNSIGNED_INT_24_8_NV
	       GL_UNSIGNED_INT_2_10_10_10_REV GL_UNSIGNED_INT_5_9_9_9_REV
	       GL_UNSIGNED_INT_5_9_9_9_REV_EXT GL_UNSIGNED_INT_8_8_8_8
	       GL_UNSIGNED_INT_8_8_8_8_EXT GL_UNSIGNED_INT_8_8_8_8_REV
	       GL_UNSIGNED_INT_8_8_S8_S8_REV_NV GL_UNSIGNED_INT_ATOMIC_COUNTER
	       GL_UNSIGNED_INT_IMAGE_1D GL_UNSIGNED_INT_IMAGE_1D_ARRAY
	       GL_UNSIGNED_INT_IMAGE_1D_ARRAY_EXT GL_UNSIGNED_INT_IMAGE_1D_EXT
	       GL_UNSIGNED_INT_IMAGE_2D GL_UNSIGNED_INT_IMAGE_2D_ARRAY
	       GL_UNSIGNED_INT_IMAGE_2D_ARRAY_EXT GL_UNSIGNED_INT_IMAGE_2D_EXT
	       GL_UNSIGNED_INT_IMAGE_2D_MULTISAMPLE
	       GL_UNSIGNED_INT_IMAGE_2D_MULTISAMPLE_ARRAY
	       GL_UNSIGNED_INT_IMAGE_2D_MULTISAMPLE_ARRAY_EXT
	       GL_UNSIGNED_INT_IMAGE_2D_MULTISAMPLE_EXT
	       GL_UNSIGNED_INT_IMAGE_2D_RECT GL_UNSIGNED_INT_IMAGE_2D_RECT_EXT
	       GL_UNSIGNED_INT_IMAGE_3D GL_UNSIGNED_INT_IMAGE_3D_EXT
	       GL_UNSIGNED_INT_IMAGE_BUFFER GL_UNSIGNED_INT_IMAGE_BUFFER_EXT
	       GL_UNSIGNED_INT_IMAGE_CUBE GL_UNSIGNED_INT_IMAGE_CUBE_EXT
	       GL_UNSIGNED_INT_IMAGE_CUBE_MAP_ARRAY
	       GL_UNSIGNED_INT_IMAGE_CUBE_MAP_ARRAY_EXT
	       GL_UNSIGNED_INT_S8_S8_8_8_NV GL_UNSIGNED_INT_SAMPLER_1D
	       GL_UNSIGNED_INT_SAMPLER_1D_ARRAY
	       GL_UNSIGNED_INT_SAMPLER_1D_ARRAY_EXT
	       GL_UNSIGNED_INT_SAMPLER_1D_EXT GL_UNSIGNED_INT_SAMPLER_2D
	       GL_UNSIGNED_INT_SAMPLER_2D_ARRAY
	       GL_UNSIGNED_INT_SAMPLER_2D_ARRAY_EXT
	       GL_UNSIGNED_INT_SAMPLER_2D_EXT
	       GL_UNSIGNED_INT_SAMPLER_2D_MULTISAMPLE
	       GL_UNSIGNED_INT_SAMPLER_2D_MULTISAMPLE_ARRAY
	       GL_UNSIGNED_INT_SAMPLER_2D_RECT
	       GL_UNSIGNED_INT_SAMPLER_2D_RECT_EXT GL_UNSIGNED_INT_SAMPLER_3D
	       GL_UNSIGNED_INT_SAMPLER_3D_EXT GL_UNSIGNED_INT_SAMPLER_BUFFER
	       GL_UNSIGNED_INT_SAMPLER_BUFFER_AMD
	       GL_UNSIGNED_INT_SAMPLER_BUFFER_EXT GL_UNSIGNED_INT_SAMPLER_CUBE
	       GL_UNSIGNED_INT_SAMPLER_CUBE_EXT
	       GL_UNSIGNED_INT_SAMPLER_CUBE_MAP_ARRAY
	       GL_UNSIGNED_INT_SAMPLER_CUBE_MAP_ARRAY_ARB
	       GL_UNSIGNED_INT_SAMPLER_RENDERBUFFER_NV GL_UNSIGNED_INT_VEC2
	       GL_UNSIGNED_INT_VEC2_EXT GL_UNSIGNED_INT_VEC3
	       GL_UNSIGNED_INT_VEC3_EXT GL_UNSIGNED_INT_VEC4
	       GL_UNSIGNED_INT_VEC4_EXT GL_UNSIGNED_INVERT_NV
	       GL_UNSIGNED_NORMALIZED GL_UNSIGNED_NORMALIZED_ARB
	       GL_UNSIGNED_SHORT GL_UNSIGNED_SHORT_1_5_5_5_REV
	       GL_UNSIGNED_SHORT_4_4_4_4 GL_UNSIGNED_SHORT_4_4_4_4_EXT
	       GL_UNSIGNED_SHORT_4_4_4_4_REV GL_UNSIGNED_SHORT_5_5_5_1
	       GL_UNSIGNED_SHORT_5_5_5_1_EXT GL_UNSIGNED_SHORT_5_6_5
	       GL_UNSIGNED_SHORT_5_6_5_REV GL_UNSIGNED_SHORT_8_8_APPLE
	       GL_UNSIGNED_SHORT_8_8_MESA GL_UNSIGNED_SHORT_8_8_REV_APPLE
	       GL_UNSIGNED_SHORT_8_8_REV_MESA GL_UPPER_LEFT
	       GL_USE_MISSING_GLYPH_NV GL_UTF16_NV GL_UTF8_NV GL_V2F GL_V3F
	       GL_VALIDATE_STATUS GL_VARIABLE_A_NV GL_VARIABLE_B_NV
	       GL_VARIABLE_C_NV GL_VARIABLE_D_NV GL_VARIABLE_E_NV
	       GL_VARIABLE_F_NV GL_VARIABLE_G_NV GL_VARIANT_ARRAY_EXT
	       GL_VARIANT_ARRAY_POINTER_EXT GL_VARIANT_ARRAY_STRIDE_EXT
	       GL_VARIANT_ARRAY_TYPE_EXT GL_VARIANT_DATATYPE_EXT GL_VARIANT_EXT
	       GL_VARIANT_VALUE_EXT GL_VBO_FREE_MEMORY_ATI GL_VECTOR_EXT
	       GL_VENDOR GL_VERSION GL_VERSION_1_1 GL_VERSION_1_2
	       GL_VERSION_1_2_1 GL_VERSION_1_3 GL_VERSION_1_4 GL_VERSION_1_5
	       GL_VERSION_2_0 GL_VERSION_2_1 GL_VERSION_3_0 GL_VERSION_3_1
	       GL_VERSION_3_2 GL_VERSION_3_3 GL_VERSION_4_0 GL_VERSION_4_1
	       GL_VERSION_4_2 GL_VERSION_4_3 GL_VERSION_4_4 GL_VERSION_4_5
	       GL_VERTEX23_BIT_PGI GL_VERTEX4_BIT_PGI GL_VERTEX_ARRAY
	       GL_VERTEX_ARRAY_ADDRESS_NV GL_VERTEX_ARRAY_BINDING
	       GL_VERTEX_ARRAY_BINDING_APPLE GL_VERTEX_ARRAY_BUFFER_BINDING
	       GL_VERTEX_ARRAY_BUFFER_BINDING_ARB GL_VERTEX_ARRAY_COUNT_EXT
	       GL_VERTEX_ARRAY_EXT GL_VERTEX_ARRAY_LENGTH_NV
	       GL_VERTEX_ARRAY_LIST_IBM GL_VERTEX_ARRAY_LIST_STRIDE_IBM
	       GL_VERTEX_ARRAY_OBJECT_AMD GL_VERTEX_ARRAY_OBJECT_EXT
	       GL_VERTEX_ARRAY_PARALLEL_POINTERS_INTEL GL_VERTEX_ARRAY_POINTER
	       GL_VERTEX_ARRAY_POINTER_EXT GL_VERTEX_ARRAY_RANGE_APPLE
	       GL_VERTEX_ARRAY_RANGE_LENGTH_APPLE
	       GL_VERTEX_ARRAY_RANGE_LENGTH_NV GL_VERTEX_ARRAY_RANGE_NV
	       GL_VERTEX_ARRAY_RANGE_POINTER_APPLE
	       GL_VERTEX_ARRAY_RANGE_POINTER_NV GL_VERTEX_ARRAY_RANGE_VALID_NV
	       GL_VERTEX_ARRAY_RANGE_WITHOUT_FLUSH_NV GL_VERTEX_ARRAY_SIZE
	       GL_VERTEX_ARRAY_SIZE_EXT GL_VERTEX_ARRAY_STORAGE_HINT_APPLE
	       GL_VERTEX_ARRAY_STRIDE GL_VERTEX_ARRAY_STRIDE_EXT
	       GL_VERTEX_ARRAY_TYPE GL_VERTEX_ARRAY_TYPE_EXT
	       GL_VERTEX_ATTRIB_ARRAY0_NV GL_VERTEX_ATTRIB_ARRAY10_NV
	       GL_VERTEX_ATTRIB_ARRAY11_NV GL_VERTEX_ATTRIB_ARRAY12_NV
	       GL_VERTEX_ATTRIB_ARRAY13_NV GL_VERTEX_ATTRIB_ARRAY14_NV
	       GL_VERTEX_ATTRIB_ARRAY15_NV GL_VERTEX_ATTRIB_ARRAY1_NV
	       GL_VERTEX_ATTRIB_ARRAY2_NV GL_VERTEX_ATTRIB_ARRAY3_NV
	       GL_VERTEX_ATTRIB_ARRAY4_NV GL_VERTEX_ATTRIB_ARRAY5_NV
	       GL_VERTEX_ATTRIB_ARRAY6_NV GL_VERTEX_ATTRIB_ARRAY7_NV
	       GL_VERTEX_ATTRIB_ARRAY8_NV GL_VERTEX_ATTRIB_ARRAY9_NV
	       GL_VERTEX_ATTRIB_ARRAY_ADDRESS_NV
	       GL_VERTEX_ATTRIB_ARRAY_BARRIER_BIT
	       GL_VERTEX_ATTRIB_ARRAY_BARRIER_BIT_EXT
	       GL_VERTEX_ATTRIB_ARRAY_BUFFER_BINDING
	       GL_VERTEX_ATTRIB_ARRAY_BUFFER_BINDING_ARB
	       GL_VERTEX_ATTRIB_ARRAY_DIVISOR
	       GL_VERTEX_ATTRIB_ARRAY_DIVISOR_ANGLE
	       GL_VERTEX_ATTRIB_ARRAY_DIVISOR_ARB
	       GL_VERTEX_ATTRIB_ARRAY_ENABLED
	       GL_VERTEX_ATTRIB_ARRAY_ENABLED_ARB
	       GL_VERTEX_ATTRIB_ARRAY_INTEGER
	       GL_VERTEX_ATTRIB_ARRAY_INTEGER_EXT
	       GL_VERTEX_ATTRIB_ARRAY_INTEGER_NV
	       GL_VERTEX_ATTRIB_ARRAY_LENGTH_NV GL_VERTEX_ATTRIB_ARRAY_LONG
	       GL_VERTEX_ATTRIB_ARRAY_NORMALIZED
	       GL_VERTEX_ATTRIB_ARRAY_NORMALIZED_ARB
	       GL_VERTEX_ATTRIB_ARRAY_POINTER
	       GL_VERTEX_ATTRIB_ARRAY_POINTER_ARB GL_VERTEX_ATTRIB_ARRAY_SIZE
	       GL_VERTEX_ATTRIB_ARRAY_SIZE_ARB GL_VERTEX_ATTRIB_ARRAY_STRIDE
	       GL_VERTEX_ATTRIB_ARRAY_STRIDE_ARB GL_VERTEX_ATTRIB_ARRAY_TYPE
	       GL_VERTEX_ATTRIB_ARRAY_TYPE_ARB
	       GL_VERTEX_ATTRIB_ARRAY_UNIFIED_NV GL_VERTEX_ATTRIB_BINDING
	       GL_VERTEX_ATTRIB_MAP1_APPLE GL_VERTEX_ATTRIB_MAP1_COEFF_APPLE
	       GL_VERTEX_ATTRIB_MAP1_DOMAIN_APPLE
	       GL_VERTEX_ATTRIB_MAP1_ORDER_APPLE
	       GL_VERTEX_ATTRIB_MAP1_SIZE_APPLE GL_VERTEX_ATTRIB_MAP2_APPLE
	       GL_VERTEX_ATTRIB_MAP2_COEFF_APPLE
	       GL_VERTEX_ATTRIB_MAP2_DOMAIN_APPLE
	       GL_VERTEX_ATTRIB_MAP2_ORDER_APPLE
	       GL_VERTEX_ATTRIB_MAP2_SIZE_APPLE
	       GL_VERTEX_ATTRIB_RELATIVE_OFFSET GL_VERTEX_BINDING_BUFFER
	       GL_VERTEX_BINDING_DIVISOR GL_VERTEX_BINDING_OFFSET
	       GL_VERTEX_BINDING_STRIDE GL_VERTEX_BLEND_ARB
	       GL_VERTEX_CONSISTENT_HINT_PGI GL_VERTEX_DATA_HINT_PGI
	       GL_VERTEX_ELEMENT_SWIZZLE_AMD GL_VERTEX_ID_NV
	       GL_VERTEX_ID_SWIZZLE_AMD GL_VERTEX_PRECLIP_HINT_SGIX
	       GL_VERTEX_PRECLIP_SGIX GL_VERTEX_PROGRAM_ARB
	       GL_VERTEX_PROGRAM_BINDING_NV GL_VERTEX_PROGRAM_NV
	       GL_VERTEX_PROGRAM_PARAMETER_BUFFER_NV
	       GL_VERTEX_PROGRAM_POINT_SIZE GL_VERTEX_PROGRAM_POINT_SIZE_ARB
	       GL_VERTEX_PROGRAM_POINT_SIZE_NV GL_VERTEX_PROGRAM_TWO_SIDE
	       GL_VERTEX_PROGRAM_TWO_SIDE_ARB GL_VERTEX_PROGRAM_TWO_SIDE_NV
	       GL_VERTEX_SHADER GL_VERTEX_SHADER_ARB
	       GL_VERTEX_SHADER_BINDING_EXT GL_VERTEX_SHADER_BIT
	       GL_VERTEX_SHADER_EXT GL_VERTEX_SHADER_INSTRUCTIONS_EXT
	       GL_VERTEX_SHADER_INVARIANTS_EXT GL_VERTEX_SHADER_INVOCATIONS_ARB
	       GL_VERTEX_SHADER_LOCALS_EXT GL_VERTEX_SHADER_LOCAL_CONSTANTS_EXT
	       GL_VERTEX_SHADER_OPTIMIZED_EXT GL_VERTEX_SHADER_VARIANTS_EXT
	       GL_VERTEX_SOURCE_ATI GL_VERTEX_STATE_PROGRAM_NV
	       GL_VERTEX_STREAM0_ATI GL_VERTEX_STREAM1_ATI
	       GL_VERTEX_STREAM2_ATI GL_VERTEX_STREAM3_ATI
	       GL_VERTEX_STREAM4_ATI GL_VERTEX_STREAM5_ATI
	       GL_VERTEX_STREAM6_ATI GL_VERTEX_STREAM7_ATI GL_VERTEX_SUBROUTINE
	       GL_VERTEX_SUBROUTINE_UNIFORM GL_VERTEX_TEXTURE
	       GL_VERTEX_WEIGHTING_EXT GL_VERTEX_WEIGHT_ARRAY_EXT
	       GL_VERTEX_WEIGHT_ARRAY_POINTER_EXT
	       GL_VERTEX_WEIGHT_ARRAY_SIZE_EXT
	       GL_VERTEX_WEIGHT_ARRAY_STRIDE_EXT
	       GL_VERTEX_WEIGHT_ARRAY_TYPE_EXT GL_VERTICAL_LINE_TO_NV
	       GL_VERTICES_SUBMITTED_ARB GL_VIBRANCE_BIAS_NV
	       GL_VIBRANCE_SCALE_NV GL_VIDEO_BUFFER_BINDING_NV
	       GL_VIDEO_BUFFER_INTERNAL_FORMAT_NV GL_VIDEO_BUFFER_NV
	       GL_VIDEO_BUFFER_PITCH_NV GL_VIDEO_CAPTURE_FIELD_LOWER_HEIGHT_NV
	       GL_VIDEO_CAPTURE_FIELD_UPPER_HEIGHT_NV
	       GL_VIDEO_CAPTURE_FRAME_HEIGHT_NV GL_VIDEO_CAPTURE_FRAME_WIDTH_NV
	       GL_VIDEO_CAPTURE_SURFACE_ORIGIN_NV
	       GL_VIDEO_CAPTURE_TO_422_SUPPORTED_NV
	       GL_VIDEO_COLOR_CONVERSION_MATRIX_NV
	       GL_VIDEO_COLOR_CONVERSION_MAX_NV
	       GL_VIDEO_COLOR_CONVERSION_MIN_NV
	       GL_VIDEO_COLOR_CONVERSION_OFFSET_NV GL_VIEWPORT GL_VIEWPORT_BIT
	       GL_VIEWPORT_BOUNDS_RANGE GL_VIEWPORT_COMMAND_NV
	       GL_VIEWPORT_INDEX_PROVOKING_VERTEX
	       GL_VIEWPORT_POSITION_W_SCALE_NV
	       GL_VIEWPORT_POSITION_W_SCALE_X_COEFF_NV
	       GL_VIEWPORT_POSITION_W_SCALE_Y_COEFF_NV
	       GL_VIEWPORT_SUBPIXEL_BITS GL_VIEWPORT_SWIZZLE_NEGATIVE_W_NV
	       GL_VIEWPORT_SWIZZLE_NEGATIVE_X_NV
	       GL_VIEWPORT_SWIZZLE_NEGATIVE_Y_NV
	       GL_VIEWPORT_SWIZZLE_NEGATIVE_Z_NV
	       GL_VIEWPORT_SWIZZLE_POSITIVE_W_NV
	       GL_VIEWPORT_SWIZZLE_POSITIVE_X_NV
	       GL_VIEWPORT_SWIZZLE_POSITIVE_Y_NV
	       GL_VIEWPORT_SWIZZLE_POSITIVE_Z_NV GL_VIEWPORT_SWIZZLE_W_NV
	       GL_VIEWPORT_SWIZZLE_X_NV GL_VIEWPORT_SWIZZLE_Y_NV
	       GL_VIEWPORT_SWIZZLE_Z_NV GL_VIEW_CLASS_128_BITS
	       GL_VIEW_CLASS_16_BITS GL_VIEW_CLASS_24_BITS
	       GL_VIEW_CLASS_32_BITS GL_VIEW_CLASS_48_BITS
	       GL_VIEW_CLASS_64_BITS GL_VIEW_CLASS_8_BITS GL_VIEW_CLASS_96_BITS
	       GL_VIEW_CLASS_BPTC_FLOAT GL_VIEW_CLASS_BPTC_UNORM
	       GL_VIEW_CLASS_RGTC1_RED GL_VIEW_CLASS_RGTC2_RG
	       GL_VIEW_CLASS_S3TC_DXT1_RGB GL_VIEW_CLASS_S3TC_DXT1_RGBA
	       GL_VIEW_CLASS_S3TC_DXT3_RGBA GL_VIEW_CLASS_S3TC_DXT5_RGBA
	       GL_VIEW_COMPATIBILITY_CLASS GL_VIRTUAL_PAGE_SIZE_INDEX_ARB
	       GL_VIRTUAL_PAGE_SIZE_X_AMD GL_VIRTUAL_PAGE_SIZE_X_ARB
	       GL_VIRTUAL_PAGE_SIZE_Y_AMD GL_VIRTUAL_PAGE_SIZE_Y_ARB
	       GL_VIRTUAL_PAGE_SIZE_Z_AMD GL_VIRTUAL_PAGE_SIZE_Z_ARB
	       GL_VIVIDLIGHT_NV GL_VOLATILE_APPLE GL_WAIT_FAILED
	       GL_WARPS_PER_SM_NV GL_WARP_SIZE_NV GL_WEIGHTED_AVERAGE_ARB
	       GL_WEIGHTED_AVERAGE_EXT GL_WEIGHT_ARRAY_ARB
	       GL_WEIGHT_ARRAY_BUFFER_BINDING
	       GL_WEIGHT_ARRAY_BUFFER_BINDING_ARB GL_WEIGHT_ARRAY_POINTER_ARB
	       GL_WEIGHT_ARRAY_SIZE_ARB GL_WEIGHT_ARRAY_STRIDE_ARB
	       GL_WEIGHT_ARRAY_TYPE_ARB GL_WEIGHT_SUM_UNITY_ARB
	       GL_WIDE_LINE_HINT_PGI GL_WINDOW_RECTANGLE_EXT
	       GL_WINDOW_RECTANGLE_MODE_EXT GL_WIN_phong_shading
	       GL_WIN_specular_fog GL_WIN_swap_hint GL_WRAP_BORDER
	       GL_WRAP_BORDER_SUN GL_WRITE_DISCARD_NV GL_WRITE_ONLY
	       GL_WRITE_ONLY_ARB GL_WRITE_PIXEL_DATA_RANGE_LENGTH_NV
	       GL_WRITE_PIXEL_DATA_RANGE_NV
	       GL_WRITE_PIXEL_DATA_RANGE_POINTER_NV GL_W_EXT GL_XOR GL_XOR_NV
	       GL_X_EXT GL_YCBAYCR8A_4224_NV GL_YCBCR_422_APPLE GL_YCBCR_MESA
	       GL_YCBYCR8_422_NV GL_Y_EXT
	       GL_Z4Y12Z4CB12Z4A12Z4Y12Z4CR12Z4A12_4224_NV
	       GL_Z4Y12Z4CB12Z4CR12_444_NV GL_Z4Y12Z4CB12Z4Y12Z4CR12_422_NV
	       GL_Z6Y10Z6CB10Z6A10Z6Y10Z6CR10Z6A10_4224_NV
	       GL_Z6Y10Z6CB10Z6Y10Z6CR10_422_NV GL_ZERO GL_ZERO_EXT
	       GL_ZERO_TO_ONE GL_ZOOM_X GL_ZOOM_Y GL_Z_EXT
	       MAX_VERTEX_TEXTURE_IMAGE_UNITS_ARB WINGDIAPI _W64
	       glActiveProgramEXT glActiveShaderProgram glActiveStencilFaceEXT
	       glActiveTexture glActiveTextureARB glActiveVaryingNV
	       glAddSwapHintRectWIN glAlphaFragmentOp1ATI glAlphaFragmentOp2ATI
	       glAlphaFragmentOp3ATI glAlphaFuncx glApplyTextureEXT
	       glAreProgramsResidentNV glAreTexturesResidentEXT
	       glArrayElementEXT glArrayObjectATI glAsyncMarkerSGIX
	       glAttachObjectARB glAttachShader glBeginConditionalRender
	       glBeginConditionalRenderNV glBeginConditionalRenderNVX
	       glBeginFragmentShaderATI glBeginOcclusionQueryNV
	       glBeginPerfMonitorAMD glBeginPerfQueryINTEL glBeginQuery
	       glBeginQueryANGLE glBeginQueryARB glBeginQueryIndexed
	       glBeginSceneEXT glBeginTransformFeedback
	       glBeginTransformFeedbackEXT glBeginTransformFeedbackNV
	       glBeginVertexShaderEXT glBeginVideoCaptureNV
	       glBindAttribLocation glBindAttribLocationARB glBindBuffer
	       glBindBufferARB glBindBufferBase glBindBufferBaseEXT
	       glBindBufferBaseNV glBindBufferOffsetEXT glBindBufferOffsetNV
	       glBindBufferRange glBindBufferRangeEXT glBindBufferRangeNV
	       glBindBuffersBase glBindBuffersRange glBindFragDataLocation
	       glBindFragDataLocationEXT glBindFragDataLocationIndexed
	       glBindFragmentShaderATI glBindFramebuffer glBindFramebufferEXT
	       glBindImageTexture glBindImageTextureEXT glBindImageTextures
	       glBindLightParameterEXT glBindMaterialParameterEXT
	       glBindMultiTextureEXT glBindParameterEXT glBindProgramARB
	       glBindProgramNV glBindProgramPipeline glBindRenderbuffer
	       glBindRenderbufferEXT glBindSampler glBindSamplers
	       glBindTexGenParameterEXT glBindTextureEXT glBindTextureUnit
	       glBindTextureUnitParameterEXT glBindTextures
	       glBindTransformFeedback glBindTransformFeedbackNV
	       glBindVertexArray glBindVertexArrayAPPLE glBindVertexBuffer
	       glBindVertexBuffers glBindVertexShaderEXT
	       glBindVideoCaptureStreamBufferNV
	       glBindVideoCaptureStreamTextureNV glBinormalPointerEXT
	       glBlendBarrierKHR glBlendBarrierNV glBlendColor glBlendColorEXT
	       glBlendEquation glBlendEquationEXT glBlendEquationIndexedAMD
	       glBlendEquationSeparate glBlendEquationSeparateEXT
	       glBlendEquationSeparateIndexedAMD glBlendEquationSeparatei
	       glBlendEquationSeparateiARB glBlendEquationi glBlendEquationiARB
	       glBlendFuncIndexedAMD glBlendFuncSeparate glBlendFuncSeparateEXT
	       glBlendFuncSeparateIndexedAMD glBlendFuncSeparatei
	       glBlendFuncSeparateiARB glBlendFunci glBlendFunciARB
	       glBlendParameteriNV glBlitFramebuffer glBlitFramebufferANGLE
	       glBlitFramebufferEXT glBlitNamedFramebuffer
	       glBufferAddressRangeNV glBufferData glBufferDataARB
	       glBufferPageCommitmentARB glBufferParameteriAPPLE
	       glBufferRegionEnabled glBufferStorage glBufferSubData
	       glBufferSubDataARB glCallCommandListNV glCheckFramebufferStatus
	       glCheckFramebufferStatusEXT glCheckNamedFramebufferStatus
	       glCheckNamedFramebufferStatusEXT glClampColor glClampColorARB
	       glClearBufferData glClearBufferSubData glClearBufferfi
	       glClearBufferfv glClearBufferiv glClearBufferuiv
	       glClearColorIiEXT glClearColorIuiEXT glClearColorx
	       glClearDepthdNV glClearDepthf glClearDepthfOES glClearDepthx
	       glClearNamedBufferData glClearNamedBufferDataEXT
	       glClearNamedBufferSubData glClearNamedBufferSubDataEXT
	       glClearNamedFramebufferfi glClearNamedFramebufferfv
	       glClearNamedFramebufferiv glClearNamedFramebufferuiv
	       glClearTexImage glClearTexSubImage glClientActiveTexture
	       glClientActiveTextureARB glClientActiveVertexStreamATI
	       glClientAttribDefaultEXT glClientWaitSync glClipControl
	       glClipPlanef glClipPlanefOES glClipPlanex glColor3fVertex3fSUN
	       glColor3fVertex3fvSUN glColor3hNV glColor3hvNV
	       glColor4fNormal3fVertex3fSUN glColor4fNormal3fVertex3fvSUN
	       glColor4hNV glColor4hvNV glColor4ubVertex2fSUN
	       glColor4ubVertex2fvSUN glColor4ubVertex3fSUN
	       glColor4ubVertex3fvSUN glColor4x glColorFormatNV
	       glColorFragmentOp1ATI glColorFragmentOp2ATI
	       glColorFragmentOp3ATI glColorMaskIndexedEXT glColorMaski
	       glColorP3ui glColorP3uiv glColorP4ui glColorP4uiv
	       glColorPointerEXT glColorPointerListIBM glColorPointervINTEL
	       glColorSubTable glColorSubTableEXT glColorTable glColorTableEXT
	       glColorTableParameterfv glColorTableParameterfvSGI
	       glColorTableParameteriv glColorTableParameterivSGI
	       glColorTableSGI glCombinerInputNV glCombinerOutputNV
	       glCombinerParameterfNV glCombinerParameterfvNV
	       glCombinerParameteriNV glCombinerParameterivNV
	       glCombinerStageParameterfvNV glCommandListSegmentsNV
	       glCompileCommandListNV glCompileShader glCompileShaderARB
	       glCompileShaderIncludeARB glCompressedMultiTexImage1DEXT
	       glCompressedMultiTexImage2DEXT glCompressedMultiTexImage3DEXT
	       glCompressedMultiTexSubImage1DEXT
	       glCompressedMultiTexSubImage2DEXT
	       glCompressedMultiTexSubImage3DEXT glCompressedTexImage1D
	       glCompressedTexImage1DARB glCompressedTexImage2D
	       glCompressedTexImage2DARB glCompressedTexImage3D
	       glCompressedTexImage3DARB glCompressedTexSubImage1D
	       glCompressedTexSubImage1DARB glCompressedTexSubImage2D
	       glCompressedTexSubImage2DARB glCompressedTexSubImage3D
	       glCompressedTexSubImage3DARB glCompressedTextureImage1DEXT
	       glCompressedTextureImage2DEXT glCompressedTextureImage3DEXT
	       glCompressedTextureSubImage1D glCompressedTextureSubImage1DEXT
	       glCompressedTextureSubImage2D glCompressedTextureSubImage2DEXT
	       glCompressedTextureSubImage3D glCompressedTextureSubImage3DEXT
	       glConservativeRasterParameterfNV
	       glConservativeRasterParameteriNV glConvolutionFilter1D
	       glConvolutionFilter1DEXT glConvolutionFilter2D
	       glConvolutionFilter2DEXT glConvolutionParameterf
	       glConvolutionParameterfEXT glConvolutionParameterfv
	       glConvolutionParameterfvEXT glConvolutionParameteri
	       glConvolutionParameteriEXT glConvolutionParameteriv
	       glConvolutionParameterivEXT glCopyBufferSubData
	       glCopyColorSubTable glCopyColorSubTableEXT glCopyColorTable
	       glCopyColorTableSGI glCopyConvolutionFilter1D
	       glCopyConvolutionFilter1DEXT glCopyConvolutionFilter2D
	       glCopyConvolutionFilter2DEXT glCopyImageSubData
	       glCopyImageSubDataNV glCopyMultiTexImage1DEXT
	       glCopyMultiTexImage2DEXT glCopyMultiTexSubImage1DEXT
	       glCopyMultiTexSubImage2DEXT glCopyMultiTexSubImage3DEXT
	       glCopyNamedBufferSubData glCopyPathNV glCopyTexImage1DEXT
	       glCopyTexImage2DEXT glCopyTexSubImage1DEXT
	       glCopyTexSubImage2DEXT glCopyTexSubImage3D
	       glCopyTexSubImage3DEXT glCopyTextureImage1DEXT
	       glCopyTextureImage2DEXT glCopyTextureSubImage1D
	       glCopyTextureSubImage1DEXT glCopyTextureSubImage2D
	       glCopyTextureSubImage2DEXT glCopyTextureSubImage3D
	       glCopyTextureSubImage3DEXT glCoverFillPathInstancedNV
	       glCoverFillPathNV glCoverStrokePathInstancedNV
	       glCoverStrokePathNV glCoverageModulationNV
	       glCoverageModulationTableNV glCreateBuffers
	       glCreateCommandListsNV glCreateFramebuffers
	       glCreatePerfQueryINTEL glCreateProgram glCreateProgramObjectARB
	       glCreateProgramPipelines glCreateQueries glCreateRenderbuffers
	       glCreateSamplers glCreateShader glCreateShaderObjectARB
	       glCreateShaderProgramEXT glCreateShaderProgramv glCreateStatesNV
	       glCreateSyncFromCLeventARB glCreateTextures
	       glCreateTransformFeedbacks glCreateVertexArrays
	       glCullParameterdvEXT glCullParameterfvEXT
	       glCurrentPaletteMatrixARB glDebugMessageCallback
	       glDebugMessageCallbackAMD glDebugMessageCallbackARB
	       glDebugMessageControl glDebugMessageControlARB
	       glDebugMessageEnableAMD glDebugMessageInsert
	       glDebugMessageInsertAMD glDebugMessageInsertARB
	       glDeleteAsyncMarkersSGIX glDeleteBufferRegion glDeleteBuffers
	       glDeleteBuffersARB glDeleteCommandListsNV glDeleteFencesAPPLE
	       glDeleteFencesNV glDeleteFragmentShaderATI glDeleteFramebuffers
	       glDeleteFramebuffersEXT glDeleteNamedStringARB glDeleteNamesAMD
	       glDeleteObjectARB glDeleteOcclusionQueriesNV glDeletePathsNV
	       glDeletePerfMonitorsAMD glDeletePerfQueryINTEL glDeleteProgram
	       glDeleteProgramPipelines glDeleteProgramsARB glDeleteProgramsNV
	       glDeleteQueries glDeleteQueriesANGLE glDeleteQueriesARB
	       glDeleteRenderbuffers glDeleteRenderbuffersEXT glDeleteSamplers
	       glDeleteShader glDeleteStatesNV glDeleteSync glDeleteTexturesEXT
	       glDeleteTransformFeedbacks glDeleteTransformFeedbacksNV
	       glDeleteVertexArrays glDeleteVertexArraysAPPLE
	       glDeleteVertexShaderEXT glDepthBoundsEXT glDepthBoundsdNV
	       glDepthRangeArrayv glDepthRangeIndexed glDepthRangedNV
	       glDepthRangef glDepthRangefOES glDepthRangex glDetachObjectARB
	       glDetachShader glDetailTexFuncSGIS
	       glDisableClientStateIndexedEXT glDisableClientStateiEXT
	       glDisableIndexedEXT glDisableVariantClientStateEXT
	       glDisableVertexArrayAttrib glDisableVertexArrayAttribEXT
	       glDisableVertexArrayEXT glDisableVertexAttribAPPLE
	       glDisableVertexAttribArray glDisableVertexAttribArrayARB
	       glDisablei glDispatchCompute glDispatchComputeGroupSizeARB
	       glDispatchComputeIndirect glDrawArraysEXT glDrawArraysIndirect
	       glDrawArraysInstanced glDrawArraysInstancedANGLE
	       glDrawArraysInstancedARB glDrawArraysInstancedBaseInstance
	       glDrawArraysInstancedEXT glDrawBufferRegion glDrawBuffers
	       glDrawBuffersARB glDrawBuffersATI glDrawCommandsAddressNV
	       glDrawCommandsNV glDrawCommandsStatesAddressNV
	       glDrawCommandsStatesNV glDrawElementArrayAPPLE
	       glDrawElementArrayATI glDrawElementsBaseVertex
	       glDrawElementsIndirect glDrawElementsInstanced
	       glDrawElementsInstancedANGLE glDrawElementsInstancedARB
	       glDrawElementsInstancedBaseInstance
	       glDrawElementsInstancedBaseVertex
	       glDrawElementsInstancedBaseVertexBaseInstance
	       glDrawElementsInstancedEXT glDrawRangeElementArrayAPPLE
	       glDrawRangeElementArrayATI glDrawRangeElements
	       glDrawRangeElementsBaseVertex glDrawRangeElementsEXT
	       glDrawTextureNV glDrawTransformFeedback
	       glDrawTransformFeedbackInstanced glDrawTransformFeedbackNV
	       glDrawTransformFeedbackStream
	       glDrawTransformFeedbackStreamInstanced glDrawVkImageNV
	       glEdgeFlagFormatNV glEdgeFlagPointerEXT glEdgeFlagPointerListIBM
	       glElementPointerAPPLE glElementPointerATI
	       glEnableClientStateIndexedEXT glEnableClientStateiEXT
	       glEnableIndexedEXT glEnableVariantClientStateEXT
	       glEnableVertexArrayAttrib glEnableVertexArrayAttribEXT
	       glEnableVertexArrayEXT glEnableVertexAttribAPPLE
	       glEnableVertexAttribArray glEnableVertexAttribArrayARB glEnablei
	       glEndConditionalRender glEndConditionalRenderNV
	       glEndConditionalRenderNVX glEndFragmentShaderATI
	       glEndOcclusionQueryNV glEndPerfMonitorAMD glEndPerfQueryINTEL
	       glEndQuery glEndQueryANGLE glEndQueryARB glEndQueryIndexed
	       glEndSceneEXT glEndTransformFeedback glEndTransformFeedbackEXT
	       glEndTransformFeedbackNV glEndVertexShaderEXT
	       glEndVideoCaptureNV glErrorStringREGAL glEvalMapsNV
	       glExecuteProgramNV glExtractComponentEXT glFenceSync
	       glFinalCombinerInputNV glFinishAsyncSGIX glFinishFenceAPPLE
	       glFinishFenceNV glFinishObjectAPPLE glFinishTextureSUNX
	       glFlushMappedBufferRange glFlushMappedBufferRangeAPPLE
	       glFlushMappedNamedBufferRange glFlushMappedNamedBufferRangeEXT
	       glFlushPixelDataRangeNV glFlushRasterSGIX
	       glFlushVertexArrayRangeAPPLE glFlushVertexArrayRangeNV
	       glFogCoordFormatNV glFogCoordPointer glFogCoordPointerEXT
	       glFogCoordPointerListIBM glFogCoordd glFogCoorddEXT glFogCoorddv
	       glFogCoorddvEXT glFogCoordf glFogCoordfEXT glFogCoordfv
	       glFogCoordfvEXT glFogCoordhNV glFogCoordhvNV glFogFuncSGIS
	       glFogx glFogxv glFragmentColorMaterialEXT
	       glFragmentColorMaterialSGIX glFragmentCoverageColorNV
	       glFragmentLightModelfEXT glFragmentLightModelfSGIX
	       glFragmentLightModelfvEXT glFragmentLightModelfvSGIX
	       glFragmentLightModeliEXT glFragmentLightModeliSGIX
	       glFragmentLightModelivEXT glFragmentLightModelivSGIX
	       glFragmentLightfEXT glFragmentLightfSGIX glFragmentLightfvEXT
	       glFragmentLightfvSGIX glFragmentLightiEXT glFragmentLightiSGIX
	       glFragmentLightivEXT glFragmentLightivSGIX
	       glFragmentMaterialfEXT glFragmentMaterialfSGIX
	       glFragmentMaterialfvEXT glFragmentMaterialfvSGIX
	       glFragmentMaterialiEXT glFragmentMaterialiSGIX
	       glFragmentMaterialivEXT glFragmentMaterialivSGIX
	       glFrameTerminatorGREMEDY glFrameZoomSGIX
	       glFramebufferDrawBufferEXT glFramebufferDrawBuffersEXT
	       glFramebufferParameteri glFramebufferReadBufferEXT
	       glFramebufferRenderbuffer glFramebufferRenderbufferEXT
	       glFramebufferSampleLocationsfvARB
	       glFramebufferSampleLocationsfvNV glFramebufferTexture
	       glFramebufferTexture1D glFramebufferTexture1DEXT
	       glFramebufferTexture2D glFramebufferTexture2DEXT
	       glFramebufferTexture3D glFramebufferTexture3DEXT
	       glFramebufferTextureARB glFramebufferTextureEXT
	       glFramebufferTextureFaceARB glFramebufferTextureFaceEXT
	       glFramebufferTextureLayer glFramebufferTextureLayerARB
	       glFramebufferTextureLayerEXT glFramebufferTextureMultiviewOVR
	       glFreeObjectBufferATI glFrustumf glFrustumfOES glFrustumx
	       glGenAsyncMarkersSGIX glGenBuffers glGenBuffersARB
	       glGenFencesAPPLE glGenFencesNV glGenFragmentShadersATI
	       glGenFramebuffers glGenFramebuffersEXT glGenNamesAMD
	       glGenOcclusionQueriesNV glGenPathsNV glGenPerfMonitorsAMD
	       glGenProgramPipelines glGenProgramsARB glGenProgramsNV
	       glGenQueries glGenQueriesANGLE glGenQueriesARB
	       glGenRenderbuffers glGenRenderbuffersEXT glGenSamplers
	       glGenSymbolsEXT glGenTexturesEXT glGenTransformFeedbacks
	       glGenTransformFeedbacksNV glGenVertexArrays
	       glGenVertexArraysAPPLE glGenVertexShadersEXT glGenerateMipmap
	       glGenerateMipmapEXT glGenerateMultiTexMipmapEXT
	       glGenerateTextureMipmap glGenerateTextureMipmapEXT
	       glGetActiveAtomicCounterBufferiv glGetActiveAttrib
	       glGetActiveAttribARB glGetActiveSubroutineName
	       glGetActiveSubroutineUniformName glGetActiveSubroutineUniformiv
	       glGetActiveUniform glGetActiveUniformARB
	       glGetActiveUniformBlockName glGetActiveUniformBlockiv
	       glGetActiveUniformName glGetActiveUniformsiv
	       glGetActiveVaryingNV glGetArrayObjectfvATI glGetArrayObjectivATI
	       glGetAttachedObjectsARB glGetAttachedShaders glGetAttribLocation
	       glGetAttribLocationARB glGetBooleanIndexedvEXT glGetBooleani_v
	       glGetBufferParameteri64v glGetBufferParameteriv
	       glGetBufferParameterivARB glGetBufferParameterui64vNV
	       glGetBufferPointerv glGetBufferPointervARB glGetBufferSubData
	       glGetBufferSubDataARB glGetClipPlanef glGetClipPlanefOES
	       glGetClipPlanex glGetColorTable glGetColorTableEXT
	       glGetColorTableParameterfv glGetColorTableParameterfvEXT
	       glGetColorTableParameterfvSGI glGetColorTableParameteriv
	       glGetColorTableParameterivEXT glGetColorTableParameterivSGI
	       glGetColorTableSGI glGetCombinerInputParameterfvNV
	       glGetCombinerInputParameterivNV glGetCombinerOutputParameterfvNV
	       glGetCombinerOutputParameterivNV glGetCombinerStageParameterfvNV
	       glGetCommandHeaderNV glGetCompressedMultiTexImageEXT
	       glGetCompressedTexImage glGetCompressedTexImageARB
	       glGetCompressedTextureImage glGetCompressedTextureImageEXT
	       glGetCompressedTextureSubImage glGetConvolutionFilter
	       glGetConvolutionFilterEXT glGetConvolutionParameterfv
	       glGetConvolutionParameterfvEXT glGetConvolutionParameteriv
	       glGetConvolutionParameterivEXT glGetCoverageModulationTableNV
	       glGetDebugMessageLog glGetDebugMessageLogAMD
	       glGetDebugMessageLogARB glGetDetailTexFuncSGIS
	       glGetDoubleIndexedvEXT glGetDoublei_v glGetDoublei_vEXT
	       glGetExtensionREGAL glGetFenceivNV
	       glGetFinalCombinerInputParameterfvNV
	       glGetFinalCombinerInputParameterivNV glGetFirstPerfQueryIdINTEL
	       glGetFixedv glGetFloatIndexedvEXT glGetFloati_v glGetFloati_vEXT
	       glGetFogFuncSGIS glGetFragDataIndex glGetFragDataLocation
	       glGetFragDataLocationEXT glGetFragmentLightfvEXT
	       glGetFragmentLightfvSGIX glGetFragmentLightivEXT
	       glGetFragmentLightivSGIX glGetFragmentMaterialfvEXT
	       glGetFragmentMaterialfvSGIX glGetFragmentMaterialivEXT
	       glGetFragmentMaterialivSGIX
	       glGetFramebufferAttachmentParameteriv
	       glGetFramebufferAttachmentParameterivEXT
	       glGetFramebufferParameteriv glGetFramebufferParameterivEXT
	       glGetGraphicsResetStatus glGetGraphicsResetStatusARB
	       glGetHandleARB glGetHistogram glGetHistogramEXT
	       glGetHistogramParameterfv glGetHistogramParameterfvEXT
	       glGetHistogramParameteriv glGetHistogramParameterivEXT
	       glGetImageHandleARB glGetImageHandleNV
	       glGetImageTransformParameterfvHP
	       glGetImageTransformParameterivHP glGetInfoLogARB
	       glGetInteger64i_v glGetInteger64v glGetIntegerIndexedvEXT
	       glGetIntegeri_v glGetIntegerui64i_vNV glGetIntegerui64vNV
	       glGetInternalformatSampleivNV glGetInternalformati64v
	       glGetInternalformativ glGetInvariantBooleanvEXT
	       glGetInvariantFloatvEXT glGetInvariantIntegervEXT glGetLightxv
	       glGetLocalConstantBooleanvEXT glGetLocalConstantFloatvEXT
	       glGetLocalConstantIntegervEXT glGetMapAttribParameterfvNV
	       glGetMapAttribParameterivNV glGetMapControlPointsNV
	       glGetMapParameterfvNV glGetMapParameterivNV glGetMaterialxv
	       glGetMinmax glGetMinmaxEXT glGetMinmaxParameterfv
	       glGetMinmaxParameterfvEXT glGetMinmaxParameteriv
	       glGetMinmaxParameterivEXT glGetMultiTexEnvfvEXT
	       glGetMultiTexEnvivEXT glGetMultiTexGendvEXT
	       glGetMultiTexGenfvEXT glGetMultiTexGenivEXT
	       glGetMultiTexImageEXT glGetMultiTexLevelParameterfvEXT
	       glGetMultiTexLevelParameterivEXT glGetMultiTexParameterIivEXT
	       glGetMultiTexParameterIuivEXT glGetMultiTexParameterfvEXT
	       glGetMultiTexParameterivEXT glGetMultisamplefv
	       glGetMultisamplefvNV glGetNamedBufferParameteri64v
	       glGetNamedBufferParameteriv glGetNamedBufferParameterivEXT
	       glGetNamedBufferParameterui64vNV glGetNamedBufferPointerv
	       glGetNamedBufferPointervEXT glGetNamedBufferSubData
	       glGetNamedBufferSubDataEXT
	       glGetNamedFramebufferAttachmentParameteriv
	       glGetNamedFramebufferAttachmentParameterivEXT
	       glGetNamedFramebufferParameteriv
	       glGetNamedFramebufferParameterivEXT
	       glGetNamedProgramLocalParameterIivEXT
	       glGetNamedProgramLocalParameterIuivEXT
	       glGetNamedProgramLocalParameterdvEXT
	       glGetNamedProgramLocalParameterfvEXT glGetNamedProgramStringEXT
	       glGetNamedProgramivEXT glGetNamedRenderbufferParameteriv
	       glGetNamedRenderbufferParameterivEXT glGetNamedStringARB
	       glGetNamedStringivARB glGetNextPerfQueryIdINTEL
	       glGetObjectBufferfvATI glGetObjectBufferivATI glGetObjectLabel
	       glGetObjectLabelEXT glGetObjectParameterfvARB
	       glGetObjectParameterivAPPLE glGetObjectParameterivARB
	       glGetObjectPtrLabel glGetOcclusionQueryivNV
	       glGetOcclusionQueryuivNV glGetPathColorGenfvNV
	       glGetPathColorGenivNV glGetPathCommandsNV glGetPathCoordsNV
	       glGetPathDashArrayNV glGetPathLengthNV glGetPathMetricRangeNV
	       glGetPathMetricsNV glGetPathParameterfvNV glGetPathParameterivNV
	       glGetPathSpacingNV glGetPathTexGenfvNV glGetPathTexGenivNV
	       glGetPerfCounterInfoINTEL glGetPerfMonitorCounterDataAMD
	       glGetPerfMonitorCounterInfoAMD glGetPerfMonitorCounterStringAMD
	       glGetPerfMonitorCountersAMD glGetPerfMonitorGroupStringAMD
	       glGetPerfMonitorGroupsAMD glGetPerfQueryDataINTEL
	       glGetPerfQueryIdByNameINTEL glGetPerfQueryInfoINTEL
	       glGetPixelTransformParameterfvEXT
	       glGetPixelTransformParameterivEXT glGetPointerIndexedvEXT
	       glGetPointeri_vEXT glGetProcAddressREGAL glGetProgramBinary
	       glGetProgramEnvParameterdvARB glGetProgramEnvParameterfvARB
	       glGetProgramInfoLog glGetProgramInterfaceiv
	       glGetProgramLocalParameterdvARB glGetProgramLocalParameterfvARB
	       glGetProgramNamedParameterdvNV glGetProgramNamedParameterfvNV
	       glGetProgramParameterdvNV glGetProgramParameterfvNV
	       glGetProgramPipelineInfoLog glGetProgramPipelineiv
	       glGetProgramResourceIndex glGetProgramResourceLocation
	       glGetProgramResourceLocationIndex glGetProgramResourceName
	       glGetProgramResourcefvNV glGetProgramResourceiv
	       glGetProgramStageiv glGetProgramStringARB glGetProgramStringNV
	       glGetProgramiv glGetProgramivARB glGetProgramivNV
	       glGetQueryBufferObjecti64v glGetQueryBufferObjectiv
	       glGetQueryBufferObjectui64v glGetQueryBufferObjectuiv
	       glGetQueryIndexediv glGetQueryObjecti64v
	       glGetQueryObjecti64vANGLE glGetQueryObjecti64vEXT
	       glGetQueryObjectiv glGetQueryObjectivANGLE glGetQueryObjectivARB
	       glGetQueryObjectui64v glGetQueryObjectui64vANGLE
	       glGetQueryObjectui64vEXT glGetQueryObjectuiv
	       glGetQueryObjectuivANGLE glGetQueryObjectuivARB glGetQueryiv
	       glGetQueryivANGLE glGetQueryivARB glGetRenderbufferParameteriv
	       glGetRenderbufferParameterivEXT glGetSamplerParameterIiv
	       glGetSamplerParameterIuiv glGetSamplerParameterfv
	       glGetSamplerParameteriv glGetSeparableFilter
	       glGetSeparableFilterEXT glGetShaderInfoLog
	       glGetShaderPrecisionFormat glGetShaderSource
	       glGetShaderSourceARB glGetShaderiv glGetSharpenTexFuncSGIS
	       glGetStageIndexNV glGetStringi glGetSubroutineIndex
	       glGetSubroutineUniformLocation glGetSynciv
	       glGetTexBumpParameterfvATI glGetTexBumpParameterivATI
	       glGetTexEnvxv glGetTexFilterFuncSGIS glGetTexParameterIiv
	       glGetTexParameterIivEXT glGetTexParameterIuiv
	       glGetTexParameterIuivEXT glGetTexParameterPointervAPPLE
	       glGetTexParameterxv glGetTextureHandleARB glGetTextureHandleNV
	       glGetTextureImage glGetTextureImageEXT
	       glGetTextureLevelParameterfv glGetTextureLevelParameterfvEXT
	       glGetTextureLevelParameteriv glGetTextureLevelParameterivEXT
	       glGetTextureParameterIiv glGetTextureParameterIivEXT
	       glGetTextureParameterIuiv glGetTextureParameterIuivEXT
	       glGetTextureParameterfv glGetTextureParameterfvEXT
	       glGetTextureParameteriv glGetTextureParameterivEXT
	       glGetTextureSamplerHandleARB glGetTextureSamplerHandleNV
	       glGetTextureSubImage glGetTrackMatrixivNV
	       glGetTransformFeedbackVarying glGetTransformFeedbackVaryingEXT
	       glGetTransformFeedbackVaryingNV glGetTransformFeedbacki64_v
	       glGetTransformFeedbacki_v glGetTransformFeedbackiv
	       glGetTranslatedShaderSourceANGLE glGetUniformBlockIndex
	       glGetUniformBufferSizeEXT glGetUniformIndices
	       glGetUniformLocation glGetUniformLocationARB
	       glGetUniformOffsetEXT glGetUniformSubroutineuiv glGetUniformdv
	       glGetUniformfv glGetUniformfvARB glGetUniformi64vARB
	       glGetUniformi64vNV glGetUniformiv glGetUniformivARB
	       glGetUniformui64vARB glGetUniformui64vNV glGetUniformuiv
	       glGetUniformuivEXT glGetVariantArrayObjectfvATI
	       glGetVariantArrayObjectivATI glGetVariantBooleanvEXT
	       glGetVariantFloatvEXT glGetVariantIntegervEXT
	       glGetVariantPointervEXT glGetVaryingLocationNV
	       glGetVertexArrayIndexed64iv glGetVertexArrayIndexediv
	       glGetVertexArrayIntegeri_vEXT glGetVertexArrayIntegervEXT
	       glGetVertexArrayPointeri_vEXT glGetVertexArrayPointervEXT
	       glGetVertexArrayiv glGetVertexAttribArrayObjectfvATI
	       glGetVertexAttribArrayObjectivATI glGetVertexAttribIiv
	       glGetVertexAttribIivEXT glGetVertexAttribIuiv
	       glGetVertexAttribIuivEXT glGetVertexAttribLdv
	       glGetVertexAttribLdvEXT glGetVertexAttribLi64vNV
	       glGetVertexAttribLui64vARB glGetVertexAttribLui64vNV
	       glGetVertexAttribPointerv glGetVertexAttribPointervARB
	       glGetVertexAttribPointervNV glGetVertexAttribdv
	       glGetVertexAttribdvARB glGetVertexAttribdvNV glGetVertexAttribfv
	       glGetVertexAttribfvARB glGetVertexAttribfvNV glGetVertexAttribiv
	       glGetVertexAttribivARB glGetVertexAttribivNV
	       glGetVideoCaptureStreamdvNV glGetVideoCaptureStreamfvNV
	       glGetVideoCaptureStreamivNV glGetVideoCaptureivNV
	       glGetVideoi64vNV glGetVideoivNV glGetVideoui64vNV
	       glGetVideouivNV glGetVkProcAddrNV glGetnColorTableARB
	       glGetnCompressedTexImage glGetnCompressedTexImageARB
	       glGetnConvolutionFilterARB glGetnHistogramARB glGetnMapdvARB
	       glGetnMapfvARB glGetnMapivARB glGetnMinmaxARB
	       glGetnPixelMapfvARB glGetnPixelMapuivARB glGetnPixelMapusvARB
	       glGetnPolygonStippleARB glGetnSeparableFilterARB glGetnTexImage
	       glGetnTexImageARB glGetnUniformdv glGetnUniformdvARB
	       glGetnUniformfv glGetnUniformfvARB glGetnUniformi64vARB
	       glGetnUniformiv glGetnUniformivARB glGetnUniformui64vARB
	       glGetnUniformuiv glGetnUniformuivARB glGlobalAlphaFactorbSUN
	       glGlobalAlphaFactordSUN glGlobalAlphaFactorfSUN
	       glGlobalAlphaFactoriSUN glGlobalAlphaFactorsSUN
	       glGlobalAlphaFactorubSUN glGlobalAlphaFactoruiSUN
	       glGlobalAlphaFactorusSUN glHistogram glHistogramEXT
	       glImageTransformParameterfHP glImageTransformParameterfvHP
	       glImageTransformParameteriHP glImageTransformParameterivHP
	       glImportSyncEXT glIndexFormatNV glIndexFuncEXT
	       glIndexMaterialEXT glIndexPointerEXT glIndexPointerListIBM
	       glInsertComponentEXT glInsertEventMarkerEXT glInterpolatePathsNV
	       glInvalidateBufferData glInvalidateBufferSubData
	       glInvalidateFramebuffer glInvalidateNamedFramebufferData
	       glInvalidateNamedFramebufferSubData glInvalidateSubFramebuffer
	       glInvalidateTexImage glInvalidateTexSubImage glIsAsyncMarkerSGIX
	       glIsBuffer glIsBufferARB glIsBufferResidentNV glIsCommandListNV
	       glIsEnabledIndexedEXT glIsEnabledi glIsFenceAPPLE glIsFenceNV
	       glIsFramebuffer glIsFramebufferEXT glIsImageHandleResidentARB
	       glIsImageHandleResidentNV glIsNameAMD glIsNamedBufferResidentNV
	       glIsNamedStringARB glIsObjectBufferATI glIsOcclusionQueryNV
	       glIsPathNV glIsPointInFillPathNV glIsPointInStrokePathNV
	       glIsProgram glIsProgramARB glIsProgramNV glIsProgramPipeline
	       glIsQuery glIsQueryANGLE glIsQueryARB glIsRenderbuffer
	       glIsRenderbufferEXT glIsSampler glIsShader glIsStateNV
	       glIsSupportedREGAL glIsSync glIsTextureEXT
	       glIsTextureHandleResidentARB glIsTextureHandleResidentNV
	       glIsTransformFeedback glIsTransformFeedbackNV
	       glIsVariantEnabledEXT glIsVertexArray glIsVertexArrayAPPLE
	       glIsVertexAttribEnabledAPPLE glLGPUCopyImageSubDataNVX
	       glLGPUInterlockNVX glLGPUNamedBufferSubDataNVX glLabelObjectEXT
	       glLightEnviEXT glLightModelx glLightModelxv glLightx glLightxv
	       glLineWidthx glLinkProgram glLinkProgramARB
	       glListDrawCommandsStatesClientNV glLoadMatrixx glLoadProgramNV
	       glLoadTransposeMatrixd glLoadTransposeMatrixdARB
	       glLoadTransposeMatrixf glLoadTransposeMatrixfARB glLockArraysEXT
	       glLogMessageCallbackREGAL glMakeBufferNonResidentNV
	       glMakeBufferResidentNV glMakeImageHandleNonResidentARB
	       glMakeImageHandleNonResidentNV glMakeImageHandleResidentARB
	       glMakeImageHandleResidentNV glMakeNamedBufferNonResidentNV
	       glMakeNamedBufferResidentNV glMakeTextureHandleNonResidentARB
	       glMakeTextureHandleNonResidentNV glMakeTextureHandleResidentARB
	       glMakeTextureHandleResidentNV glMapBuffer glMapBufferARB
	       glMapBufferRange glMapControlPointsNV glMapNamedBuffer
	       glMapNamedBufferEXT glMapNamedBufferRange
	       glMapNamedBufferRangeEXT glMapObjectBufferATI glMapParameterfvNV
	       glMapParameterivNV glMapTexture2DINTEL glMapVertexAttrib1dAPPLE
	       glMapVertexAttrib1fAPPLE glMapVertexAttrib2dAPPLE
	       glMapVertexAttrib2fAPPLE glMaterialx glMaterialxv
	       glMatrixFrustumEXT glMatrixIndexPointerARB glMatrixIndexubvARB
	       glMatrixIndexuivARB glMatrixIndexusvARB glMatrixLoad3x2fNV
	       glMatrixLoad3x3fNV glMatrixLoadIdentityEXT
	       glMatrixLoadTranspose3x3fNV glMatrixLoadTransposedEXT
	       glMatrixLoadTransposefEXT glMatrixLoaddEXT glMatrixLoadfEXT
	       glMatrixMult3x2fNV glMatrixMult3x3fNV
	       glMatrixMultTranspose3x3fNV glMatrixMultTransposedEXT
	       glMatrixMultTransposefEXT glMatrixMultdEXT glMatrixMultfEXT
	       glMatrixOrthoEXT glMatrixPopEXT glMatrixPushEXT
	       glMatrixRotatedEXT glMatrixRotatefEXT glMatrixScaledEXT
	       glMatrixScalefEXT glMatrixTranslatedEXT glMatrixTranslatefEXT
	       glMaxShaderCompilerThreadsARB glMemoryBarrier
	       glMemoryBarrierByRegion glMemoryBarrierEXT glMinSampleShading
	       glMinSampleShadingARB glMinmax glMinmaxEXT glMultMatrixx
	       glMultTransposeMatrixd glMultTransposeMatrixdARB
	       glMultTransposeMatrixf glMultTransposeMatrixfARB
	       glMultiDrawArrays glMultiDrawArraysEXT glMultiDrawArraysIndirect
	       glMultiDrawArraysIndirectAMD
	       glMultiDrawArraysIndirectBindlessCountNV
	       glMultiDrawArraysIndirectBindlessNV
	       glMultiDrawArraysIndirectCountARB glMultiDrawElementArrayAPPLE
	       glMultiDrawElements glMultiDrawElementsBaseVertex
	       glMultiDrawElementsEXT glMultiDrawElementsIndirect
	       glMultiDrawElementsIndirectAMD
	       glMultiDrawElementsIndirectBindlessCountNV
	       glMultiDrawElementsIndirectBindlessNV
	       glMultiDrawElementsIndirectCountARB
	       glMultiDrawRangeElementArrayAPPLE glMultiModeDrawArraysIBM
	       glMultiModeDrawElementsIBM glMultiTexBufferEXT glMultiTexCoord1d
	       glMultiTexCoord1dARB glMultiTexCoord1dv glMultiTexCoord1dvARB
	       glMultiTexCoord1f glMultiTexCoord1fARB glMultiTexCoord1fv
	       glMultiTexCoord1fvARB glMultiTexCoord1hNV glMultiTexCoord1hvNV
	       glMultiTexCoord1i glMultiTexCoord1iARB glMultiTexCoord1iv
	       glMultiTexCoord1ivARB glMultiTexCoord1s glMultiTexCoord1sARB
	       glMultiTexCoord1sv glMultiTexCoord1svARB glMultiTexCoord2d
	       glMultiTexCoord2dARB glMultiTexCoord2dv glMultiTexCoord2dvARB
	       glMultiTexCoord2f glMultiTexCoord2fARB glMultiTexCoord2fv
	       glMultiTexCoord2fvARB glMultiTexCoord2hNV glMultiTexCoord2hvNV
	       glMultiTexCoord2i glMultiTexCoord2iARB glMultiTexCoord2iv
	       glMultiTexCoord2ivARB glMultiTexCoord2s glMultiTexCoord2sARB
	       glMultiTexCoord2sv glMultiTexCoord2svARB glMultiTexCoord3d
	       glMultiTexCoord3dARB glMultiTexCoord3dv glMultiTexCoord3dvARB
	       glMultiTexCoord3f glMultiTexCoord3fARB glMultiTexCoord3fv
	       glMultiTexCoord3fvARB glMultiTexCoord3hNV glMultiTexCoord3hvNV
	       glMultiTexCoord3i glMultiTexCoord3iARB glMultiTexCoord3iv
	       glMultiTexCoord3ivARB glMultiTexCoord3s glMultiTexCoord3sARB
	       glMultiTexCoord3sv glMultiTexCoord3svARB glMultiTexCoord4d
	       glMultiTexCoord4dARB glMultiTexCoord4dv glMultiTexCoord4dvARB
	       glMultiTexCoord4f glMultiTexCoord4fARB glMultiTexCoord4fv
	       glMultiTexCoord4fvARB glMultiTexCoord4hNV glMultiTexCoord4hvNV
	       glMultiTexCoord4i glMultiTexCoord4iARB glMultiTexCoord4iv
	       glMultiTexCoord4ivARB glMultiTexCoord4s glMultiTexCoord4sARB
	       glMultiTexCoord4sv glMultiTexCoord4svARB glMultiTexCoord4x
	       glMultiTexCoordP1ui glMultiTexCoordP1uiv glMultiTexCoordP2ui
	       glMultiTexCoordP2uiv glMultiTexCoordP3ui glMultiTexCoordP3uiv
	       glMultiTexCoordP4ui glMultiTexCoordP4uiv
	       glMultiTexCoordPointerEXT glMultiTexEnvfEXT glMultiTexEnvfvEXT
	       glMultiTexEnviEXT glMultiTexEnvivEXT glMultiTexGendEXT
	       glMultiTexGendvEXT glMultiTexGenfEXT glMultiTexGenfvEXT
	       glMultiTexGeniEXT glMultiTexGenivEXT glMultiTexImage1DEXT
	       glMultiTexImage2DEXT glMultiTexImage3DEXT
	       glMultiTexParameterIivEXT glMultiTexParameterIuivEXT
	       glMultiTexParameterfEXT glMultiTexParameterfvEXT
	       glMultiTexParameteriEXT glMultiTexParameterivEXT
	       glMultiTexRenderbufferEXT glMultiTexSubImage1DEXT
	       glMultiTexSubImage2DEXT glMultiTexSubImage3DEXT
	       glMulticastBarrierNV glMulticastBlitFramebufferNV
	       glMulticastBufferSubDataNV glMulticastCopyBufferSubDataNV
	       glMulticastCopyImageSubDataNV
	       glMulticastFramebufferSampleLocationsfvNV
	       glMulticastGetQueryObjecti64vNV glMulticastGetQueryObjectivNV
	       glMulticastGetQueryObjectui64vNV glMulticastGetQueryObjectuivNV
	       glMulticastWaitSyncNV glNamedBufferData glNamedBufferDataEXT
	       glNamedBufferStorage glNamedBufferStorageEXT
	       glNamedBufferSubData glNamedBufferSubDataEXT
	       glNamedCopyBufferSubDataEXT glNamedFramebufferDrawBuffer
	       glNamedFramebufferDrawBuffers glNamedFramebufferParameteri
	       glNamedFramebufferParameteriEXT glNamedFramebufferReadBuffer
	       glNamedFramebufferRenderbuffer glNamedFramebufferRenderbufferEXT
	       glNamedFramebufferSampleLocationsfvARB
	       glNamedFramebufferSampleLocationsfvNV glNamedFramebufferTexture
	       glNamedFramebufferTexture1DEXT glNamedFramebufferTexture2DEXT
	       glNamedFramebufferTexture3DEXT glNamedFramebufferTextureEXT
	       glNamedFramebufferTextureFaceEXT glNamedFramebufferTextureLayer
	       glNamedFramebufferTextureLayerEXT
	       glNamedProgramLocalParameter4dEXT
	       glNamedProgramLocalParameter4dvEXT
	       glNamedProgramLocalParameter4fEXT
	       glNamedProgramLocalParameter4fvEXT
	       glNamedProgramLocalParameterI4iEXT
	       glNamedProgramLocalParameterI4ivEXT
	       glNamedProgramLocalParameterI4uiEXT
	       glNamedProgramLocalParameterI4uivEXT
	       glNamedProgramLocalParameters4fvEXT
	       glNamedProgramLocalParametersI4ivEXT
	       glNamedProgramLocalParametersI4uivEXT glNamedProgramStringEXT
	       glNamedRenderbufferStorage glNamedRenderbufferStorageEXT
	       glNamedRenderbufferStorageMultisample
	       glNamedRenderbufferStorageMultisampleCoverageEXT
	       glNamedRenderbufferStorageMultisampleEXT glNamedStringARB
	       glNewBufferRegion glNewObjectBufferATI glNormal3fVertex3fSUN
	       glNormal3fVertex3fvSUN glNormal3hNV glNormal3hvNV glNormal3x
	       glNormalFormatNV glNormalP3ui glNormalP3uiv glNormalPointerEXT
	       glNormalPointerListIBM glNormalPointervINTEL glNormalStream3bATI
	       glNormalStream3bvATI glNormalStream3dATI glNormalStream3dvATI
	       glNormalStream3fATI glNormalStream3fvATI glNormalStream3iATI
	       glNormalStream3ivATI glNormalStream3sATI glNormalStream3svATI
	       glObjectLabel glObjectPtrLabel glObjectPurgeableAPPLE
	       glObjectUnpurgeableAPPLE glOrthof glOrthofOES glOrthox
	       glPNTrianglesfATI glPNTrianglesiATI glPassTexCoordATI
	       glPatchParameterfv glPatchParameteri glPathColorGenNV
	       glPathCommandsNV glPathCoordsNV glPathCoverDepthFuncNV
	       glPathDashArrayNV glPathFogGenNV glPathGlyphIndexArrayNV
	       glPathGlyphIndexRangeNV glPathGlyphRangeNV glPathGlyphsNV
	       glPathMemoryGlyphIndexArrayNV glPathParameterfNV
	       glPathParameterfvNV glPathParameteriNV glPathParameterivNV
	       glPathStencilDepthOffsetNV glPathStencilFuncNV glPathStringNV
	       glPathSubCommandsNV glPathSubCoordsNV glPathTexGenNV
	       glPauseTransformFeedback glPauseTransformFeedbackNV
	       glPixelDataRangeNV glPixelTexGenSGIX
	       glPixelTransformParameterfEXT glPixelTransformParameterfvEXT
	       glPixelTransformParameteriEXT glPixelTransformParameterivEXT
	       glPointAlongPathNV glPointParameterf glPointParameterfARB
	       glPointParameterfEXT glPointParameterfv glPointParameterfvARB
	       glPointParameterfvEXT glPointParameteri glPointParameteriNV
	       glPointParameteriv glPointParameterivNV glPointParameterx
	       glPointParameterxv glPointSizePointerOES glPointSizex
	       glPollAsyncSGIX glPolygonOffsetClampEXT glPolygonOffsetEXT
	       glPolygonOffsetx glPopDebugGroup glPopGroupMarkerEXT
	       glPresentFrameDualFillNV glPresentFrameKeyedNV
	       glPrimitiveBoundingBoxARB glPrimitiveRestartIndex
	       glPrimitiveRestartIndexNV glPrimitiveRestartNV
	       glPrioritizeTexturesEXT glProgramBinary
	       glProgramBufferParametersIivNV glProgramBufferParametersIuivNV
	       glProgramBufferParametersfvNV glProgramEnvParameter4dARB
	       glProgramEnvParameter4dvARB glProgramEnvParameter4fARB
	       glProgramEnvParameter4fvARB glProgramEnvParameterI4iNV
	       glProgramEnvParameterI4ivNV glProgramEnvParameterI4uiNV
	       glProgramEnvParameterI4uivNV glProgramEnvParameters4fvEXT
	       glProgramEnvParametersI4ivNV glProgramEnvParametersI4uivNV
	       glProgramLocalParameter4dARB glProgramLocalParameter4dvARB
	       glProgramLocalParameter4fARB glProgramLocalParameter4fvARB
	       glProgramLocalParameterI4iNV glProgramLocalParameterI4ivNV
	       glProgramLocalParameterI4uiNV glProgramLocalParameterI4uivNV
	       glProgramLocalParameters4fvEXT glProgramLocalParametersI4ivNV
	       glProgramLocalParametersI4uivNV glProgramNamedParameter4dNV
	       glProgramNamedParameter4dvNV glProgramNamedParameter4fNV
	       glProgramNamedParameter4fvNV glProgramParameter4dNV
	       glProgramParameter4dvNV glProgramParameter4fNV
	       glProgramParameter4fvNV glProgramParameteri
	       glProgramParameteriARB glProgramParameteriEXT
	       glProgramParameters4dvNV glProgramParameters4fvNV
	       glProgramPathFragmentInputGenNV glProgramStringARB
	       glProgramUniform1d glProgramUniform1dv glProgramUniform1f
	       glProgramUniform1fEXT glProgramUniform1fv glProgramUniform1fvEXT
	       glProgramUniform1i glProgramUniform1i64ARB
	       glProgramUniform1i64NV glProgramUniform1i64vARB
	       glProgramUniform1i64vNV glProgramUniform1iEXT
	       glProgramUniform1iv glProgramUniform1ivEXT glProgramUniform1ui
	       glProgramUniform1ui64ARB glProgramUniform1ui64NV
	       glProgramUniform1ui64vARB glProgramUniform1ui64vNV
	       glProgramUniform1uiEXT glProgramUniform1uiv
	       glProgramUniform1uivEXT glProgramUniform2d glProgramUniform2dv
	       glProgramUniform2f glProgramUniform2fEXT glProgramUniform2fv
	       glProgramUniform2fvEXT glProgramUniform2i
	       glProgramUniform2i64ARB glProgramUniform2i64NV
	       glProgramUniform2i64vARB glProgramUniform2i64vNV
	       glProgramUniform2iEXT glProgramUniform2iv glProgramUniform2ivEXT
	       glProgramUniform2ui glProgramUniform2ui64ARB
	       glProgramUniform2ui64NV glProgramUniform2ui64vARB
	       glProgramUniform2ui64vNV glProgramUniform2uiEXT
	       glProgramUniform2uiv glProgramUniform2uivEXT glProgramUniform3d
	       glProgramUniform3dv glProgramUniform3f glProgramUniform3fEXT
	       glProgramUniform3fv glProgramUniform3fvEXT glProgramUniform3i
	       glProgramUniform3i64ARB glProgramUniform3i64NV
	       glProgramUniform3i64vARB glProgramUniform3i64vNV
	       glProgramUniform3iEXT glProgramUniform3iv glProgramUniform3ivEXT
	       glProgramUniform3ui glProgramUniform3ui64ARB
	       glProgramUniform3ui64NV glProgramUniform3ui64vARB
	       glProgramUniform3ui64vNV glProgramUniform3uiEXT
	       glProgramUniform3uiv glProgramUniform3uivEXT glProgramUniform4d
	       glProgramUniform4dv glProgramUniform4f glProgramUniform4fEXT
	       glProgramUniform4fv glProgramUniform4fvEXT glProgramUniform4i
	       glProgramUniform4i64ARB glProgramUniform4i64NV
	       glProgramUniform4i64vARB glProgramUniform4i64vNV
	       glProgramUniform4iEXT glProgramUniform4iv glProgramUniform4ivEXT
	       glProgramUniform4ui glProgramUniform4ui64ARB
	       glProgramUniform4ui64NV glProgramUniform4ui64vARB
	       glProgramUniform4ui64vNV glProgramUniform4uiEXT
	       glProgramUniform4uiv glProgramUniform4uivEXT
	       glProgramUniformHandleui64ARB glProgramUniformHandleui64NV
	       glProgramUniformHandleui64vARB glProgramUniformHandleui64vNV
	       glProgramUniformMatrix2dv glProgramUniformMatrix2fv
	       glProgramUniformMatrix2fvEXT glProgramUniformMatrix2x3dv
	       glProgramUniformMatrix2x3fv glProgramUniformMatrix2x3fvEXT
	       glProgramUniformMatrix2x4dv glProgramUniformMatrix2x4fv
	       glProgramUniformMatrix2x4fvEXT glProgramUniformMatrix3dv
	       glProgramUniformMatrix3fv glProgramUniformMatrix3fvEXT
	       glProgramUniformMatrix3x2dv glProgramUniformMatrix3x2fv
	       glProgramUniformMatrix3x2fvEXT glProgramUniformMatrix3x4dv
	       glProgramUniformMatrix3x4fv glProgramUniformMatrix3x4fvEXT
	       glProgramUniformMatrix4dv glProgramUniformMatrix4fv
	       glProgramUniformMatrix4fvEXT glProgramUniformMatrix4x2dv
	       glProgramUniformMatrix4x2fv glProgramUniformMatrix4x2fvEXT
	       glProgramUniformMatrix4x3dv glProgramUniformMatrix4x3fv
	       glProgramUniformMatrix4x3fvEXT glProgramUniformui64NV
	       glProgramUniformui64vNV glProgramVertexLimitNV glProvokingVertex
	       glProvokingVertexEXT glPushClientAttribDefaultEXT
	       glPushDebugGroup glPushGroupMarkerEXT glQueryCounter
	       glQueryCounterANGLE glQueryObjectParameteruiAMD
	       glRasterSamplesEXT glReadBufferRegion glReadVideoPixelsSUN
	       glReadnPixels glReadnPixelsARB glReferencePlaneSGIX
	       glReleaseShaderCompiler glRenderGpuMaskNV glRenderbufferStorage
	       glRenderbufferStorageEXT glRenderbufferStorageMultisample
	       glRenderbufferStorageMultisampleANGLE
	       glRenderbufferStorageMultisampleCoverageNV
	       glRenderbufferStorageMultisampleEXT glReplacementCodePointerSUN
	       glReplacementCodeubSUN glReplacementCodeubvSUN
	       glReplacementCodeuiColor3fVertex3fSUN
	       glReplacementCodeuiColor3fVertex3fvSUN
	       glReplacementCodeuiColor4fNormal3fVertex3fSUN
	       glReplacementCodeuiColor4fNormal3fVertex3fvSUN
	       glReplacementCodeuiColor4ubVertex3fSUN
	       glReplacementCodeuiColor4ubVertex3fvSUN
	       glReplacementCodeuiNormal3fVertex3fSUN
	       glReplacementCodeuiNormal3fVertex3fvSUN glReplacementCodeuiSUN
	       glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fSUN
	       glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN
	       glReplacementCodeuiTexCoord2fNormal3fVertex3fSUN
	       glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN
	       glReplacementCodeuiTexCoord2fVertex3fSUN
	       glReplacementCodeuiTexCoord2fVertex3fvSUN
	       glReplacementCodeuiVertex3fSUN glReplacementCodeuiVertex3fvSUN
	       glReplacementCodeuivSUN glReplacementCodeusSUN
	       glReplacementCodeusvSUN glRequestResidentProgramsNV
	       glResetHistogram glResetHistogramEXT glResetMinmax
	       glResetMinmaxEXT glResizeBuffersMESA glResumeTransformFeedback
	       glResumeTransformFeedbackNV glRotatex glSampleCoverage
	       glSampleCoverageARB glSampleCoveragex glSampleMapATI
	       glSampleMaskEXT glSampleMaskIndexedNV glSampleMaskSGIS
	       glSampleMaski glSamplePatternEXT glSamplePatternSGIS
	       glSamplerParameterIiv glSamplerParameterIuiv glSamplerParameterf
	       glSamplerParameterfv glSamplerParameteri glSamplerParameteriv
	       glScalex glScissorArrayv glScissorIndexed glScissorIndexedv
	       glSecondaryColor3b glSecondaryColor3bEXT glSecondaryColor3bv
	       glSecondaryColor3bvEXT glSecondaryColor3d glSecondaryColor3dEXT
	       glSecondaryColor3dv glSecondaryColor3dvEXT glSecondaryColor3f
	       glSecondaryColor3fEXT glSecondaryColor3fv glSecondaryColor3fvEXT
	       glSecondaryColor3hNV glSecondaryColor3hvNV glSecondaryColor3i
	       glSecondaryColor3iEXT glSecondaryColor3iv glSecondaryColor3ivEXT
	       glSecondaryColor3s glSecondaryColor3sEXT glSecondaryColor3sv
	       glSecondaryColor3svEXT glSecondaryColor3ub
	       glSecondaryColor3ubEXT glSecondaryColor3ubv
	       glSecondaryColor3ubvEXT glSecondaryColor3ui
	       glSecondaryColor3uiEXT glSecondaryColor3uiv
	       glSecondaryColor3uivEXT glSecondaryColor3us
	       glSecondaryColor3usEXT glSecondaryColor3usv
	       glSecondaryColor3usvEXT glSecondaryColorFormatNV
	       glSecondaryColorP3ui glSecondaryColorP3uiv
	       glSecondaryColorPointer glSecondaryColorPointerEXT
	       glSecondaryColorPointerListIBM glSelectPerfMonitorCountersAMD
	       glSeparableFilter2D glSeparableFilter2DEXT glSetFenceAPPLE
	       glSetFenceNV glSetFragmentShaderConstantATI glSetInvariantEXT
	       glSetLocalConstantEXT glSetMultisamplefvAMD glShaderBinary
	       glShaderOp1EXT glShaderOp2EXT glShaderOp3EXT glShaderSource
	       glShaderSourceARB glShaderStorageBlockBinding
	       glSharpenTexFuncSGIS glSignalVkFenceNV glSignalVkSemaphoreNV
	       glSpecializeShaderARB glSpriteParameterfSGIX
	       glSpriteParameterfvSGIX glSpriteParameteriSGIX
	       glSpriteParameterivSGIX glStateCaptureNV
	       glStencilFillPathInstancedNV glStencilFillPathNV
	       glStencilFuncSeparate glStencilFuncSeparateATI
	       glStencilMaskSeparate glStencilOpSeparate glStencilOpSeparateATI
	       glStencilOpValueAMD glStencilStrokePathInstancedNV
	       glStencilStrokePathNV glStencilThenCoverFillPathInstancedNV
	       glStencilThenCoverFillPathNV
	       glStencilThenCoverStrokePathInstancedNV
	       glStencilThenCoverStrokePathNV glStringMarkerGREMEDY
	       glSubpixelPrecisionBiasNV glSwizzleEXT glSyncTextureINTEL
	       glTagSampleBufferSGIX glTangentPointerEXT glTbufferMask3DFX
	       glTessellationFactorAMD glTessellationModeAMD glTestFenceAPPLE
	       glTestFenceNV glTestObjectAPPLE glTexBuffer glTexBufferARB
	       glTexBufferEXT glTexBufferRange glTexBumpParameterfvATI
	       glTexBumpParameterivATI glTexCoord1hNV glTexCoord1hvNV
	       glTexCoord2fColor3fVertex3fSUN glTexCoord2fColor3fVertex3fvSUN
	       glTexCoord2fColor4fNormal3fVertex3fSUN
	       glTexCoord2fColor4fNormal3fVertex3fvSUN
	       glTexCoord2fColor4ubVertex3fSUN glTexCoord2fColor4ubVertex3fvSUN
	       glTexCoord2fNormal3fVertex3fSUN glTexCoord2fNormal3fVertex3fvSUN
	       glTexCoord2fVertex3fSUN glTexCoord2fVertex3fvSUN glTexCoord2hNV
	       glTexCoord2hvNV glTexCoord3hNV glTexCoord3hvNV
	       glTexCoord4fColor4fNormal3fVertex4fSUN
	       glTexCoord4fColor4fNormal3fVertex4fvSUN glTexCoord4fVertex4fSUN
	       glTexCoord4fVertex4fvSUN glTexCoord4hNV glTexCoord4hvNV
	       glTexCoordFormatNV glTexCoordP1ui glTexCoordP1uiv glTexCoordP2ui
	       glTexCoordP2uiv glTexCoordP3ui glTexCoordP3uiv glTexCoordP4ui
	       glTexCoordP4uiv glTexCoordPointerEXT glTexCoordPointerListIBM
	       glTexCoordPointervINTEL glTexEnvx glTexEnvxv glTexFilterFuncSGIS
	       glTexImage2DMultisample glTexImage2DMultisampleCoverageNV
	       glTexImage3D glTexImage3DEXT glTexImage3DMultisample
	       glTexImage3DMultisampleCoverageNV glTexImage4DSGIS
	       glTexPageCommitmentARB glTexParameterIiv glTexParameterIivEXT
	       glTexParameterIuiv glTexParameterIuivEXT glTexParameterx
	       glTexParameterxv glTexRenderbufferNV glTexScissorFuncINTEL
	       glTexScissorINTEL glTexStorage1D glTexStorage2D
	       glTexStorage2DMultisample glTexStorage3D
	       glTexStorage3DMultisample glTexStorageSparseAMD
	       glTexSubImage1DEXT glTexSubImage2DEXT glTexSubImage3D
	       glTexSubImage3DEXT glTexSubImage4DSGIS glTextureBarrier
	       glTextureBarrierNV glTextureBuffer glTextureBufferEXT
	       glTextureBufferRange glTextureBufferRangeEXT glTextureFogSGIX
	       glTextureImage1DEXT glTextureImage2DEXT
	       glTextureImage2DMultisampleCoverageNV
	       glTextureImage2DMultisampleNV glTextureImage3DEXT
	       glTextureImage3DMultisampleCoverageNV
	       glTextureImage3DMultisampleNV glTextureLightEXT
	       glTextureMaterialEXT glTextureNormalEXT
	       glTexturePageCommitmentEXT glTextureParameterIiv
	       glTextureParameterIivEXT glTextureParameterIuiv
	       glTextureParameterIuivEXT glTextureParameterf
	       glTextureParameterfEXT glTextureParameterfv
	       glTextureParameterfvEXT glTextureParameteri
	       glTextureParameteriEXT glTextureParameteriv
	       glTextureParameterivEXT glTextureRangeAPPLE
	       glTextureRenderbufferEXT glTextureStorage1D
	       glTextureStorage1DEXT glTextureStorage2D glTextureStorage2DEXT
	       glTextureStorage2DMultisample glTextureStorage2DMultisampleEXT
	       glTextureStorage3D glTextureStorage3DEXT
	       glTextureStorage3DMultisample glTextureStorage3DMultisampleEXT
	       glTextureStorageSparseAMD glTextureSubImage1D
	       glTextureSubImage1DEXT glTextureSubImage2D
	       glTextureSubImage2DEXT glTextureSubImage3D
	       glTextureSubImage3DEXT glTextureView glTrackMatrixNV
	       glTransformFeedbackAttribsNV glTransformFeedbackBufferBase
	       glTransformFeedbackBufferRange glTransformFeedbackVaryings
	       glTransformFeedbackVaryingsEXT glTransformFeedbackVaryingsNV
	       glTransformPathNV glTranslatex glUniform1d glUniform1dv
	       glUniform1f glUniform1fARB glUniform1fv glUniform1fvARB
	       glUniform1i glUniform1i64ARB glUniform1i64NV glUniform1i64vARB
	       glUniform1i64vNV glUniform1iARB glUniform1iv glUniform1ivARB
	       glUniform1ui glUniform1ui64ARB glUniform1ui64NV
	       glUniform1ui64vARB glUniform1ui64vNV glUniform1uiEXT
	       glUniform1uiv glUniform1uivEXT glUniform2d glUniform2dv
	       glUniform2f glUniform2fARB glUniform2fv glUniform2fvARB
	       glUniform2i glUniform2i64ARB glUniform2i64NV glUniform2i64vARB
	       glUniform2i64vNV glUniform2iARB glUniform2iv glUniform2ivARB
	       glUniform2ui glUniform2ui64ARB glUniform2ui64NV
	       glUniform2ui64vARB glUniform2ui64vNV glUniform2uiEXT
	       glUniform2uiv glUniform2uivEXT glUniform3d glUniform3dv
	       glUniform3f glUniform3fARB glUniform3fv glUniform3fvARB
	       glUniform3i glUniform3i64ARB glUniform3i64NV glUniform3i64vARB
	       glUniform3i64vNV glUniform3iARB glUniform3iv glUniform3ivARB
	       glUniform3ui glUniform3ui64ARB glUniform3ui64NV
	       glUniform3ui64vARB glUniform3ui64vNV glUniform3uiEXT
	       glUniform3uiv glUniform3uivEXT glUniform4d glUniform4dv
	       glUniform4f glUniform4fARB glUniform4fv glUniform4fvARB
	       glUniform4i glUniform4i64ARB glUniform4i64NV glUniform4i64vARB
	       glUniform4i64vNV glUniform4iARB glUniform4iv glUniform4ivARB
	       glUniform4ui glUniform4ui64ARB glUniform4ui64NV
	       glUniform4ui64vARB glUniform4ui64vNV glUniform4uiEXT
	       glUniform4uiv glUniform4uivEXT glUniformBlockBinding
	       glUniformBufferEXT glUniformHandleui64ARB glUniformHandleui64NV
	       glUniformHandleui64vARB glUniformHandleui64vNV
	       glUniformMatrix2dv glUniformMatrix2fv glUniformMatrix2fvARB
	       glUniformMatrix2x3dv glUniformMatrix2x3fv glUniformMatrix2x4dv
	       glUniformMatrix2x4fv glUniformMatrix3dv glUniformMatrix3fv
	       glUniformMatrix3fvARB glUniformMatrix3x2dv glUniformMatrix3x2fv
	       glUniformMatrix3x4dv glUniformMatrix3x4fv glUniformMatrix4dv
	       glUniformMatrix4fv glUniformMatrix4fvARB glUniformMatrix4x2dv
	       glUniformMatrix4x2fv glUniformMatrix4x3dv glUniformMatrix4x3fv
	       glUniformSubroutinesuiv glUniformui64NV glUniformui64vNV
	       glUnlockArraysEXT glUnmapBuffer glUnmapBufferARB
	       glUnmapNamedBuffer glUnmapNamedBufferEXT glUnmapObjectBufferATI
	       glUnmapTexture2DINTEL glUpdateObjectBufferATI glUseProgram
	       glUseProgramObjectARB glUseProgramStages glUseShaderProgramEXT
	       glVDPAUFiniNV glVDPAUGetSurfaceivNV glVDPAUInitNV
	       glVDPAUIsSurfaceNV glVDPAUMapSurfacesNV
	       glVDPAURegisterOutputSurfaceNV glVDPAURegisterVideoSurfaceNV
	       glVDPAUSurfaceAccessNV glVDPAUUnmapSurfacesNV
	       glVDPAUUnregisterSurfaceNV glValidateProgram
	       glValidateProgramARB glValidateProgramPipeline
	       glVariantArrayObjectATI glVariantPointerEXT glVariantbvEXT
	       glVariantdvEXT glVariantfvEXT glVariantivEXT glVariantsvEXT
	       glVariantubvEXT glVariantuivEXT glVariantusvEXT glVertex2hNV
	       glVertex2hvNV glVertex3hNV glVertex3hvNV glVertex4hNV
	       glVertex4hvNV glVertexArrayAttribBinding
	       glVertexArrayAttribFormat glVertexArrayAttribIFormat
	       glVertexArrayAttribLFormat glVertexArrayBindVertexBufferEXT
	       glVertexArrayBindingDivisor glVertexArrayColorOffsetEXT
	       glVertexArrayEdgeFlagOffsetEXT glVertexArrayElementBuffer
	       glVertexArrayFogCoordOffsetEXT glVertexArrayIndexOffsetEXT
	       glVertexArrayMultiTexCoordOffsetEXT glVertexArrayNormalOffsetEXT
	       glVertexArrayParameteriAPPLE glVertexArrayRangeAPPLE
	       glVertexArrayRangeNV glVertexArraySecondaryColorOffsetEXT
	       glVertexArrayTexCoordOffsetEXT
	       glVertexArrayVertexAttribBindingEXT
	       glVertexArrayVertexAttribDivisorEXT
	       glVertexArrayVertexAttribFormatEXT
	       glVertexArrayVertexAttribIFormatEXT
	       glVertexArrayVertexAttribIOffsetEXT
	       glVertexArrayVertexAttribLFormatEXT
	       glVertexArrayVertexAttribLOffsetEXT
	       glVertexArrayVertexAttribOffsetEXT
	       glVertexArrayVertexBindingDivisorEXT glVertexArrayVertexBuffer
	       glVertexArrayVertexBuffers glVertexArrayVertexOffsetEXT
	       glVertexAttrib1d glVertexAttrib1dARB glVertexAttrib1dNV
	       glVertexAttrib1dv glVertexAttrib1dvARB glVertexAttrib1dvNV
	       glVertexAttrib1f glVertexAttrib1fARB glVertexAttrib1fNV
	       glVertexAttrib1fv glVertexAttrib1fvARB glVertexAttrib1fvNV
	       glVertexAttrib1hNV glVertexAttrib1hvNV glVertexAttrib1s
	       glVertexAttrib1sARB glVertexAttrib1sNV glVertexAttrib1sv
	       glVertexAttrib1svARB glVertexAttrib1svNV glVertexAttrib2d
	       glVertexAttrib2dARB glVertexAttrib2dNV glVertexAttrib2dv
	       glVertexAttrib2dvARB glVertexAttrib2dvNV glVertexAttrib2f
	       glVertexAttrib2fARB glVertexAttrib2fNV glVertexAttrib2fv
	       glVertexAttrib2fvARB glVertexAttrib2fvNV glVertexAttrib2hNV
	       glVertexAttrib2hvNV glVertexAttrib2s glVertexAttrib2sARB
	       glVertexAttrib2sNV glVertexAttrib2sv glVertexAttrib2svARB
	       glVertexAttrib2svNV glVertexAttrib3d glVertexAttrib3dARB
	       glVertexAttrib3dNV glVertexAttrib3dv glVertexAttrib3dvARB
	       glVertexAttrib3dvNV glVertexAttrib3f glVertexAttrib3fARB
	       glVertexAttrib3fNV glVertexAttrib3fv glVertexAttrib3fvARB
	       glVertexAttrib3fvNV glVertexAttrib3hNV glVertexAttrib3hvNV
	       glVertexAttrib3s glVertexAttrib3sARB glVertexAttrib3sNV
	       glVertexAttrib3sv glVertexAttrib3svARB glVertexAttrib3svNV
	       glVertexAttrib4Nbv glVertexAttrib4NbvARB glVertexAttrib4Niv
	       glVertexAttrib4NivARB glVertexAttrib4Nsv glVertexAttrib4NsvARB
	       glVertexAttrib4Nub glVertexAttrib4NubARB glVertexAttrib4Nubv
	       glVertexAttrib4NubvARB glVertexAttrib4Nuiv
	       glVertexAttrib4NuivARB glVertexAttrib4Nusv
	       glVertexAttrib4NusvARB glVertexAttrib4bv glVertexAttrib4bvARB
	       glVertexAttrib4d glVertexAttrib4dARB glVertexAttrib4dNV
	       glVertexAttrib4dv glVertexAttrib4dvARB glVertexAttrib4dvNV
	       glVertexAttrib4f glVertexAttrib4fARB glVertexAttrib4fNV
	       glVertexAttrib4fv glVertexAttrib4fvARB glVertexAttrib4fvNV
	       glVertexAttrib4hNV glVertexAttrib4hvNV glVertexAttrib4iv
	       glVertexAttrib4ivARB glVertexAttrib4s glVertexAttrib4sARB
	       glVertexAttrib4sNV glVertexAttrib4sv glVertexAttrib4svARB
	       glVertexAttrib4svNV glVertexAttrib4ubNV glVertexAttrib4ubv
	       glVertexAttrib4ubvARB glVertexAttrib4ubvNV glVertexAttrib4uiv
	       glVertexAttrib4uivARB glVertexAttrib4usv glVertexAttrib4usvARB
	       glVertexAttribArrayObjectATI glVertexAttribBinding
	       glVertexAttribDivisor glVertexAttribDivisorANGLE
	       glVertexAttribDivisorARB glVertexAttribFormat
	       glVertexAttribFormatNV glVertexAttribI1i glVertexAttribI1iEXT
	       glVertexAttribI1iv glVertexAttribI1ivEXT glVertexAttribI1ui
	       glVertexAttribI1uiEXT glVertexAttribI1uiv glVertexAttribI1uivEXT
	       glVertexAttribI2i glVertexAttribI2iEXT glVertexAttribI2iv
	       glVertexAttribI2ivEXT glVertexAttribI2ui glVertexAttribI2uiEXT
	       glVertexAttribI2uiv glVertexAttribI2uivEXT glVertexAttribI3i
	       glVertexAttribI3iEXT glVertexAttribI3iv glVertexAttribI3ivEXT
	       glVertexAttribI3ui glVertexAttribI3uiEXT glVertexAttribI3uiv
	       glVertexAttribI3uivEXT glVertexAttribI4bv glVertexAttribI4bvEXT
	       glVertexAttribI4i glVertexAttribI4iEXT glVertexAttribI4iv
	       glVertexAttribI4ivEXT glVertexAttribI4sv glVertexAttribI4svEXT
	       glVertexAttribI4ubv glVertexAttribI4ubvEXT glVertexAttribI4ui
	       glVertexAttribI4uiEXT glVertexAttribI4uiv glVertexAttribI4uivEXT
	       glVertexAttribI4usv glVertexAttribI4usvEXT glVertexAttribIFormat
	       glVertexAttribIFormatNV glVertexAttribIPointer
	       glVertexAttribIPointerEXT glVertexAttribL1d glVertexAttribL1dEXT
	       glVertexAttribL1dv glVertexAttribL1dvEXT glVertexAttribL1i64NV
	       glVertexAttribL1i64vNV glVertexAttribL1ui64ARB
	       glVertexAttribL1ui64NV glVertexAttribL1ui64vARB
	       glVertexAttribL1ui64vNV glVertexAttribL2d glVertexAttribL2dEXT
	       glVertexAttribL2dv glVertexAttribL2dvEXT glVertexAttribL2i64NV
	       glVertexAttribL2i64vNV glVertexAttribL2ui64NV
	       glVertexAttribL2ui64vNV glVertexAttribL3d glVertexAttribL3dEXT
	       glVertexAttribL3dv glVertexAttribL3dvEXT glVertexAttribL3i64NV
	       glVertexAttribL3i64vNV glVertexAttribL3ui64NV
	       glVertexAttribL3ui64vNV glVertexAttribL4d glVertexAttribL4dEXT
	       glVertexAttribL4dv glVertexAttribL4dvEXT glVertexAttribL4i64NV
	       glVertexAttribL4i64vNV glVertexAttribL4ui64NV
	       glVertexAttribL4ui64vNV glVertexAttribLFormat
	       glVertexAttribLFormatNV glVertexAttribLPointer
	       glVertexAttribLPointerEXT glVertexAttribP1ui glVertexAttribP1uiv
	       glVertexAttribP2ui glVertexAttribP2uiv glVertexAttribP3ui
	       glVertexAttribP3uiv glVertexAttribP4ui glVertexAttribP4uiv
	       glVertexAttribParameteriAMD glVertexAttribPointer
	       glVertexAttribPointerARB glVertexAttribPointerNV
	       glVertexAttribs1dvNV glVertexAttribs1fvNV glVertexAttribs1hvNV
	       glVertexAttribs1svNV glVertexAttribs2dvNV glVertexAttribs2fvNV
	       glVertexAttribs2hvNV glVertexAttribs2svNV glVertexAttribs3dvNV
	       glVertexAttribs3fvNV glVertexAttribs3hvNV glVertexAttribs3svNV
	       glVertexAttribs4dvNV glVertexAttribs4fvNV glVertexAttribs4hvNV
	       glVertexAttribs4svNV glVertexAttribs4ubvNV
	       glVertexBindingDivisor glVertexBlendARB glVertexBlendEnvfATI
	       glVertexBlendEnviATI glVertexFormatNV glVertexP2ui glVertexP2uiv
	       glVertexP3ui glVertexP3uiv glVertexP4ui glVertexP4uiv
	       glVertexPointerEXT glVertexPointerListIBM glVertexPointervINTEL
	       glVertexStream1dATI glVertexStream1dvATI glVertexStream1fATI
	       glVertexStream1fvATI glVertexStream1iATI glVertexStream1ivATI
	       glVertexStream1sATI glVertexStream1svATI glVertexStream2dATI
	       glVertexStream2dvATI glVertexStream2fATI glVertexStream2fvATI
	       glVertexStream2iATI glVertexStream2ivATI glVertexStream2sATI
	       glVertexStream2svATI glVertexStream3dATI glVertexStream3dvATI
	       glVertexStream3fATI glVertexStream3fvATI glVertexStream3iATI
	       glVertexStream3ivATI glVertexStream3sATI glVertexStream3svATI
	       glVertexStream4dATI glVertexStream4dvATI glVertexStream4fATI
	       glVertexStream4fvATI glVertexStream4iATI glVertexStream4ivATI
	       glVertexStream4sATI glVertexStream4svATI
	       glVertexWeightPointerEXT glVertexWeightfEXT glVertexWeightfvEXT
	       glVertexWeighthNV glVertexWeighthvNV glVideoCaptureNV
	       glVideoCaptureStreamParameterdvNV
	       glVideoCaptureStreamParameterfvNV
	       glVideoCaptureStreamParameterivNV glViewportArrayv
	       glViewportIndexedf glViewportIndexedfv
	       glViewportPositionWScaleNV glViewportSwizzleNV glWaitSync
	       glWaitVkSemaphoreNV glWeightPathsNV glWeightPointerARB
	       glWeightbvARB glWeightdvARB glWeightfvARB glWeightivARB
	       glWeightsvARB glWeightubvARB glWeightuivARB glWeightusvARB
	       glWindowPos2d glWindowPos2dARB glWindowPos2dMESA glWindowPos2dv
	       glWindowPos2dvARB glWindowPos2dvMESA glWindowPos2f
	       glWindowPos2fARB glWindowPos2fMESA glWindowPos2fv
	       glWindowPos2fvARB glWindowPos2fvMESA glWindowPos2i
	       glWindowPos2iARB glWindowPos2iMESA glWindowPos2iv
	       glWindowPos2ivARB glWindowPos2ivMESA glWindowPos2s
	       glWindowPos2sARB glWindowPos2sMESA glWindowPos2sv
	       glWindowPos2svARB glWindowPos2svMESA glWindowPos3d
	       glWindowPos3dARB glWindowPos3dMESA glWindowPos3dv
	       glWindowPos3dvARB glWindowPos3dvMESA glWindowPos3f
	       glWindowPos3fARB glWindowPos3fMESA glWindowPos3fv
	       glWindowPos3fvARB glWindowPos3fvMESA glWindowPos3i
	       glWindowPos3iARB glWindowPos3iMESA glWindowPos3iv
	       glWindowPos3ivARB glWindowPos3ivMESA glWindowPos3s
	       glWindowPos3sARB glWindowPos3sMESA glWindowPos3sv
	       glWindowPos3svARB glWindowPos3svMESA glWindowPos4dMESA
	       glWindowPos4dvMESA glWindowPos4fMESA glWindowPos4fvMESA
	       glWindowPos4iMESA glWindowPos4ivMESA glWindowPos4sMESA
	       glWindowPos4svMESA glWindowRectanglesEXT glWriteMaskEXT));

print constant_types(), "\n"; # macro defs
foreach (C_constant ("OpenGL::Glew", 'constant', 'IV', $types, undef, 3, @names) ) {
    print $_, "\n"; # C constant subs
}
print "\n#### XS Section:\n";
print XS_constant ("OpenGL::Glew", $types);
__END__
   */

  switch (len) {
  case 4:
    return constant_4 (aTHX_ name, iv_return);
    break;
  case 5:
    return constant_5 (aTHX_ name, iv_return);
    break;
  case 6:
    return constant_6 (aTHX_ name, iv_return);
    break;
  case 7:
    return constant_7 (aTHX_ name, iv_return);
    break;
  case 8:
    return constant_8 (aTHX_ name, iv_return);
    break;
  case 9:
    return constant_9 (aTHX_ name, iv_return);
    break;
  case 10:
    return constant_10 (aTHX_ name, iv_return);
    break;
  case 11:
    return constant_11 (aTHX_ name, iv_return);
    break;
  case 12:
    return constant_12 (aTHX_ name, iv_return);
    break;
  case 13:
    return constant_13 (aTHX_ name, iv_return);
    break;
  case 14:
    return constant_14 (aTHX_ name, iv_return);
    break;
  case 15:
    return constant_15 (aTHX_ name, iv_return);
    break;
  case 16:
    return constant_16 (aTHX_ name, iv_return);
    break;
  case 17:
    return constant_17 (aTHX_ name, iv_return);
    break;
  case 18:
    return constant_18 (aTHX_ name, iv_return);
    break;
  case 19:
    return constant_19 (aTHX_ name, iv_return);
    break;
  case 20:
    return constant_20 (aTHX_ name, iv_return);
    break;
  case 21:
    return constant_21 (aTHX_ name, iv_return);
    break;
  case 22:
    return constant_22 (aTHX_ name, iv_return);
    break;
  case 23:
    return constant_23 (aTHX_ name, iv_return);
    break;
  case 24:
    return constant_24 (aTHX_ name, iv_return);
    break;
  case 25:
    return constant_25 (aTHX_ name, iv_return);
    break;
  case 26:
    return constant_26 (aTHX_ name, iv_return);
    break;
  case 27:
    return constant_27 (aTHX_ name, iv_return);
    break;
  case 28:
    return constant_28 (aTHX_ name, iv_return);
    break;
  case 29:
    return constant_29 (aTHX_ name, iv_return);
    break;
  case 30:
    return constant_30 (aTHX_ name, iv_return);
    break;
  case 31:
    return constant_31 (aTHX_ name, iv_return);
    break;
  case 32:
    return constant_32 (aTHX_ name, iv_return);
    break;
  case 33:
    return constant_33 (aTHX_ name, iv_return);
    break;
  case 34:
    return constant_34 (aTHX_ name, iv_return);
    break;
  case 35:
    return constant_35 (aTHX_ name, iv_return);
    break;
  case 36:
    return constant_36 (aTHX_ name, iv_return);
    break;
  case 37:
    return constant_37 (aTHX_ name, iv_return);
    break;
  case 38:
    return constant_38 (aTHX_ name, iv_return);
    break;
  case 39:
    return constant_39 (aTHX_ name, iv_return);
    break;
  case 40:
    return constant_40 (aTHX_ name, iv_return);
    break;
  case 41:
    return constant_41 (aTHX_ name, iv_return);
    break;
  case 42:
    return constant_42 (aTHX_ name, iv_return);
    break;
  case 43:
    return constant_43 (aTHX_ name, iv_return);
    break;
  case 44:
    return constant_44 (aTHX_ name, iv_return);
    break;
  case 45:
    return constant_45 (aTHX_ name, iv_return);
    break;
  case 46:
    return constant_46 (aTHX_ name, iv_return);
    break;
  case 47:
    return constant_47 (aTHX_ name, iv_return);
    break;
  case 48:
    return constant_48 (aTHX_ name, iv_return);
    break;
  case 49:
    return constant_49 (aTHX_ name, iv_return);
    break;
  case 50:
    return constant_50 (aTHX_ name, iv_return);
    break;
  case 51:
    return constant_51 (aTHX_ name, iv_return);
    break;
  case 52:
    return constant_52 (aTHX_ name, iv_return);
    break;
  case 53:
    return constant_53 (aTHX_ name, iv_return);
    break;
  case 54:
    return constant_54 (aTHX_ name, iv_return);
    break;
  case 55:
    if (memEQ(name, "glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fSUN", 55)) {
#ifdef glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fSUN
      *iv_return = glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fSUN;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case 56:
    if (memEQ(name, "glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN", 56)) {
#ifdef glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN
      *iv_return = glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case 58:
    if (memEQ(name, "GL_ATOMIC_COUNTER_BUFFER_REFERENCED_BY_TESS_CONTROL_SHADER", 58)) {
#ifdef GL_ATOMIC_COUNTER_BUFFER_REFERENCED_BY_TESS_CONTROL_SHADER
      *iv_return = GL_ATOMIC_COUNTER_BUFFER_REFERENCED_BY_TESS_CONTROL_SHADER;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  case 61:
    if (memEQ(name, "GL_ATOMIC_COUNTER_BUFFER_REFERENCED_BY_TESS_EVALUATION_SHADER", 61)) {
#ifdef GL_ATOMIC_COUNTER_BUFFER_REFERENCED_BY_TESS_EVALUATION_SHADER
      *iv_return = GL_ATOMIC_COUNTER_BUFFER_REFERENCED_BY_TESS_EVALUATION_SHADER;
      return PERL_constant_ISIV;
#else
      return PERL_constant_NOTDEF;
#endif
    }
    break;
  }
  return PERL_constant_NOTFOUND;
}

